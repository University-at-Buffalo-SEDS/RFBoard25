
RFBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa7c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  0800ac5c  0800ac5c  0000bc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b270  0800b270  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b270  0800b270  0000c270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b278  0800b278  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b278  0800b278  0000c278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b27c  0800b27c  0000c27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b280  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d80  200001d4  0800b454  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f54  0800b454  0000df54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d821  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042b4  00000000  00000000  0002aa25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  0002ece0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001209  00000000  00000000  00030468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229c1  00000000  00000000  00031671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f1f4  00000000  00000000  00054032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd06d  00000000  00000000  00073226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140293  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006788  00000000  00000000  001402d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00146a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ac44 	.word	0x0800ac44

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800ac44 	.word	0x0800ac44

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <cs_low>:

ublox_status_e sendSPICommand(NeoGPSConfig_t *config, UBX_Packet_t *outgoing, uint32_t max_wait);

#define SPI_RX_BUFFER_SIZE 128*4//128

static void cs_low(NeoGPSConfig_t *config) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(config->cs_pin_port, config->cs_pin, GPIO_PIN_RESET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6858      	ldr	r0, [r3, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	891b      	ldrh	r3, [r3, #8]
 80005c0:	2200      	movs	r2, #0
 80005c2:	4619      	mov	r1, r3
 80005c4:	f001 fdb4 	bl	8002130 <HAL_GPIO_WritePin>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <cs_high>:

static void cs_high(NeoGPSConfig_t *config) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(config->cs_pin_port, config->cs_pin, GPIO_PIN_SET);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6858      	ldr	r0, [r3, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	891b      	ldrh	r3, [r3, #8]
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	f001 fda4 	bl	8002130 <HAL_GPIO_WritePin>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <calculateChecksum>:

void calculateChecksum(UBX_Packet_t *packet, uint8_t *tx, uint16_t tx_size) {
 80005f0:	b480      	push	{r7}
 80005f2:	b087      	sub	sp, #28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	4613      	mov	r3, r2
 80005fc:	80fb      	strh	r3, [r7, #6]
	packet->checksumA = 0;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2200      	movs	r2, #0
 8000602:	731a      	strb	r2, [r3, #12]
	packet->checksumB = 0;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2200      	movs	r2, #0
 8000608:	735a      	strb	r2, [r3, #13]

	for (int i = 0; i < tx_size; i++) {
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	e014      	b.n	800063a <calculateChecksum+0x4a>
		packet->checksumA += tx[i];
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	7b1a      	ldrb	r2, [r3, #12]
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	68b9      	ldr	r1, [r7, #8]
 8000618:	440b      	add	r3, r1
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4413      	add	r3, r2
 800061e:	b2da      	uxtb	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	731a      	strb	r2, [r3, #12]
		packet->checksumB += packet->checksumA;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	7b5a      	ldrb	r2, [r3, #13]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	7b1b      	ldrb	r3, [r3, #12]
 800062c:	4413      	add	r3, r2
 800062e:	b2da      	uxtb	r2, r3
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	735a      	strb	r2, [r3, #13]
	for (int i = 0; i < tx_size; i++) {
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	3301      	adds	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	429a      	cmp	r2, r3
 8000640:	dbe6      	blt.n	8000610 <calculateChecksum+0x20>
	}
}
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	371c      	adds	r7, #28
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <processSpiByte>:
 *
 * FRAME FORMAT FOR UBX:
 * HEADER | Class | ID | Length | Payload | CK_A | CK_B |
 * 0    1   2       3    4    5   6         6+n    7+n
 */
bool processSpiByte(uint8_t incoming, UBX_Packet_t *incoming_packet) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
	uint16_t frame_count = incoming_packet->recv_counter;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	889b      	ldrh	r3, [r3, #4]
 8000660:	81fb      	strh	r3, [r7, #14]
	if (frame_count == 0) {
 8000662:	89fb      	ldrh	r3, [r7, #14]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d116      	bne.n	8000696 <processSpiByte+0x46>
		if (incoming == UBX_PSYNC_1) { //psync_1 (b5) is the beginning of a ubx message
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	2bb5      	cmp	r3, #181	@ 0xb5
 800066c:	d103      	bne.n	8000676 <processSpiByte+0x26>
			debug_print("PSYNC_1 | ");
 800066e:	483e      	ldr	r0, [pc, #248]	@ (8000768 <processSpiByte+0x118>)
 8000670:	f000 fbb0 	bl	8000dd4 <debug_print>
 8000674:	e073      	b.n	800075e <processSpiByte+0x10e>
		} else if (incoming == '$') { //$ is the beginning of a nmea message (see interface document page 21)
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b24      	cmp	r3, #36	@ 0x24
 800067a:	d104      	bne.n	8000686 <processSpiByte+0x36>
			//cur_incoming_type = INCOMING_TYPE_NMEA;
			debug_print("== WARNING: DRIVER DOES NOT SUPPORT NMEA ==\r\n");
 800067c:	483b      	ldr	r0, [pc, #236]	@ (800076c <processSpiByte+0x11c>)
 800067e:	f000 fba9 	bl	8000dd4 <debug_print>
			return false;
 8000682:	2300      	movs	r3, #0
 8000684:	e06c      	b.n	8000760 <processSpiByte+0x110>
		} else if (incoming == 0xD3) { //0xd3 is the beginning of a rtcm message
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2bd3      	cmp	r3, #211	@ 0xd3
 800068a:	d168      	bne.n	800075e <processSpiByte+0x10e>
			debug_print("== WARNING: DRIVER DOES NOT SUPPORT RTCM ==\r\n");
 800068c:	4838      	ldr	r0, [pc, #224]	@ (8000770 <processSpiByte+0x120>)
 800068e:	f000 fba1 	bl	8000dd4 <debug_print>
			return false;
 8000692:	2300      	movs	r3, #0
 8000694:	e064      	b.n	8000760 <processSpiByte+0x110>
		}
	} else if (frame_count == 1) {
 8000696:	89fb      	ldrh	r3, [r7, #14]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d108      	bne.n	80006ae <processSpiByte+0x5e>
		if (incoming == UBX_PSYNC_2) {
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b62      	cmp	r3, #98	@ 0x62
 80006a0:	d103      	bne.n	80006aa <processSpiByte+0x5a>
			//psync_2 is the second header byte of a ubx message
			debug_print("PSYNC_2 | ");
 80006a2:	4834      	ldr	r0, [pc, #208]	@ (8000774 <processSpiByte+0x124>)
 80006a4:	f000 fb96 	bl	8000dd4 <debug_print>
 80006a8:	e059      	b.n	800075e <processSpiByte+0x10e>
		} else {
			return false;
 80006aa:	2300      	movs	r3, #0
 80006ac:	e058      	b.n	8000760 <processSpiByte+0x110>
		}
	} else if (frame_count == 2) { //should be the class, store it in the given struct
 80006ae:	89fb      	ldrh	r3, [r7, #14]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d108      	bne.n	80006c6 <processSpiByte+0x76>
		incoming_packet->class = incoming;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	79fa      	ldrb	r2, [r7, #7]
 80006b8:	701a      	strb	r2, [r3, #0]
		debug_print("CLS %02x | ", incoming);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4619      	mov	r1, r3
 80006be:	482e      	ldr	r0, [pc, #184]	@ (8000778 <processSpiByte+0x128>)
 80006c0:	f000 fb88 	bl	8000dd4 <debug_print>
 80006c4:	e04b      	b.n	800075e <processSpiByte+0x10e>
	} else if (frame_count == 3) { //should be the id
 80006c6:	89fb      	ldrh	r3, [r7, #14]
 80006c8:	2b03      	cmp	r3, #3
 80006ca:	d108      	bne.n	80006de <processSpiByte+0x8e>
		debug_print("ID %02x | ", incoming);
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4619      	mov	r1, r3
 80006d0:	482a      	ldr	r0, [pc, #168]	@ (800077c <processSpiByte+0x12c>)
 80006d2:	f000 fb7f 	bl	8000dd4 <debug_print>
		incoming_packet->id = incoming;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	79fa      	ldrb	r2, [r7, #7]
 80006da:	705a      	strb	r2, [r3, #1]
 80006dc:	e03f      	b.n	800075e <processSpiByte+0x10e>
	} else if (frame_count == 4) { //length LSB
 80006de:	89fb      	ldrh	r3, [r7, #14]
 80006e0:	2b04      	cmp	r3, #4
 80006e2:	d104      	bne.n	80006ee <processSpiByte+0x9e>
		//do this in reverse
		incoming_packet->length = incoming;
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	805a      	strh	r2, [r3, #2]
 80006ec:	e037      	b.n	800075e <processSpiByte+0x10e>
	} else if (frame_count == 5) { //length msb
 80006ee:	89fb      	ldrh	r3, [r7, #14]
 80006f0:	2b05      	cmp	r3, #5
 80006f2:	d10b      	bne.n	800070c <processSpiByte+0xbc>
		incoming_packet->length |= incoming << 8;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	885b      	ldrh	r3, [r3, #2]
 80006f8:	b21a      	sxth	r2, r3
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	021b      	lsls	r3, r3, #8
 80006fe:	b21b      	sxth	r3, r3
 8000700:	4313      	orrs	r3, r2
 8000702:	b21b      	sxth	r3, r3
 8000704:	b29a      	uxth	r2, r3
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	805a      	strh	r2, [r3, #2]
 800070a:	e028      	b.n	800075e <processSpiByte+0x10e>
	} else if (frame_count > 5) { //this is either the payload of the checksum
 800070c:	89fb      	ldrh	r3, [r7, #14]
 800070e:	2b05      	cmp	r3, #5
 8000710:	d923      	bls.n	800075a <processSpiByte+0x10a>
		if (frame_count < 6+incoming_packet->length) { //this is part of the payload
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	885b      	ldrh	r3, [r3, #2]
 8000716:	1d5a      	adds	r2, r3, #5
 8000718:	89fb      	ldrh	r3, [r7, #14]
 800071a:	429a      	cmp	r2, r3
 800071c:	db07      	blt.n	800072e <processSpiByte+0xde>
			incoming_packet->payload[frame_count-6] = incoming;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	689a      	ldr	r2, [r3, #8]
 8000722:	89fb      	ldrh	r3, [r7, #14]
 8000724:	3b06      	subs	r3, #6
 8000726:	4413      	add	r3, r2
 8000728:	79fa      	ldrb	r2, [r7, #7]
 800072a:	701a      	strb	r2, [r3, #0]
 800072c:	e017      	b.n	800075e <processSpiByte+0x10e>
		} else { //these are the checksum
			if (frame_count == 6 + incoming_packet->length) {
 800072e:	89fa      	ldrh	r2, [r7, #14]
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	885b      	ldrh	r3, [r3, #2]
 8000734:	3306      	adds	r3, #6
 8000736:	429a      	cmp	r2, r3
 8000738:	d103      	bne.n	8000742 <processSpiByte+0xf2>
				incoming_packet->checksumA = incoming;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	79fa      	ldrb	r2, [r7, #7]
 800073e:	731a      	strb	r2, [r3, #12]
 8000740:	e00d      	b.n	800075e <processSpiByte+0x10e>
			} else if (frame_count == 7 + incoming_packet->length){
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	885b      	ldrh	r3, [r3, #2]
 8000748:	3307      	adds	r3, #7
 800074a:	429a      	cmp	r2, r3
 800074c:	d103      	bne.n	8000756 <processSpiByte+0x106>
				incoming_packet->checksumB = incoming;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	735a      	strb	r2, [r3, #13]
 8000754:	e003      	b.n	800075e <processSpiByte+0x10e>
			} else {
				return false;
 8000756:	2300      	movs	r3, #0
 8000758:	e002      	b.n	8000760 <processSpiByte+0x110>
			}
		}
	} else {
		return false; //invalid frame_count (not sure why this would happen)
 800075a:	2300      	movs	r3, #0
 800075c:	e000      	b.n	8000760 <processSpiByte+0x110>
	}
	return true;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	0800ac5c 	.word	0x0800ac5c
 800076c:	0800ac68 	.word	0x0800ac68
 8000770:	0800ac98 	.word	0x0800ac98
 8000774:	0800acc8 	.word	0x0800acc8
 8000778:	0800acd4 	.word	0x0800acd4
 800077c:	0800ace0 	.word	0x0800ace0

08000780 <checkAndProcessSPIBuffer>:
 * Go through the SPI buffer and process incoming bytes
 * into the given incoming_packet struct, comparing the
 * incoming to the outgoing (id and class of incoming
 * should match the outgoing)
 */
void checkAndProcessSPIBuffer(UBX_Packet_t *outgoing, uint8_t *rx_buf, uint16_t rx_size, UBX_Packet_t *incoming_packet) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	4613      	mov	r3, r2
 800078e:	80fb      	strh	r3, [r7, #6]
	//overhead for processspibyte
	for(int i = 0; i < rx_size; i++) {
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e022      	b.n	80007dc <checkAndProcessSPIBuffer+0x5c>
		debug_print("(%02x)", rx_buf[i]);
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	68ba      	ldr	r2, [r7, #8]
 800079a:	4413      	add	r3, r2
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	4619      	mov	r1, r3
 80007a0:	4813      	ldr	r0, [pc, #76]	@ (80007f0 <checkAndProcessSPIBuffer+0x70>)
 80007a2:	f000 fb17 	bl	8000dd4 <debug_print>
		if (processSpiByte(rx_buf[i], incoming_packet) == true) {
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	6839      	ldr	r1, [r7, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff4d 	bl	8000650 <processSpiByte>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d006      	beq.n	80007ca <checkAndProcessSPIBuffer+0x4a>
			incoming_packet->recv_counter ++;;
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	889b      	ldrh	r3, [r3, #4]
 80007c0:	3301      	adds	r3, #1
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	809a      	strh	r2, [r3, #4]
 80007c8:	e002      	b.n	80007d0 <checkAndProcessSPIBuffer+0x50>
		} else {
			debug_print("processing spi byte failed.\n");
 80007ca:	480a      	ldr	r0, [pc, #40]	@ (80007f4 <checkAndProcessSPIBuffer+0x74>)
 80007cc:	f000 fb02 	bl	8000dd4 <debug_print>
		}
		HAL_Delay(100);
 80007d0:	2064      	movs	r0, #100	@ 0x64
 80007d2:	f001 f83d 	bl	8001850 <HAL_Delay>
	for(int i = 0; i < rx_size; i++) {
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	3301      	adds	r3, #1
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	dbd8      	blt.n	8000796 <checkAndProcessSPIBuffer+0x16>
	}
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	0800acec 	.word	0x0800acec
 80007f4:	0800acf4 	.word	0x0800acf4

080007f8 <waitForAck>:

//ACK MESSAGE IS IN THE FORMAT HEADER | CLASS (0X05) | ID (0X01 FOR ACK 0X00 FOR NOT ACK) | len | payload | checksum
bool waitForAck(UBX_Packet_t  *outgoing, uint8_t *rx_buf, uint16_t rx_size, uint32_t max_wait) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	4613      	mov	r3, r2
 8000806:	80fb      	strh	r3, [r7, #6]
	//we don't actually need to wait like in the arduino driver, because the stm32 hal functions are all blocking
	//with a given timeout.
	UBX_Packet_t incoming_packet;
	incoming_packet.recv_counter = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	82bb      	strh	r3, [r7, #20]
	HAL_Delay(1000);
 800080c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000810:	f001 f81e 	bl	8001850 <HAL_Delay>
	debug_print("doing wait for ack...\r\n");
 8000814:	4816      	ldr	r0, [pc, #88]	@ (8000870 <waitForAck+0x78>)
 8000816:	f000 fadd 	bl	8000dd4 <debug_print>
	HAL_Delay(1000);
 800081a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800081e:	f001 f817 	bl	8001850 <HAL_Delay>
	checkAndProcessSPIBuffer(outgoing, rx_buf, rx_size, &incoming_packet); // See if new data is available. Process bytes as they come in.
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	88fa      	ldrh	r2, [r7, #6]
 8000828:	68b9      	ldr	r1, [r7, #8]
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f7ff ffa8 	bl	8000780 <checkAndProcessSPIBuffer>

	//now we should check if the stuff in incoming_packet is valid.

	if (incoming_packet.class == outgoing->class) {
 8000830:	7c3a      	ldrb	r2, [r7, #16]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	d108      	bne.n	800084c <waitForAck+0x54>
		debug_print("Classes match!\n");
 800083a:	480e      	ldr	r0, [pc, #56]	@ (8000874 <waitForAck+0x7c>)
 800083c:	f000 faca 	bl	8000dd4 <debug_print>
	} else {
		debug_print("Classes don't match.\n");
		return false;
	}

	if (incoming_packet.id == outgoing->id) {
 8000840:	7c7a      	ldrb	r2, [r7, #17]
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	785b      	ldrb	r3, [r3, #1]
 8000846:	429a      	cmp	r2, r3
 8000848:	d10a      	bne.n	8000860 <waitForAck+0x68>
 800084a:	e004      	b.n	8000856 <waitForAck+0x5e>
		debug_print("Classes don't match.\n");
 800084c:	480a      	ldr	r0, [pc, #40]	@ (8000878 <waitForAck+0x80>)
 800084e:	f000 fac1 	bl	8000dd4 <debug_print>
		return false;
 8000852:	2300      	movs	r3, #0
 8000854:	e008      	b.n	8000868 <waitForAck+0x70>
		debug_print("Ids match!\n");
 8000856:	4809      	ldr	r0, [pc, #36]	@ (800087c <waitForAck+0x84>)
 8000858:	f000 fabc 	bl	8000dd4 <debug_print>
	} else {
		debug_print("Ids don't match.\n");
		return false;
	}

	return true;
 800085c:	2301      	movs	r3, #1
 800085e:	e003      	b.n	8000868 <waitForAck+0x70>
		debug_print("Ids don't match.\n");
 8000860:	4807      	ldr	r0, [pc, #28]	@ (8000880 <waitForAck+0x88>)
 8000862:	f000 fab7 	bl	8000dd4 <debug_print>
		return false;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	0800ad14 	.word	0x0800ad14
 8000874:	0800ad2c 	.word	0x0800ad2c
 8000878:	0800ad3c 	.word	0x0800ad3c
 800087c:	0800ad54 	.word	0x0800ad54
 8000880:	0800ad60 	.word	0x0800ad60

08000884 <sendSPICommand>:

ublox_status_e sendSPICommand(NeoGPSConfig_t *config, UBX_Packet_t *outgoing, uint32_t max_wait) {
 8000884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000888:	b095      	sub	sp, #84	@ 0x54
 800088a:	af02      	add	r7, sp, #8
 800088c:	6178      	str	r0, [r7, #20]
 800088e:	6139      	str	r1, [r7, #16]
 8000890:	60fa      	str	r2, [r7, #12]
 8000892:	466b      	mov	r3, sp
 8000894:	461e      	mov	r6, r3
	//start with header bytes
	//determine size of
	debug_print("Running sendspicommand...\r\n");
 8000896:	48a6      	ldr	r0, [pc, #664]	@ (8000b30 <sendSPICommand+0x2ac>)
 8000898:	f000 fa9c 	bl	8000dd4 <debug_print>
	uint16_t tx_size = UBX_PACKET_HEADER_SIZE +
			   outgoing->length +
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	885b      	ldrh	r3, [r3, #2]
	uint16_t tx_size = UBX_PACKET_HEADER_SIZE +
 80008a0:	3308      	adds	r3, #8
 80008a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
			   UBX_PACKET_FOOTER_SIZE;

	uint8_t tx[tx_size*2];
 80008a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80008a6:	0059      	lsls	r1, r3, #1
 80008a8:	1e4b      	subs	r3, r1, #1
 80008aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80008ac:	460a      	mov	r2, r1
 80008ae:	2300      	movs	r3, #0
 80008b0:	603a      	str	r2, [r7, #0]
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	f04f 0200 	mov.w	r2, #0
 80008b8:	f04f 0300 	mov.w	r3, #0
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	00c3      	lsls	r3, r0, #3
 80008c0:	6838      	ldr	r0, [r7, #0]
 80008c2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008c6:	6838      	ldr	r0, [r7, #0]
 80008c8:	00c2      	lsls	r2, r0, #3
 80008ca:	460a      	mov	r2, r1
 80008cc:	2300      	movs	r3, #0
 80008ce:	4692      	mov	sl, r2
 80008d0:	469b      	mov	fp, r3
 80008d2:	f04f 0200 	mov.w	r2, #0
 80008d6:	f04f 0300 	mov.w	r3, #0
 80008da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80008de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80008e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80008e6:	460b      	mov	r3, r1
 80008e8:	3307      	adds	r3, #7
 80008ea:	08db      	lsrs	r3, r3, #3
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	ebad 0d03 	sub.w	sp, sp, r3
 80008f2:	ab02      	add	r3, sp, #8
 80008f4:	3300      	adds	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	tx[0] = UBX_PSYNC_1;
 80008f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008fa:	22b5      	movs	r2, #181	@ 0xb5
 80008fc:	701a      	strb	r2, [r3, #0]
	tx[1] = UBX_PSYNC_2;
 80008fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000900:	2262      	movs	r2, #98	@ 0x62
 8000902:	705a      	strb	r2, [r3, #1]

	tx[2] = outgoing->class;
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800090a:	709a      	strb	r2, [r3, #2]
	tx[3] = outgoing->id;
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	785a      	ldrb	r2, [r3, #1]
 8000910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000912:	70da      	strb	r2, [r3, #3]
	tx[4] = outgoing->length & 0xFF; //LSB OF LENGTH,
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	885b      	ldrh	r3, [r3, #2]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800091c:	711a      	strb	r2, [r3, #4]
	tx[5] = outgoing->length >> 8;   //MSB OF LENGTH. LENGTH IS LSB FIRST PER DATASHEET
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	885b      	ldrh	r3, [r3, #2]
 8000922:	0a1b      	lsrs	r3, r3, #8
 8000924:	b29b      	uxth	r3, r3
 8000926:	b2da      	uxtb	r2, r3
 8000928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800092a:	715a      	strb	r2, [r3, #5]

	HAL_Delay(1000);
 800092c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000930:	f000 ff8e 	bl	8001850 <HAL_Delay>
	debug_print("Set headers, setting payload of length %d...\r\n", outgoing->length);
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	885b      	ldrh	r3, [r3, #2]
 8000938:	4619      	mov	r1, r3
 800093a:	487e      	ldr	r0, [pc, #504]	@ (8000b34 <sendSPICommand+0x2b0>)
 800093c:	f000 fa4a 	bl	8000dd4 <debug_print>
	HAL_Delay(1000);
 8000940:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000944:	f000 ff84 	bl	8001850 <HAL_Delay>
	for (int i = 0; i < outgoing->length; i++) {
 8000948:	2300      	movs	r3, #0
 800094a:	647b      	str	r3, [r7, #68]	@ 0x44
 800094c:	e00b      	b.n	8000966 <sendSPICommand+0xe2>
		tx[UBX_PACKET_HEADER_SIZE + i] = outgoing->payload[i];
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000954:	441a      	add	r2, r3
 8000956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000958:	3306      	adds	r3, #6
 800095a:	7811      	ldrb	r1, [r2, #0]
 800095c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800095e:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < outgoing->length; i++) {
 8000960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000962:	3301      	adds	r3, #1
 8000964:	647b      	str	r3, [r7, #68]	@ 0x44
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	885b      	ldrh	r3, [r3, #2]
 800096a:	461a      	mov	r2, r3
 800096c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800096e:	4293      	cmp	r3, r2
 8000970:	dbed      	blt.n	800094e <sendSPICommand+0xca>
	}
	HAL_Delay(1000);
 8000972:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000976:	f000 ff6b 	bl	8001850 <HAL_Delay>
	debug_print("Set payload.\r\n");
 800097a:	486f      	ldr	r0, [pc, #444]	@ (8000b38 <sendSPICommand+0x2b4>)
 800097c:	f000 fa2a 	bl	8000dd4 <debug_print>
	int footer_start = UBX_PACKET_HEADER_SIZE + outgoing->length;
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	885b      	ldrh	r3, [r3, #2]
 8000984:	3306      	adds	r3, #6
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28

	tx[footer_start] = outgoing->checksumA;
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	7b19      	ldrb	r1, [r3, #12]
 800098c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800098e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000990:	4413      	add	r3, r2
 8000992:	460a      	mov	r2, r1
 8000994:	701a      	strb	r2, [r3, #0]
	tx[footer_start + 1] = outgoing->checksumB;
 8000996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000998:	3301      	adds	r3, #1
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	7b51      	ldrb	r1, [r2, #13]
 800099e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009a0:	54d1      	strb	r1, [r2, r3]

	HAL_Delay(1000);
 80009a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009a6:	f000 ff53 	bl	8001850 <HAL_Delay>
	debug_print("Created tx buffer, calculating checksum:\r\n");
 80009aa:	4864      	ldr	r0, [pc, #400]	@ (8000b3c <sendSPICommand+0x2b8>)
 80009ac:	f000 fa12 	bl	8000dd4 <debug_print>
	//calculate the checksum
	calculateChecksum(outgoing, tx, tx_size);
 80009b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80009b2:	461a      	mov	r2, r3
 80009b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80009b6:	6938      	ldr	r0, [r7, #16]
 80009b8:	f7ff fe1a 	bl	80005f0 <calculateChecksum>
	HAL_Delay(1000);
 80009bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009c0:	f000 ff46 	bl	8001850 <HAL_Delay>
	debug_print("Calculated checksum, filling end of tx and beginning of rx...\r\n");
 80009c4:	485e      	ldr	r0, [pc, #376]	@ (8000b40 <sendSPICommand+0x2bc>)
 80009c6:	f000 fa05 	bl	8000dd4 <debug_print>
	HAL_Delay(500);
 80009ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009ce:	f000 ff3f 	bl	8001850 <HAL_Delay>

	uint8_t rx_buf[tx_size*2];
 80009d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80009d4:	0059      	lsls	r1, r3, #1
 80009d6:	1e4b      	subs	r3, r1, #1
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80009da:	460a      	mov	r2, r1
 80009dc:	2300      	movs	r3, #0
 80009de:	4690      	mov	r8, r2
 80009e0:	4699      	mov	r9, r3
 80009e2:	f04f 0200 	mov.w	r2, #0
 80009e6:	f04f 0300 	mov.w	r3, #0
 80009ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009f6:	460a      	mov	r2, r1
 80009f8:	2300      	movs	r3, #0
 80009fa:	4614      	mov	r4, r2
 80009fc:	461d      	mov	r5, r3
 80009fe:	f04f 0200 	mov.w	r2, #0
 8000a02:	f04f 0300 	mov.w	r3, #0
 8000a06:	00eb      	lsls	r3, r5, #3
 8000a08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a0c:	00e2      	lsls	r2, r4, #3
 8000a0e:	460b      	mov	r3, r1
 8000a10:	3307      	adds	r3, #7
 8000a12:	08db      	lsrs	r3, r3, #3
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	ebad 0d03 	sub.w	sp, sp, r3
 8000a1a:	ab02      	add	r3, sp, #8
 8000a1c:	3300      	adds	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]

	for(int i = 0; i < tx_size; i++) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	643b      	str	r3, [r7, #64]	@ 0x40
 8000a24:	e008      	b.n	8000a38 <sendSPICommand+0x1b4>
		tx[tx_size+i] = 0xFF;
 8000a26:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8000a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a2a:	4413      	add	r3, r2
 8000a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a2e:	21ff      	movs	r1, #255	@ 0xff
 8000a30:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < tx_size; i++) {
 8000a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a34:	3301      	adds	r3, #1
 8000a36:	643b      	str	r3, [r7, #64]	@ 0x40
 8000a38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000a3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf2      	blt.n	8000a26 <sendSPICommand+0x1a2>
		//rx_buf[i] = 0xFF;
	}

	HAL_Delay(500);
 8000a40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a44:	f000 ff04 	bl	8001850 <HAL_Delay>
	debug_print("Done filling. Begin transaction...\r\n");
 8000a48:	483e      	ldr	r0, [pc, #248]	@ (8000b44 <sendSPICommand+0x2c0>)
 8000a4a:	f000 f9c3 	bl	8000dd4 <debug_print>

	cs_low(config); //begin the transmission
 8000a4e:	6978      	ldr	r0, [r7, #20]
 8000a50:	f7ff fdae 	bl	80005b0 <cs_low>
	HAL_StatusTypeDef res = HAL_SPI_TransmitReceive(config->spi_port, tx, rx_buf, tx_size*2, max_wait);
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	4613      	mov	r3, r2
 8000a64:	6a3a      	ldr	r2, [r7, #32]
 8000a66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000a68:	f004 fa77 	bl	8004f5a <HAL_SPI_TransmitReceive>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	77fb      	strb	r3, [r7, #31]
	cs_high(config); //end the transaction
 8000a70:	6978      	ldr	r0, [r7, #20]
 8000a72:	f7ff fdad 	bl	80005d0 <cs_high>
	HAL_Delay(1000);
 8000a76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a7a:	f000 fee9 	bl	8001850 <HAL_Delay>
	debug_print("Spi transaction over (%02x). Parsing results...\r\n", res);
 8000a7e:	7ffb      	ldrb	r3, [r7, #31]
 8000a80:	4619      	mov	r1, r3
 8000a82:	4831      	ldr	r0, [pc, #196]	@ (8000b48 <sendSPICommand+0x2c4>)
 8000a84:	f000 f9a6 	bl	8000dd4 <debug_print>
	HAL_Delay(1000);
 8000a88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a8c:	f000 fee0 	bl	8001850 <HAL_Delay>
	debug_print("Debug printing rx and tx buffers:\r\n");
 8000a90:	482e      	ldr	r0, [pc, #184]	@ (8000b4c <sendSPICommand+0x2c8>)
 8000a92:	f000 f99f 	bl	8000dd4 <debug_print>
	HAL_Delay(500);
 8000a96:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a9a:	f000 fed9 	bl	8001850 <HAL_Delay>
	debug_print("TX: ");
 8000a9e:	482c      	ldr	r0, [pc, #176]	@ (8000b50 <sendSPICommand+0x2cc>)
 8000aa0:	f000 f998 	bl	8000dd4 <debug_print>
	for(int i = 0; i < tx_size*2; i++) {
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000aa8:	e00d      	b.n	8000ac6 <sendSPICommand+0x242>
		HAL_Delay(100);
 8000aaa:	2064      	movs	r0, #100	@ 0x64
 8000aac:	f000 fed0 	bl	8001850 <HAL_Delay>
		debug_print(" |%02x| ", tx[i]);
 8000ab0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ab4:	4413      	add	r3, r2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4826      	ldr	r0, [pc, #152]	@ (8000b54 <sendSPICommand+0x2d0>)
 8000abc:	f000 f98a 	bl	8000dd4 <debug_print>
	for(int i = 0; i < tx_size*2; i++) {
 8000ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ac6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbec      	blt.n	8000aaa <sendSPICommand+0x226>
	}
	HAL_Delay(500);
 8000ad0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ad4:	f000 febc 	bl	8001850 <HAL_Delay>
	debug_print("\r\nRX: ");
 8000ad8:	481f      	ldr	r0, [pc, #124]	@ (8000b58 <sendSPICommand+0x2d4>)
 8000ada:	f000 f97b 	bl	8000dd4 <debug_print>
	for(int i = 0; i < tx_size*2; i++) {
 8000ade:	2300      	movs	r3, #0
 8000ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000ae2:	e00d      	b.n	8000b00 <sendSPICommand+0x27c>
		HAL_Delay(100);
 8000ae4:	2064      	movs	r0, #100	@ 0x64
 8000ae6:	f000 feb3 	bl	8001850 <HAL_Delay>
		debug_print(" |%02x| ", rx_buf[i]);
 8000aea:	6a3a      	ldr	r2, [r7, #32]
 8000aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000aee:	4413      	add	r3, r2
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	4619      	mov	r1, r3
 8000af4:	4817      	ldr	r0, [pc, #92]	@ (8000b54 <sendSPICommand+0x2d0>)
 8000af6:	f000 f96d 	bl	8000dd4 <debug_print>
	for(int i = 0; i < tx_size*2; i++) {
 8000afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000afc:	3301      	adds	r3, #1
 8000afe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000b00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b06:	429a      	cmp	r2, r3
 8000b08:	dbec      	blt.n	8000ae4 <sendSPICommand+0x260>
	//print_HAL_Status(result);

	//sfe_ublox_status_e ret = UBLOX_STATUS_SUCCESS;
	//bool ret = false;
	//we may need to look for ACK depnding on type of command
	if (outgoing->class == UBX_CLASS_CFG) {
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d107      	bne.n	8000b22 <sendSPICommand+0x29e>
		//call waitforack here which should return some sort of status
		waitForAck(outgoing, rx_buf, tx_size*2, max_wait);
 8000b12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6a39      	ldr	r1, [r7, #32]
 8000b1c:	6938      	ldr	r0, [r7, #16]
 8000b1e:	f7ff fe6b 	bl	80007f8 <waitForAck>
	} else {
		//waitForNoAck(outgoing, max_wait);
	}

	return UBLOX_STATUS_DATA_RECEIVED;
 8000b22:	230b      	movs	r3, #11
 8000b24:	46b5      	mov	sp, r6
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	374c      	adds	r7, #76	@ 0x4c
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b30:	0800ad74 	.word	0x0800ad74
 8000b34:	0800ad90 	.word	0x0800ad90
 8000b38:	0800adc0 	.word	0x0800adc0
 8000b3c:	0800add0 	.word	0x0800add0
 8000b40:	0800adfc 	.word	0x0800adfc
 8000b44:	0800ae3c 	.word	0x0800ae3c
 8000b48:	0800ae64 	.word	0x0800ae64
 8000b4c:	0800ae98 	.word	0x0800ae98
 8000b50:	0800aebc 	.word	0x0800aebc
 8000b54:	0800aec4 	.word	0x0800aec4
 8000b58:	0800aed0 	.word	0x0800aed0

08000b5c <getSPIPortSettings>:

bool getSPIPortSettings(NeoGPSConfig_t *config, uint32_t max_wait)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
	UBX_Packet_t packet;
	packet.class = UBX_CLASS_CFG;
 8000b66:	2306      	movs	r3, #6
 8000b68:	743b      	strb	r3, [r7, #16]
	packet.id = UBX_CFG_PRT;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	747b      	strb	r3, [r7, #17]
	packet.length = 1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	827b      	strh	r3, [r7, #18]

	uint8_t payload = PORT_ID_SPI;
 8000b72:	2304      	movs	r3, #4
 8000b74:	73fb      	strb	r3, [r7, #15]

	packet.payload = &payload;
 8000b76:	f107 030f 	add.w	r3, r7, #15
 8000b7a:	61bb      	str	r3, [r7, #24]

	debug_print("Set up port settings poll packet, sending command:\r\n");
 8000b7c:	480b      	ldr	r0, [pc, #44]	@ (8000bac <getSPIPortSettings+0x50>)
 8000b7e:	f000 f929 	bl	8000dd4 <debug_print>
	HAL_Delay(1000);
 8000b82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b86:	f000 fe63 	bl	8001850 <HAL_Delay>
	return ((sendSPICommand(config, &packet, max_wait)) == UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff fe76 	bl	8000884 <sendSPICommand>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b0b      	cmp	r3, #11
 8000b9c:	bf0c      	ite	eq
 8000b9e:	2301      	moveq	r3, #1
 8000ba0:	2300      	movne	r3, #0
 8000ba2:	b2db      	uxtb	r3, r3
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3720      	adds	r7, #32
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	0800aed8 	.word	0x0800aed8

08000bb0 <isConnected>:
/*
 * To check if the device is connected,
 * we check the SPI port settings of some
 * port to see if we get a valid result.
 */
bool isConnected(NeoGPSConfig_t *config, uint32_t max_wait) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
	debug_print("Checking connection...\r\n");
 8000bba:	4806      	ldr	r0, [pc, #24]	@ (8000bd4 <isConnected+0x24>)
 8000bbc:	f000 f90a 	bl	8000dd4 <debug_print>
	return getSPIPortSettings(config, max_wait);
 8000bc0:	6839      	ldr	r1, [r7, #0]
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffca 	bl	8000b5c <getSPIPortSettings>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	0800af10 	.word	0x0800af10

08000bd8 <test_poll>:
	//if (getPortSettings(PORT_ID_SPI, max_wait) == false)
	//    return (false); // Something went wrong. Bail.
	return false;
}

void test_poll(NeoGPSConfig_t *config, uint32_t max_wait) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8000bde:	af02      	add	r7, sp, #8
 8000be0:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000be4:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000be8:	6018      	str	r0, [r3, #0]
 8000bea:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000bee:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8000bf2:	6019      	str	r1, [r3, #0]
	HAL_Delay(500);
 8000bf4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bf8:	f000 fe2a 	bl	8001850 <HAL_Delay>
	debug_print("Starting test polling...");
 8000bfc:	485c      	ldr	r0, [pc, #368]	@ (8000d70 <test_poll+0x198>)
 8000bfe:	f000 f8e9 	bl	8000dd4 <debug_print>
	HAL_Delay(500);
 8000c02:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c06:	f000 fe23 	bl	8001850 <HAL_Delay>

	uint8_t tx[SPI_RX_BUFFER_SIZE] = {[0 ... SPI_RX_BUFFER_SIZE-1] = 0xFF};
 8000c0a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000c0e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000c12:	4a58      	ldr	r2, [pc, #352]	@ (8000d74 <test_poll+0x19c>)
 8000c14:	4618      	mov	r0, r3
 8000c16:	4611      	mov	r1, r2
 8000c18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	f009 fbc5 	bl	800a3ac <memcpy>

	tx[0] = UBX_PSYNC_1;
 8000c22:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000c26:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000c2a:	22b5      	movs	r2, #181	@ 0xb5
 8000c2c:	701a      	strb	r2, [r3, #0]
	tx[1] = UBX_PSYNC_2;
 8000c2e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000c32:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000c36:	2262      	movs	r2, #98	@ 0x62
 8000c38:	705a      	strb	r2, [r3, #1]

	tx[2] = UBX_CLASS_CFG;
 8000c3a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000c3e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000c42:	2206      	movs	r2, #6
 8000c44:	709a      	strb	r2, [r3, #2]
	tx[3] = UBX_CFG_PRT;
 8000c46:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000c4a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000c4e:	2200      	movs	r2, #0
 8000c50:	70da      	strb	r2, [r3, #3]
	tx[4] = 1 & 0xFF; //LSB OF LENGTH,
 8000c52:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000c56:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	711a      	strb	r2, [r3, #4]
	tx[5] = 1 >> 8;   //MSB OF LENGTH. LENGTH IS LSB FIRST PER DATASHEET
 8000c5e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000c62:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000c66:	2200      	movs	r2, #0
 8000c68:	715a      	strb	r2, [r3, #5]


	uint8_t rx[SPI_RX_BUFFER_SIZE];

	while(1) {
		debug_print("POLLING...");
 8000c6a:	4843      	ldr	r0, [pc, #268]	@ (8000d78 <test_poll+0x1a0>)
 8000c6c:	f000 f8b2 	bl	8000dd4 <debug_print>
		cs_low(config);
 8000c70:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000c74:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	f7ff fc99 	bl	80005b0 <cs_low>
		HAL_SPI_TransmitReceive(config->spi_port, tx, rx, SPI_RX_BUFFER_SIZE, max_wait);
 8000c7e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000c82:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	f107 0208 	add.w	r2, r7, #8
 8000c8e:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 8000c92:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000c96:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ca2:	f004 f95a 	bl	8004f5a <HAL_SPI_TransmitReceive>
		cs_high(config);
 8000ca6:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000caa:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	f7ff fc8e 	bl	80005d0 <cs_high>
		HAL_Delay(100);
 8000cb4:	2064      	movs	r0, #100	@ 0x64
 8000cb6:	f000 fdcb 	bl	8001850 <HAL_Delay>
		debug_print("Transaction done.\r\n");
 8000cba:	4830      	ldr	r0, [pc, #192]	@ (8000d7c <test_poll+0x1a4>)
 8000cbc:	f000 f88a 	bl	8000dd4 <debug_print>
		HAL_Delay(100);
 8000cc0:	2064      	movs	r0, #100	@ 0x64
 8000cc2:	f000 fdc5 	bl	8001850 <HAL_Delay>
		debug_print("Debug printing rx and tx buffers:\r\n");
 8000cc6:	482e      	ldr	r0, [pc, #184]	@ (8000d80 <test_poll+0x1a8>)
 8000cc8:	f000 f884 	bl	8000dd4 <debug_print>
		HAL_Delay(100);
 8000ccc:	2064      	movs	r0, #100	@ 0x64
 8000cce:	f000 fdbf 	bl	8001850 <HAL_Delay>
		debug_print("TX: ");
 8000cd2:	482c      	ldr	r0, [pc, #176]	@ (8000d84 <test_poll+0x1ac>)
 8000cd4:	f000 f87e 	bl	8000dd4 <debug_print>
		for(int i = 0; i < SPI_RX_BUFFER_SIZE; i++) {
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8000cde:	e013      	b.n	8000d08 <test_poll+0x130>
			HAL_Delay(10);
 8000ce0:	200a      	movs	r0, #10
 8000ce2:	f000 fdb5 	bl	8001850 <HAL_Delay>
			debug_print(" |%02x| ", tx[i]);
 8000ce6:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000cea:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8000cee:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000cf2:	4413      	add	r3, r2
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4823      	ldr	r0, [pc, #140]	@ (8000d88 <test_poll+0x1b0>)
 8000cfa:	f000 f86b 	bl	8000dd4 <debug_print>
		for(int i = 0; i < SPI_RX_BUFFER_SIZE; i++) {
 8000cfe:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000d02:	3301      	adds	r3, #1
 8000d04:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8000d08:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d10:	dbe6      	blt.n	8000ce0 <test_poll+0x108>
		}
		HAL_Delay(100);
 8000d12:	2064      	movs	r0, #100	@ 0x64
 8000d14:	f000 fd9c 	bl	8001850 <HAL_Delay>
		debug_print("\r\nRX: ");
 8000d18:	481c      	ldr	r0, [pc, #112]	@ (8000d8c <test_poll+0x1b4>)
 8000d1a:	f000 f85b 	bl	8000dd4 <debug_print>
		for(int i = 0; i < SPI_RX_BUFFER_SIZE; i++) {
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
 8000d24:	e013      	b.n	8000d4e <test_poll+0x176>
			HAL_Delay(10);
 8000d26:	200a      	movs	r0, #10
 8000d28:	f000 fd92 	bl	8001850 <HAL_Delay>
			debug_print(" |%02x| ", rx[i]);
 8000d2c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000d30:	f5a3 6281 	sub.w	r2, r3, #1032	@ 0x408
 8000d34:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8000d38:	4413      	add	r3, r2
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4812      	ldr	r0, [pc, #72]	@ (8000d88 <test_poll+0x1b0>)
 8000d40:	f000 f848 	bl	8000dd4 <debug_print>
		for(int i = 0; i < SPI_RX_BUFFER_SIZE; i++) {
 8000d44:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8000d48:	3301      	adds	r3, #1
 8000d4a:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
 8000d4e:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8000d52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d56:	dbe6      	blt.n	8000d26 <test_poll+0x14e>
		}
		HAL_Delay(100);
 8000d58:	2064      	movs	r0, #100	@ 0x64
 8000d5a:	f000 fd79 	bl	8001850 <HAL_Delay>
		debug_print("\r\nDone. Waiting 5 seconds...\r\n");
 8000d5e:	480c      	ldr	r0, [pc, #48]	@ (8000d90 <test_poll+0x1b8>)
 8000d60:	f000 f838 	bl	8000dd4 <debug_print>
		HAL_Delay(5000);
 8000d64:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000d68:	f000 fd72 	bl	8001850 <HAL_Delay>
		debug_print("POLLING...");
 8000d6c:	e77d      	b.n	8000c6a <test_poll+0x92>
 8000d6e:	bf00      	nop
 8000d70:	0800af2c 	.word	0x0800af2c
 8000d74:	0800af88 	.word	0x0800af88
 8000d78:	0800af48 	.word	0x0800af48
 8000d7c:	0800af54 	.word	0x0800af54
 8000d80:	0800ae98 	.word	0x0800ae98
 8000d84:	0800aebc 	.word	0x0800aebc
 8000d88:	0800aec4 	.word	0x0800aec4
 8000d8c:	0800aed0 	.word	0x0800aed0
 8000d90:	0800af68 	.word	0x0800af68

08000d94 <neom9n_begin>:
	}
}

bool neom9n_begin(NeoGPSConfig_t *config, uint32_t max_wait) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	debug_print("Beginning...\r\n");
 8000d9e:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <neom9n_begin+0x3c>)
 8000da0:	f000 f818 	bl	8000dd4 <debug_print>
	HAL_Delay(2000);
 8000da4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000da8:	f000 fd52 	bl	8001850 <HAL_Delay>
	cs_high(config);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fc0f 	bl	80005d0 <cs_high>

	bool connected = isConnected(config, max_wait);
 8000db2:	6839      	ldr	r1, [r7, #0]
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff fefb 	bl	8000bb0 <isConnected>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	73fb      	strb	r3, [r7, #15]
	test_poll(config, max_wait);
 8000dbe:	6839      	ldr	r1, [r7, #0]
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff09 	bl	8000bd8 <test_poll>
	//we should ideally attempt to connect a few times
	return connected;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	0800b188 	.word	0x0800b188

08000dd4 <debug_print>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void debug_print(const char *format, ...) {
 8000dd4:	b40f      	push	{r0, r1, r2, r3}
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b0c2      	sub	sp, #264	@ 0x108
 8000dda:	af00      	add	r7, sp, #0
	char buf[PRINT_BUFFER_SIZE];
	va_list args;
	va_start(args, format);
 8000ddc:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000de8:	601a      	str	r2, [r3, #0]
	int n = vsprintf(buf, format, args);
 8000dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000df2:	1d38      	adds	r0, r7, #4
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8000dfa:	f009 fa99 	bl	800a330 <vsiprintf>
 8000dfe:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	CDC_Transmit_FS(buf, n);
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f008 fe2f 	bl	8009a6c <CDC_Transmit_FS>
	va_end(args);
}
 8000e0e:	bf00      	nop
 8000e10:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000e14:	46bd      	mov	sp, r7
 8000e16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e1a:	b004      	add	sp, #16
 8000e1c:	4770      	bx	lr
	...

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f000 fca2 	bl	800176e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 f827 	bl	8000e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f000 f9c3 	bl	80011b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e32:	f000 f8eb 	bl	800100c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e36:	f000 f927 	bl	8001088 <MX_USART1_UART_Init>
  MX_FDCAN2_Init();
 8000e3a:	f000 f861 	bl	8000f00 <MX_FDCAN2_Init>
  MX_I2C3_Init();
 8000e3e:	f000 f8a5 	bl	8000f8c <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8000e42:	f000 f96d 	bl	8001120 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8000e46:	f008 fd53 	bl	80098f0 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  NeoGPSConfig_t neo_config = {
 8000e4a:	4a09      	ldr	r2, [pc, #36]	@ (8000e70 <main+0x50>)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  		&hspi1,
		CS_NeoGPS_GPIO_Port,
		CS_NeoGPS_Pin
  };
  neom9n_begin(&neo_config, 10000000);
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	4907      	ldr	r1, [pc, #28]	@ (8000e74 <main+0x54>)
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff9b 	bl	8000d94 <neom9n_begin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  debug_print("bruh mooment\n\r");
 8000e5e:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <main+0x58>)
 8000e60:	f7ff ffb8 	bl	8000dd4 <debug_print>
	  HAL_Delay(1000);
 8000e64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e68:	f000 fcf2 	bl	8001850 <HAL_Delay>
	  debug_print("bruh mooment\n\r");
 8000e6c:	bf00      	nop
 8000e6e:	e7f6      	b.n	8000e5e <main+0x3e>
 8000e70:	0800b1a8 	.word	0x0800b1a8
 8000e74:	00989680 	.word	0x00989680
 8000e78:	0800b198 	.word	0x0800b198

08000e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b094      	sub	sp, #80	@ 0x50
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 0318 	add.w	r3, r7, #24
 8000e86:	2238      	movs	r2, #56	@ 0x38
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f009 fa5a 	bl	800a344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ea2:	f002 ff91 	bl	8003dc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000ea6:	2322      	movs	r3, #34	@ 0x22
 8000ea8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eaa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb0:	2340      	movs	r3, #64	@ 0x40
 8000eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebc:	f107 0318 	add.w	r3, r7, #24
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f003 f835 	bl	8003f30 <HAL_RCC_OscConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000ecc:	f000 f9cc 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f003 fb33 	bl	8004554 <HAL_RCC_ClockConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000ef4:	f000 f9b8 	bl	8001268 <Error_Handler>
  }
}
 8000ef8:	bf00      	nop
 8000efa:	3750      	adds	r7, #80	@ 0x50
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000f04:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f06:	4a20      	ldr	r2, [pc, #128]	@ (8000f88 <MX_FDCAN2_Init+0x88>)
 8000f08:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f10:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000f22:	4b18      	ldr	r3, [pc, #96]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f28:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f30:	2210      	movs	r2, #16
 8000f32:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f34:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8000f40:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f52:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000f64:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	@ (8000f84 <MX_FDCAN2_Init+0x84>)
 8000f72:	f000 fd9f 	bl	8001ab4 <HAL_FDCAN_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000f7c:	f000 f974 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200001f0 	.word	0x200001f0
 8000f88:	40006800 	.word	0x40006800

08000f8c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <MX_I2C3_Init+0x74>)
 8000f92:	4a1c      	ldr	r2, [pc, #112]	@ (8001004 <MX_I2C3_Init+0x78>)
 8000f94:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <MX_I2C3_Init+0x74>)
 8000f98:	4a1b      	ldr	r2, [pc, #108]	@ (8001008 <MX_I2C3_Init+0x7c>)
 8000f9a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <MX_I2C3_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa2:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <MX_I2C3_Init+0x74>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa8:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <MX_I2C3_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fae:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <MX_I2C3_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <MX_I2C3_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fba:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <MX_I2C3_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <MX_I2C3_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fc6:	480e      	ldr	r0, [pc, #56]	@ (8001000 <MX_I2C3_Init+0x74>)
 8000fc8:	f001 f8ca 	bl	8002160 <HAL_I2C_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000fd2:	f000 f949 	bl	8001268 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4809      	ldr	r0, [pc, #36]	@ (8001000 <MX_I2C3_Init+0x74>)
 8000fda:	f001 f95c 	bl	8002296 <HAL_I2CEx_ConfigAnalogFilter>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000fe4:	f000 f940 	bl	8001268 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4805      	ldr	r0, [pc, #20]	@ (8001000 <MX_I2C3_Init+0x74>)
 8000fec:	f001 f99e 	bl	800232c <HAL_I2CEx_ConfigDigitalFilter>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000ff6:	f000 f937 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000254 	.word	0x20000254
 8001004:	40007800 	.word	0x40007800
 8001008:	00503d58 	.word	0x00503d58

0800100c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001010:	4b1b      	ldr	r3, [pc, #108]	@ (8001080 <MX_SPI1_Init+0x74>)
 8001012:	4a1c      	ldr	r2, [pc, #112]	@ (8001084 <MX_SPI1_Init+0x78>)
 8001014:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001016:	4b1a      	ldr	r3, [pc, #104]	@ (8001080 <MX_SPI1_Init+0x74>)
 8001018:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800101c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800101e:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <MX_SPI1_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001024:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <MX_SPI1_Init+0x74>)
 8001026:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800102a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800102c:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <MX_SPI1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001032:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <MX_SPI1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <MX_SPI1_Init+0x74>)
 800103a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800103e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_SPI1_Init+0x74>)
 8001042:	2238      	movs	r2, #56	@ 0x38
 8001044:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <MX_SPI1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_SPI1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <MX_SPI1_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001058:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_SPI1_Init+0x74>)
 800105a:	2207      	movs	r2, #7
 800105c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <MX_SPI1_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_SPI1_Init+0x74>)
 8001066:	2208      	movs	r2, #8
 8001068:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	@ (8001080 <MX_SPI1_Init+0x74>)
 800106c:	f003 feca 	bl	8004e04 <HAL_SPI_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001076:	f000 f8f7 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200002a8 	.word	0x200002a8
 8001084:	40013000 	.word	0x40013000

08001088 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800108c:	4b22      	ldr	r3, [pc, #136]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 800108e:	4a23      	ldr	r2, [pc, #140]	@ (800111c <MX_USART1_UART_Init+0x94>)
 8001090:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010be:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010d0:	4811      	ldr	r0, [pc, #68]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010d2:	f004 fac5 	bl	8005660 <HAL_UART_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010dc:	f000 f8c4 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e0:	2100      	movs	r1, #0
 80010e2:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010e4:	f005 f860 	bl	80061a8 <HAL_UARTEx_SetTxFifoThreshold>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010ee:	f000 f8bb 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f2:	2100      	movs	r1, #0
 80010f4:	4808      	ldr	r0, [pc, #32]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010f6:	f005 f895 	bl	8006224 <HAL_UARTEx_SetRxFifoThreshold>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001100:	f000 f8b2 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 8001106:	f005 f816 	bl	8006136 <HAL_UARTEx_DisableFifoMode>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001110:	f000 f8aa 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000030c 	.word	0x2000030c
 800111c:	40013800 	.word	0x40013800

08001120 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001124:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 8001126:	4a23      	ldr	r2, [pc, #140]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 8001128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800112a:	4b21      	ldr	r3, [pc, #132]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 800112c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001156:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800115c:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001162:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 8001164:	2200      	movs	r2, #0
 8001166:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001168:	4811      	ldr	r0, [pc, #68]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 800116a:	f004 fa79 	bl	8005660 <HAL_UART_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001174:	f000 f878 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001178:	2100      	movs	r1, #0
 800117a:	480d      	ldr	r0, [pc, #52]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 800117c:	f005 f814 	bl	80061a8 <HAL_UARTEx_SetTxFifoThreshold>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001186:	f000 f86f 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118a:	2100      	movs	r1, #0
 800118c:	4808      	ldr	r0, [pc, #32]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 800118e:	f005 f849 	bl	8006224 <HAL_UARTEx_SetRxFifoThreshold>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001198:	f000 f866 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 800119e:	f004 ffca 	bl	8006136 <HAL_UARTEx_DisableFifoMode>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011a8:	f000 f85e 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200003a0 	.word	0x200003a0
 80011b4:	40004400 	.word	0x40004400

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	@ 0x28
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <MX_GPIO_Init+0xa8>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	4a23      	ldr	r2, [pc, #140]	@ (8001260 <MX_GPIO_Init+0xa8>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <MX_GPIO_Init+0xa8>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <MX_GPIO_Init+0xa8>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001260 <MX_GPIO_Init+0xa8>)
 80011ec:	f043 0320 	orr.w	r3, r3, #32
 80011f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <MX_GPIO_Init+0xa8>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	f003 0320 	and.w	r3, r3, #32
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <MX_GPIO_Init+0xa8>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	4a17      	ldr	r2, [pc, #92]	@ (8001260 <MX_GPIO_Init+0xa8>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <MX_GPIO_Init+0xa8>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_GPIO_Init+0xa8>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	4a11      	ldr	r2, [pc, #68]	@ (8001260 <MX_GPIO_Init+0xa8>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_GPIO_Init+0xa8>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_NeoGPS_Pin|LED_D2_Pin|Patrick_Pin|LED_POWER_Pin
 800122e:	2200      	movs	r2, #0
 8001230:	f64c 0142 	movw	r1, #51266	@ 0xc842
 8001234:	480b      	ldr	r0, [pc, #44]	@ (8001264 <MX_GPIO_Init+0xac>)
 8001236:	f000 ff7b 	bl	8002130 <HAL_GPIO_WritePin>
                          |Squidward_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_NeoGPS_Pin LED_D2_Pin Patrick_Pin LED_POWER_Pin
                           Squidward_Pin */
  GPIO_InitStruct.Pin = CS_NeoGPS_Pin|LED_D2_Pin|Patrick_Pin|LED_POWER_Pin
 800123a:	f64c 0342 	movw	r3, #51266	@ 0xc842
 800123e:	617b      	str	r3, [r7, #20]
                          |Squidward_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4804      	ldr	r0, [pc, #16]	@ (8001264 <MX_GPIO_Init+0xac>)
 8001254:	f000 fdea 	bl	8001e2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	@ 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000
 8001264:	48000400 	.word	0x48000400

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <Error_Handler+0x8>

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <HAL_MspInit+0x44>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800127e:	4a0e      	ldr	r2, [pc, #56]	@ (80012b8 <HAL_MspInit+0x44>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6613      	str	r3, [r2, #96]	@ 0x60
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <HAL_MspInit+0x44>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <HAL_MspInit+0x44>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001296:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <HAL_MspInit+0x44>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129c:	6593      	str	r3, [r2, #88]	@ 0x58
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_MspInit+0x44>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012aa:	f002 fe31 	bl	8003f10 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b09e      	sub	sp, #120	@ 0x78
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2250      	movs	r2, #80	@ 0x50
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f009 f831 	bl	800a344 <memset>
  if(hfdcan->Instance==FDCAN2)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a20      	ldr	r2, [pc, #128]	@ (8001368 <HAL_FDCAN_MspInit+0xac>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d138      	bne.n	800135e <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80012ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80012f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012f6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4618      	mov	r0, r3
 80012fe:	f003 fb45 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001308:	f7ff ffae 	bl	8001268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800130c:	4b17      	ldr	r3, [pc, #92]	@ (800136c <HAL_FDCAN_MspInit+0xb0>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001310:	4a16      	ldr	r2, [pc, #88]	@ (800136c <HAL_FDCAN_MspInit+0xb0>)
 8001312:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001316:	6593      	str	r3, [r2, #88]	@ 0x58
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <HAL_FDCAN_MspInit+0xb0>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <HAL_FDCAN_MspInit+0xb0>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001328:	4a10      	ldr	r2, [pc, #64]	@ (800136c <HAL_FDCAN_MspInit+0xb0>)
 800132a:	f043 0302 	orr.w	r3, r3, #2
 800132e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001330:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <HAL_FDCAN_MspInit+0xb0>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800133c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001340:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800134e:	2309      	movs	r3, #9
 8001350:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	@ (8001370 <HAL_FDCAN_MspInit+0xb4>)
 800135a:	f000 fd67 	bl	8001e2c <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 800135e:	bf00      	nop
 8001360:	3778      	adds	r7, #120	@ 0x78
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40006800 	.word	0x40006800
 800136c:	40021000 	.word	0x40021000
 8001370:	48000400 	.word	0x48000400

08001374 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b09e      	sub	sp, #120	@ 0x78
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2250      	movs	r2, #80	@ 0x50
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f008 ffd5 	bl	800a344 <memset>
  if(hi2c->Instance==I2C3)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a2e      	ldr	r2, [pc, #184]	@ (8001458 <HAL_I2C_MspInit+0xe4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d154      	bne.n	800144e <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80013a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 faea 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013be:	f7ff ff53 	bl	8001268 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b26      	ldr	r3, [pc, #152]	@ (800145c <HAL_I2C_MspInit+0xe8>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	4a25      	ldr	r2, [pc, #148]	@ (800145c <HAL_I2C_MspInit+0xe8>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ce:	4b23      	ldr	r3, [pc, #140]	@ (800145c <HAL_I2C_MspInit+0xe8>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	4b20      	ldr	r3, [pc, #128]	@ (800145c <HAL_I2C_MspInit+0xe8>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	4a1f      	ldr	r2, [pc, #124]	@ (800145c <HAL_I2C_MspInit+0xe8>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e6:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <HAL_I2C_MspInit+0xe8>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f8:	2312      	movs	r3, #18
 80013fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001404:	2302      	movs	r3, #2
 8001406:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800140c:	4619      	mov	r1, r3
 800140e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001412:	f000 fd0b 	bl	8001e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001416:	2320      	movs	r3, #32
 8001418:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141a:	2312      	movs	r3, #18
 800141c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001426:	2308      	movs	r3, #8
 8001428:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800142e:	4619      	mov	r1, r3
 8001430:	480b      	ldr	r0, [pc, #44]	@ (8001460 <HAL_I2C_MspInit+0xec>)
 8001432:	f000 fcfb 	bl	8001e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <HAL_I2C_MspInit+0xe8>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143a:	4a08      	ldr	r2, [pc, #32]	@ (800145c <HAL_I2C_MspInit+0xe8>)
 800143c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001440:	6593      	str	r3, [r2, #88]	@ 0x58
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_I2C_MspInit+0xe8>)
 8001444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001446:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800144e:	bf00      	nop
 8001450:	3778      	adds	r7, #120	@ 0x78
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40007800 	.word	0x40007800
 800145c:	40021000 	.word	0x40021000
 8001460:	48000400 	.word	0x48000400

08001464 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	@ 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a17      	ldr	r2, [pc, #92]	@ (80014e0 <HAL_SPI_MspInit+0x7c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d128      	bne.n	80014d8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001486:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <HAL_SPI_MspInit+0x80>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148a:	4a16      	ldr	r2, [pc, #88]	@ (80014e4 <HAL_SPI_MspInit+0x80>)
 800148c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001490:	6613      	str	r3, [r2, #96]	@ 0x60
 8001492:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <HAL_SPI_MspInit+0x80>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001496:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <HAL_SPI_MspInit+0x80>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	4a10      	ldr	r2, [pc, #64]	@ (80014e4 <HAL_SPI_MspInit+0x80>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <HAL_SPI_MspInit+0x80>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014b6:	23e0      	movs	r3, #224	@ 0xe0
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c6:	2305      	movs	r3, #5
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d4:	f000 fcaa 	bl	8001e2c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	@ 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40013000 	.word	0x40013000
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0a0      	sub	sp, #128	@ 0x80
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	2250      	movs	r2, #80	@ 0x50
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f008 ff1b 	bl	800a344 <memset>
  if(huart->Instance==USART1)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a3e      	ldr	r2, [pc, #248]	@ (800160c <HAL_UART_MspInit+0x124>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d138      	bne.n	800158a <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001518:	2301      	movs	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4618      	mov	r0, r3
 8001526:	f003 fa31 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001530:	f7ff fe9a 	bl	8001268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001534:	4b36      	ldr	r3, [pc, #216]	@ (8001610 <HAL_UART_MspInit+0x128>)
 8001536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001538:	4a35      	ldr	r2, [pc, #212]	@ (8001610 <HAL_UART_MspInit+0x128>)
 800153a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800153e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001540:	4b33      	ldr	r3, [pc, #204]	@ (8001610 <HAL_UART_MspInit+0x128>)
 8001542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001548:	61bb      	str	r3, [r7, #24]
 800154a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b30      	ldr	r3, [pc, #192]	@ (8001610 <HAL_UART_MspInit+0x128>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001550:	4a2f      	ldr	r2, [pc, #188]	@ (8001610 <HAL_UART_MspInit+0x128>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001558:	4b2d      	ldr	r3, [pc, #180]	@ (8001610 <HAL_UART_MspInit+0x128>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001564:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001568:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001576:	2307      	movs	r3, #7
 8001578:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001584:	f000 fc52 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001588:	e03b      	b.n	8001602 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a21      	ldr	r2, [pc, #132]	@ (8001614 <HAL_UART_MspInit+0x12c>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d136      	bne.n	8001602 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001594:	2302      	movs	r3, #2
 8001596:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 f9f3 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80015ac:	f7ff fe5c 	bl	8001268 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b0:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <HAL_UART_MspInit+0x128>)
 80015b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b4:	4a16      	ldr	r2, [pc, #88]	@ (8001610 <HAL_UART_MspInit+0x128>)
 80015b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <HAL_UART_MspInit+0x128>)
 80015be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <HAL_UART_MspInit+0x128>)
 80015ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015cc:	4a10      	ldr	r2, [pc, #64]	@ (8001610 <HAL_UART_MspInit+0x128>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <HAL_UART_MspInit+0x128>)
 80015d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015e0:	230c      	movs	r3, #12
 80015e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015f0:	2307      	movs	r3, #7
 80015f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80015f8:	4619      	mov	r1, r3
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015fe:	f000 fc15 	bl	8001e2c <HAL_GPIO_Init>
}
 8001602:	bf00      	nop
 8001604:	3780      	adds	r7, #128	@ 0x80
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40013800 	.word	0x40013800
 8001610:	40021000 	.word	0x40021000
 8001614:	40004400 	.word	0x40004400

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <NMI_Handler+0x4>

08001620 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <MemManage_Handler+0x4>

08001630 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <UsageFault_Handler+0x4>

08001640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166e:	f000 f8d1 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800167c:	4802      	ldr	r0, [pc, #8]	@ (8001688 <USB_LP_IRQHandler+0x10>)
 800167e:	f000 ff91 	bl	80025a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20001910 	.word	0x20001910

0800168c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001694:	4a14      	ldr	r2, [pc, #80]	@ (80016e8 <_sbrk+0x5c>)
 8001696:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <_sbrk+0x60>)
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a0:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <_sbrk+0x64>)
 80016aa:	4a12      	ldr	r2, [pc, #72]	@ (80016f4 <_sbrk+0x68>)
 80016ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d207      	bcs.n	80016cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016bc:	f008 fe4a 	bl	800a354 <__errno>
 80016c0:	4603      	mov	r3, r0
 80016c2:	220c      	movs	r2, #12
 80016c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	e009      	b.n	80016e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016cc:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d2:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <_sbrk+0x64>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	4a05      	ldr	r2, [pc, #20]	@ (80016f0 <_sbrk+0x64>)
 80016dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016de:	68fb      	ldr	r3, [r7, #12]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2001c000 	.word	0x2001c000
 80016ec:	00000400 	.word	0x00000400
 80016f0:	20000434 	.word	0x20000434
 80016f4:	20001f58 	.word	0x20001f58

080016f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <SystemInit+0x20>)
 80016fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001702:	4a05      	ldr	r2, [pc, #20]	@ (8001718 <SystemInit+0x20>)
 8001704:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001708:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800171c:	480d      	ldr	r0, [pc, #52]	@ (8001754 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800171e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001720:	f7ff ffea 	bl	80016f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001724:	480c      	ldr	r0, [pc, #48]	@ (8001758 <LoopForever+0x6>)
  ldr r1, =_edata
 8001726:	490d      	ldr	r1, [pc, #52]	@ (800175c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001728:	4a0d      	ldr	r2, [pc, #52]	@ (8001760 <LoopForever+0xe>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800172c:	e002      	b.n	8001734 <LoopCopyDataInit>

0800172e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001732:	3304      	adds	r3, #4

08001734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001738:	d3f9      	bcc.n	800172e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173a:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <LoopForever+0x12>)
  ldr r4, =_ebss
 800173c:	4c0a      	ldr	r4, [pc, #40]	@ (8001768 <LoopForever+0x16>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001740:	e001      	b.n	8001746 <LoopFillZerobss>

08001742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001744:	3204      	adds	r2, #4

08001746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001748:	d3fb      	bcc.n	8001742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800174a:	f008 fe09 	bl	800a360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800174e:	f7ff fb67 	bl	8000e20 <main>

08001752 <LoopForever>:

LoopForever:
    b LoopForever
 8001752:	e7fe      	b.n	8001752 <LoopForever>
  ldr   r0, =_estack
 8001754:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800175c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001760:	0800b280 	.word	0x0800b280
  ldr r2, =_sbss
 8001764:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001768:	20001f54 	.word	0x20001f54

0800176c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC1_2_IRQHandler>

0800176e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001778:	2003      	movs	r0, #3
 800177a:	f000 f95b 	bl	8001a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800177e:	200f      	movs	r0, #15
 8001780:	f000 f80e 	bl	80017a0 <HAL_InitTick>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	e001      	b.n	8001794 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001790:	f7ff fd70 	bl	8001274 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001794:	79fb      	ldrb	r3, [r7, #7]

}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017ac:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <HAL_InitTick+0x68>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d022      	beq.n	80017fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017b4:	4b15      	ldr	r3, [pc, #84]	@ (800180c <HAL_InitTick+0x6c>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <HAL_InitTick+0x68>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 f966 	bl	8001a9a <HAL_SYSTICK_Config>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10f      	bne.n	80017f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	d809      	bhi.n	80017ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017da:	2200      	movs	r2, #0
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	f04f 30ff 	mov.w	r0, #4294967295
 80017e2:	f000 f932 	bl	8001a4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <HAL_InitTick+0x70>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	e007      	b.n	80017fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	e004      	b.n	80017fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	e001      	b.n	80017fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000008 	.word	0x20000008
 800180c:	20000000 	.word	0x20000000
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <HAL_IncTick+0x1c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <HAL_IncTick+0x20>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4413      	add	r3, r2
 8001822:	4a03      	ldr	r2, [pc, #12]	@ (8001830 <HAL_IncTick+0x1c>)
 8001824:	6013      	str	r3, [r2, #0]
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	20000438 	.word	0x20000438
 8001834:	20000008 	.word	0x20000008

08001838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <HAL_GetTick+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000438 	.word	0x20000438

08001850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001858:	f7ff ffee 	bl	8001838 <HAL_GetTick>
 800185c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d004      	beq.n	8001874 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <HAL_Delay+0x40>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4413      	add	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001874:	bf00      	nop
 8001876:	f7ff ffdf 	bl	8001838 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	429a      	cmp	r2, r3
 8001884:	d8f7      	bhi.n	8001876 <HAL_Delay+0x26>
  {
  }
}
 8001886:	bf00      	nop
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000008 	.word	0x20000008

08001894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b0:	4013      	ands	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c6:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	60d3      	str	r3, [r2, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e0:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <__NVIC_GetPriorityGrouping+0x18>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	f003 0307 	and.w	r3, r3, #7
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	2b00      	cmp	r3, #0
 8001908:	db0b      	blt.n	8001922 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	f003 021f 	and.w	r2, r3, #31
 8001910:	4907      	ldr	r1, [pc, #28]	@ (8001930 <__NVIC_EnableIRQ+0x38>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	2001      	movs	r0, #1
 800191a:	fa00 f202 	lsl.w	r2, r0, r2
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000e100 	.word	0xe000e100

08001934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	2b00      	cmp	r3, #0
 8001946:	db0a      	blt.n	800195e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	b2da      	uxtb	r2, r3
 800194c:	490c      	ldr	r1, [pc, #48]	@ (8001980 <__NVIC_SetPriority+0x4c>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	0112      	lsls	r2, r2, #4
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	440b      	add	r3, r1
 8001958:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800195c:	e00a      	b.n	8001974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4908      	ldr	r1, [pc, #32]	@ (8001984 <__NVIC_SetPriority+0x50>)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	3b04      	subs	r3, #4
 800196c:	0112      	lsls	r2, r2, #4
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	440b      	add	r3, r1
 8001972:	761a      	strb	r2, [r3, #24]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000e100 	.word	0xe000e100
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	@ 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f1c3 0307 	rsb	r3, r3, #7
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	bf28      	it	cs
 80019a6:	2304      	movcs	r3, #4
 80019a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3304      	adds	r3, #4
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d902      	bls.n	80019b8 <NVIC_EncodePriority+0x30>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3b03      	subs	r3, #3
 80019b6:	e000      	b.n	80019ba <NVIC_EncodePriority+0x32>
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43da      	mvns	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	401a      	ands	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d0:	f04f 31ff 	mov.w	r1, #4294967295
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	43d9      	mvns	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	4313      	orrs	r3, r2
         );
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3724      	adds	r7, #36	@ 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a00:	d301      	bcc.n	8001a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00f      	b.n	8001a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a06:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <SysTick_Config+0x40>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0e:	210f      	movs	r1, #15
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f7ff ff8e 	bl	8001934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <SysTick_Config+0x40>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1e:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <SysTick_Config+0x40>)
 8001a20:	2207      	movs	r2, #7
 8001a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	e000e010 	.word	0xe000e010

08001a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff29 	bl	8001894 <__NVIC_SetPriorityGrouping>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a58:	f7ff ff40 	bl	80018dc <__NVIC_GetPriorityGrouping>
 8001a5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	6978      	ldr	r0, [r7, #20]
 8001a64:	f7ff ff90 	bl	8001988 <NVIC_EncodePriority>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff5f 	bl	8001934 <__NVIC_SetPriority>
}
 8001a76:	bf00      	nop
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff33 	bl	80018f8 <__NVIC_EnableIRQ>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffa4 	bl	80019f0 <SysTick_Config>
 8001aa8:	4603      	mov	r3, r0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e147      	b.n	8001d56 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fbee 	bl	80012bc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0210 	bic.w	r2, r2, #16
 8001aee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001af0:	f7ff fea2 	bl	8001838 <HAL_GetTick>
 8001af4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001af6:	e012      	b.n	8001b1e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001af8:	f7ff fe9e 	bl	8001838 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b0a      	cmp	r3, #10
 8001b04:	d90b      	bls.n	8001b1e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b0a:	f043 0201 	orr.w	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2203      	movs	r2, #3
 8001b16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e11b      	b.n	8001d56 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d0e5      	beq.n	8001af8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b3c:	f7ff fe7c 	bl	8001838 <HAL_GetTick>
 8001b40:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001b42:	e012      	b.n	8001b6a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001b44:	f7ff fe78 	bl	8001838 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b0a      	cmp	r3, #10
 8001b50:	d90b      	bls.n	8001b6a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b56:	f043 0201 	orr.w	r2, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2203      	movs	r2, #3
 8001b62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0f5      	b.n	8001d56 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0e5      	beq.n	8001b44 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	699a      	ldr	r2, [r3, #24]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0202 	orr.w	r2, r2, #2
 8001b86:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a74      	ldr	r2, [pc, #464]	@ (8001d60 <HAL_FDCAN_Init+0x2ac>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d103      	bne.n	8001b9a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001b92:	4a74      	ldr	r2, [pc, #464]	@ (8001d64 <HAL_FDCAN_Init+0x2b0>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7c1b      	ldrb	r3, [r3, #16]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d108      	bne.n	8001bb4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699a      	ldr	r2, [r3, #24]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bb0:	619a      	str	r2, [r3, #24]
 8001bb2:	e007      	b.n	8001bc4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699a      	ldr	r2, [r3, #24]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001bc2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7c5b      	ldrb	r3, [r3, #17]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d108      	bne.n	8001bde <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bda:	619a      	str	r2, [r3, #24]
 8001bdc:	e007      	b.n	8001bee <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	699a      	ldr	r2, [r3, #24]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001bec:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7c9b      	ldrb	r3, [r3, #18]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d108      	bne.n	8001c08 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699a      	ldr	r2, [r3, #24]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c04:	619a      	str	r2, [r3, #24]
 8001c06:	e007      	b.n	8001c18 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001c16:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699a      	ldr	r2, [r3, #24]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001c3c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0210 	bic.w	r2, r2, #16
 8001c4c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d108      	bne.n	8001c68 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0204 	orr.w	r2, r2, #4
 8001c64:	619a      	str	r2, [r3, #24]
 8001c66:	e02c      	b.n	8001cc2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d028      	beq.n	8001cc2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d01c      	beq.n	8001cb2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699a      	ldr	r2, [r3, #24]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c86:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0210 	orr.w	r2, r2, #16
 8001c96:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d110      	bne.n	8001cc2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699a      	ldr	r2, [r3, #24]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0220 	orr.w	r2, r2, #32
 8001cae:	619a      	str	r2, [r3, #24]
 8001cb0:	e007      	b.n	8001cc2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699a      	ldr	r2, [r3, #24]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0220 	orr.w	r2, r2, #32
 8001cc0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001cd2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001cda:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001cea:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001cec:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001cf6:	d115      	bne.n	8001d24 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d02:	3b01      	subs	r3, #1
 8001d04:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d06:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001d10:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001d20:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d22:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f814 	bl	8001d68 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40006400 	.word	0x40006400
 8001d64:	40006500 	.word	0x40006500

08001d68 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001d70:	4b2c      	ldr	r3, [pc, #176]	@ (8001e24 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001d72:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a2b      	ldr	r2, [pc, #172]	@ (8001e28 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d103      	bne.n	8001d86 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001d84:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d94:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d9c:	041a      	lsls	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dba:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dc2:	061a      	lsls	r2, r3, #24
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	e005      	b.n	8001e08 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3304      	adds	r3, #4
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d3f3      	bcc.n	8001dfc <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	4000a400 	.word	0x4000a400
 8001e28:	40006800 	.word	0x40006800

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e3a:	e15a      	b.n	80020f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 814c 	beq.w	80020ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d005      	beq.n	8001e6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d130      	bne.n	8001ece <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	f003 0201 	and.w	r2, r3, #1
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d017      	beq.n	8001f0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d123      	bne.n	8001f5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	08da      	lsrs	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3208      	adds	r2, #8
 8001f58:	6939      	ldr	r1, [r7, #16]
 8001f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0203 	and.w	r2, r3, #3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 80a6 	beq.w	80020ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa0:	4b5b      	ldr	r3, [pc, #364]	@ (8002110 <HAL_GPIO_Init+0x2e4>)
 8001fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa4:	4a5a      	ldr	r2, [pc, #360]	@ (8002110 <HAL_GPIO_Init+0x2e4>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fac:	4b58      	ldr	r3, [pc, #352]	@ (8002110 <HAL_GPIO_Init+0x2e4>)
 8001fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb8:	4a56      	ldr	r2, [pc, #344]	@ (8002114 <HAL_GPIO_Init+0x2e8>)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	220f      	movs	r2, #15
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001fe2:	d01f      	beq.n	8002024 <HAL_GPIO_Init+0x1f8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a4c      	ldr	r2, [pc, #304]	@ (8002118 <HAL_GPIO_Init+0x2ec>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d019      	beq.n	8002020 <HAL_GPIO_Init+0x1f4>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a4b      	ldr	r2, [pc, #300]	@ (800211c <HAL_GPIO_Init+0x2f0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <HAL_GPIO_Init+0x1f0>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a4a      	ldr	r2, [pc, #296]	@ (8002120 <HAL_GPIO_Init+0x2f4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00d      	beq.n	8002018 <HAL_GPIO_Init+0x1ec>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a49      	ldr	r2, [pc, #292]	@ (8002124 <HAL_GPIO_Init+0x2f8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d007      	beq.n	8002014 <HAL_GPIO_Init+0x1e8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a48      	ldr	r2, [pc, #288]	@ (8002128 <HAL_GPIO_Init+0x2fc>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_GPIO_Init+0x1e4>
 800200c:	2305      	movs	r3, #5
 800200e:	e00a      	b.n	8002026 <HAL_GPIO_Init+0x1fa>
 8002010:	2306      	movs	r3, #6
 8002012:	e008      	b.n	8002026 <HAL_GPIO_Init+0x1fa>
 8002014:	2304      	movs	r3, #4
 8002016:	e006      	b.n	8002026 <HAL_GPIO_Init+0x1fa>
 8002018:	2303      	movs	r3, #3
 800201a:	e004      	b.n	8002026 <HAL_GPIO_Init+0x1fa>
 800201c:	2302      	movs	r3, #2
 800201e:	e002      	b.n	8002026 <HAL_GPIO_Init+0x1fa>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_GPIO_Init+0x1fa>
 8002024:	2300      	movs	r3, #0
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	f002 0203 	and.w	r2, r2, #3
 800202c:	0092      	lsls	r2, r2, #2
 800202e:	4093      	lsls	r3, r2
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002036:	4937      	ldr	r1, [pc, #220]	@ (8002114 <HAL_GPIO_Init+0x2e8>)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002044:	4b39      	ldr	r3, [pc, #228]	@ (800212c <HAL_GPIO_Init+0x300>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002068:	4a30      	ldr	r2, [pc, #192]	@ (800212c <HAL_GPIO_Init+0x300>)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800206e:	4b2f      	ldr	r3, [pc, #188]	@ (800212c <HAL_GPIO_Init+0x300>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002092:	4a26      	ldr	r2, [pc, #152]	@ (800212c <HAL_GPIO_Init+0x300>)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002098:	4b24      	ldr	r3, [pc, #144]	@ (800212c <HAL_GPIO_Init+0x300>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020bc:	4a1b      	ldr	r2, [pc, #108]	@ (800212c <HAL_GPIO_Init+0x300>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <HAL_GPIO_Init+0x300>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020e6:	4a11      	ldr	r2, [pc, #68]	@ (800212c <HAL_GPIO_Init+0x300>)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3301      	adds	r3, #1
 80020f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f47f ae9d 	bne.w	8001e3c <HAL_GPIO_Init+0x10>
  }
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	371c      	adds	r7, #28
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40021000 	.word	0x40021000
 8002114:	40010000 	.word	0x40010000
 8002118:	48000400 	.word	0x48000400
 800211c:	48000800 	.word	0x48000800
 8002120:	48000c00 	.word	0x48000c00
 8002124:	48001000 	.word	0x48001000
 8002128:	48001400 	.word	0x48001400
 800212c:	40010400 	.word	0x40010400

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
 800213c:	4613      	mov	r3, r2
 800213e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002140:	787b      	ldrb	r3, [r7, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800214c:	e002      	b.n	8002154 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e08d      	b.n	800228e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff f8f4 	bl	8001374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2224      	movs	r2, #36	@ 0x24
 8002190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d107      	bne.n	80021da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	e006      	b.n	80021e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80021e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d108      	bne.n	8002202 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	e007      	b.n	8002212 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002210:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002224:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002234:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69d9      	ldr	r1, [r3, #28]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1a      	ldr	r2, [r3, #32]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2220      	movs	r2, #32
 800227a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d138      	bne.n	800231e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e032      	b.n	8002320 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2224      	movs	r2, #36	@ 0x24
 80022c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0201 	bic.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022e8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0201 	orr.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800231e:	2302      	movs	r3, #2
  }
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b20      	cmp	r3, #32
 8002340:	d139      	bne.n	80023b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800234c:	2302      	movs	r3, #2
 800234e:	e033      	b.n	80023b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2224      	movs	r2, #36	@ 0x24
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0201 	bic.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800237e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0201 	orr.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e000      	b.n	80023b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023b6:	2302      	movs	r3, #2
  }
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0c0      	b.n	8002558 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f007 fc86 	bl	8009cfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2203      	movs	r2, #3
 80023f4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 ffb4 	bl	800636a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
 8002406:	e03e      	b.n	8002486 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	3311      	adds	r3, #17
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	3310      	adds	r3, #16
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002430:	7bfa      	ldrb	r2, [r7, #15]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	440b      	add	r3, r1
 800243e:	3313      	adds	r3, #19
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	3320      	adds	r3, #32
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002458:	7bfa      	ldrb	r2, [r7, #15]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	3324      	adds	r3, #36	@ 0x24
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	3301      	adds	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	791b      	ldrb	r3, [r3, #4]
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	429a      	cmp	r2, r3
 800248e:	d3bb      	bcc.n	8002408 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	e044      	b.n	8002520 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	440b      	add	r3, r1
 80024a4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	440b      	add	r3, r1
 80024ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	440b      	add	r3, r1
 80024d0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	440b      	add	r3, r1
 80024e6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024ee:	7bfa      	ldrb	r2, [r7, #15]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	440b      	add	r3, r1
 80024fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002504:	7bfa      	ldrb	r2, [r7, #15]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	3301      	adds	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	791b      	ldrb	r3, [r3, #4]
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	429a      	cmp	r2, r3
 8002528:	d3b5      	bcc.n	8002496 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3304      	adds	r3, #4
 8002532:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002536:	f003 ff33 	bl	80063a0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	7a9b      	ldrb	r3, [r3, #10]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d102      	bne.n	8002556 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f001 fc0e 	bl	8003d72 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_PCD_Start+0x16>
 8002572:	2302      	movs	r3, #2
 8002574:	e012      	b.n	800259c <HAL_PCD_Start+0x3c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f003 feda 	bl	800633c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f005 fcb7 	bl	8007f00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f005 fcbc 	bl	8007f2e <USB_ReadInterrupts>
 80025b6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fb06 	bl	8002bd4 <PCD_EP_ISR_Handler>

    return;
 80025c8:	e110      	b.n	80027ec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025dc:	b29a      	uxth	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025e6:	b292      	uxth	r2, r2
 80025e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f007 fc16 	bl	8009e1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80025f2:	2100      	movs	r1, #0
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f8fc 	bl	80027f2 <HAL_PCD_SetAddress>

    return;
 80025fa:	e0f7      	b.n	80027ec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00c      	beq.n	8002620 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800260e:	b29a      	uxth	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002618:	b292      	uxth	r2, r2
 800261a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800261e:	e0e5      	b.n	80027ec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00c      	beq.n	8002644 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002632:	b29a      	uxth	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800263c:	b292      	uxth	r2, r2
 800263e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002642:	e0d3      	b.n	80027ec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d034      	beq.n	80026b8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002656:	b29a      	uxth	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0204 	bic.w	r2, r2, #4
 8002660:	b292      	uxth	r2, r2
 8002662:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800266e:	b29a      	uxth	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0208 	bic.w	r2, r2, #8
 8002678:	b292      	uxth	r2, r2
 800267a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002684:	2b01      	cmp	r3, #1
 8002686:	d107      	bne.n	8002698 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002690:	2100      	movs	r1, #0
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f007 fdb6 	bl	800a204 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f007 fbf9 	bl	8009e90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80026b0:	b292      	uxth	r2, r2
 80026b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80026b6:	e099      	b.n	80027ec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d027      	beq.n	8002712 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0208 	orr.w	r2, r2, #8
 80026d4:	b292      	uxth	r2, r2
 80026d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026ec:	b292      	uxth	r2, r2
 80026ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0204 	orr.w	r2, r2, #4
 8002704:	b292      	uxth	r2, r2
 8002706:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f007 fba6 	bl	8009e5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002710:	e06c      	b.n	80027ec <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002718:	2b00      	cmp	r3, #0
 800271a:	d040      	beq.n	800279e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002724:	b29a      	uxth	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800272e:	b292      	uxth	r2, r2
 8002730:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d12b      	bne.n	8002796 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002746:	b29a      	uxth	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0204 	orr.w	r2, r2, #4
 8002750:	b292      	uxth	r2, r2
 8002752:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800275e:	b29a      	uxth	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0208 	orr.w	r2, r2, #8
 8002768:	b292      	uxth	r2, r2
 800276a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800277e:	b29b      	uxth	r3, r3
 8002780:	089b      	lsrs	r3, r3, #2
 8002782:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800278c:	2101      	movs	r1, #1
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f007 fd38 	bl	800a204 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002794:	e02a      	b.n	80027ec <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f007 fb60 	bl	8009e5c <HAL_PCD_SuspendCallback>
    return;
 800279c:	e026      	b.n	80027ec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00f      	beq.n	80027c8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027ba:	b292      	uxth	r2, r2
 80027bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f007 fb1e 	bl	8009e02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80027c6:	e011      	b.n	80027ec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00c      	beq.n	80027ec <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027da:	b29a      	uxth	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027e4:	b292      	uxth	r2, r2
 80027e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80027ea:	bf00      	nop
  }
}
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_PCD_SetAddress+0x1a>
 8002808:	2302      	movs	r3, #2
 800280a:	e012      	b.n	8002832 <HAL_PCD_SetAddress+0x40>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f005 fb58 	bl	8007ed8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	4608      	mov	r0, r1
 8002844:	4611      	mov	r1, r2
 8002846:	461a      	mov	r2, r3
 8002848:	4603      	mov	r3, r0
 800284a:	70fb      	strb	r3, [r7, #3]
 800284c:	460b      	mov	r3, r1
 800284e:	803b      	strh	r3, [r7, #0]
 8002850:	4613      	mov	r3, r2
 8002852:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800285c:	2b00      	cmp	r3, #0
 800285e:	da0e      	bge.n	800287e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	f003 0207 	and.w	r2, r3, #7
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	3310      	adds	r3, #16
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4413      	add	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	705a      	strb	r2, [r3, #1]
 800287c:	e00e      	b.n	800289c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	f003 0207 	and.w	r2, r3, #7
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80028a8:	883b      	ldrh	r3, [r7, #0]
 80028aa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	78ba      	ldrb	r2, [r7, #2]
 80028b6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028b8:	78bb      	ldrb	r3, [r7, #2]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d102      	bne.n	80028c4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_PCD_EP_Open+0x98>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e00e      	b.n	80028f0 <HAL_PCD_EP_Open+0xb6>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68f9      	ldr	r1, [r7, #12]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 fd7b 	bl	80063dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80028ee:	7afb      	ldrb	r3, [r7, #11]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002908:	2b00      	cmp	r3, #0
 800290a:	da0e      	bge.n	800292a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	f003 0207 	and.w	r2, r3, #7
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	3310      	adds	r3, #16
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	4413      	add	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	705a      	strb	r2, [r3, #1]
 8002928:	e00e      	b.n	8002948 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	f003 0207 	and.w	r2, r3, #7
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	4413      	add	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	b2da      	uxtb	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_PCD_EP_Close+0x6a>
 800295e:	2302      	movs	r3, #2
 8002960:	e00e      	b.n	8002980 <HAL_PCD_EP_Close+0x88>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68f9      	ldr	r1, [r7, #12]
 8002970:	4618      	mov	r0, r3
 8002972:	f004 fa1b 	bl	8006dac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	460b      	mov	r3, r1
 8002996:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002998:	7afb      	ldrb	r3, [r7, #11]
 800299a:	f003 0207 	and.w	r2, r3, #7
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4413      	add	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2200      	movs	r2, #0
 80029c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2200      	movs	r2, #0
 80029c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029c8:	7afb      	ldrb	r3, [r7, #11]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6979      	ldr	r1, [r7, #20]
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 fbd3 	bl	8007186 <USB_EPStartXfer>

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	f003 0207 	and.w	r2, r3, #7
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	440b      	add	r3, r1
 8002a08:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002a0c:	681b      	ldr	r3, [r3, #0]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b086      	sub	sp, #24
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
 8002a26:	460b      	mov	r3, r1
 8002a28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2a:	7afb      	ldrb	r3, [r7, #11]
 8002a2c:	f003 0207 	and.w	r2, r3, #7
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	3310      	adds	r3, #16
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2201      	movs	r2, #1
 8002a64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a66:	7afb      	ldrb	r3, [r7, #11]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6979      	ldr	r1, [r7, #20]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f004 fb84 	bl	8007186 <USB_EPStartXfer>

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	7912      	ldrb	r2, [r2, #4]
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e03e      	b.n	8002b24 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	da0e      	bge.n	8002acc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 0207 	and.w	r2, r3, #7
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	3310      	adds	r3, #16
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	705a      	strb	r2, [r3, #1]
 8002aca:	e00c      	b.n	8002ae6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_PCD_EP_SetStall+0x7e>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e00e      	b.n	8002b24 <HAL_PCD_EP_SetStall+0x9c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68f9      	ldr	r1, [r7, #12]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f005 f8e5 	bl	8007ce4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b38:	78fb      	ldrb	r3, [r7, #3]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	7912      	ldrb	r2, [r2, #4]
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e040      	b.n	8002bcc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	da0e      	bge.n	8002b70 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b52:	78fb      	ldrb	r3, [r7, #3]
 8002b54:	f003 0207 	and.w	r2, r3, #7
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	3310      	adds	r3, #16
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	705a      	strb	r2, [r3, #1]
 8002b6e:	e00e      	b.n	8002b8e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	f003 0207 	and.w	r2, r3, #7
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_PCD_EP_ClrStall+0x82>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e00e      	b.n	8002bcc <HAL_PCD_EP_ClrStall+0xa0>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68f9      	ldr	r1, [r7, #12]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f005 f8e2 	bl	8007d86 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b092      	sub	sp, #72	@ 0x48
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bdc:	e333      	b.n	8003246 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002be6:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002be8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8002bf4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f040 8108 	bne.w	8002e0e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002bfe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d14c      	bne.n	8002ca2 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c18:	813b      	strh	r3, [r7, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	893b      	ldrh	r3, [r7, #8]
 8002c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3310      	adds	r3, #16
 8002c30:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4413      	add	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c58:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002c5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	441a      	add	r2, r3
 8002c64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c66:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c68:	2100      	movs	r1, #0
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f007 f8af 	bl	8009dce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7b1b      	ldrb	r3, [r3, #12]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 82e5 	beq.w	8003246 <PCD_EP_ISR_Handler+0x672>
 8002c7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f040 82e0 	bne.w	8003246 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7b1b      	ldrb	r3, [r3, #12]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	731a      	strb	r2, [r3, #12]
 8002ca0:	e2d1      	b.n	8003246 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ca8:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002cb2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002cb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d032      	beq.n	8002d22 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4413      	add	r3, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cf0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cf4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	f005 f96b 	bl	8007fd2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002d08:	4013      	ands	r3, r2
 8002d0a:	817b      	strh	r3, [r7, #10]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	897a      	ldrh	r2, [r7, #10]
 8002d12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d16:	b292      	uxth	r2, r2
 8002d18:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f007 f82a 	bl	8009d74 <HAL_PCD_SetupStageCallback>
 8002d20:	e291      	b.n	8003246 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d22:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f280 828d 	bge.w	8003246 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002d38:	4013      	ands	r3, r2
 8002d3a:	81fb      	strh	r3, [r7, #14]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	89fa      	ldrh	r2, [r7, #14]
 8002d42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d46:	b292      	uxth	r2, r2
 8002d48:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d70:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d019      	beq.n	8002dae <PCD_EP_ISR_Handler+0x1da>
 8002d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d015      	beq.n	8002dae <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d88:	6959      	ldr	r1, [r3, #20]
 8002d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d8c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d90:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f005 f91d 	bl	8007fd2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d9a:	695a      	ldr	r2, [r3, #20]
 8002d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	441a      	add	r2, r3
 8002da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002da4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002da6:	2100      	movs	r1, #0
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f006 fff5 	bl	8009d98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002db6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002db8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f040 8242 	bne.w	8003246 <PCD_EP_ISR_Handler+0x672>
 8002dc2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002dc4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002dc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002dcc:	f000 823b 	beq.w	8003246 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002de0:	81bb      	strh	r3, [r7, #12]
 8002de2:	89bb      	ldrh	r3, [r7, #12]
 8002de4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002de8:	81bb      	strh	r3, [r7, #12]
 8002dea:	89bb      	ldrh	r3, [r7, #12]
 8002dec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002df0:	81bb      	strh	r3, [r7, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	89bb      	ldrh	r3, [r7, #12]
 8002df8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002dfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	8013      	strh	r3, [r2, #0]
 8002e0c:	e21b      	b.n	8003246 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e20:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f280 80f1 	bge.w	800300c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002e40:	4013      	ands	r3, r2
 8002e42:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002e54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e58:	b292      	uxth	r2, r2
 8002e5a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e5c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	4413      	add	r3, r2
 8002e70:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e74:	7b1b      	ldrb	r3, [r3, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d123      	bne.n	8002ec2 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e9e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8002ea2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 808b 	beq.w	8002fc2 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb2:	6959      	ldr	r1, [r3, #20]
 8002eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb6:	88da      	ldrh	r2, [r3, #6]
 8002eb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002ebc:	f005 f889 	bl	8007fd2 <USB_ReadPMA>
 8002ec0:	e07f      	b.n	8002fc2 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ec4:	78db      	ldrb	r3, [r3, #3]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d109      	bne.n	8002ede <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002eca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f9c6 	bl	8003262 <HAL_PCD_EP_DB_Receive>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002edc:	e071      	b.n	8002fc2 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ef8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	441a      	add	r2, r3
 8002f08:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002f0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d022      	beq.n	8002f7e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	4413      	add	r3, r2
 8002f52:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f5c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002f60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d02c      	beq.n	8002fc2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f6e:	6959      	ldr	r1, [r3, #20]
 8002f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f72:	891a      	ldrh	r2, [r3, #8]
 8002f74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f78:	f005 f82b 	bl	8007fd2 <USB_ReadPMA>
 8002f7c:	e021      	b.n	8002fc2 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	4413      	add	r3, r2
 8002f98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fa2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002fa6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fb4:	6959      	ldr	r1, [r3, #20]
 8002fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fb8:	895a      	ldrh	r2, [r3, #10]
 8002fba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002fbe:	f005 f808 	bl	8007fd2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fc4:	69da      	ldr	r2, [r3, #28]
 8002fc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002fca:	441a      	add	r2, r3
 8002fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002fd8:	441a      	add	r2, r3
 8002fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fdc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d005      	beq.n	8002ff2 <PCD_EP_ISR_Handler+0x41e>
 8002fe6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d206      	bcs.n	8003000 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f006 fecd 	bl	8009d98 <HAL_PCD_DataOutStageCallback>
 8002ffe:	e005      	b.n	800300c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003006:	4618      	mov	r0, r3
 8003008:	f004 f8bd 	bl	8007186 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800300c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800300e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8117 	beq.w	8003246 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003018:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	3310      	adds	r3, #16
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	b29b      	uxth	r3, r3
 800303e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003046:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	441a      	add	r2, r3
 8003056:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800305c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003060:	b29b      	uxth	r3, r3
 8003062:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003066:	78db      	ldrb	r3, [r3, #3]
 8003068:	2b01      	cmp	r3, #1
 800306a:	f040 80a1 	bne.w	80031b0 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800306e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003070:	2200      	movs	r2, #0
 8003072:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003076:	7b1b      	ldrb	r3, [r3, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8092 	beq.w	80031a2 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800307e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003084:	2b00      	cmp	r3, #0
 8003086:	d046      	beq.n	8003116 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800308a:	785b      	ldrb	r3, [r3, #1]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d126      	bne.n	80030de <PCD_EP_ISR_Handler+0x50a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800309e:	b29b      	uxth	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	4413      	add	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	00da      	lsls	r2, r3, #3
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	4413      	add	r3, r2
 80030b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	801a      	strh	r2, [r3, #0]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	801a      	strh	r2, [r3, #0]
 80030dc:	e061      	b.n	80031a2 <PCD_EP_ISR_Handler+0x5ce>
 80030de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030e0:	785b      	ldrb	r3, [r3, #1]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d15d      	bne.n	80031a2 <PCD_EP_ISR_Handler+0x5ce>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	4413      	add	r3, r2
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	00da      	lsls	r2, r3, #3
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	4413      	add	r3, r2
 8003108:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2200      	movs	r2, #0
 8003112:	801a      	strh	r2, [r3, #0]
 8003114:	e045      	b.n	80031a2 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800311c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800311e:	785b      	ldrb	r3, [r3, #1]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d126      	bne.n	8003172 <PCD_EP_ISR_Handler+0x59e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003132:	b29b      	uxth	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003138:	4413      	add	r3, r2
 800313a:	627b      	str	r3, [r7, #36]	@ 0x24
 800313c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	00da      	lsls	r2, r3, #3
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	4413      	add	r3, r2
 8003146:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800314a:	623b      	str	r3, [r7, #32]
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	b29b      	uxth	r3, r3
 8003152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003156:	b29a      	uxth	r2, r3
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	801a      	strh	r2, [r3, #0]
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800316a:	b29a      	uxth	r2, r3
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	801a      	strh	r2, [r3, #0]
 8003170:	e017      	b.n	80031a2 <PCD_EP_ISR_Handler+0x5ce>
 8003172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003174:	785b      	ldrb	r3, [r3, #1]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d113      	bne.n	80031a2 <PCD_EP_ISR_Handler+0x5ce>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003182:	b29b      	uxth	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003188:	4413      	add	r3, r2
 800318a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800318c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	00da      	lsls	r2, r3, #3
 8003192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003194:	4413      	add	r3, r2
 8003196:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800319a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800319c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319e:	2200      	movs	r2, #0
 80031a0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	4619      	mov	r1, r3
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f006 fe10 	bl	8009dce <HAL_PCD_DataInStageCallback>
 80031ae:	e04a      	b.n	8003246 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80031b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80031b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d13f      	bne.n	800323a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	461a      	mov	r2, r3
 80031c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4413      	add	r3, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031de:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80031e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031e2:	699a      	ldr	r2, [r3, #24]
 80031e4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d906      	bls.n	80031f8 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80031ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80031f0:	1ad2      	subs	r2, r2, r3
 80031f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031f4:	619a      	str	r2, [r3, #24]
 80031f6:	e002      	b.n	80031fe <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80031f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031fa:	2200      	movs	r2, #0
 80031fc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80031fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	4619      	mov	r1, r3
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f006 fdde 	bl	8009dce <HAL_PCD_DataInStageCallback>
 8003212:	e018      	b.n	8003246 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800321a:	441a      	add	r2, r3
 800321c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800321e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003226:	441a      	add	r2, r3
 8003228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800322a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003232:	4618      	mov	r0, r3
 8003234:	f003 ffa7 	bl	8007186 <USB_EPStartXfer>
 8003238:	e005      	b.n	8003246 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800323a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800323c:	461a      	mov	r2, r3
 800323e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f917 	bl	8003474 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800324e:	b29b      	uxth	r3, r3
 8003250:	b21b      	sxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	f6ff acc3 	blt.w	8002bde <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3748      	adds	r7, #72	@ 0x48
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b088      	sub	sp, #32
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	4613      	mov	r3, r2
 800326e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d07c      	beq.n	8003374 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003282:	b29b      	uxth	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	4413      	add	r3, r2
 8003294:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800329e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	699a      	ldr	r2, [r3, #24]
 80032a4:	8b7b      	ldrh	r3, [r7, #26]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d306      	bcc.n	80032b8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	8b7b      	ldrh	r3, [r7, #26]
 80032b0:	1ad2      	subs	r2, r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	619a      	str	r2, [r3, #24]
 80032b6:	e002      	b.n	80032be <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2200      	movs	r2, #0
 80032bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d123      	bne.n	800330e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e0:	833b      	strh	r3, [r7, #24]
 80032e2:	8b3b      	ldrh	r3, [r7, #24]
 80032e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80032e8:	833b      	strh	r3, [r7, #24]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	441a      	add	r2, r3
 80032f8:	8b3b      	ldrh	r3, [r7, #24]
 80032fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003302:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800330a:	b29b      	uxth	r3, r3
 800330c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01f      	beq.n	8003358 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	b29b      	uxth	r3, r3
 800332a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800332e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003332:	82fb      	strh	r3, [r7, #22]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	441a      	add	r2, r3
 8003342:	8afb      	ldrh	r3, [r7, #22]
 8003344:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003348:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800334c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003350:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003354:	b29b      	uxth	r3, r3
 8003356:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003358:	8b7b      	ldrh	r3, [r7, #26]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8085 	beq.w	800346a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	6959      	ldr	r1, [r3, #20]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	891a      	ldrh	r2, [r3, #8]
 800336c:	8b7b      	ldrh	r3, [r7, #26]
 800336e:	f004 fe30 	bl	8007fd2 <USB_ReadPMA>
 8003372:	e07a      	b.n	800346a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800337c:	b29b      	uxth	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4413      	add	r3, r2
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	4413      	add	r3, r2
 800338e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003398:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	8b7b      	ldrh	r3, [r7, #26]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d306      	bcc.n	80033b2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	8b7b      	ldrh	r3, [r7, #26]
 80033aa:	1ad2      	subs	r2, r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	619a      	str	r2, [r3, #24]
 80033b0:	e002      	b.n	80033b8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2200      	movs	r2, #0
 80033b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d123      	bne.n	8003408 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033da:	83fb      	strh	r3, [r7, #30]
 80033dc:	8bfb      	ldrh	r3, [r7, #30]
 80033de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80033e2:	83fb      	strh	r3, [r7, #30]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	441a      	add	r2, r3
 80033f2:	8bfb      	ldrh	r3, [r7, #30]
 80033f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003404:	b29b      	uxth	r3, r3
 8003406:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d11f      	bne.n	8003452 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800342c:	83bb      	strh	r3, [r7, #28]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	441a      	add	r2, r3
 800343c:	8bbb      	ldrh	r3, [r7, #28]
 800343e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800344a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800344e:	b29b      	uxth	r3, r3
 8003450:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003452:	8b7b      	ldrh	r3, [r7, #26]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	6959      	ldr	r1, [r3, #20]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	895a      	ldrh	r2, [r3, #10]
 8003464:	8b7b      	ldrh	r3, [r7, #26]
 8003466:	f004 fdb4 	bl	8007fd2 <USB_ReadPMA>
    }
  }

  return count;
 800346a:	8b7b      	ldrh	r3, [r7, #26]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3720      	adds	r7, #32
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b0a6      	sub	sp, #152	@ 0x98
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	4613      	mov	r3, r2
 8003480:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 81f7 	beq.w	800387c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003496:	b29b      	uxth	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	4413      	add	r3, r2
 80034a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80034be:	429a      	cmp	r2, r3
 80034c0:	d907      	bls.n	80034d2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80034ca:	1ad2      	subs	r2, r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	619a      	str	r2, [r3, #24]
 80034d0:	e002      	b.n	80034d8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2200      	movs	r2, #0
 80034d6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f040 80e1 	bne.w	80036a4 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	785b      	ldrb	r3, [r3, #1]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d126      	bne.n	8003538 <HAL_PCD_EP_DB_Transmit+0xc4>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fe:	4413      	add	r3, r2
 8003500:	633b      	str	r3, [r7, #48]	@ 0x30
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	00da      	lsls	r2, r3, #3
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	4413      	add	r3, r2
 800350c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800351c:	b29a      	uxth	r2, r3
 800351e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003520:	801a      	strh	r2, [r3, #0]
 8003522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800352c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003530:	b29a      	uxth	r2, r3
 8003532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003534:	801a      	strh	r2, [r3, #0]
 8003536:	e01a      	b.n	800356e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	785b      	ldrb	r3, [r3, #1]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d116      	bne.n	800356e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800354e:	b29b      	uxth	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003554:	4413      	add	r3, r2
 8003556:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	00da      	lsls	r2, r3, #3
 800355e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003560:	4413      	add	r3, r2
 8003562:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003566:	637b      	str	r3, [r7, #52]	@ 0x34
 8003568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356a:	2200      	movs	r2, #0
 800356c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	785b      	ldrb	r3, [r3, #1]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d126      	bne.n	80035ca <HAL_PCD_EP_DB_Transmit+0x156>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	623b      	str	r3, [r7, #32]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800358a:	b29b      	uxth	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	4413      	add	r3, r2
 8003592:	623b      	str	r3, [r7, #32]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	00da      	lsls	r2, r3, #3
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	4413      	add	r3, r2
 800359e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80035a2:	61fb      	str	r3, [r7, #28]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	801a      	strh	r2, [r3, #0]
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	801a      	strh	r2, [r3, #0]
 80035c8:	e017      	b.n	80035fa <HAL_PCD_EP_DB_Transmit+0x186>
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	785b      	ldrb	r3, [r3, #1]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d113      	bne.n	80035fa <HAL_PCD_EP_DB_Transmit+0x186>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035da:	b29b      	uxth	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e0:	4413      	add	r3, r2
 80035e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	00da      	lsls	r2, r3, #3
 80035ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ec:	4413      	add	r3, r2
 80035ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80035f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f6:	2200      	movs	r2, #0
 80035f8:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	78db      	ldrb	r3, [r3, #3]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d123      	bne.n	800364a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	b29b      	uxth	r3, r3
 8003614:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800361c:	837b      	strh	r3, [r7, #26]
 800361e:	8b7b      	ldrh	r3, [r7, #26]
 8003620:	f083 0320 	eor.w	r3, r3, #32
 8003624:	837b      	strh	r3, [r7, #26]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	441a      	add	r2, r3
 8003634:	8b7b      	ldrh	r3, [r7, #26]
 8003636:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800363a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800363e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003646:	b29b      	uxth	r3, r3
 8003648:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	4619      	mov	r1, r3
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f006 fbbc 	bl	8009dce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01f      	beq.n	80036a0 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	b29b      	uxth	r3, r3
 8003672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800367a:	833b      	strh	r3, [r7, #24]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	441a      	add	r2, r3
 800368a:	8b3b      	ldrh	r3, [r7, #24]
 800368c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003690:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003694:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800369c:	b29b      	uxth	r3, r3
 800369e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e31f      	b.n	8003ce4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d021      	beq.n	80036f2 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	441a      	add	r2, r3
 80036da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80036de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	f040 82ca 	bne.w	8003c92 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003706:	441a      	add	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003714:	441a      	add	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	429a      	cmp	r2, r3
 8003724:	d309      	bcc.n	800373a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	6a1a      	ldr	r2, [r3, #32]
 8003730:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003732:	1ad2      	subs	r2, r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	621a      	str	r2, [r3, #32]
 8003738:	e015      	b.n	8003766 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d107      	bne.n	8003752 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003742:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003746:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003750:	e009      	b.n	8003766 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2200      	movs	r2, #0
 8003764:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	785b      	ldrb	r3, [r3, #1]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d15f      	bne.n	800382e <HAL_PCD_EP_DB_Transmit+0x3ba>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	643b      	str	r3, [r7, #64]	@ 0x40
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800377c:	b29b      	uxth	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003782:	4413      	add	r3, r2
 8003784:	643b      	str	r3, [r7, #64]	@ 0x40
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	00da      	lsls	r2, r3, #3
 800378c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800378e:	4413      	add	r3, r2
 8003790:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a4:	801a      	strh	r2, [r3, #0]
 80037a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <HAL_PCD_EP_DB_Transmit+0x34e>
 80037ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037be:	801a      	strh	r2, [r3, #0]
 80037c0:	e051      	b.n	8003866 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80037c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80037c6:	d816      	bhi.n	80037f6 <HAL_PCD_EP_DB_Transmit+0x382>
 80037c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80037ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <HAL_PCD_EP_DB_Transmit+0x36a>
 80037d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037da:	3301      	adds	r3, #1
 80037dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80037de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	029b      	lsls	r3, r3, #10
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	4313      	orrs	r3, r2
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037f2:	801a      	strh	r2, [r3, #0]
 80037f4:	e037      	b.n	8003866 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80037f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80037fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	2b00      	cmp	r3, #0
 8003804:	d102      	bne.n	800380c <HAL_PCD_EP_DB_Transmit+0x398>
 8003806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003808:	3b01      	subs	r3, #1
 800380a:	653b      	str	r3, [r7, #80]	@ 0x50
 800380c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	b29a      	uxth	r2, r3
 8003812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003814:	b29b      	uxth	r3, r3
 8003816:	029b      	lsls	r3, r3, #10
 8003818:	b29b      	uxth	r3, r3
 800381a:	4313      	orrs	r3, r2
 800381c:	b29b      	uxth	r3, r3
 800381e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003826:	b29a      	uxth	r2, r3
 8003828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800382a:	801a      	strh	r2, [r3, #0]
 800382c:	e01b      	b.n	8003866 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	785b      	ldrb	r3, [r3, #1]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d117      	bne.n	8003866 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003844:	b29b      	uxth	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800384a:	4413      	add	r3, r2
 800384c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	00da      	lsls	r2, r3, #3
 8003854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003856:	4413      	add	r3, r2
 8003858:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800385c:	647b      	str	r3, [r7, #68]	@ 0x44
 800385e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003860:	b29a      	uxth	r2, r3
 8003862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003864:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	6959      	ldr	r1, [r3, #20]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	891a      	ldrh	r2, [r3, #8]
 8003872:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003874:	b29b      	uxth	r3, r3
 8003876:	f004 fb6a 	bl	8007f4e <USB_WritePMA>
 800387a:	e20a      	b.n	8003c92 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003884:	b29b      	uxth	r3, r3
 8003886:	461a      	mov	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4413      	add	r3, r2
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	4413      	add	r3, r2
 8003896:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038a0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	699a      	ldr	r2, [r3, #24]
 80038a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d307      	bcc.n	80038c0 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80038b8:	1ad2      	subs	r2, r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	619a      	str	r2, [r3, #24]
 80038be:	e002      	b.n	80038c6 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2200      	movs	r2, #0
 80038c4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f040 80f6 	bne.w	8003abc <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	785b      	ldrb	r3, [r3, #1]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d126      	bne.n	8003926 <HAL_PCD_EP_DB_Transmit+0x4b2>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ec:	4413      	add	r3, r2
 80038ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	00da      	lsls	r2, r3, #3
 80038f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038f8:	4413      	add	r3, r2
 80038fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80038fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8003900:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800390a:	b29a      	uxth	r2, r3
 800390c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800390e:	801a      	strh	r2, [r3, #0]
 8003910:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	b29b      	uxth	r3, r3
 8003916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800391a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800391e:	b29a      	uxth	r2, r3
 8003920:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003922:	801a      	strh	r2, [r3, #0]
 8003924:	e01a      	b.n	800395c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	785b      	ldrb	r3, [r3, #1]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d116      	bne.n	800395c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800393c:	b29b      	uxth	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003942:	4413      	add	r3, r2
 8003944:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	00da      	lsls	r2, r3, #3
 800394c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800394e:	4413      	add	r3, r2
 8003950:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003954:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003956:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003958:	2200      	movs	r2, #0
 800395a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	785b      	ldrb	r3, [r3, #1]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d12f      	bne.n	80039cc <HAL_PCD_EP_DB_Transmit+0x558>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800397c:	b29b      	uxth	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003984:	4413      	add	r3, r2
 8003986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	00da      	lsls	r2, r3, #3
 8003990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003994:	4413      	add	r3, r2
 8003996:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800399a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800399e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039b0:	801a      	strh	r2, [r3, #0]
 80039b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039c8:	801a      	strh	r2, [r3, #0]
 80039ca:	e01c      	b.n	8003a06 <HAL_PCD_EP_DB_Transmit+0x592>
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	785b      	ldrb	r3, [r3, #1]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d118      	bne.n	8003a06 <HAL_PCD_EP_DB_Transmit+0x592>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039dc:	b29b      	uxth	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039e4:	4413      	add	r3, r2
 80039e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	00da      	lsls	r2, r3, #3
 80039f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039f4:	4413      	add	r3, r2
 80039f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80039fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a02:	2200      	movs	r2, #0
 8003a04:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	78db      	ldrb	r3, [r3, #3]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d127      	bne.n	8003a5e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a28:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003a2c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003a30:	f083 0320 	eor.w	r3, r3, #32
 8003a34:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	441a      	add	r2, r3
 8003a46:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003a4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	4619      	mov	r1, r3
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f006 f9b2 	bl	8009dce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d121      	bne.n	8003ab8 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a8e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	441a      	add	r2, r3
 8003aa0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8003aa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e113      	b.n	8003ce4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d121      	bne.n	8003b0a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ae0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	441a      	add	r2, r3
 8003af2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003af6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003afa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003afe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	f040 80be 	bne.w	8003c92 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003b1e:	441a      	add	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003b2c:	441a      	add	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	6a1a      	ldr	r2, [r3, #32]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d309      	bcc.n	8003b52 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b4a:	1ad2      	subs	r2, r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	621a      	str	r2, [r3, #32]
 8003b50:	e015      	b.n	8003b7e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d107      	bne.n	8003b6a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8003b5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003b5e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003b68:	e009      	b.n	8003b7e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2200      	movs	r2, #0
 8003b74:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	785b      	ldrb	r3, [r3, #1]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d15f      	bne.n	8003c4c <HAL_PCD_EP_DB_Transmit+0x7d8>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ba0:	4413      	add	r3, r2
 8003ba2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	00da      	lsls	r2, r3, #3
 8003baa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bac:	4413      	add	r3, r2
 8003bae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003bb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bc2:	801a      	strh	r2, [r3, #0]
 8003bc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <HAL_PCD_EP_DB_Transmit+0x76c>
 8003bca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bdc:	801a      	strh	r2, [r3, #0]
 8003bde:	e04e      	b.n	8003c7e <HAL_PCD_EP_DB_Transmit+0x80a>
 8003be0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003be2:	2b3e      	cmp	r3, #62	@ 0x3e
 8003be4:	d816      	bhi.n	8003c14 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003be6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_PCD_EP_DB_Transmit+0x788>
 8003bf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	029b      	lsls	r3, r3, #10
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c10:	801a      	strh	r2, [r3, #0]
 8003c12:	e034      	b.n	8003c7e <HAL_PCD_EP_DB_Transmit+0x80a>
 8003c14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d102      	bne.n	8003c2a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003c24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c26:	3b01      	subs	r3, #1
 8003c28:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	029b      	lsls	r3, r3, #10
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c48:	801a      	strh	r2, [r3, #0]
 8003c4a:	e018      	b.n	8003c7e <HAL_PCD_EP_DB_Transmit+0x80a>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	785b      	ldrb	r3, [r3, #1]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d114      	bne.n	8003c7e <HAL_PCD_EP_DB_Transmit+0x80a>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	461a      	mov	r2, r3
 8003c60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c62:	4413      	add	r3, r2
 8003c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	00da      	lsls	r2, r3, #3
 8003c6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c6e:	4413      	add	r3, r2
 8003c70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c74:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c7c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6959      	ldr	r1, [r3, #20]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	895a      	ldrh	r2, [r3, #10]
 8003c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f004 f95e 	bl	8007f4e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ca8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cac:	82fb      	strh	r3, [r7, #22]
 8003cae:	8afb      	ldrh	r3, [r7, #22]
 8003cb0:	f083 0310 	eor.w	r3, r3, #16
 8003cb4:	82fb      	strh	r3, [r7, #22]
 8003cb6:	8afb      	ldrh	r3, [r7, #22]
 8003cb8:	f083 0320 	eor.w	r3, r3, #32
 8003cbc:	82fb      	strh	r3, [r7, #22]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	441a      	add	r2, r3
 8003ccc:	8afb      	ldrh	r3, [r7, #22]
 8003cce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3798      	adds	r7, #152	@ 0x98
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	817b      	strh	r3, [r7, #10]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003cfe:	897b      	ldrh	r3, [r7, #10]
 8003d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00b      	beq.n	8003d22 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d0a:	897b      	ldrh	r3, [r7, #10]
 8003d0c:	f003 0207 	and.w	r2, r3, #7
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	3310      	adds	r3, #16
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e009      	b.n	8003d36 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d22:	897a      	ldrh	r2, [r7, #10]
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d36:	893b      	ldrh	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d107      	bne.n	8003d4c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	80da      	strh	r2, [r3, #6]
 8003d4a:	e00b      	b.n	8003d64 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	0c1b      	lsrs	r3, r3, #16
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f043 0302 	orr.w	r3, r3, #2
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d141      	bne.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de2:	d131      	bne.n	8003e48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003de4:	4b47      	ldr	r3, [pc, #284]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dea:	4a46      	ldr	r2, [pc, #280]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003df0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003df4:	4b43      	ldr	r3, [pc, #268]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dfc:	4a41      	ldr	r2, [pc, #260]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e04:	4b40      	ldr	r3, [pc, #256]	@ (8003f08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2232      	movs	r2, #50	@ 0x32
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	0c9b      	lsrs	r3, r3, #18
 8003e16:	3301      	adds	r3, #1
 8003e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e1a:	e002      	b.n	8003e22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e22:	4b38      	ldr	r3, [pc, #224]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e2e:	d102      	bne.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f2      	bne.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e36:	4b33      	ldr	r3, [pc, #204]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e42:	d158      	bne.n	8003ef6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e057      	b.n	8003ef8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e48:	4b2e      	ldr	r3, [pc, #184]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e58:	e04d      	b.n	8003ef6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e60:	d141      	bne.n	8003ee6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e62:	4b28      	ldr	r3, [pc, #160]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e6e:	d131      	bne.n	8003ed4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e70:	4b24      	ldr	r3, [pc, #144]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e76:	4a23      	ldr	r2, [pc, #140]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e80:	4b20      	ldr	r3, [pc, #128]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e88:	4a1e      	ldr	r2, [pc, #120]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e90:	4b1d      	ldr	r3, [pc, #116]	@ (8003f08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2232      	movs	r2, #50	@ 0x32
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea0:	0c9b      	lsrs	r3, r3, #18
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ea6:	e002      	b.n	8003eae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eae:	4b15      	ldr	r3, [pc, #84]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eba:	d102      	bne.n	8003ec2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f2      	bne.n	8003ea8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ec2:	4b10      	ldr	r3, [pc, #64]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ece:	d112      	bne.n	8003ef6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e011      	b.n	8003ef8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eda:	4a0a      	ldr	r2, [pc, #40]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ee4:	e007      	b.n	8003ef6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ee6:	4b07      	ldr	r3, [pc, #28]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003eee:	4a05      	ldr	r2, [pc, #20]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ef4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40007000 	.word	0x40007000
 8003f08:	20000000 	.word	0x20000000
 8003f0c:	431bde83 	.word	0x431bde83

08003f10 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003f14:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a04      	ldr	r2, [pc, #16]	@ (8003f2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f1e:	6093      	str	r3, [r2, #8]
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40007000 	.word	0x40007000

08003f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e2fe      	b.n	8004540 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d075      	beq.n	800403a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f4e:	4b97      	ldr	r3, [pc, #604]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f58:	4b94      	ldr	r3, [pc, #592]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b0c      	cmp	r3, #12
 8003f66:	d102      	bne.n	8003f6e <HAL_RCC_OscConfig+0x3e>
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d002      	beq.n	8003f74 <HAL_RCC_OscConfig+0x44>
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d10b      	bne.n	8003f8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f74:	4b8d      	ldr	r3, [pc, #564]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d05b      	beq.n	8004038 <HAL_RCC_OscConfig+0x108>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d157      	bne.n	8004038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e2d9      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f94:	d106      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x74>
 8003f96:	4b85      	ldr	r3, [pc, #532]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a84      	ldr	r2, [pc, #528]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	e01d      	b.n	8003fe0 <HAL_RCC_OscConfig+0xb0>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x98>
 8003fae:	4b7f      	ldr	r3, [pc, #508]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a7e      	ldr	r2, [pc, #504]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8003fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b7c      	ldr	r3, [pc, #496]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a7b      	ldr	r2, [pc, #492]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8003fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e00b      	b.n	8003fe0 <HAL_RCC_OscConfig+0xb0>
 8003fc8:	4b78      	ldr	r3, [pc, #480]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a77      	ldr	r2, [pc, #476]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b75      	ldr	r3, [pc, #468]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a74      	ldr	r2, [pc, #464]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8003fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d013      	beq.n	8004010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fd fc26 	bl	8001838 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fd fc22 	bl	8001838 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	@ 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e29e      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004002:	4b6a      	ldr	r3, [pc, #424]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0xc0>
 800400e:	e014      	b.n	800403a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fd fc12 	bl	8001838 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004018:	f7fd fc0e 	bl	8001838 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	@ 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e28a      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800402a:	4b60      	ldr	r3, [pc, #384]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0xe8>
 8004036:	e000      	b.n	800403a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d075      	beq.n	8004132 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004046:	4b59      	ldr	r3, [pc, #356]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004050:	4b56      	ldr	r3, [pc, #344]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	2b0c      	cmp	r3, #12
 800405e:	d102      	bne.n	8004066 <HAL_RCC_OscConfig+0x136>
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d002      	beq.n	800406c <HAL_RCC_OscConfig+0x13c>
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	2b04      	cmp	r3, #4
 800406a:	d11f      	bne.n	80040ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800406c:	4b4f      	ldr	r3, [pc, #316]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_RCC_OscConfig+0x154>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e25d      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004084:	4b49      	ldr	r3, [pc, #292]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	4946      	ldr	r1, [pc, #280]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004098:	4b45      	ldr	r3, [pc, #276]	@ (80041b0 <HAL_RCC_OscConfig+0x280>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f7fd fb7f 	bl	80017a0 <HAL_InitTick>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d043      	beq.n	8004130 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e249      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d023      	beq.n	80040fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040b4:	4b3d      	ldr	r3, [pc, #244]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a3c      	ldr	r2, [pc, #240]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 80040ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fd fbba 	bl	8001838 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c8:	f7fd fbb6 	bl	8001838 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e232      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040da:	4b34      	ldr	r3, [pc, #208]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e6:	4b31      	ldr	r3, [pc, #196]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	061b      	lsls	r3, r3, #24
 80040f4:	492d      	ldr	r1, [pc, #180]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	604b      	str	r3, [r1, #4]
 80040fa:	e01a      	b.n	8004132 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040fc:	4b2b      	ldr	r3, [pc, #172]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2a      	ldr	r2, [pc, #168]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8004102:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fd fb96 	bl	8001838 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004110:	f7fd fb92 	bl	8001838 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e20e      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004122:	4b22      	ldr	r3, [pc, #136]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0x1e0>
 800412e:	e000      	b.n	8004132 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004130:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d041      	beq.n	80041c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d01c      	beq.n	8004180 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004146:	4b19      	ldr	r3, [pc, #100]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8004148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800414c:	4a17      	ldr	r2, [pc, #92]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004156:	f7fd fb6f 	bl	8001838 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800415e:	f7fd fb6b 	bl	8001838 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e1e7      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004170:	4b0e      	ldr	r3, [pc, #56]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8004172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0ef      	beq.n	800415e <HAL_RCC_OscConfig+0x22e>
 800417e:	e020      	b.n	80041c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004180:	4b0a      	ldr	r3, [pc, #40]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8004182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004186:	4a09      	ldr	r2, [pc, #36]	@ (80041ac <HAL_RCC_OscConfig+0x27c>)
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004190:	f7fd fb52 	bl	8001838 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004196:	e00d      	b.n	80041b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004198:	f7fd fb4e 	bl	8001838 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d906      	bls.n	80041b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e1ca      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000
 80041b0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041b4:	4b8c      	ldr	r3, [pc, #560]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 80041b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1ea      	bne.n	8004198 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 80a6 	beq.w	800431c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041d0:	2300      	movs	r3, #0
 80041d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041d4:	4b84      	ldr	r3, [pc, #528]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 80041d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_OscConfig+0x2b4>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <HAL_RCC_OscConfig+0x2b6>
 80041e4:	2300      	movs	r3, #0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00d      	beq.n	8004206 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ea:	4b7f      	ldr	r3, [pc, #508]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 80041ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ee:	4a7e      	ldr	r2, [pc, #504]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 80041f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80041f6:	4b7c      	ldr	r3, [pc, #496]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 80041f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004202:	2301      	movs	r3, #1
 8004204:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004206:	4b79      	ldr	r3, [pc, #484]	@ (80043ec <HAL_RCC_OscConfig+0x4bc>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d118      	bne.n	8004244 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004212:	4b76      	ldr	r3, [pc, #472]	@ (80043ec <HAL_RCC_OscConfig+0x4bc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a75      	ldr	r2, [pc, #468]	@ (80043ec <HAL_RCC_OscConfig+0x4bc>)
 8004218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800421c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800421e:	f7fd fb0b 	bl	8001838 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004226:	f7fd fb07 	bl	8001838 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e183      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004238:	4b6c      	ldr	r3, [pc, #432]	@ (80043ec <HAL_RCC_OscConfig+0x4bc>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0f0      	beq.n	8004226 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d108      	bne.n	800425e <HAL_RCC_OscConfig+0x32e>
 800424c:	4b66      	ldr	r3, [pc, #408]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004252:	4a65      	ldr	r2, [pc, #404]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800425c:	e024      	b.n	80042a8 <HAL_RCC_OscConfig+0x378>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b05      	cmp	r3, #5
 8004264:	d110      	bne.n	8004288 <HAL_RCC_OscConfig+0x358>
 8004266:	4b60      	ldr	r3, [pc, #384]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426c:	4a5e      	ldr	r2, [pc, #376]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 800426e:	f043 0304 	orr.w	r3, r3, #4
 8004272:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004276:	4b5c      	ldr	r3, [pc, #368]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 8004278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427c:	4a5a      	ldr	r2, [pc, #360]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004286:	e00f      	b.n	80042a8 <HAL_RCC_OscConfig+0x378>
 8004288:	4b57      	ldr	r3, [pc, #348]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428e:	4a56      	ldr	r2, [pc, #344]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004298:	4b53      	ldr	r3, [pc, #332]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429e:	4a52      	ldr	r2, [pc, #328]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 80042a0:	f023 0304 	bic.w	r3, r3, #4
 80042a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d016      	beq.n	80042de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fd fac2 	bl	8001838 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b6:	e00a      	b.n	80042ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b8:	f7fd fabe 	bl	8001838 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e138      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ce:	4b46      	ldr	r3, [pc, #280]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0ed      	beq.n	80042b8 <HAL_RCC_OscConfig+0x388>
 80042dc:	e015      	b.n	800430a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042de:	f7fd faab 	bl	8001838 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042e4:	e00a      	b.n	80042fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e6:	f7fd faa7 	bl	8001838 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e121      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042fc:	4b3a      	ldr	r3, [pc, #232]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1ed      	bne.n	80042e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800430a:	7ffb      	ldrb	r3, [r7, #31]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d105      	bne.n	800431c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004310:	4b35      	ldr	r3, [pc, #212]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 8004312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004314:	4a34      	ldr	r2, [pc, #208]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 8004316:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800431a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d03c      	beq.n	80043a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01c      	beq.n	800436a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004330:	4b2d      	ldr	r3, [pc, #180]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 8004332:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004336:	4a2c      	ldr	r2, [pc, #176]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7fd fa7a 	bl	8001838 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004348:	f7fd fa76 	bl	8001838 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e0f2      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800435a:	4b23      	ldr	r3, [pc, #140]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 800435c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0ef      	beq.n	8004348 <HAL_RCC_OscConfig+0x418>
 8004368:	e01b      	b.n	80043a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800436a:	4b1f      	ldr	r3, [pc, #124]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 800436c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004370:	4a1d      	ldr	r2, [pc, #116]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 8004372:	f023 0301 	bic.w	r3, r3, #1
 8004376:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437a:	f7fd fa5d 	bl	8001838 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004382:	f7fd fa59 	bl	8001838 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e0d5      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004394:	4b14      	ldr	r3, [pc, #80]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 8004396:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1ef      	bne.n	8004382 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 80c9 	beq.w	800453e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043ac:	4b0e      	ldr	r3, [pc, #56]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	2b0c      	cmp	r3, #12
 80043b6:	f000 8083 	beq.w	80044c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d15e      	bne.n	8004480 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c2:	4b09      	ldr	r3, [pc, #36]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a08      	ldr	r2, [pc, #32]	@ (80043e8 <HAL_RCC_OscConfig+0x4b8>)
 80043c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ce:	f7fd fa33 	bl	8001838 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d4:	e00c      	b.n	80043f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d6:	f7fd fa2f 	bl	8001838 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d905      	bls.n	80043f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e0ab      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f0:	4b55      	ldr	r3, [pc, #340]	@ (8004548 <HAL_RCC_OscConfig+0x618>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1ec      	bne.n	80043d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043fc:	4b52      	ldr	r3, [pc, #328]	@ (8004548 <HAL_RCC_OscConfig+0x618>)
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	4b52      	ldr	r3, [pc, #328]	@ (800454c <HAL_RCC_OscConfig+0x61c>)
 8004402:	4013      	ands	r3, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6a11      	ldr	r1, [r2, #32]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800440c:	3a01      	subs	r2, #1
 800440e:	0112      	lsls	r2, r2, #4
 8004410:	4311      	orrs	r1, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004416:	0212      	lsls	r2, r2, #8
 8004418:	4311      	orrs	r1, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800441e:	0852      	lsrs	r2, r2, #1
 8004420:	3a01      	subs	r2, #1
 8004422:	0552      	lsls	r2, r2, #21
 8004424:	4311      	orrs	r1, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800442a:	0852      	lsrs	r2, r2, #1
 800442c:	3a01      	subs	r2, #1
 800442e:	0652      	lsls	r2, r2, #25
 8004430:	4311      	orrs	r1, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004436:	06d2      	lsls	r2, r2, #27
 8004438:	430a      	orrs	r2, r1
 800443a:	4943      	ldr	r1, [pc, #268]	@ (8004548 <HAL_RCC_OscConfig+0x618>)
 800443c:	4313      	orrs	r3, r2
 800443e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004440:	4b41      	ldr	r3, [pc, #260]	@ (8004548 <HAL_RCC_OscConfig+0x618>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a40      	ldr	r2, [pc, #256]	@ (8004548 <HAL_RCC_OscConfig+0x618>)
 8004446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800444a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800444c:	4b3e      	ldr	r3, [pc, #248]	@ (8004548 <HAL_RCC_OscConfig+0x618>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4a3d      	ldr	r2, [pc, #244]	@ (8004548 <HAL_RCC_OscConfig+0x618>)
 8004452:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004456:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fd f9ee 	bl	8001838 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004460:	f7fd f9ea 	bl	8001838 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e066      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004472:	4b35      	ldr	r3, [pc, #212]	@ (8004548 <HAL_RCC_OscConfig+0x618>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0x530>
 800447e:	e05e      	b.n	800453e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004480:	4b31      	ldr	r3, [pc, #196]	@ (8004548 <HAL_RCC_OscConfig+0x618>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a30      	ldr	r2, [pc, #192]	@ (8004548 <HAL_RCC_OscConfig+0x618>)
 8004486:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800448a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448c:	f7fd f9d4 	bl	8001838 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004494:	f7fd f9d0 	bl	8001838 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e04c      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044a6:	4b28      	ldr	r3, [pc, #160]	@ (8004548 <HAL_RCC_OscConfig+0x618>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80044b2:	4b25      	ldr	r3, [pc, #148]	@ (8004548 <HAL_RCC_OscConfig+0x618>)
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	4924      	ldr	r1, [pc, #144]	@ (8004548 <HAL_RCC_OscConfig+0x618>)
 80044b8:	4b25      	ldr	r3, [pc, #148]	@ (8004550 <HAL_RCC_OscConfig+0x620>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	60cb      	str	r3, [r1, #12]
 80044be:	e03e      	b.n	800453e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e039      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80044cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004548 <HAL_RCC_OscConfig+0x618>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f003 0203 	and.w	r2, r3, #3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d12c      	bne.n	800453a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ea:	3b01      	subs	r3, #1
 80044ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d123      	bne.n	800453a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d11b      	bne.n	800453a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800450e:	429a      	cmp	r2, r3
 8004510:	d113      	bne.n	800453a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	3b01      	subs	r3, #1
 8004520:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d109      	bne.n	800453a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004530:	085b      	lsrs	r3, r3, #1
 8004532:	3b01      	subs	r3, #1
 8004534:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004536:	429a      	cmp	r2, r3
 8004538:	d001      	beq.n	800453e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40021000 	.word	0x40021000
 800454c:	019f800c 	.word	0x019f800c
 8004550:	feeefffc 	.word	0xfeeefffc

08004554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e11e      	b.n	80047aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800456c:	4b91      	ldr	r3, [pc, #580]	@ (80047b4 <HAL_RCC_ClockConfig+0x260>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d910      	bls.n	800459c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457a:	4b8e      	ldr	r3, [pc, #568]	@ (80047b4 <HAL_RCC_ClockConfig+0x260>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f023 020f 	bic.w	r2, r3, #15
 8004582:	498c      	ldr	r1, [pc, #560]	@ (80047b4 <HAL_RCC_ClockConfig+0x260>)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	4313      	orrs	r3, r2
 8004588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b8a      	ldr	r3, [pc, #552]	@ (80047b4 <HAL_RCC_ClockConfig+0x260>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e106      	b.n	80047aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d073      	beq.n	8004690 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d129      	bne.n	8004604 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b0:	4b81      	ldr	r3, [pc, #516]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0f4      	b.n	80047aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80045c0:	f000 f99e 	bl	8004900 <RCC_GetSysClockFreqFromPLLSource>
 80045c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4a7c      	ldr	r2, [pc, #496]	@ (80047bc <HAL_RCC_ClockConfig+0x268>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d93f      	bls.n	800464e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045ce:	4b7a      	ldr	r3, [pc, #488]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d033      	beq.n	800464e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d12f      	bne.n	800464e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045ee:	4b72      	ldr	r3, [pc, #456]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045f6:	4a70      	ldr	r2, [pc, #448]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 80045f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045fe:	2380      	movs	r3, #128	@ 0x80
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	e024      	b.n	800464e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d107      	bne.n	800461c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800460c:	4b6a      	ldr	r3, [pc, #424]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d109      	bne.n	800462c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0c6      	b.n	80047aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800461c:	4b66      	ldr	r3, [pc, #408]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0be      	b.n	80047aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800462c:	f000 f8ce 	bl	80047cc <HAL_RCC_GetSysClockFreq>
 8004630:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4a61      	ldr	r2, [pc, #388]	@ (80047bc <HAL_RCC_ClockConfig+0x268>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d909      	bls.n	800464e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800463a:	4b5f      	ldr	r3, [pc, #380]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004642:	4a5d      	ldr	r2, [pc, #372]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 8004644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004648:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800464a:	2380      	movs	r3, #128	@ 0x80
 800464c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800464e:	4b5a      	ldr	r3, [pc, #360]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f023 0203 	bic.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4957      	ldr	r1, [pc, #348]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 800465c:	4313      	orrs	r3, r2
 800465e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004660:	f7fd f8ea 	bl	8001838 <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004666:	e00a      	b.n	800467e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004668:	f7fd f8e6 	bl	8001838 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e095      	b.n	80047aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467e:	4b4e      	ldr	r3, [pc, #312]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 020c 	and.w	r2, r3, #12
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	429a      	cmp	r2, r3
 800468e:	d1eb      	bne.n	8004668 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d023      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a8:	4b43      	ldr	r3, [pc, #268]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	4a42      	ldr	r2, [pc, #264]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 80046ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046c0:	4b3d      	ldr	r3, [pc, #244]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80046c8:	4a3b      	ldr	r2, [pc, #236]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 80046ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046d0:	4b39      	ldr	r3, [pc, #228]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	4936      	ldr	r1, [pc, #216]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2b80      	cmp	r3, #128	@ 0x80
 80046e8:	d105      	bne.n	80046f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046ea:	4b33      	ldr	r3, [pc, #204]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	4a32      	ldr	r2, [pc, #200]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 80046f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046f6:	4b2f      	ldr	r3, [pc, #188]	@ (80047b4 <HAL_RCC_ClockConfig+0x260>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d21d      	bcs.n	8004740 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004704:	4b2b      	ldr	r3, [pc, #172]	@ (80047b4 <HAL_RCC_ClockConfig+0x260>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f023 020f 	bic.w	r2, r3, #15
 800470c:	4929      	ldr	r1, [pc, #164]	@ (80047b4 <HAL_RCC_ClockConfig+0x260>)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	4313      	orrs	r3, r2
 8004712:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004714:	f7fd f890 	bl	8001838 <HAL_GetTick>
 8004718:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471a:	e00a      	b.n	8004732 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800471c:	f7fd f88c 	bl	8001838 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e03b      	b.n	80047aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004732:	4b20      	ldr	r3, [pc, #128]	@ (80047b4 <HAL_RCC_ClockConfig+0x260>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d1ed      	bne.n	800471c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800474c:	4b1a      	ldr	r3, [pc, #104]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4917      	ldr	r1, [pc, #92]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 800475a:	4313      	orrs	r3, r2
 800475c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d009      	beq.n	800477e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800476a:	4b13      	ldr	r3, [pc, #76]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	490f      	ldr	r1, [pc, #60]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 800477a:	4313      	orrs	r3, r2
 800477c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800477e:	f000 f825 	bl	80047cc <HAL_RCC_GetSysClockFreq>
 8004782:	4602      	mov	r2, r0
 8004784:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <HAL_RCC_ClockConfig+0x264>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	490c      	ldr	r1, [pc, #48]	@ (80047c0 <HAL_RCC_ClockConfig+0x26c>)
 8004790:	5ccb      	ldrb	r3, [r1, r3]
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	fa22 f303 	lsr.w	r3, r2, r3
 800479a:	4a0a      	ldr	r2, [pc, #40]	@ (80047c4 <HAL_RCC_ClockConfig+0x270>)
 800479c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800479e:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <HAL_RCC_ClockConfig+0x274>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fc fffc 	bl	80017a0 <HAL_InitTick>
 80047a8:	4603      	mov	r3, r0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40022000 	.word	0x40022000
 80047b8:	40021000 	.word	0x40021000
 80047bc:	04c4b400 	.word	0x04c4b400
 80047c0:	0800b1fc 	.word	0x0800b1fc
 80047c4:	20000000 	.word	0x20000000
 80047c8:	20000004 	.word	0x20000004

080047cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004884 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 030c 	and.w	r3, r3, #12
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d102      	bne.n	80047e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047de:	4b2a      	ldr	r3, [pc, #168]	@ (8004888 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	e047      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80047e4:	4b27      	ldr	r3, [pc, #156]	@ (8004884 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 030c 	and.w	r3, r3, #12
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d102      	bne.n	80047f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047f0:	4b26      	ldr	r3, [pc, #152]	@ (800488c <HAL_RCC_GetSysClockFreq+0xc0>)
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	e03e      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047f6:	4b23      	ldr	r3, [pc, #140]	@ (8004884 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 030c 	and.w	r3, r3, #12
 80047fe:	2b0c      	cmp	r3, #12
 8004800:	d136      	bne.n	8004870 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004802:	4b20      	ldr	r3, [pc, #128]	@ (8004884 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800480c:	4b1d      	ldr	r3, [pc, #116]	@ (8004884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	091b      	lsrs	r3, r3, #4
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	3301      	adds	r3, #1
 8004818:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d10c      	bne.n	800483a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004820:	4a1a      	ldr	r2, [pc, #104]	@ (800488c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	fbb2 f3f3 	udiv	r3, r2, r3
 8004828:	4a16      	ldr	r2, [pc, #88]	@ (8004884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800482a:	68d2      	ldr	r2, [r2, #12]
 800482c:	0a12      	lsrs	r2, r2, #8
 800482e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004832:	fb02 f303 	mul.w	r3, r2, r3
 8004836:	617b      	str	r3, [r7, #20]
      break;
 8004838:	e00c      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800483a:	4a13      	ldr	r2, [pc, #76]	@ (8004888 <HAL_RCC_GetSysClockFreq+0xbc>)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004842:	4a10      	ldr	r2, [pc, #64]	@ (8004884 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004844:	68d2      	ldr	r2, [r2, #12]
 8004846:	0a12      	lsrs	r2, r2, #8
 8004848:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800484c:	fb02 f303 	mul.w	r3, r2, r3
 8004850:	617b      	str	r3, [r7, #20]
      break;
 8004852:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004854:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	0e5b      	lsrs	r3, r3, #25
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	3301      	adds	r3, #1
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	e001      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004874:	693b      	ldr	r3, [r7, #16]
}
 8004876:	4618      	mov	r0, r3
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000
 8004888:	00f42400 	.word	0x00f42400
 800488c:	007a1200 	.word	0x007a1200

08004890 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004894:	4b03      	ldr	r3, [pc, #12]	@ (80048a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004896:	681b      	ldr	r3, [r3, #0]
}
 8004898:	4618      	mov	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000000 	.word	0x20000000

080048a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048ac:	f7ff fff0 	bl	8004890 <HAL_RCC_GetHCLKFreq>
 80048b0:	4602      	mov	r2, r0
 80048b2:	4b06      	ldr	r3, [pc, #24]	@ (80048cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	0a1b      	lsrs	r3, r3, #8
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	4904      	ldr	r1, [pc, #16]	@ (80048d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048be:	5ccb      	ldrb	r3, [r1, r3]
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40021000 	.word	0x40021000
 80048d0:	0800b20c 	.word	0x0800b20c

080048d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048d8:	f7ff ffda 	bl	8004890 <HAL_RCC_GetHCLKFreq>
 80048dc:	4602      	mov	r2, r0
 80048de:	4b06      	ldr	r3, [pc, #24]	@ (80048f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	0adb      	lsrs	r3, r3, #11
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	4904      	ldr	r1, [pc, #16]	@ (80048fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80048ea:	5ccb      	ldrb	r3, [r1, r3]
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40021000 	.word	0x40021000
 80048fc:	0800b20c 	.word	0x0800b20c

08004900 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004906:	4b1e      	ldr	r3, [pc, #120]	@ (8004980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004910:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	3301      	adds	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b03      	cmp	r3, #3
 8004922:	d10c      	bne.n	800493e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004924:	4a17      	ldr	r2, [pc, #92]	@ (8004984 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	fbb2 f3f3 	udiv	r3, r2, r3
 800492c:	4a14      	ldr	r2, [pc, #80]	@ (8004980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800492e:	68d2      	ldr	r2, [r2, #12]
 8004930:	0a12      	lsrs	r2, r2, #8
 8004932:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	617b      	str	r3, [r7, #20]
    break;
 800493c:	e00c      	b.n	8004958 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800493e:	4a12      	ldr	r2, [pc, #72]	@ (8004988 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	fbb2 f3f3 	udiv	r3, r2, r3
 8004946:	4a0e      	ldr	r2, [pc, #56]	@ (8004980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004948:	68d2      	ldr	r2, [r2, #12]
 800494a:	0a12      	lsrs	r2, r2, #8
 800494c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004950:	fb02 f303 	mul.w	r3, r2, r3
 8004954:	617b      	str	r3, [r7, #20]
    break;
 8004956:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004958:	4b09      	ldr	r3, [pc, #36]	@ (8004980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	0e5b      	lsrs	r3, r3, #25
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	3301      	adds	r3, #1
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004972:	687b      	ldr	r3, [r7, #4]
}
 8004974:	4618      	mov	r0, r3
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	40021000 	.word	0x40021000
 8004984:	007a1200 	.word	0x007a1200
 8004988:	00f42400 	.word	0x00f42400

0800498c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004994:	2300      	movs	r3, #0
 8004996:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004998:	2300      	movs	r3, #0
 800499a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8098 	beq.w	8004ada <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049aa:	2300      	movs	r3, #0
 80049ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ae:	4b43      	ldr	r3, [pc, #268]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10d      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ba:	4b40      	ldr	r3, [pc, #256]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049be:	4a3f      	ldr	r2, [pc, #252]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80049c6:	4b3d      	ldr	r3, [pc, #244]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049d2:	2301      	movs	r3, #1
 80049d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049d6:	4b3a      	ldr	r3, [pc, #232]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a39      	ldr	r2, [pc, #228]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049e2:	f7fc ff29 	bl	8001838 <HAL_GetTick>
 80049e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049e8:	e009      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ea:	f7fc ff25 	bl	8001838 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d902      	bls.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	74fb      	strb	r3, [r7, #19]
        break;
 80049fc:	e005      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049fe:	4b30      	ldr	r3, [pc, #192]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0ef      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a0a:	7cfb      	ldrb	r3, [r7, #19]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d159      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a10:	4b2a      	ldr	r3, [pc, #168]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01e      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d019      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a2c:	4b23      	ldr	r3, [pc, #140]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a38:	4b20      	ldr	r3, [pc, #128]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a48:	4b1c      	ldr	r3, [pc, #112]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a58:	4a18      	ldr	r2, [pc, #96]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d016      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6a:	f7fc fee5 	bl	8001838 <HAL_GetTick>
 8004a6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a70:	e00b      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a72:	f7fc fee1 	bl	8001838 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d902      	bls.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	74fb      	strb	r3, [r7, #19]
            break;
 8004a88:	e006      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0ec      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a98:	7cfb      	ldrb	r3, [r7, #19]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10b      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a9e:	4b07      	ldr	r3, [pc, #28]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aac:	4903      	ldr	r1, [pc, #12]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	74bb      	strb	r3, [r7, #18]
 8004aba:	e005      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac4:	7cfb      	ldrb	r3, [r7, #19]
 8004ac6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ac8:	7c7b      	ldrb	r3, [r7, #17]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d105      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ace:	4ba7      	ldr	r3, [pc, #668]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad2:	4aa6      	ldr	r2, [pc, #664]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ad8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ae6:	4ba1      	ldr	r3, [pc, #644]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aec:	f023 0203 	bic.w	r2, r3, #3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	499d      	ldr	r1, [pc, #628]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b08:	4b98      	ldr	r3, [pc, #608]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0e:	f023 020c 	bic.w	r2, r3, #12
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	4995      	ldr	r1, [pc, #596]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b2a:	4b90      	ldr	r3, [pc, #576]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b30:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	498c      	ldr	r1, [pc, #560]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b4c:	4b87      	ldr	r3, [pc, #540]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	4984      	ldr	r1, [pc, #528]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b6e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	497b      	ldr	r1, [pc, #492]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b90:	4b76      	ldr	r3, [pc, #472]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b96:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	4973      	ldr	r1, [pc, #460]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bb2:	4b6e      	ldr	r3, [pc, #440]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	496a      	ldr	r1, [pc, #424]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bd4:	4b65      	ldr	r3, [pc, #404]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bda:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	4962      	ldr	r1, [pc, #392]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bf6:	4b5d      	ldr	r3, [pc, #372]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	4959      	ldr	r1, [pc, #356]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c18:	4b54      	ldr	r3, [pc, #336]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c26:	4951      	ldr	r1, [pc, #324]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d015      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c3a:	4b4c      	ldr	r3, [pc, #304]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c48:	4948      	ldr	r1, [pc, #288]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c58:	d105      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c5a:	4b44      	ldr	r3, [pc, #272]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	4a43      	ldr	r2, [pc, #268]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c64:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d015      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c72:	4b3e      	ldr	r3, [pc, #248]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c80:	493a      	ldr	r1, [pc, #232]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c90:	d105      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c92:	4b36      	ldr	r3, [pc, #216]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	4a35      	ldr	r2, [pc, #212]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c9c:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d015      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004caa:	4b30      	ldr	r3, [pc, #192]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb8:	492c      	ldr	r1, [pc, #176]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cc8:	d105      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cca:	4b28      	ldr	r3, [pc, #160]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	4a27      	ldr	r2, [pc, #156]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cd4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d015      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ce2:	4b22      	ldr	r3, [pc, #136]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf0:	491e      	ldr	r1, [pc, #120]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d00:	d105      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d02:	4b1a      	ldr	r3, [pc, #104]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	4a19      	ldr	r2, [pc, #100]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d0c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d015      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d1a:	4b14      	ldr	r3, [pc, #80]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d20:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d28:	4910      	ldr	r1, [pc, #64]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d38:	d105      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d44:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d018      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d52:	4b06      	ldr	r3, [pc, #24]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d58:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d60:	4902      	ldr	r1, [pc, #8]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	e001      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d76:	d105      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d78:	4b21      	ldr	r3, [pc, #132]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4a20      	ldr	r2, [pc, #128]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d82:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d015      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004d90:	4b1b      	ldr	r3, [pc, #108]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d96:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9e:	4918      	ldr	r1, [pc, #96]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dae:	d105      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004db0:	4b13      	ldr	r3, [pc, #76]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	4a12      	ldr	r2, [pc, #72]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004db6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d015      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd6:	490a      	ldr	r1, [pc, #40]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004de6:	d105      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004de8:	4b05      	ldr	r3, [pc, #20]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	4a04      	ldr	r2, [pc, #16]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004dee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004df2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004df4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40021000 	.word	0x40021000

08004e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e09d      	b.n	8004f52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d108      	bne.n	8004e30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e26:	d009      	beq.n	8004e3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	61da      	str	r2, [r3, #28]
 8004e2e:	e005      	b.n	8004e3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fc fb04 	bl	8001464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e7c:	d902      	bls.n	8004e84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	e002      	b.n	8004e8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004e92:	d007      	beq.n	8004ea4 <HAL_SPI_Init+0xa0>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e9c:	d002      	beq.n	8004ea4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ee6:	ea42 0103 	orr.w	r1, r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	0c1b      	lsrs	r3, r3, #16
 8004f00:	f003 0204 	and.w	r2, r3, #4
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004f20:	ea42 0103 	orr.w	r1, r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b08a      	sub	sp, #40	@ 0x28
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f6c:	f7fc fc64 	bl	8001838 <HAL_GetTick>
 8004f70:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f78:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004f80:	887b      	ldrh	r3, [r7, #2]
 8004f82:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004f84:	887b      	ldrh	r3, [r7, #2]
 8004f86:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f88:	7ffb      	ldrb	r3, [r7, #31]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d00c      	beq.n	8004fa8 <HAL_SPI_TransmitReceive+0x4e>
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f94:	d106      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d102      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x4a>
 8004f9e:	7ffb      	ldrb	r3, [r7, #31]
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d001      	beq.n	8004fa8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e1f3      	b.n	8005390 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <HAL_SPI_TransmitReceive+0x60>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <HAL_SPI_TransmitReceive+0x60>
 8004fb4:	887b      	ldrh	r3, [r7, #2]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e1e8      	b.n	8005390 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_SPI_TransmitReceive+0x72>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e1e1      	b.n	8005390 <HAL_SPI_TransmitReceive+0x436>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d003      	beq.n	8004fe8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2205      	movs	r2, #5
 8004fe4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	887a      	ldrh	r2, [r7, #2]
 8004ff8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	887a      	ldrh	r2, [r7, #2]
 8005000:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	887a      	ldrh	r2, [r7, #2]
 800500e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	887a      	ldrh	r2, [r7, #2]
 8005014:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800502a:	d802      	bhi.n	8005032 <HAL_SPI_TransmitReceive+0xd8>
 800502c:	8abb      	ldrh	r3, [r7, #20]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d908      	bls.n	8005044 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	e007      	b.n	8005054 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005052:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800505e:	2b40      	cmp	r3, #64	@ 0x40
 8005060:	d007      	beq.n	8005072 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005070:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800507a:	f240 8083 	bls.w	8005184 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <HAL_SPI_TransmitReceive+0x132>
 8005086:	8afb      	ldrh	r3, [r7, #22]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d16f      	bne.n	800516c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005090:	881a      	ldrh	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509c:	1c9a      	adds	r2, r3, #2
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b0:	e05c      	b.n	800516c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d11b      	bne.n	80050f8 <HAL_SPI_TransmitReceive+0x19e>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d016      	beq.n	80050f8 <HAL_SPI_TransmitReceive+0x19e>
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d113      	bne.n	80050f8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d4:	881a      	ldrh	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e0:	1c9a      	adds	r2, r3, #2
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b01      	cmp	r3, #1
 8005104:	d11c      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x1e6>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d016      	beq.n	8005140 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511c:	b292      	uxth	r2, r2
 800511e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005124:	1c9a      	adds	r2, r3, #2
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800513c:	2301      	movs	r3, #1
 800513e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005140:	f7fc fb7a 	bl	8001838 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800514c:	429a      	cmp	r2, r3
 800514e:	d80d      	bhi.n	800516c <HAL_SPI_TransmitReceive+0x212>
 8005150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	d009      	beq.n	800516c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e111      	b.n	8005390 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d19d      	bne.n	80050b2 <HAL_SPI_TransmitReceive+0x158>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d197      	bne.n	80050b2 <HAL_SPI_TransmitReceive+0x158>
 8005182:	e0e5      	b.n	8005350 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_SPI_TransmitReceive+0x23a>
 800518c:	8afb      	ldrh	r3, [r7, #22]
 800518e:	2b01      	cmp	r3, #1
 8005190:	f040 80d1 	bne.w	8005336 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b01      	cmp	r3, #1
 800519c:	d912      	bls.n	80051c4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a2:	881a      	ldrh	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ae:	1c9a      	adds	r2, r3, #2
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b02      	subs	r3, #2
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051c2:	e0b8      	b.n	8005336 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	330c      	adds	r3, #12
 80051ce:	7812      	ldrb	r2, [r2, #0]
 80051d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ea:	e0a4      	b.n	8005336 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d134      	bne.n	8005264 <HAL_SPI_TransmitReceive+0x30a>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d02f      	beq.n	8005264 <HAL_SPI_TransmitReceive+0x30a>
 8005204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005206:	2b01      	cmp	r3, #1
 8005208:	d12c      	bne.n	8005264 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b01      	cmp	r3, #1
 8005212:	d912      	bls.n	800523a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005218:	881a      	ldrh	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	1c9a      	adds	r2, r3, #2
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b02      	subs	r3, #2
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005238:	e012      	b.n	8005260 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	330c      	adds	r3, #12
 8005244:	7812      	ldrb	r2, [r2, #0]
 8005246:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b01      	cmp	r3, #1
 8005270:	d148      	bne.n	8005304 <HAL_SPI_TransmitReceive+0x3aa>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d042      	beq.n	8005304 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b01      	cmp	r3, #1
 8005288:	d923      	bls.n	80052d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005294:	b292      	uxth	r2, r2
 8005296:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529c:	1c9a      	adds	r2, r3, #2
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b02      	subs	r3, #2
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d81f      	bhi.n	8005300 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80052ce:	605a      	str	r2, [r3, #4]
 80052d0:	e016      	b.n	8005300 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f103 020c 	add.w	r2, r3, #12
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052de:	7812      	ldrb	r2, [r2, #0]
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005300:	2301      	movs	r3, #1
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005304:	f7fc fa98 	bl	8001838 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005310:	429a      	cmp	r2, r3
 8005312:	d803      	bhi.n	800531c <HAL_SPI_TransmitReceive+0x3c2>
 8005314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531a:	d102      	bne.n	8005322 <HAL_SPI_TransmitReceive+0x3c8>
 800531c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e02c      	b.n	8005390 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	f47f af55 	bne.w	80051ec <HAL_SPI_TransmitReceive+0x292>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	f47f af4e 	bne.w	80051ec <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005350:	6a3a      	ldr	r2, [r7, #32]
 8005352:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f93d 	bl	80055d4 <SPI_EndRxTxTransaction>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e00e      	b.n	8005390 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800538e:	2300      	movs	r3, #0
  }
}
 8005390:	4618      	mov	r0, r3
 8005392:	3728      	adds	r7, #40	@ 0x28
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	4613      	mov	r3, r2
 80053a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053a8:	f7fc fa46 	bl	8001838 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b0:	1a9b      	subs	r3, r3, r2
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	4413      	add	r3, r2
 80053b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053b8:	f7fc fa3e 	bl	8001838 <HAL_GetTick>
 80053bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053be:	4b39      	ldr	r3, [pc, #228]	@ (80054a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	015b      	lsls	r3, r3, #5
 80053c4:	0d1b      	lsrs	r3, r3, #20
 80053c6:	69fa      	ldr	r2, [r7, #28]
 80053c8:	fb02 f303 	mul.w	r3, r2, r3
 80053cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ce:	e054      	b.n	800547a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	d050      	beq.n	800547a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053d8:	f7fc fa2e 	bl	8001838 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d902      	bls.n	80053ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d13d      	bne.n	800546a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005406:	d111      	bne.n	800542c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005410:	d004      	beq.n	800541c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800541a:	d107      	bne.n	800542c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800542a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005430:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005434:	d10f      	bne.n	8005456 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005454:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e017      	b.n	800549a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	3b01      	subs	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4013      	ands	r3, r2
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	429a      	cmp	r2, r3
 8005488:	bf0c      	ite	eq
 800548a:	2301      	moveq	r3, #1
 800548c:	2300      	movne	r3, #0
 800548e:	b2db      	uxtb	r3, r3
 8005490:	461a      	mov	r2, r3
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	429a      	cmp	r2, r3
 8005496:	d19b      	bne.n	80053d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3720      	adds	r7, #32
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000000 	.word	0x20000000

080054a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	@ 0x28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054ba:	f7fc f9bd 	bl	8001838 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c2:	1a9b      	subs	r3, r3, r2
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	4413      	add	r3, r2
 80054c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80054ca:	f7fc f9b5 	bl	8001838 <HAL_GetTick>
 80054ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054d8:	4b3d      	ldr	r3, [pc, #244]	@ (80055d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	00da      	lsls	r2, r3, #3
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	0d1b      	lsrs	r3, r3, #20
 80054e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ea:	fb02 f303 	mul.w	r3, r2, r3
 80054ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80054f0:	e060      	b.n	80055b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80054f8:	d107      	bne.n	800550a <SPI_WaitFifoStateUntilTimeout+0x62>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d104      	bne.n	800550a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005508:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d050      	beq.n	80055b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005512:	f7fc f991 	bl	8001838 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800551e:	429a      	cmp	r2, r3
 8005520:	d902      	bls.n	8005528 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	2b00      	cmp	r3, #0
 8005526:	d13d      	bne.n	80055a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005536:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005540:	d111      	bne.n	8005566 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800554a:	d004      	beq.n	8005556 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005554:	d107      	bne.n	8005566 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005564:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800556e:	d10f      	bne.n	8005590 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800558e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e010      	b.n	80055c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4013      	ands	r3, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d196      	bne.n	80054f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3728      	adds	r7, #40	@ 0x28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000000 	.word	0x20000000

080055d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f7ff ff5b 	bl	80054a8 <SPI_WaitFifoStateUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055fc:	f043 0220 	orr.w	r2, r3, #32
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e027      	b.n	8005658 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2200      	movs	r2, #0
 8005610:	2180      	movs	r1, #128	@ 0x80
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f7ff fec0 	bl	8005398 <SPI_WaitFlagStateUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d007      	beq.n	800562e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005622:	f043 0220 	orr.w	r2, r3, #32
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e014      	b.n	8005658 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2200      	movs	r2, #0
 8005636:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f7ff ff34 	bl	80054a8 <SPI_WaitFifoStateUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800564a:	f043 0220 	orr.w	r2, r3, #32
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e000      	b.n	8005658 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e042      	b.n	80056f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7fb ff2f 	bl	80014e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2224      	movs	r2, #36	@ 0x24
 800568e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0201 	bic.w	r2, r2, #1
 80056a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fb24 	bl	8005cf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f825 	bl	8005700 <UART_SetConfig>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e01b      	b.n	80056f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fba3 	bl	8005e3c <UART_CheckIdleState>
 80056f6:	4603      	mov	r3, r0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005704:	b08c      	sub	sp, #48	@ 0x30
 8005706:	af00      	add	r7, sp, #0
 8005708:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	431a      	orrs	r2, r3
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	431a      	orrs	r2, r3
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	4313      	orrs	r3, r2
 8005726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4baa      	ldr	r3, [pc, #680]	@ (80059d8 <UART_SetConfig+0x2d8>)
 8005730:	4013      	ands	r3, r2
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005738:	430b      	orrs	r3, r1
 800573a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a9f      	ldr	r2, [pc, #636]	@ (80059dc <UART_SetConfig+0x2dc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d004      	beq.n	800576c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005768:	4313      	orrs	r3, r2
 800576a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005776:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005780:	430b      	orrs	r3, r1
 8005782:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	f023 010f 	bic.w	r1, r3, #15
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a90      	ldr	r2, [pc, #576]	@ (80059e0 <UART_SetConfig+0x2e0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d125      	bne.n	80057f0 <UART_SetConfig+0xf0>
 80057a4:	4b8f      	ldr	r3, [pc, #572]	@ (80059e4 <UART_SetConfig+0x2e4>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d81a      	bhi.n	80057e8 <UART_SetConfig+0xe8>
 80057b2:	a201      	add	r2, pc, #4	@ (adr r2, 80057b8 <UART_SetConfig+0xb8>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	080057c9 	.word	0x080057c9
 80057bc:	080057d9 	.word	0x080057d9
 80057c0:	080057d1 	.word	0x080057d1
 80057c4:	080057e1 	.word	0x080057e1
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ce:	e116      	b.n	80059fe <UART_SetConfig+0x2fe>
 80057d0:	2302      	movs	r3, #2
 80057d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057d6:	e112      	b.n	80059fe <UART_SetConfig+0x2fe>
 80057d8:	2304      	movs	r3, #4
 80057da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057de:	e10e      	b.n	80059fe <UART_SetConfig+0x2fe>
 80057e0:	2308      	movs	r3, #8
 80057e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057e6:	e10a      	b.n	80059fe <UART_SetConfig+0x2fe>
 80057e8:	2310      	movs	r3, #16
 80057ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ee:	e106      	b.n	80059fe <UART_SetConfig+0x2fe>
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a7c      	ldr	r2, [pc, #496]	@ (80059e8 <UART_SetConfig+0x2e8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d138      	bne.n	800586c <UART_SetConfig+0x16c>
 80057fa:	4b7a      	ldr	r3, [pc, #488]	@ (80059e4 <UART_SetConfig+0x2e4>)
 80057fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005800:	f003 030c 	and.w	r3, r3, #12
 8005804:	2b0c      	cmp	r3, #12
 8005806:	d82d      	bhi.n	8005864 <UART_SetConfig+0x164>
 8005808:	a201      	add	r2, pc, #4	@ (adr r2, 8005810 <UART_SetConfig+0x110>)
 800580a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580e:	bf00      	nop
 8005810:	08005845 	.word	0x08005845
 8005814:	08005865 	.word	0x08005865
 8005818:	08005865 	.word	0x08005865
 800581c:	08005865 	.word	0x08005865
 8005820:	08005855 	.word	0x08005855
 8005824:	08005865 	.word	0x08005865
 8005828:	08005865 	.word	0x08005865
 800582c:	08005865 	.word	0x08005865
 8005830:	0800584d 	.word	0x0800584d
 8005834:	08005865 	.word	0x08005865
 8005838:	08005865 	.word	0x08005865
 800583c:	08005865 	.word	0x08005865
 8005840:	0800585d 	.word	0x0800585d
 8005844:	2300      	movs	r3, #0
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800584a:	e0d8      	b.n	80059fe <UART_SetConfig+0x2fe>
 800584c:	2302      	movs	r3, #2
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005852:	e0d4      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005854:	2304      	movs	r3, #4
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800585a:	e0d0      	b.n	80059fe <UART_SetConfig+0x2fe>
 800585c:	2308      	movs	r3, #8
 800585e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005862:	e0cc      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005864:	2310      	movs	r3, #16
 8005866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800586a:	e0c8      	b.n	80059fe <UART_SetConfig+0x2fe>
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a5e      	ldr	r2, [pc, #376]	@ (80059ec <UART_SetConfig+0x2ec>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d125      	bne.n	80058c2 <UART_SetConfig+0x1c2>
 8005876:	4b5b      	ldr	r3, [pc, #364]	@ (80059e4 <UART_SetConfig+0x2e4>)
 8005878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005880:	2b30      	cmp	r3, #48	@ 0x30
 8005882:	d016      	beq.n	80058b2 <UART_SetConfig+0x1b2>
 8005884:	2b30      	cmp	r3, #48	@ 0x30
 8005886:	d818      	bhi.n	80058ba <UART_SetConfig+0x1ba>
 8005888:	2b20      	cmp	r3, #32
 800588a:	d00a      	beq.n	80058a2 <UART_SetConfig+0x1a2>
 800588c:	2b20      	cmp	r3, #32
 800588e:	d814      	bhi.n	80058ba <UART_SetConfig+0x1ba>
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <UART_SetConfig+0x19a>
 8005894:	2b10      	cmp	r3, #16
 8005896:	d008      	beq.n	80058aa <UART_SetConfig+0x1aa>
 8005898:	e00f      	b.n	80058ba <UART_SetConfig+0x1ba>
 800589a:	2300      	movs	r3, #0
 800589c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058a0:	e0ad      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058a2:	2302      	movs	r3, #2
 80058a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058a8:	e0a9      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058aa:	2304      	movs	r3, #4
 80058ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058b0:	e0a5      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058b2:	2308      	movs	r3, #8
 80058b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058b8:	e0a1      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058ba:	2310      	movs	r3, #16
 80058bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058c0:	e09d      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a4a      	ldr	r2, [pc, #296]	@ (80059f0 <UART_SetConfig+0x2f0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d125      	bne.n	8005918 <UART_SetConfig+0x218>
 80058cc:	4b45      	ldr	r3, [pc, #276]	@ (80059e4 <UART_SetConfig+0x2e4>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80058d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80058d8:	d016      	beq.n	8005908 <UART_SetConfig+0x208>
 80058da:	2bc0      	cmp	r3, #192	@ 0xc0
 80058dc:	d818      	bhi.n	8005910 <UART_SetConfig+0x210>
 80058de:	2b80      	cmp	r3, #128	@ 0x80
 80058e0:	d00a      	beq.n	80058f8 <UART_SetConfig+0x1f8>
 80058e2:	2b80      	cmp	r3, #128	@ 0x80
 80058e4:	d814      	bhi.n	8005910 <UART_SetConfig+0x210>
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <UART_SetConfig+0x1f0>
 80058ea:	2b40      	cmp	r3, #64	@ 0x40
 80058ec:	d008      	beq.n	8005900 <UART_SetConfig+0x200>
 80058ee:	e00f      	b.n	8005910 <UART_SetConfig+0x210>
 80058f0:	2300      	movs	r3, #0
 80058f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058f6:	e082      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058f8:	2302      	movs	r3, #2
 80058fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058fe:	e07e      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005900:	2304      	movs	r3, #4
 8005902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005906:	e07a      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005908:	2308      	movs	r3, #8
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800590e:	e076      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005910:	2310      	movs	r3, #16
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005916:	e072      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a35      	ldr	r2, [pc, #212]	@ (80059f4 <UART_SetConfig+0x2f4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d12a      	bne.n	8005978 <UART_SetConfig+0x278>
 8005922:	4b30      	ldr	r3, [pc, #192]	@ (80059e4 <UART_SetConfig+0x2e4>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005928:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800592c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005930:	d01a      	beq.n	8005968 <UART_SetConfig+0x268>
 8005932:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005936:	d81b      	bhi.n	8005970 <UART_SetConfig+0x270>
 8005938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800593c:	d00c      	beq.n	8005958 <UART_SetConfig+0x258>
 800593e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005942:	d815      	bhi.n	8005970 <UART_SetConfig+0x270>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <UART_SetConfig+0x250>
 8005948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800594c:	d008      	beq.n	8005960 <UART_SetConfig+0x260>
 800594e:	e00f      	b.n	8005970 <UART_SetConfig+0x270>
 8005950:	2300      	movs	r3, #0
 8005952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005956:	e052      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005958:	2302      	movs	r3, #2
 800595a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800595e:	e04e      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005960:	2304      	movs	r3, #4
 8005962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005966:	e04a      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005968:	2308      	movs	r3, #8
 800596a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800596e:	e046      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005970:	2310      	movs	r3, #16
 8005972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005976:	e042      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a17      	ldr	r2, [pc, #92]	@ (80059dc <UART_SetConfig+0x2dc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d13a      	bne.n	80059f8 <UART_SetConfig+0x2f8>
 8005982:	4b18      	ldr	r3, [pc, #96]	@ (80059e4 <UART_SetConfig+0x2e4>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005988:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800598c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005990:	d01a      	beq.n	80059c8 <UART_SetConfig+0x2c8>
 8005992:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005996:	d81b      	bhi.n	80059d0 <UART_SetConfig+0x2d0>
 8005998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800599c:	d00c      	beq.n	80059b8 <UART_SetConfig+0x2b8>
 800599e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059a2:	d815      	bhi.n	80059d0 <UART_SetConfig+0x2d0>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <UART_SetConfig+0x2b0>
 80059a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ac:	d008      	beq.n	80059c0 <UART_SetConfig+0x2c0>
 80059ae:	e00f      	b.n	80059d0 <UART_SetConfig+0x2d0>
 80059b0:	2300      	movs	r3, #0
 80059b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059b6:	e022      	b.n	80059fe <UART_SetConfig+0x2fe>
 80059b8:	2302      	movs	r3, #2
 80059ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059be:	e01e      	b.n	80059fe <UART_SetConfig+0x2fe>
 80059c0:	2304      	movs	r3, #4
 80059c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059c6:	e01a      	b.n	80059fe <UART_SetConfig+0x2fe>
 80059c8:	2308      	movs	r3, #8
 80059ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ce:	e016      	b.n	80059fe <UART_SetConfig+0x2fe>
 80059d0:	2310      	movs	r3, #16
 80059d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059d6:	e012      	b.n	80059fe <UART_SetConfig+0x2fe>
 80059d8:	cfff69f3 	.word	0xcfff69f3
 80059dc:	40008000 	.word	0x40008000
 80059e0:	40013800 	.word	0x40013800
 80059e4:	40021000 	.word	0x40021000
 80059e8:	40004400 	.word	0x40004400
 80059ec:	40004800 	.word	0x40004800
 80059f0:	40004c00 	.word	0x40004c00
 80059f4:	40005000 	.word	0x40005000
 80059f8:	2310      	movs	r3, #16
 80059fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4aae      	ldr	r2, [pc, #696]	@ (8005cbc <UART_SetConfig+0x5bc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	f040 8097 	bne.w	8005b38 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d823      	bhi.n	8005a5a <UART_SetConfig+0x35a>
 8005a12:	a201      	add	r2, pc, #4	@ (adr r2, 8005a18 <UART_SetConfig+0x318>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a5b 	.word	0x08005a5b
 8005a20:	08005a45 	.word	0x08005a45
 8005a24:	08005a5b 	.word	0x08005a5b
 8005a28:	08005a4b 	.word	0x08005a4b
 8005a2c:	08005a5b 	.word	0x08005a5b
 8005a30:	08005a5b 	.word	0x08005a5b
 8005a34:	08005a5b 	.word	0x08005a5b
 8005a38:	08005a53 	.word	0x08005a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a3c:	f7fe ff34 	bl	80048a8 <HAL_RCC_GetPCLK1Freq>
 8005a40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a42:	e010      	b.n	8005a66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a44:	4b9e      	ldr	r3, [pc, #632]	@ (8005cc0 <UART_SetConfig+0x5c0>)
 8005a46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a48:	e00d      	b.n	8005a66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a4a:	f7fe febf 	bl	80047cc <HAL_RCC_GetSysClockFreq>
 8005a4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a50:	e009      	b.n	8005a66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a58:	e005      	b.n	8005a66 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8130 	beq.w	8005cce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a72:	4a94      	ldr	r2, [pc, #592]	@ (8005cc4 <UART_SetConfig+0x5c4>)
 8005a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d305      	bcc.n	8005a9e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d903      	bls.n	8005aa6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005aa4:	e113      	b.n	8005cce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	60bb      	str	r3, [r7, #8]
 8005aac:	60fa      	str	r2, [r7, #12]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab2:	4a84      	ldr	r2, [pc, #528]	@ (8005cc4 <UART_SetConfig+0x5c4>)
 8005ab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2200      	movs	r2, #0
 8005abc:	603b      	str	r3, [r7, #0]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ac4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ac8:	f7fa fbfa 	bl	80002c0 <__aeabi_uldivmod>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	020b      	lsls	r3, r1, #8
 8005ade:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ae2:	0202      	lsls	r2, r0, #8
 8005ae4:	6979      	ldr	r1, [r7, #20]
 8005ae6:	6849      	ldr	r1, [r1, #4]
 8005ae8:	0849      	lsrs	r1, r1, #1
 8005aea:	2000      	movs	r0, #0
 8005aec:	460c      	mov	r4, r1
 8005aee:	4605      	mov	r5, r0
 8005af0:	eb12 0804 	adds.w	r8, r2, r4
 8005af4:	eb43 0905 	adc.w	r9, r3, r5
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	469a      	mov	sl, r3
 8005b00:	4693      	mov	fp, r2
 8005b02:	4652      	mov	r2, sl
 8005b04:	465b      	mov	r3, fp
 8005b06:	4640      	mov	r0, r8
 8005b08:	4649      	mov	r1, r9
 8005b0a:	f7fa fbd9 	bl	80002c0 <__aeabi_uldivmod>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4613      	mov	r3, r2
 8005b14:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b1c:	d308      	bcc.n	8005b30 <UART_SetConfig+0x430>
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b24:	d204      	bcs.n	8005b30 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6a3a      	ldr	r2, [r7, #32]
 8005b2c:	60da      	str	r2, [r3, #12]
 8005b2e:	e0ce      	b.n	8005cce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b36:	e0ca      	b.n	8005cce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b40:	d166      	bne.n	8005c10 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005b42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d827      	bhi.n	8005b9a <UART_SetConfig+0x49a>
 8005b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b50 <UART_SetConfig+0x450>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005b75 	.word	0x08005b75
 8005b54:	08005b7d 	.word	0x08005b7d
 8005b58:	08005b85 	.word	0x08005b85
 8005b5c:	08005b9b 	.word	0x08005b9b
 8005b60:	08005b8b 	.word	0x08005b8b
 8005b64:	08005b9b 	.word	0x08005b9b
 8005b68:	08005b9b 	.word	0x08005b9b
 8005b6c:	08005b9b 	.word	0x08005b9b
 8005b70:	08005b93 	.word	0x08005b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b74:	f7fe fe98 	bl	80048a8 <HAL_RCC_GetPCLK1Freq>
 8005b78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b7a:	e014      	b.n	8005ba6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b7c:	f7fe feaa 	bl	80048d4 <HAL_RCC_GetPCLK2Freq>
 8005b80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b82:	e010      	b.n	8005ba6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b84:	4b4e      	ldr	r3, [pc, #312]	@ (8005cc0 <UART_SetConfig+0x5c0>)
 8005b86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b88:	e00d      	b.n	8005ba6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b8a:	f7fe fe1f 	bl	80047cc <HAL_RCC_GetSysClockFreq>
 8005b8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b90:	e009      	b.n	8005ba6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b98:	e005      	b.n	8005ba6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ba4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 8090 	beq.w	8005cce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb2:	4a44      	ldr	r2, [pc, #272]	@ (8005cc4 <UART_SetConfig+0x5c4>)
 8005bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bc0:	005a      	lsls	r2, r3, #1
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	085b      	lsrs	r3, r3, #1
 8005bc8:	441a      	add	r2, r3
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	2b0f      	cmp	r3, #15
 8005bd8:	d916      	bls.n	8005c08 <UART_SetConfig+0x508>
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005be0:	d212      	bcs.n	8005c08 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f023 030f 	bic.w	r3, r3, #15
 8005bea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	8bfb      	ldrh	r3, [r7, #30]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	8bfa      	ldrh	r2, [r7, #30]
 8005c04:	60da      	str	r2, [r3, #12]
 8005c06:	e062      	b.n	8005cce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c0e:	e05e      	b.n	8005cce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d828      	bhi.n	8005c6a <UART_SetConfig+0x56a>
 8005c18:	a201      	add	r2, pc, #4	@ (adr r2, 8005c20 <UART_SetConfig+0x520>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c45 	.word	0x08005c45
 8005c24:	08005c4d 	.word	0x08005c4d
 8005c28:	08005c55 	.word	0x08005c55
 8005c2c:	08005c6b 	.word	0x08005c6b
 8005c30:	08005c5b 	.word	0x08005c5b
 8005c34:	08005c6b 	.word	0x08005c6b
 8005c38:	08005c6b 	.word	0x08005c6b
 8005c3c:	08005c6b 	.word	0x08005c6b
 8005c40:	08005c63 	.word	0x08005c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c44:	f7fe fe30 	bl	80048a8 <HAL_RCC_GetPCLK1Freq>
 8005c48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c4a:	e014      	b.n	8005c76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c4c:	f7fe fe42 	bl	80048d4 <HAL_RCC_GetPCLK2Freq>
 8005c50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c52:	e010      	b.n	8005c76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c54:	4b1a      	ldr	r3, [pc, #104]	@ (8005cc0 <UART_SetConfig+0x5c0>)
 8005c56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c58:	e00d      	b.n	8005c76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5a:	f7fe fdb7 	bl	80047cc <HAL_RCC_GetSysClockFreq>
 8005c5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c60:	e009      	b.n	8005c76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c68:	e005      	b.n	8005c76 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c74:	bf00      	nop
    }

    if (pclk != 0U)
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d028      	beq.n	8005cce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c80:	4a10      	ldr	r2, [pc, #64]	@ (8005cc4 <UART_SetConfig+0x5c4>)
 8005c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c86:	461a      	mov	r2, r3
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	441a      	add	r2, r3
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2b0f      	cmp	r3, #15
 8005ca4:	d910      	bls.n	8005cc8 <UART_SetConfig+0x5c8>
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cac:	d20c      	bcs.n	8005cc8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60da      	str	r2, [r3, #12]
 8005cb8:	e009      	b.n	8005cce <UART_SetConfig+0x5ce>
 8005cba:	bf00      	nop
 8005cbc:	40008000 	.word	0x40008000
 8005cc0:	00f42400 	.word	0x00f42400
 8005cc4:	0800b214 	.word	0x0800b214
      }
      else
      {
        ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005cea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3730      	adds	r7, #48	@ 0x30
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01a      	beq.n	8005e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005df6:	d10a      	bne.n	8005e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	605a      	str	r2, [r3, #4]
  }
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b098      	sub	sp, #96	@ 0x60
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e4c:	f7fb fcf4 	bl	8001838 <HAL_GetTick>
 8005e50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d12f      	bne.n	8005ec0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f88e 	bl	8005f90 <UART_WaitOnFlagUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d022      	beq.n	8005ec0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e6      	bne.n	8005e7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e063      	b.n	8005f88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0304 	and.w	r3, r3, #4
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d149      	bne.n	8005f62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ece:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f857 	bl	8005f90 <UART_WaitOnFlagUntilTimeout>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d03c      	beq.n	8005f62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f06:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e6      	bne.n	8005ee8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3308      	adds	r3, #8
 8005f20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f023 0301 	bic.w	r3, r3, #1
 8005f30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3308      	adds	r3, #8
 8005f38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f3a:	61fa      	str	r2, [r7, #28]
 8005f3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	69b9      	ldr	r1, [r7, #24]
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	617b      	str	r3, [r7, #20]
   return(result);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e5      	bne.n	8005f1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e012      	b.n	8005f88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3758      	adds	r7, #88	@ 0x58
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa0:	e04f      	b.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa8:	d04b      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005faa:	f7fb fc45 	bl	8001838 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d302      	bcc.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e04e      	b.n	8006062 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d037      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b80      	cmp	r3, #128	@ 0x80
 8005fd6:	d034      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b40      	cmp	r3, #64	@ 0x40
 8005fdc:	d031      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d110      	bne.n	800600e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2208      	movs	r2, #8
 8005ff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f838 	bl	800606a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2208      	movs	r2, #8
 8005ffe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e029      	b.n	8006062 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800601c:	d111      	bne.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f81e 	bl	800606a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2220      	movs	r2, #32
 8006032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e00f      	b.n	8006062 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4013      	ands	r3, r2
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	429a      	cmp	r2, r3
 8006050:	bf0c      	ite	eq
 8006052:	2301      	moveq	r3, #1
 8006054:	2300      	movne	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	429a      	cmp	r2, r3
 800605e:	d0a0      	beq.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800606a:	b480      	push	{r7}
 800606c:	b095      	sub	sp, #84	@ 0x54
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006082:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006086:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006090:	643b      	str	r3, [r7, #64]	@ 0x40
 8006092:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006096:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800609e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e6      	bne.n	8006072 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3308      	adds	r3, #8
 80060aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060ba:	f023 0301 	bic.w	r3, r3, #1
 80060be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3308      	adds	r3, #8
 80060c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e3      	bne.n	80060a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d118      	bne.n	8006116 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f023 0310 	bic.w	r3, r3, #16
 80060f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006102:	61bb      	str	r3, [r7, #24]
 8006104:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	6979      	ldr	r1, [r7, #20]
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	613b      	str	r3, [r7, #16]
   return(result);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e6      	bne.n	80060e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800612a:	bf00      	nop
 800612c:	3754      	adds	r7, #84	@ 0x54
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006136:	b480      	push	{r7}
 8006138:	b085      	sub	sp, #20
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_UARTEx_DisableFifoMode+0x16>
 8006148:	2302      	movs	r3, #2
 800614a:	e027      	b.n	800619c <HAL_UARTEx_DisableFifoMode+0x66>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2224      	movs	r2, #36	@ 0x24
 8006158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0201 	bic.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800617a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061bc:	2302      	movs	r3, #2
 80061be:	e02d      	b.n	800621c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2224      	movs	r2, #36	@ 0x24
 80061cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0201 	bic.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f84f 	bl	80062a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006238:	2302      	movs	r3, #2
 800623a:	e02d      	b.n	8006298 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2224      	movs	r2, #36	@ 0x24
 8006248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0201 	bic.w	r2, r2, #1
 8006262:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f811 	bl	80062a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d108      	bne.n	80062c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062c0:	e031      	b.n	8006326 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062c2:	2308      	movs	r3, #8
 80062c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062c6:	2308      	movs	r3, #8
 80062c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	0e5b      	lsrs	r3, r3, #25
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	0f5b      	lsrs	r3, r3, #29
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062ea:	7bbb      	ldrb	r3, [r7, #14]
 80062ec:	7b3a      	ldrb	r2, [r7, #12]
 80062ee:	4911      	ldr	r1, [pc, #68]	@ (8006334 <UARTEx_SetNbDataToProcess+0x94>)
 80062f0:	5c8a      	ldrb	r2, [r1, r2]
 80062f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062f6:	7b3a      	ldrb	r2, [r7, #12]
 80062f8:	490f      	ldr	r1, [pc, #60]	@ (8006338 <UARTEx_SetNbDataToProcess+0x98>)
 80062fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006300:	b29a      	uxth	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	7b7a      	ldrb	r2, [r7, #13]
 800630c:	4909      	ldr	r1, [pc, #36]	@ (8006334 <UARTEx_SetNbDataToProcess+0x94>)
 800630e:	5c8a      	ldrb	r2, [r1, r2]
 8006310:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006314:	7b7a      	ldrb	r2, [r7, #13]
 8006316:	4908      	ldr	r1, [pc, #32]	@ (8006338 <UARTEx_SetNbDataToProcess+0x98>)
 8006318:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800631a:	fb93 f3f2 	sdiv	r3, r3, r2
 800631e:	b29a      	uxth	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006326:	bf00      	nop
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	0800b22c 	.word	0x0800b22c
 8006338:	0800b234 	.word	0x0800b234

0800633c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800634c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006350:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	b29a      	uxth	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800636a:	b480      	push	{r7}
 800636c:	b085      	sub	sp, #20
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006372:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006376:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800637e:	b29a      	uxth	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	b29b      	uxth	r3, r3
 8006384:	43db      	mvns	r3, r3
 8006386:	b29b      	uxth	r3, r3
 8006388:	4013      	ands	r3, r2
 800638a:	b29a      	uxth	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	1d3b      	adds	r3, r7, #4
 80063aa:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063dc:	b480      	push	{r7}
 80063de:	b0a7      	sub	sp, #156	@ 0x9c
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80063fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006402:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	78db      	ldrb	r3, [r3, #3]
 800640a:	2b03      	cmp	r3, #3
 800640c:	d81f      	bhi.n	800644e <USB_ActivateEndpoint+0x72>
 800640e:	a201      	add	r2, pc, #4	@ (adr r2, 8006414 <USB_ActivateEndpoint+0x38>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	08006425 	.word	0x08006425
 8006418:	08006441 	.word	0x08006441
 800641c:	08006457 	.word	0x08006457
 8006420:	08006433 	.word	0x08006433
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006424:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006428:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800642c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006430:	e012      	b.n	8006458 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006432:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006436:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800643a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800643e:	e00b      	b.n	8006458 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006440:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006444:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006448:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800644c:	e004      	b.n	8006458 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8006454:	e000      	b.n	8006458 <USB_ActivateEndpoint+0x7c>
      break;
 8006456:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	441a      	add	r2, r3
 8006462:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800646a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800646e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006476:	b29b      	uxth	r3, r3
 8006478:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	b21b      	sxth	r3, r3
 800648a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800648e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006492:	b21a      	sxth	r2, r3
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	b21b      	sxth	r3, r3
 800649a:	4313      	orrs	r3, r2
 800649c:	b21b      	sxth	r3, r3
 800649e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	441a      	add	r2, r3
 80064ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80064b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	7b1b      	ldrb	r3, [r3, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f040 8180 	bne.w	80067ce <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	785b      	ldrb	r3, [r3, #1]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 8084 	beq.w	80065e0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	461a      	mov	r2, r3
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	4413      	add	r3, r2
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	00da      	lsls	r2, r3, #3
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	88db      	ldrh	r3, [r3, #6]
 8006500:	085b      	lsrs	r3, r3, #1
 8006502:	b29b      	uxth	r3, r3
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	827b      	strh	r3, [r7, #18]
 800651a:	8a7b      	ldrh	r3, [r7, #18]
 800651c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d01b      	beq.n	800655c <USB_ActivateEndpoint+0x180>
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800653a:	823b      	strh	r3, [r7, #16]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	441a      	add	r2, r3
 8006546:	8a3b      	ldrh	r3, [r7, #16]
 8006548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800654c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006554:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006558:	b29b      	uxth	r3, r3
 800655a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	78db      	ldrb	r3, [r3, #3]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d020      	beq.n	80065a6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29b      	uxth	r3, r3
 8006572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006576:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800657a:	81bb      	strh	r3, [r7, #12]
 800657c:	89bb      	ldrh	r3, [r7, #12]
 800657e:	f083 0320 	eor.w	r3, r3, #32
 8006582:	81bb      	strh	r3, [r7, #12]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	441a      	add	r2, r3
 800658e:	89bb      	ldrh	r3, [r7, #12]
 8006590:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006594:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800659c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	8013      	strh	r3, [r2, #0]
 80065a4:	e3f9      	b.n	8006d9a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065bc:	81fb      	strh	r3, [r7, #14]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	441a      	add	r2, r3
 80065c8:	89fb      	ldrh	r3, [r7, #14]
 80065ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065da:	b29b      	uxth	r3, r3
 80065dc:	8013      	strh	r3, [r2, #0]
 80065de:	e3dc      	b.n	8006d9a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	4413      	add	r3, r2
 80065f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	00da      	lsls	r2, r3, #3
 80065fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fc:	4413      	add	r3, r2
 80065fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	88db      	ldrh	r3, [r3, #6]
 8006608:	085b      	lsrs	r3, r3, #1
 800660a:	b29b      	uxth	r3, r3
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	b29a      	uxth	r2, r3
 8006610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006612:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800661e:	b29b      	uxth	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006624:	4413      	add	r3, r2
 8006626:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	00da      	lsls	r2, r3, #3
 800662e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006630:	4413      	add	r3, r2
 8006632:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006636:	627b      	str	r3, [r7, #36]	@ 0x24
 8006638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006642:	b29a      	uxth	r2, r3
 8006644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006646:	801a      	strh	r2, [r3, #0]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10a      	bne.n	8006666 <USB_ActivateEndpoint+0x28a>
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	b29b      	uxth	r3, r3
 8006656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800665a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800665e:	b29a      	uxth	r2, r3
 8006660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006662:	801a      	strh	r2, [r3, #0]
 8006664:	e041      	b.n	80066ea <USB_ActivateEndpoint+0x30e>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	2b3e      	cmp	r3, #62	@ 0x3e
 800666c:	d81c      	bhi.n	80066a8 <USB_ActivateEndpoint+0x2cc>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	085b      	lsrs	r3, r3, #1
 8006674:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d004      	beq.n	800668e <USB_ActivateEndpoint+0x2b2>
 8006684:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006688:	3301      	adds	r3, #1
 800668a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	b29a      	uxth	r2, r3
 8006694:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006698:	b29b      	uxth	r3, r3
 800669a:	029b      	lsls	r3, r3, #10
 800669c:	b29b      	uxth	r3, r3
 800669e:	4313      	orrs	r3, r2
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a4:	801a      	strh	r2, [r3, #0]
 80066a6:	e020      	b.n	80066ea <USB_ActivateEndpoint+0x30e>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	095b      	lsrs	r3, r3, #5
 80066ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d104      	bne.n	80066c8 <USB_ActivateEndpoint+0x2ec>
 80066be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80066c2:	3b01      	subs	r3, #1
 80066c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	029b      	lsls	r3, r3, #10
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	4313      	orrs	r3, r2
 80066da:	b29b      	uxth	r3, r3
 80066dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80066f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80066fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01b      	beq.n	800673a <USB_ActivateEndpoint+0x35e>
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006718:	843b      	strh	r3, [r7, #32]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	441a      	add	r2, r3
 8006724:	8c3b      	ldrh	r3, [r7, #32]
 8006726:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800672a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800672e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006736:	b29b      	uxth	r3, r3
 8006738:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d124      	bne.n	800678c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	b29b      	uxth	r3, r3
 8006750:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006758:	83bb      	strh	r3, [r7, #28]
 800675a:	8bbb      	ldrh	r3, [r7, #28]
 800675c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006760:	83bb      	strh	r3, [r7, #28]
 8006762:	8bbb      	ldrh	r3, [r7, #28]
 8006764:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006768:	83bb      	strh	r3, [r7, #28]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	441a      	add	r2, r3
 8006774:	8bbb      	ldrh	r3, [r7, #28]
 8006776:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800677a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800677e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006786:	b29b      	uxth	r3, r3
 8006788:	8013      	strh	r3, [r2, #0]
 800678a:	e306      	b.n	8006d9a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	b29b      	uxth	r3, r3
 800679a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800679e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a2:	83fb      	strh	r3, [r7, #30]
 80067a4:	8bfb      	ldrh	r3, [r7, #30]
 80067a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067aa:	83fb      	strh	r3, [r7, #30]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	441a      	add	r2, r3
 80067b6:	8bfb      	ldrh	r3, [r7, #30]
 80067b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	8013      	strh	r3, [r2, #0]
 80067cc:	e2e5      	b.n	8006d9a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	78db      	ldrb	r3, [r3, #3]
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d11e      	bne.n	8006814 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ec:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	441a      	add	r2, r3
 80067fa:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80067fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006806:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800680a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800680e:	b29b      	uxth	r3, r3
 8006810:	8013      	strh	r3, [r2, #0]
 8006812:	e01d      	b.n	8006850 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	b29b      	uxth	r3, r3
 8006822:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800682a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	441a      	add	r2, r3
 8006838:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800683c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006840:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006844:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800684c:	b29b      	uxth	r3, r3
 800684e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800685a:	b29b      	uxth	r3, r3
 800685c:	461a      	mov	r2, r3
 800685e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006860:	4413      	add	r3, r2
 8006862:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	00da      	lsls	r2, r3, #3
 800686a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800686c:	4413      	add	r3, r2
 800686e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006872:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	891b      	ldrh	r3, [r3, #8]
 8006878:	085b      	lsrs	r3, r3, #1
 800687a:	b29b      	uxth	r3, r3
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006882:	801a      	strh	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	677b      	str	r3, [r7, #116]	@ 0x74
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800688e:	b29b      	uxth	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006894:	4413      	add	r3, r2
 8006896:	677b      	str	r3, [r7, #116]	@ 0x74
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	00da      	lsls	r2, r3, #3
 800689e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068a0:	4413      	add	r3, r2
 80068a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	895b      	ldrh	r3, [r3, #10]
 80068ac:	085b      	lsrs	r3, r3, #1
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068b6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	785b      	ldrb	r3, [r3, #1]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f040 81af 	bne.w	8006c20 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80068d2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80068d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d01d      	beq.n	800691a <USB_ActivateEndpoint+0x53e>
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	441a      	add	r2, r3
 8006902:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006906:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800690a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800690e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006916:	b29b      	uxth	r3, r3
 8006918:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800692a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800692e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006932:	2b00      	cmp	r3, #0
 8006934:	d01d      	beq.n	8006972 <USB_ActivateEndpoint+0x596>
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	b29b      	uxth	r3, r3
 8006944:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800694c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	441a      	add	r2, r3
 800695a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800695e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006962:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800696a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800696e:	b29b      	uxth	r3, r3
 8006970:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	785b      	ldrb	r3, [r3, #1]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d16b      	bne.n	8006a52 <USB_ActivateEndpoint+0x676>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006984:	b29b      	uxth	r3, r3
 8006986:	461a      	mov	r2, r3
 8006988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800698a:	4413      	add	r3, r2
 800698c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	00da      	lsls	r2, r3, #3
 8006994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006996:	4413      	add	r3, r2
 8006998:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800699c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800699e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069ac:	801a      	strh	r2, [r3, #0]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10a      	bne.n	80069cc <USB_ActivateEndpoint+0x5f0>
 80069b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069c8:	801a      	strh	r2, [r3, #0]
 80069ca:	e05d      	b.n	8006a88 <USB_ActivateEndpoint+0x6ac>
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80069d2:	d81c      	bhi.n	8006a0e <USB_ActivateEndpoint+0x632>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	085b      	lsrs	r3, r3, #1
 80069da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d004      	beq.n	80069f4 <USB_ActivateEndpoint+0x618>
 80069ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069ee:	3301      	adds	r3, #1
 80069f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80069f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	029b      	lsls	r3, r3, #10
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	4313      	orrs	r3, r2
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a0a:	801a      	strh	r2, [r3, #0]
 8006a0c:	e03c      	b.n	8006a88 <USB_ActivateEndpoint+0x6ac>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	095b      	lsrs	r3, r3, #5
 8006a14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f003 031f 	and.w	r3, r3, #31
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <USB_ActivateEndpoint+0x652>
 8006a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	029b      	lsls	r3, r3, #10
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a4e:	801a      	strh	r2, [r3, #0]
 8006a50:	e01a      	b.n	8006a88 <USB_ActivateEndpoint+0x6ac>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	785b      	ldrb	r3, [r3, #1]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d116      	bne.n	8006a88 <USB_ActivateEndpoint+0x6ac>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	461a      	mov	r2, r3
 8006a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a6a:	4413      	add	r3, r2
 8006a6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	00da      	lsls	r2, r3, #3
 8006a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a76:	4413      	add	r3, r2
 8006a78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a86:	801a      	strh	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	785b      	ldrb	r3, [r3, #1]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d16b      	bne.n	8006b6c <USB_ActivateEndpoint+0x790>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa4:	4413      	add	r3, r2
 8006aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	00da      	lsls	r2, r3, #3
 8006aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac6:	801a      	strh	r2, [r3, #0]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <USB_ActivateEndpoint+0x70a>
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae2:	801a      	strh	r2, [r3, #0]
 8006ae4:	e05b      	b.n	8006b9e <USB_ActivateEndpoint+0x7c2>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b3e      	cmp	r3, #62	@ 0x3e
 8006aec:	d81c      	bhi.n	8006b28 <USB_ActivateEndpoint+0x74c>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d004      	beq.n	8006b0e <USB_ActivateEndpoint+0x732>
 8006b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b08:	3301      	adds	r3, #1
 8006b0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	029b      	lsls	r3, r3, #10
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b24:	801a      	strh	r2, [r3, #0]
 8006b26:	e03a      	b.n	8006b9e <USB_ActivateEndpoint+0x7c2>
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	095b      	lsrs	r3, r3, #5
 8006b2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	f003 031f 	and.w	r3, r3, #31
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d104      	bne.n	8006b48 <USB_ActivateEndpoint+0x76c>
 8006b3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b42:	3b01      	subs	r3, #1
 8006b44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	029b      	lsls	r3, r3, #10
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b68:	801a      	strh	r2, [r3, #0]
 8006b6a:	e018      	b.n	8006b9e <USB_ActivateEndpoint+0x7c2>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	785b      	ldrb	r3, [r3, #1]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d114      	bne.n	8006b9e <USB_ActivateEndpoint+0x7c2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b80:	4413      	add	r3, r2
 8006b82:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	00da      	lsls	r2, r3, #3
 8006b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b92:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b9c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006bb6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006bb8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006bbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006bbe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006bc0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006bc4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	441a      	add	r2, r3
 8006bd0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bfc:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	441a      	add	r2, r3
 8006c08:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006c0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	8013      	strh	r3, [r2, #0]
 8006c1e:	e0bc      	b.n	8006d9a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8006c30:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01d      	beq.n	8006c78 <USB_ActivateEndpoint+0x89c>
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c52:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	441a      	add	r2, r3
 8006c60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8006c88:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01d      	beq.n	8006cd0 <USB_ActivateEndpoint+0x8f4>
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006caa:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	441a      	add	r2, r3
 8006cb8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006cbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cc8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	78db      	ldrb	r3, [r3, #3]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d024      	beq.n	8006d22 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cee:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006cf2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006cf6:	f083 0320 	eor.w	r3, r3, #32
 8006cfa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	441a      	add	r2, r3
 8006d08:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006d0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	8013      	strh	r3, [r2, #0]
 8006d20:	e01d      	b.n	8006d5e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d38:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	441a      	add	r2, r3
 8006d46:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006d4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d74:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	441a      	add	r2, r3
 8006d82:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006d86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006d9a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	379c      	adds	r7, #156	@ 0x9c
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop

08006dac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b08d      	sub	sp, #52	@ 0x34
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	7b1b      	ldrb	r3, [r3, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f040 808e 	bne.w	8006edc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	785b      	ldrb	r3, [r3, #1]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d044      	beq.n	8006e52 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	81bb      	strh	r3, [r7, #12]
 8006dd6:	89bb      	ldrh	r3, [r7, #12]
 8006dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01b      	beq.n	8006e18 <USB_DeactivateEndpoint+0x6c>
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df6:	817b      	strh	r3, [r7, #10]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	441a      	add	r2, r3
 8006e02:	897b      	ldrh	r3, [r7, #10]
 8006e04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e2e:	813b      	strh	r3, [r7, #8]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	441a      	add	r2, r3
 8006e3a:	893b      	ldrh	r3, [r7, #8]
 8006e3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	8013      	strh	r3, [r2, #0]
 8006e50:	e192      	b.n	8007178 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	827b      	strh	r3, [r7, #18]
 8006e60:	8a7b      	ldrh	r3, [r7, #18]
 8006e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d01b      	beq.n	8006ea2 <USB_DeactivateEndpoint+0xf6>
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e80:	823b      	strh	r3, [r7, #16]
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	441a      	add	r2, r3
 8006e8c:	8a3b      	ldrh	r3, [r7, #16]
 8006e8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb8:	81fb      	strh	r3, [r7, #14]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	441a      	add	r2, r3
 8006ec4:	89fb      	ldrh	r3, [r7, #14]
 8006ec6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ece:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	8013      	strh	r3, [r2, #0]
 8006eda:	e14d      	b.n	8007178 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	785b      	ldrb	r3, [r3, #1]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f040 80a5 	bne.w	8007030 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	843b      	strh	r3, [r7, #32]
 8006ef4:	8c3b      	ldrh	r3, [r7, #32]
 8006ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d01b      	beq.n	8006f36 <USB_DeactivateEndpoint+0x18a>
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f14:	83fb      	strh	r3, [r7, #30]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	441a      	add	r2, r3
 8006f20:	8bfb      	ldrh	r3, [r7, #30]
 8006f22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	83bb      	strh	r3, [r7, #28]
 8006f44:	8bbb      	ldrh	r3, [r7, #28]
 8006f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d01b      	beq.n	8006f86 <USB_DeactivateEndpoint+0x1da>
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f64:	837b      	strh	r3, [r7, #26]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	441a      	add	r2, r3
 8006f70:	8b7b      	ldrh	r3, [r7, #26]
 8006f72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f7e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9c:	833b      	strh	r3, [r7, #24]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	441a      	add	r2, r3
 8006fa8:	8b3b      	ldrh	r3, [r7, #24]
 8006faa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fb6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd4:	82fb      	strh	r3, [r7, #22]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	441a      	add	r2, r3
 8006fe0:	8afb      	ldrh	r3, [r7, #22]
 8006fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	b29b      	uxth	r3, r3
 8007004:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007008:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800700c:	82bb      	strh	r3, [r7, #20]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	441a      	add	r2, r3
 8007018:	8abb      	ldrh	r3, [r7, #20]
 800701a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800701e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800702a:	b29b      	uxth	r3, r3
 800702c:	8013      	strh	r3, [r2, #0]
 800702e:	e0a3      	b.n	8007178 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800703e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01b      	beq.n	8007080 <USB_DeactivateEndpoint+0x2d4>
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800705a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800705e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	441a      	add	r2, r3
 800706a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800706c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007070:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007074:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800707c:	b29b      	uxth	r3, r3
 800707e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800708e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01b      	beq.n	80070d0 <USB_DeactivateEndpoint+0x324>
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	441a      	add	r2, r3
 80070ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80070bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	441a      	add	r2, r3
 80070f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80070f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007104:	b29b      	uxth	r3, r3
 8007106:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800711a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800711e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	441a      	add	r2, r3
 800712a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800712c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007130:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800713c:	b29b      	uxth	r3, r3
 800713e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29b      	uxth	r3, r3
 800714e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007156:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	441a      	add	r2, r3
 8007162:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007164:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007168:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800716c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007174:	b29b      	uxth	r3, r3
 8007176:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3734      	adds	r7, #52	@ 0x34
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b0ac      	sub	sp, #176	@ 0xb0
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	2b01      	cmp	r3, #1
 8007196:	f040 84ca 	bne.w	8007b2e <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d904      	bls.n	80071b0 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071ae:	e003      	b.n	80071b8 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	7b1b      	ldrb	r3, [r3, #12]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d122      	bne.n	8007206 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	6959      	ldr	r1, [r3, #20]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	88da      	ldrh	r2, [r3, #6]
 80071c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 febd 	bl	8007f4e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	613b      	str	r3, [r7, #16]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071de:	b29b      	uxth	r3, r3
 80071e0:	461a      	mov	r2, r3
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	4413      	add	r3, r2
 80071e6:	613b      	str	r3, [r7, #16]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	00da      	lsls	r2, r3, #3
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	4413      	add	r3, r2
 80071f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	801a      	strh	r2, [r3, #0]
 8007202:	f000 bc6f 	b.w	8007ae4 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	78db      	ldrb	r3, [r3, #3]
 800720a:	2b02      	cmp	r3, #2
 800720c:	f040 831e 	bne.w	800784c <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	6a1a      	ldr	r2, [r3, #32]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	429a      	cmp	r2, r3
 800721a:	f240 82cf 	bls.w	80077bc <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	b29b      	uxth	r3, r3
 800722c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007230:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007234:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	441a      	add	r2, r3
 8007242:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007246:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800724a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800724e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007256:	b29b      	uxth	r3, r3
 8007258:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	6a1a      	ldr	r2, [r3, #32]
 800725e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007262:	1ad2      	subs	r2, r2, r3
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	b29b      	uxth	r3, r3
 8007276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 814f 	beq.w	800751e <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	633b      	str	r3, [r7, #48]	@ 0x30
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d16b      	bne.n	8007364 <USB_EPStartXfer+0x1de>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007296:	b29b      	uxth	r3, r3
 8007298:	461a      	mov	r2, r3
 800729a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729c:	4413      	add	r3, r2
 800729e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	00da      	lsls	r2, r3, #3
 80072a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a8:	4413      	add	r3, r2
 80072aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <USB_EPStartXfer+0x158>
 80072c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072da:	801a      	strh	r2, [r3, #0]
 80072dc:	e05b      	b.n	8007396 <USB_EPStartXfer+0x210>
 80072de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80072e4:	d81c      	bhi.n	8007320 <USB_EPStartXfer+0x19a>
 80072e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80072f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d004      	beq.n	8007306 <USB_EPStartXfer+0x180>
 80072fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007300:	3301      	adds	r3, #1
 8007302:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	b29a      	uxth	r2, r3
 800730c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007310:	b29b      	uxth	r3, r3
 8007312:	029b      	lsls	r3, r3, #10
 8007314:	b29b      	uxth	r3, r3
 8007316:	4313      	orrs	r3, r2
 8007318:	b29a      	uxth	r2, r3
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	801a      	strh	r2, [r3, #0]
 800731e:	e03a      	b.n	8007396 <USB_EPStartXfer+0x210>
 8007320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007324:	095b      	lsrs	r3, r3, #5
 8007326:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800732a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	2b00      	cmp	r3, #0
 8007334:	d104      	bne.n	8007340 <USB_EPStartXfer+0x1ba>
 8007336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800733a:	3b01      	subs	r3, #1
 800733c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	b29a      	uxth	r2, r3
 8007346:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800734a:	b29b      	uxth	r3, r3
 800734c:	029b      	lsls	r3, r3, #10
 800734e:	b29b      	uxth	r3, r3
 8007350:	4313      	orrs	r3, r2
 8007352:	b29b      	uxth	r3, r3
 8007354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800735c:	b29a      	uxth	r2, r3
 800735e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007360:	801a      	strh	r2, [r3, #0]
 8007362:	e018      	b.n	8007396 <USB_EPStartXfer+0x210>
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	785b      	ldrb	r3, [r3, #1]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d114      	bne.n	8007396 <USB_EPStartXfer+0x210>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007372:	b29b      	uxth	r3, r3
 8007374:	461a      	mov	r2, r3
 8007376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007378:	4413      	add	r3, r2
 800737a:	633b      	str	r3, [r7, #48]	@ 0x30
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	00da      	lsls	r2, r3, #3
 8007382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007384:	4413      	add	r3, r2
 8007386:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800738a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800738c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007390:	b29a      	uxth	r2, r3
 8007392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007394:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	895b      	ldrh	r3, [r3, #10]
 800739a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6959      	ldr	r1, [r3, #20]
 80073a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fdce 	bl	8007f4e <USB_WritePMA>
            ep->xfer_buff += len;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	695a      	ldr	r2, [r3, #20]
 80073b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073ba:	441a      	add	r2, r3
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	6a1a      	ldr	r2, [r3, #32]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d907      	bls.n	80073dc <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	6a1a      	ldr	r2, [r3, #32]
 80073d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073d4:	1ad2      	subs	r2, r2, r3
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	621a      	str	r2, [r3, #32]
 80073da:	e006      	b.n	80073ea <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2200      	movs	r2, #0
 80073e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	785b      	ldrb	r3, [r3, #1]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d16b      	bne.n	80074ca <USB_EPStartXfer+0x344>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	61bb      	str	r3, [r7, #24]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	461a      	mov	r2, r3
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	4413      	add	r3, r2
 8007404:	61bb      	str	r3, [r7, #24]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	00da      	lsls	r2, r3, #3
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	4413      	add	r3, r2
 8007410:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	b29b      	uxth	r3, r3
 800741c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007420:	b29a      	uxth	r2, r3
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	801a      	strh	r2, [r3, #0]
 8007426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10a      	bne.n	8007444 <USB_EPStartXfer+0x2be>
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800743c:	b29a      	uxth	r2, r3
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	801a      	strh	r2, [r3, #0]
 8007442:	e05d      	b.n	8007500 <USB_EPStartXfer+0x37a>
 8007444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007448:	2b3e      	cmp	r3, #62	@ 0x3e
 800744a:	d81c      	bhi.n	8007486 <USB_EPStartXfer+0x300>
 800744c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007450:	085b      	lsrs	r3, r3, #1
 8007452:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d004      	beq.n	800746c <USB_EPStartXfer+0x2e6>
 8007462:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007466:	3301      	adds	r3, #1
 8007468:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29a      	uxth	r2, r3
 8007472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007476:	b29b      	uxth	r3, r3
 8007478:	029b      	lsls	r3, r3, #10
 800747a:	b29b      	uxth	r3, r3
 800747c:	4313      	orrs	r3, r2
 800747e:	b29a      	uxth	r2, r3
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	801a      	strh	r2, [r3, #0]
 8007484:	e03c      	b.n	8007500 <USB_EPStartXfer+0x37a>
 8007486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800748a:	095b      	lsrs	r3, r3, #5
 800748c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007494:	f003 031f 	and.w	r3, r3, #31
 8007498:	2b00      	cmp	r3, #0
 800749a:	d104      	bne.n	80074a6 <USB_EPStartXfer+0x320>
 800749c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80074a0:	3b01      	subs	r3, #1
 80074a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	029b      	lsls	r3, r3, #10
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	4313      	orrs	r3, r2
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	801a      	strh	r2, [r3, #0]
 80074c8:	e01a      	b.n	8007500 <USB_EPStartXfer+0x37a>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d116      	bne.n	8007500 <USB_EPStartXfer+0x37a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	623b      	str	r3, [r7, #32]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074dc:	b29b      	uxth	r3, r3
 80074de:	461a      	mov	r2, r3
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	4413      	add	r3, r2
 80074e4:	623b      	str	r3, [r7, #32]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	00da      	lsls	r2, r3, #3
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	4413      	add	r3, r2
 80074f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074f4:	61fb      	str	r3, [r7, #28]
 80074f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	891b      	ldrh	r3, [r3, #8]
 8007504:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	6959      	ldr	r1, [r3, #20]
 800750c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007510:	b29b      	uxth	r3, r3
 8007512:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fd19 	bl	8007f4e <USB_WritePMA>
 800751c:	e2e2      	b.n	8007ae4 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	785b      	ldrb	r3, [r3, #1]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d16b      	bne.n	80075fe <USB_EPStartXfer+0x478>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	64bb      	str	r3, [r7, #72]	@ 0x48
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007530:	b29b      	uxth	r3, r3
 8007532:	461a      	mov	r2, r3
 8007534:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007536:	4413      	add	r3, r2
 8007538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	00da      	lsls	r2, r3, #3
 8007540:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007542:	4413      	add	r3, r2
 8007544:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007548:	647b      	str	r3, [r7, #68]	@ 0x44
 800754a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	b29b      	uxth	r3, r3
 8007550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007554:	b29a      	uxth	r2, r3
 8007556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007558:	801a      	strh	r2, [r3, #0]
 800755a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10a      	bne.n	8007578 <USB_EPStartXfer+0x3f2>
 8007562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	b29b      	uxth	r3, r3
 8007568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800756c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007570:	b29a      	uxth	r2, r3
 8007572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007574:	801a      	strh	r2, [r3, #0]
 8007576:	e05d      	b.n	8007634 <USB_EPStartXfer+0x4ae>
 8007578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800757c:	2b3e      	cmp	r3, #62	@ 0x3e
 800757e:	d81c      	bhi.n	80075ba <USB_EPStartXfer+0x434>
 8007580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007584:	085b      	lsrs	r3, r3, #1
 8007586:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800758a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d004      	beq.n	80075a0 <USB_EPStartXfer+0x41a>
 8007596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800759a:	3301      	adds	r3, #1
 800759c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	029b      	lsls	r3, r3, #10
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	4313      	orrs	r3, r2
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075b6:	801a      	strh	r2, [r3, #0]
 80075b8:	e03c      	b.n	8007634 <USB_EPStartXfer+0x4ae>
 80075ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075be:	095b      	lsrs	r3, r3, #5
 80075c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075c8:	f003 031f 	and.w	r3, r3, #31
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d104      	bne.n	80075da <USB_EPStartXfer+0x454>
 80075d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075d4:	3b01      	subs	r3, #1
 80075d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29a      	uxth	r2, r3
 80075e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	029b      	lsls	r3, r3, #10
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	4313      	orrs	r3, r2
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075fa:	801a      	strh	r2, [r3, #0]
 80075fc:	e01a      	b.n	8007634 <USB_EPStartXfer+0x4ae>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	785b      	ldrb	r3, [r3, #1]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d116      	bne.n	8007634 <USB_EPStartXfer+0x4ae>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	653b      	str	r3, [r7, #80]	@ 0x50
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007610:	b29b      	uxth	r3, r3
 8007612:	461a      	mov	r2, r3
 8007614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007616:	4413      	add	r3, r2
 8007618:	653b      	str	r3, [r7, #80]	@ 0x50
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	00da      	lsls	r2, r3, #3
 8007620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007622:	4413      	add	r3, r2
 8007624:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007628:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800762a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800762e:	b29a      	uxth	r2, r3
 8007630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007632:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	891b      	ldrh	r3, [r3, #8]
 8007638:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	6959      	ldr	r1, [r3, #20]
 8007640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007644:	b29b      	uxth	r3, r3
 8007646:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fc7f 	bl	8007f4e <USB_WritePMA>
            ep->xfer_buff += len;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	695a      	ldr	r2, [r3, #20]
 8007654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007658:	441a      	add	r2, r3
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	6a1a      	ldr	r2, [r3, #32]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	429a      	cmp	r2, r3
 8007668:	d907      	bls.n	800767a <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	6a1a      	ldr	r2, [r3, #32]
 800766e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007672:	1ad2      	subs	r2, r2, r3
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	621a      	str	r2, [r3, #32]
 8007678:	e006      	b.n	8007688 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2200      	movs	r2, #0
 8007686:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	643b      	str	r3, [r7, #64]	@ 0x40
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	785b      	ldrb	r3, [r3, #1]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d16b      	bne.n	800776c <USB_EPStartXfer+0x5e6>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800769e:	b29b      	uxth	r3, r3
 80076a0:	461a      	mov	r2, r3
 80076a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a4:	4413      	add	r3, r2
 80076a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	00da      	lsls	r2, r3, #3
 80076ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b0:	4413      	add	r3, r2
 80076b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	b29b      	uxth	r3, r3
 80076be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076c6:	801a      	strh	r2, [r3, #0]
 80076c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <USB_EPStartXfer+0x560>
 80076d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076de:	b29a      	uxth	r2, r3
 80076e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e2:	801a      	strh	r2, [r3, #0]
 80076e4:	e05b      	b.n	800779e <USB_EPStartXfer+0x618>
 80076e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80076ec:	d81c      	bhi.n	8007728 <USB_EPStartXfer+0x5a2>
 80076ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076f2:	085b      	lsrs	r3, r3, #1
 80076f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <USB_EPStartXfer+0x588>
 8007704:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007708:	3301      	adds	r3, #1
 800770a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800770e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	b29a      	uxth	r2, r3
 8007714:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007718:	b29b      	uxth	r3, r3
 800771a:	029b      	lsls	r3, r3, #10
 800771c:	b29b      	uxth	r3, r3
 800771e:	4313      	orrs	r3, r2
 8007720:	b29a      	uxth	r2, r3
 8007722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007724:	801a      	strh	r2, [r3, #0]
 8007726:	e03a      	b.n	800779e <USB_EPStartXfer+0x618>
 8007728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800772c:	095b      	lsrs	r3, r3, #5
 800772e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007736:	f003 031f 	and.w	r3, r3, #31
 800773a:	2b00      	cmp	r3, #0
 800773c:	d104      	bne.n	8007748 <USB_EPStartXfer+0x5c2>
 800773e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007742:	3b01      	subs	r3, #1
 8007744:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	b29a      	uxth	r2, r3
 800774e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007752:	b29b      	uxth	r3, r3
 8007754:	029b      	lsls	r3, r3, #10
 8007756:	b29b      	uxth	r3, r3
 8007758:	4313      	orrs	r3, r2
 800775a:	b29b      	uxth	r3, r3
 800775c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007764:	b29a      	uxth	r2, r3
 8007766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007768:	801a      	strh	r2, [r3, #0]
 800776a:	e018      	b.n	800779e <USB_EPStartXfer+0x618>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	785b      	ldrb	r3, [r3, #1]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d114      	bne.n	800779e <USB_EPStartXfer+0x618>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800777a:	b29b      	uxth	r3, r3
 800777c:	461a      	mov	r2, r3
 800777e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007780:	4413      	add	r3, r2
 8007782:	643b      	str	r3, [r7, #64]	@ 0x40
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	00da      	lsls	r2, r3, #3
 800778a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800778c:	4413      	add	r3, r2
 800778e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007792:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007794:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007798:	b29a      	uxth	r2, r3
 800779a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800779c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	895b      	ldrh	r3, [r3, #10]
 80077a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	6959      	ldr	r1, [r3, #20]
 80077aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fbca 	bl	8007f4e <USB_WritePMA>
 80077ba:	e193      	b.n	8007ae4 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80077d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077da:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	441a      	add	r2, r3
 80077e8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80077ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800780a:	b29b      	uxth	r3, r3
 800780c:	461a      	mov	r2, r3
 800780e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007810:	4413      	add	r3, r2
 8007812:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	00da      	lsls	r2, r3, #3
 800781a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800781c:	4413      	add	r3, r2
 800781e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007822:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007828:	b29a      	uxth	r2, r3
 800782a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800782c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	891b      	ldrh	r3, [r3, #8]
 8007832:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	6959      	ldr	r1, [r3, #20]
 800783a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800783e:	b29b      	uxth	r3, r3
 8007840:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fb82 	bl	8007f4e <USB_WritePMA>
 800784a:	e14b      	b.n	8007ae4 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	6a1a      	ldr	r2, [r3, #32]
 8007850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007854:	1ad2      	subs	r2, r2, r3
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	b29b      	uxth	r3, r3
 8007868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 809a 	beq.w	80079a6 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	673b      	str	r3, [r7, #112]	@ 0x70
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	785b      	ldrb	r3, [r3, #1]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d16b      	bne.n	8007956 <USB_EPStartXfer+0x7d0>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007888:	b29b      	uxth	r3, r3
 800788a:	461a      	mov	r2, r3
 800788c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800788e:	4413      	add	r3, r2
 8007890:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	00da      	lsls	r2, r3, #3
 8007898:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800789a:	4413      	add	r3, r2
 800789c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80078a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078a4:	881b      	ldrh	r3, [r3, #0]
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078b0:	801a      	strh	r2, [r3, #0]
 80078b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10a      	bne.n	80078d0 <USB_EPStartXfer+0x74a>
 80078ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078cc:	801a      	strh	r2, [r3, #0]
 80078ce:	e05b      	b.n	8007988 <USB_EPStartXfer+0x802>
 80078d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80078d6:	d81c      	bhi.n	8007912 <USB_EPStartXfer+0x78c>
 80078d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078dc:	085b      	lsrs	r3, r3, #1
 80078de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d004      	beq.n	80078f8 <USB_EPStartXfer+0x772>
 80078ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078f2:	3301      	adds	r3, #1
 80078f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007902:	b29b      	uxth	r3, r3
 8007904:	029b      	lsls	r3, r3, #10
 8007906:	b29b      	uxth	r3, r3
 8007908:	4313      	orrs	r3, r2
 800790a:	b29a      	uxth	r2, r3
 800790c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800790e:	801a      	strh	r2, [r3, #0]
 8007910:	e03a      	b.n	8007988 <USB_EPStartXfer+0x802>
 8007912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007916:	095b      	lsrs	r3, r3, #5
 8007918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800791c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007920:	f003 031f 	and.w	r3, r3, #31
 8007924:	2b00      	cmp	r3, #0
 8007926:	d104      	bne.n	8007932 <USB_EPStartXfer+0x7ac>
 8007928:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800792c:	3b01      	subs	r3, #1
 800792e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007932:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	b29a      	uxth	r2, r3
 8007938:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800793c:	b29b      	uxth	r3, r3
 800793e:	029b      	lsls	r3, r3, #10
 8007940:	b29b      	uxth	r3, r3
 8007942:	4313      	orrs	r3, r2
 8007944:	b29b      	uxth	r3, r3
 8007946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800794a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794e:	b29a      	uxth	r2, r3
 8007950:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007952:	801a      	strh	r2, [r3, #0]
 8007954:	e018      	b.n	8007988 <USB_EPStartXfer+0x802>
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	785b      	ldrb	r3, [r3, #1]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d114      	bne.n	8007988 <USB_EPStartXfer+0x802>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007964:	b29b      	uxth	r3, r3
 8007966:	461a      	mov	r2, r3
 8007968:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800796a:	4413      	add	r3, r2
 800796c:	673b      	str	r3, [r7, #112]	@ 0x70
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	00da      	lsls	r2, r3, #3
 8007974:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007976:	4413      	add	r3, r2
 8007978:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800797c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800797e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007982:	b29a      	uxth	r2, r3
 8007984:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007986:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	895b      	ldrh	r3, [r3, #10]
 800798c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	6959      	ldr	r1, [r3, #20]
 8007994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007998:	b29b      	uxth	r3, r3
 800799a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fad5 	bl	8007f4e <USB_WritePMA>
 80079a4:	e09e      	b.n	8007ae4 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	785b      	ldrb	r3, [r3, #1]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d16b      	bne.n	8007a86 <USB_EPStartXfer+0x900>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	461a      	mov	r2, r3
 80079bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079be:	4413      	add	r3, r2
 80079c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	00da      	lsls	r2, r3, #3
 80079c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079ca:	4413      	add	r3, r2
 80079cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079dc:	b29a      	uxth	r2, r3
 80079de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079e0:	801a      	strh	r2, [r3, #0]
 80079e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10a      	bne.n	8007a00 <USB_EPStartXfer+0x87a>
 80079ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079fc:	801a      	strh	r2, [r3, #0]
 80079fe:	e063      	b.n	8007ac8 <USB_EPStartXfer+0x942>
 8007a00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a04:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a06:	d81c      	bhi.n	8007a42 <USB_EPStartXfer+0x8bc>
 8007a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a0c:	085b      	lsrs	r3, r3, #1
 8007a0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d004      	beq.n	8007a28 <USB_EPStartXfer+0x8a2>
 8007a1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a22:	3301      	adds	r3, #1
 8007a24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	029b      	lsls	r3, r3, #10
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	e042      	b.n	8007ac8 <USB_EPStartXfer+0x942>
 8007a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a46:	095b      	lsrs	r3, r3, #5
 8007a48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a50:	f003 031f 	and.w	r3, r3, #31
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d104      	bne.n	8007a62 <USB_EPStartXfer+0x8dc>
 8007a58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	029b      	lsls	r3, r3, #10
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	4313      	orrs	r3, r2
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a82:	801a      	strh	r2, [r3, #0]
 8007a84:	e020      	b.n	8007ac8 <USB_EPStartXfer+0x942>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	785b      	ldrb	r3, [r3, #1]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d11c      	bne.n	8007ac8 <USB_EPStartXfer+0x942>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	00da      	lsls	r2, r3, #3
 8007aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ab8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007abc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ac6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	891b      	ldrh	r3, [r3, #8]
 8007acc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	6959      	ldr	r1, [r3, #20]
 8007ad4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fa35 	bl	8007f4e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007af6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007afa:	817b      	strh	r3, [r7, #10]
 8007afc:	897b      	ldrh	r3, [r7, #10]
 8007afe:	f083 0310 	eor.w	r3, r3, #16
 8007b02:	817b      	strh	r3, [r7, #10]
 8007b04:	897b      	ldrh	r3, [r7, #10]
 8007b06:	f083 0320 	eor.w	r3, r3, #32
 8007b0a:	817b      	strh	r3, [r7, #10]
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	441a      	add	r2, r3
 8007b16:	897b      	ldrh	r3, [r7, #10]
 8007b18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	8013      	strh	r3, [r2, #0]
 8007b2c:	e0d5      	b.n	8007cda <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	7b1b      	ldrb	r3, [r3, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d156      	bne.n	8007be4 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d122      	bne.n	8007b84 <USB_EPStartXfer+0x9fe>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	78db      	ldrb	r3, [r3, #3]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d11e      	bne.n	8007b84 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b5c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	441a      	add	r2, r3
 8007b6a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b76:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	8013      	strh	r3, [r2, #0]
 8007b82:	e01d      	b.n	8007bc0 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b9a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	441a      	add	r2, r3
 8007ba8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8007bac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	699a      	ldr	r2, [r3, #24]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d907      	bls.n	8007bdc <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	699a      	ldr	r2, [r3, #24]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	1ad2      	subs	r2, r2, r3
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	619a      	str	r2, [r3, #24]
 8007bda:	e054      	b.n	8007c86 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	2200      	movs	r2, #0
 8007be0:	619a      	str	r2, [r3, #24]
 8007be2:	e050      	b.n	8007c86 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	78db      	ldrb	r3, [r3, #3]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d142      	bne.n	8007c72 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	69db      	ldr	r3, [r3, #28]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d048      	beq.n	8007c86 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c04:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007c08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d005      	beq.n	8007c1c <USB_EPStartXfer+0xa96>
 8007c10:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10b      	bne.n	8007c34 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c1c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d12e      	bne.n	8007c86 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c28:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d128      	bne.n	8007c86 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c4a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	441a      	add	r2, r3
 8007c58:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007c5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	8013      	strh	r3, [r2, #0]
 8007c70:	e009      	b.n	8007c86 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	78db      	ldrb	r3, [r3, #3]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d103      	bne.n	8007c82 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	619a      	str	r2, [r3, #24]
 8007c80:	e001      	b.n	8007c86 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e02a      	b.n	8007cdc <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c9c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007ca0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ca4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007ca8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007cac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007cb0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007cb4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	441a      	add	r2, r3
 8007cc2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007cc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	37b0      	adds	r7, #176	@ 0xb0
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	785b      	ldrb	r3, [r3, #1]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d020      	beq.n	8007d38 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d0c:	81bb      	strh	r3, [r7, #12]
 8007d0e:	89bb      	ldrh	r3, [r7, #12]
 8007d10:	f083 0310 	eor.w	r3, r3, #16
 8007d14:	81bb      	strh	r3, [r7, #12]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	441a      	add	r2, r3
 8007d20:	89bb      	ldrh	r3, [r7, #12]
 8007d22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	8013      	strh	r3, [r2, #0]
 8007d36:	e01f      	b.n	8007d78 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d4e:	81fb      	strh	r3, [r7, #14]
 8007d50:	89fb      	ldrh	r3, [r7, #14]
 8007d52:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d56:	81fb      	strh	r3, [r7, #14]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	441a      	add	r2, r3
 8007d62:	89fb      	ldrh	r3, [r7, #14]
 8007d64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b087      	sub	sp, #28
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	785b      	ldrb	r3, [r3, #1]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d04c      	beq.n	8007e32 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	823b      	strh	r3, [r7, #16]
 8007da6:	8a3b      	ldrh	r3, [r7, #16]
 8007da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d01b      	beq.n	8007de8 <USB_EPClearStall+0x62>
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dc6:	81fb      	strh	r3, [r7, #14]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	441a      	add	r2, r3
 8007dd2:	89fb      	ldrh	r3, [r7, #14]
 8007dd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007de0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	78db      	ldrb	r3, [r3, #3]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d06c      	beq.n	8007eca <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e06:	81bb      	strh	r3, [r7, #12]
 8007e08:	89bb      	ldrh	r3, [r7, #12]
 8007e0a:	f083 0320 	eor.w	r3, r3, #32
 8007e0e:	81bb      	strh	r3, [r7, #12]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	441a      	add	r2, r3
 8007e1a:	89bb      	ldrh	r3, [r7, #12]
 8007e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	8013      	strh	r3, [r2, #0]
 8007e30:	e04b      	b.n	8007eca <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	82fb      	strh	r3, [r7, #22]
 8007e40:	8afb      	ldrh	r3, [r7, #22]
 8007e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d01b      	beq.n	8007e82 <USB_EPClearStall+0xfc>
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	881b      	ldrh	r3, [r3, #0]
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e60:	82bb      	strh	r3, [r7, #20]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	441a      	add	r2, r3
 8007e6c:	8abb      	ldrh	r3, [r7, #20]
 8007e6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e98:	827b      	strh	r3, [r7, #18]
 8007e9a:	8a7b      	ldrh	r3, [r7, #18]
 8007e9c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007ea0:	827b      	strh	r3, [r7, #18]
 8007ea2:	8a7b      	ldrh	r3, [r7, #18]
 8007ea4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ea8:	827b      	strh	r3, [r7, #18]
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	441a      	add	r2, r3
 8007eb4:	8a7b      	ldrh	r3, [r7, #18]
 8007eb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ebe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	371c      	adds	r7, #28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d103      	bne.n	8007ef2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2280      	movs	r2, #128	@ 0x80
 8007eee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b085      	sub	sp, #20
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007f40:	68fb      	ldr	r3, [r7, #12]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b08b      	sub	sp, #44	@ 0x2c
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	60f8      	str	r0, [r7, #12]
 8007f56:	60b9      	str	r1, [r7, #8]
 8007f58:	4611      	mov	r1, r2
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	80fb      	strh	r3, [r7, #6]
 8007f60:	4613      	mov	r3, r2
 8007f62:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f64:	88bb      	ldrh	r3, [r7, #4]
 8007f66:	3301      	adds	r3, #1
 8007f68:	085b      	lsrs	r3, r3, #1
 8007f6a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f74:	88fa      	ldrh	r2, [r7, #6]
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f7e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f84:	e01b      	b.n	8007fbe <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	021b      	lsls	r3, r3, #8
 8007f94:	b21a      	sxth	r2, r3
 8007f96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	b21b      	sxth	r3, r3
 8007f9e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	8a7a      	ldrh	r2, [r7, #18]
 8007fa4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	3302      	adds	r3, #2
 8007faa:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e0      	bne.n	8007f86 <USB_WritePMA+0x38>
  }
}
 8007fc4:	bf00      	nop
 8007fc6:	bf00      	nop
 8007fc8:	372c      	adds	r7, #44	@ 0x2c
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b08b      	sub	sp, #44	@ 0x2c
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	60f8      	str	r0, [r7, #12]
 8007fda:	60b9      	str	r1, [r7, #8]
 8007fdc:	4611      	mov	r1, r2
 8007fde:	461a      	mov	r2, r3
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	80fb      	strh	r3, [r7, #6]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007fe8:	88bb      	ldrh	r3, [r7, #4]
 8007fea:	085b      	lsrs	r3, r3, #1
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ff8:	88fa      	ldrh	r2, [r7, #6]
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008002:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	627b      	str	r3, [r7, #36]	@ 0x24
 8008008:	e018      	b.n	800803c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	b29b      	uxth	r3, r3
 8008010:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008012:	6a3b      	ldr	r3, [r7, #32]
 8008014:	3302      	adds	r3, #2
 8008016:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	b2da      	uxtb	r2, r3
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	3301      	adds	r3, #1
 8008024:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	0a1b      	lsrs	r3, r3, #8
 800802a:	b2da      	uxtb	r2, r3
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	3301      	adds	r3, #1
 8008034:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	3b01      	subs	r3, #1
 800803a:	627b      	str	r3, [r7, #36]	@ 0x24
 800803c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1e3      	bne.n	800800a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008042:	88bb      	ldrh	r3, [r7, #4]
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	b29b      	uxth	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d007      	beq.n	800805e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	b29b      	uxth	r3, r3
 8008054:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	b2da      	uxtb	r2, r3
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	701a      	strb	r2, [r3, #0]
  }
}
 800805e:	bf00      	nop
 8008060:	372c      	adds	r7, #44	@ 0x2c
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b084      	sub	sp, #16
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	460b      	mov	r3, r1
 8008074:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008076:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800807a:	f002 f8f9 	bl	800a270 <USBD_static_malloc>
 800807e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d105      	bne.n	8008092 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800808e:	2302      	movs	r3, #2
 8008090:	e066      	b.n	8008160 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	7c1b      	ldrb	r3, [r3, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d119      	bne.n	80080d6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80080a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080a6:	2202      	movs	r2, #2
 80080a8:	2181      	movs	r1, #129	@ 0x81
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 ff87 	bl	8009fbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080ba:	2202      	movs	r2, #2
 80080bc:	2101      	movs	r1, #1
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f001 ff7d 	bl	8009fbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2210      	movs	r2, #16
 80080d0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 80080d4:	e016      	b.n	8008104 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80080d6:	2340      	movs	r3, #64	@ 0x40
 80080d8:	2202      	movs	r2, #2
 80080da:	2181      	movs	r1, #129	@ 0x81
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f001 ff6e 	bl	8009fbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080e8:	2340      	movs	r3, #64	@ 0x40
 80080ea:	2202      	movs	r2, #2
 80080ec:	2101      	movs	r1, #1
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f001 ff65 	bl	8009fbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2210      	movs	r2, #16
 8008100:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008104:	2308      	movs	r3, #8
 8008106:	2203      	movs	r2, #3
 8008108:	2182      	movs	r1, #130	@ 0x82
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 ff57 	bl	8009fbe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	7c1b      	ldrb	r3, [r3, #16]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d109      	bne.n	800814e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008140:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008144:	2101      	movs	r1, #1
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f002 f828 	bl	800a19c <USBD_LL_PrepareReceive>
 800814c:	e007      	b.n	800815e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008154:	2340      	movs	r3, #64	@ 0x40
 8008156:	2101      	movs	r1, #1
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f002 f81f 	bl	800a19c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008174:	2181      	movs	r1, #129	@ 0x81
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f001 ff47 	bl	800a00a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008182:	2101      	movs	r1, #1
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 ff40 	bl	800a00a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008192:	2182      	movs	r1, #130	@ 0x82
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f001 ff38 	bl	800a00a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00e      	beq.n	80081d2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081c4:	4618      	mov	r0, r3
 80081c6:	f002 f861 	bl	800a28c <USBD_static_free>
    pdev->pClassData = NULL;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008200:	2303      	movs	r3, #3
 8008202:	e0af      	b.n	8008364 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800820c:	2b00      	cmp	r3, #0
 800820e:	d03f      	beq.n	8008290 <USBD_CDC_Setup+0xb4>
 8008210:	2b20      	cmp	r3, #32
 8008212:	f040 809f 	bne.w	8008354 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	88db      	ldrh	r3, [r3, #6]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d02e      	beq.n	800827c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	b25b      	sxtb	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	da16      	bge.n	8008256 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008234:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	88d2      	ldrh	r2, [r2, #6]
 800823a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	88db      	ldrh	r3, [r3, #6]
 8008240:	2b07      	cmp	r3, #7
 8008242:	bf28      	it	cs
 8008244:	2307      	movcs	r3, #7
 8008246:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	89fa      	ldrh	r2, [r7, #14]
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f001 facd 	bl	80097ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008254:	e085      	b.n	8008362 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	785a      	ldrb	r2, [r3, #1]
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	88db      	ldrh	r3, [r3, #6]
 8008264:	b2da      	uxtb	r2, r3
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800826c:	6939      	ldr	r1, [r7, #16]
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	88db      	ldrh	r3, [r3, #6]
 8008272:	461a      	mov	r2, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 fae6 	bl	8009846 <USBD_CtlPrepareRx>
      break;
 800827a:	e072      	b.n	8008362 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	7850      	ldrb	r0, [r2, #1]
 8008288:	2200      	movs	r2, #0
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	4798      	blx	r3
      break;
 800828e:	e068      	b.n	8008362 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	785b      	ldrb	r3, [r3, #1]
 8008294:	2b0b      	cmp	r3, #11
 8008296:	d852      	bhi.n	800833e <USBD_CDC_Setup+0x162>
 8008298:	a201      	add	r2, pc, #4	@ (adr r2, 80082a0 <USBD_CDC_Setup+0xc4>)
 800829a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829e:	bf00      	nop
 80082a0:	080082d1 	.word	0x080082d1
 80082a4:	0800834d 	.word	0x0800834d
 80082a8:	0800833f 	.word	0x0800833f
 80082ac:	0800833f 	.word	0x0800833f
 80082b0:	0800833f 	.word	0x0800833f
 80082b4:	0800833f 	.word	0x0800833f
 80082b8:	0800833f 	.word	0x0800833f
 80082bc:	0800833f 	.word	0x0800833f
 80082c0:	0800833f 	.word	0x0800833f
 80082c4:	0800833f 	.word	0x0800833f
 80082c8:	080082fb 	.word	0x080082fb
 80082cc:	08008325 	.word	0x08008325
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d107      	bne.n	80082ec <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80082dc:	f107 030a 	add.w	r3, r7, #10
 80082e0:	2202      	movs	r2, #2
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 fa82 	bl	80097ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082ea:	e032      	b.n	8008352 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 fa0c 	bl	800970c <USBD_CtlError>
            ret = USBD_FAIL;
 80082f4:	2303      	movs	r3, #3
 80082f6:	75fb      	strb	r3, [r7, #23]
          break;
 80082f8:	e02b      	b.n	8008352 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b03      	cmp	r3, #3
 8008304:	d107      	bne.n	8008316 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008306:	f107 030d 	add.w	r3, r7, #13
 800830a:	2201      	movs	r2, #1
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 fa6d 	bl	80097ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008314:	e01d      	b.n	8008352 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f001 f9f7 	bl	800970c <USBD_CtlError>
            ret = USBD_FAIL;
 800831e:	2303      	movs	r3, #3
 8008320:	75fb      	strb	r3, [r7, #23]
          break;
 8008322:	e016      	b.n	8008352 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b03      	cmp	r3, #3
 800832e:	d00f      	beq.n	8008350 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 f9ea 	bl	800970c <USBD_CtlError>
            ret = USBD_FAIL;
 8008338:	2303      	movs	r3, #3
 800833a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800833c:	e008      	b.n	8008350 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f001 f9e3 	bl	800970c <USBD_CtlError>
          ret = USBD_FAIL;
 8008346:	2303      	movs	r3, #3
 8008348:	75fb      	strb	r3, [r7, #23]
          break;
 800834a:	e002      	b.n	8008352 <USBD_CDC_Setup+0x176>
          break;
 800834c:	bf00      	nop
 800834e:	e008      	b.n	8008362 <USBD_CDC_Setup+0x186>
          break;
 8008350:	bf00      	nop
      }
      break;
 8008352:	e006      	b.n	8008362 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f001 f9d8 	bl	800970c <USBD_CtlError>
      ret = USBD_FAIL;
 800835c:	2303      	movs	r3, #3
 800835e:	75fb      	strb	r3, [r7, #23]
      break;
 8008360:	bf00      	nop
  }

  return (uint8_t)ret;
 8008362:	7dfb      	ldrb	r3, [r7, #23]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3718      	adds	r7, #24
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800837e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800838a:	2303      	movs	r3, #3
 800838c:	e04f      	b.n	800842e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008394:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008396:	78fa      	ldrb	r2, [r7, #3]
 8008398:	6879      	ldr	r1, [r7, #4]
 800839a:	4613      	mov	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	440b      	add	r3, r1
 80083a4:	3318      	adds	r3, #24
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d029      	beq.n	8008400 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80083ac:	78fa      	ldrb	r2, [r7, #3]
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	4613      	mov	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	440b      	add	r3, r1
 80083ba:	3318      	adds	r3, #24
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	78f9      	ldrb	r1, [r7, #3]
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	460b      	mov	r3, r1
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	440b      	add	r3, r1
 80083c8:	00db      	lsls	r3, r3, #3
 80083ca:	4403      	add	r3, r0
 80083cc:	3320      	adds	r3, #32
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80083d4:	fb01 f303 	mul.w	r3, r1, r3
 80083d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d110      	bne.n	8008400 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80083de:	78fa      	ldrb	r2, [r7, #3]
 80083e0:	6879      	ldr	r1, [r7, #4]
 80083e2:	4613      	mov	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	440b      	add	r3, r1
 80083ec:	3318      	adds	r3, #24
 80083ee:	2200      	movs	r2, #0
 80083f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80083f2:	78f9      	ldrb	r1, [r7, #3]
 80083f4:	2300      	movs	r3, #0
 80083f6:	2200      	movs	r2, #0
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f001 feae 	bl	800a15a <USBD_LL_Transmit>
 80083fe:	e015      	b.n	800842c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2200      	movs	r2, #0
 8008404:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00b      	beq.n	800842c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008428:	78fa      	ldrb	r2, [r7, #3]
 800842a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	460b      	mov	r3, r1
 8008440:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008448:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008454:	2303      	movs	r3, #3
 8008456:	e015      	b.n	8008484 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008458:	78fb      	ldrb	r3, [r7, #3]
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f001 febe 	bl	800a1de <USBD_LL_GetRxDataSize>
 8008462:	4602      	mov	r2, r0
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800847e:	4611      	mov	r1, r2
 8008480:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800849a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e01a      	b.n	80084dc <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d014      	beq.n	80084da <USBD_CDC_EP0_RxReady+0x4e>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80084b6:	2bff      	cmp	r3, #255	@ 0xff
 80084b8:	d00f      	beq.n	80084da <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 80084c8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	22ff      	movs	r2, #255	@ 0xff
 80084d6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2243      	movs	r2, #67	@ 0x43
 80084f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80084f2:	4b03      	ldr	r3, [pc, #12]	@ (8008500 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	20000094 	.word	0x20000094

08008504 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2243      	movs	r2, #67	@ 0x43
 8008510:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008512:	4b03      	ldr	r3, [pc, #12]	@ (8008520 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008514:	4618      	mov	r0, r3
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	20000050 	.word	0x20000050

08008524 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2243      	movs	r2, #67	@ 0x43
 8008530:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008532:	4b03      	ldr	r3, [pc, #12]	@ (8008540 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	200000d8 	.word	0x200000d8

08008544 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	220a      	movs	r2, #10
 8008550:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008552:	4b03      	ldr	r3, [pc, #12]	@ (8008560 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	2000000c 	.word	0x2000000c

08008564 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008574:	2303      	movs	r3, #3
 8008576:	e004      	b.n	8008582 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800858e:	b480      	push	{r7}
 8008590:	b087      	sub	sp, #28
 8008592:	af00      	add	r7, sp, #0
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	60b9      	str	r1, [r7, #8]
 8008598:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085a0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e008      	b.n	80085be <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	371c      	adds	r7, #28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b085      	sub	sp, #20
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e004      	b.n	80085f0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800860a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800860c:	2301      	movs	r3, #1
 800860e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800861a:	2303      	movs	r3, #3
 800861c:	e01a      	b.n	8008654 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008624:	2b00      	cmp	r3, #0
 8008626:	d114      	bne.n	8008652 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	2201      	movs	r2, #1
 800862c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008646:	2181      	movs	r1, #129	@ 0x81
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f001 fd86 	bl	800a15a <USBD_LL_Transmit>

    ret = USBD_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008652:	7bfb      	ldrb	r3, [r7, #15]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800866a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008676:	2303      	movs	r3, #3
 8008678:	e016      	b.n	80086a8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	7c1b      	ldrb	r3, [r3, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d109      	bne.n	8008696 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008688:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800868c:	2101      	movs	r1, #1
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f001 fd84 	bl	800a19c <USBD_LL_PrepareReceive>
 8008694:	e007      	b.n	80086a6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800869c:	2340      	movs	r3, #64	@ 0x40
 800869e:	2101      	movs	r1, #1
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f001 fd7b 	bl	800a19c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	4613      	mov	r3, r2
 80086bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e01f      	b.n	8008708 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d003      	beq.n	80086ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	79fa      	ldrb	r2, [r7, #7]
 80086fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f001 fbe3 	bl	8009ec8 <USBD_LL_Init>
 8008702:	4603      	mov	r3, r0
 8008704:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008706:	7dfb      	ldrb	r3, [r7, #23]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3718      	adds	r7, #24
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800871a:	2300      	movs	r3, #0
 800871c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008724:	2303      	movs	r3, #3
 8008726:	e016      	b.n	8008756 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00b      	beq.n	8008754 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008744:	f107 020e 	add.w	r2, r7, #14
 8008748:	4610      	mov	r0, r2
 800874a:	4798      	blx	r3
 800874c:	4602      	mov	r2, r0
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b082      	sub	sp, #8
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 fc0e 	bl	8009f88 <USBD_LL_Start>
 800876c:	4603      	mov	r3, r0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008776:	b480      	push	{r7}
 8008778:	b083      	sub	sp, #12
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008798:	2303      	movs	r3, #3
 800879a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d009      	beq.n	80087ba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	78fa      	ldrb	r2, [r7, #3]
 80087b0:	4611      	mov	r1, r2
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	4798      	blx	r3
 80087b6:	4603      	mov	r3, r0
 80087b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d007      	beq.n	80087ea <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	78fa      	ldrb	r2, [r7, #3]
 80087e4:	4611      	mov	r1, r2
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	4798      	blx	r3
  }

  return USBD_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	4618      	mov	r0, r3
 8008808:	f000 ff46 	bl	8009698 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800881a:	461a      	mov	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008828:	f003 031f 	and.w	r3, r3, #31
 800882c:	2b02      	cmp	r3, #2
 800882e:	d01a      	beq.n	8008866 <USBD_LL_SetupStage+0x72>
 8008830:	2b02      	cmp	r3, #2
 8008832:	d822      	bhi.n	800887a <USBD_LL_SetupStage+0x86>
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <USBD_LL_SetupStage+0x4a>
 8008838:	2b01      	cmp	r3, #1
 800883a:	d00a      	beq.n	8008852 <USBD_LL_SetupStage+0x5e>
 800883c:	e01d      	b.n	800887a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008844:	4619      	mov	r1, r3
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f9ee 	bl	8008c28 <USBD_StdDevReq>
 800884c:	4603      	mov	r3, r0
 800884e:	73fb      	strb	r3, [r7, #15]
      break;
 8008850:	e020      	b.n	8008894 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fa52 	bl	8008d04 <USBD_StdItfReq>
 8008860:	4603      	mov	r3, r0
 8008862:	73fb      	strb	r3, [r7, #15]
      break;
 8008864:	e016      	b.n	8008894 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fa91 	bl	8008d96 <USBD_StdEPReq>
 8008874:	4603      	mov	r3, r0
 8008876:	73fb      	strb	r3, [r7, #15]
      break;
 8008878:	e00c      	b.n	8008894 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008880:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008884:	b2db      	uxtb	r3, r3
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 fbdd 	bl	800a048 <USBD_LL_StallEP>
 800888e:	4603      	mov	r3, r0
 8008890:	73fb      	strb	r3, [r7, #15]
      break;
 8008892:	bf00      	nop
  }

  return ret;
 8008894:	7bfb      	ldrb	r3, [r7, #15]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b086      	sub	sp, #24
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	60f8      	str	r0, [r7, #12]
 80088a6:	460b      	mov	r3, r1
 80088a8:	607a      	str	r2, [r7, #4]
 80088aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80088ac:	7afb      	ldrb	r3, [r7, #11]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d138      	bne.n	8008924 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80088b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d14a      	bne.n	800895a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	689a      	ldr	r2, [r3, #8]
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d913      	bls.n	80088f8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	1ad2      	subs	r2, r2, r3
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	68da      	ldr	r2, [r3, #12]
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	4293      	cmp	r3, r2
 80088e8:	bf28      	it	cs
 80088ea:	4613      	movcs	r3, r2
 80088ec:	461a      	mov	r2, r3
 80088ee:	6879      	ldr	r1, [r7, #4]
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 ffc5 	bl	8009880 <USBD_CtlContinueRx>
 80088f6:	e030      	b.n	800895a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b03      	cmp	r3, #3
 8008902:	d10b      	bne.n	800891c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d005      	beq.n	800891c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 ffc0 	bl	80098a2 <USBD_CtlSendStatus>
 8008922:	e01a      	b.n	800895a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b03      	cmp	r3, #3
 800892e:	d114      	bne.n	800895a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00e      	beq.n	800895a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	7afa      	ldrb	r2, [r7, #11]
 8008946:	4611      	mov	r1, r2
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	4798      	blx	r3
 800894c:	4603      	mov	r3, r0
 800894e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008950:	7dfb      	ldrb	r3, [r7, #23]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008956:	7dfb      	ldrb	r3, [r7, #23]
 8008958:	e000      	b.n	800895c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	460b      	mov	r3, r1
 800896e:	607a      	str	r2, [r7, #4]
 8008970:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008972:	7afb      	ldrb	r3, [r7, #11]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d16b      	bne.n	8008a50 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3314      	adds	r3, #20
 800897c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008984:	2b02      	cmp	r3, #2
 8008986:	d156      	bne.n	8008a36 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	429a      	cmp	r2, r3
 8008992:	d914      	bls.n	80089be <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	1ad2      	subs	r2, r2, r3
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	461a      	mov	r2, r3
 80089a8:	6879      	ldr	r1, [r7, #4]
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f000 ff3a 	bl	8009824 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089b0:	2300      	movs	r3, #0
 80089b2:	2200      	movs	r2, #0
 80089b4:	2100      	movs	r1, #0
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f001 fbf0 	bl	800a19c <USBD_LL_PrepareReceive>
 80089bc:	e03b      	b.n	8008a36 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	68da      	ldr	r2, [r3, #12]
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d11c      	bne.n	8008a04 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d316      	bcc.n	8008a04 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d20f      	bcs.n	8008a04 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80089e4:	2200      	movs	r2, #0
 80089e6:	2100      	movs	r1, #0
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f000 ff1b 	bl	8009824 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089f6:	2300      	movs	r3, #0
 80089f8:	2200      	movs	r2, #0
 80089fa:	2100      	movs	r1, #0
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f001 fbcd 	bl	800a19c <USBD_LL_PrepareReceive>
 8008a02:	e018      	b.n	8008a36 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b03      	cmp	r3, #3
 8008a0e:	d10b      	bne.n	8008a28 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d005      	beq.n	8008a28 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a28:	2180      	movs	r1, #128	@ 0x80
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f001 fb0c 	bl	800a048 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f000 ff49 	bl	80098c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d122      	bne.n	8008a86 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f7ff fe98 	bl	8008776 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008a4e:	e01a      	b.n	8008a86 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d114      	bne.n	8008a86 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00e      	beq.n	8008a86 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	7afa      	ldrb	r2, [r7, #11]
 8008a72:	4611      	mov	r1, r2
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	4798      	blx	r3
 8008a78:	4603      	mov	r3, r0
 8008a7a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008a7c:	7dfb      	ldrb	r3, [r7, #23]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	e000      	b.n	8008a88 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e02f      	b.n	8008b24 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00f      	beq.n	8008aee <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d009      	beq.n	8008aee <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	6852      	ldr	r2, [r2, #4]
 8008ae6:	b2d2      	uxtb	r2, r2
 8008ae8:	4611      	mov	r1, r2
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008aee:	2340      	movs	r3, #64	@ 0x40
 8008af0:	2200      	movs	r2, #0
 8008af2:	2100      	movs	r1, #0
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f001 fa62 	bl	8009fbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2240      	movs	r2, #64	@ 0x40
 8008b06:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b0a:	2340      	movs	r3, #64	@ 0x40
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	2180      	movs	r1, #128	@ 0x80
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f001 fa54 	bl	8009fbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2240      	movs	r2, #64	@ 0x40
 8008b20:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	78fa      	ldrb	r2, [r7, #3]
 8008b3c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2204      	movs	r2, #4
 8008b66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d106      	bne.n	8008b9a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e012      	b.n	8008be4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d10b      	bne.n	8008be2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d005      	beq.n	8008be2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b087      	sub	sp, #28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	3301      	adds	r3, #1
 8008c02:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008c0a:	8a3b      	ldrh	r3, [r7, #16]
 8008c0c:	021b      	lsls	r3, r3, #8
 8008c0e:	b21a      	sxth	r2, r3
 8008c10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	b21b      	sxth	r3, r3
 8008c18:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008c1a:	89fb      	ldrh	r3, [r7, #14]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	371c      	adds	r7, #28
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c3e:	2b40      	cmp	r3, #64	@ 0x40
 8008c40:	d005      	beq.n	8008c4e <USBD_StdDevReq+0x26>
 8008c42:	2b40      	cmp	r3, #64	@ 0x40
 8008c44:	d853      	bhi.n	8008cee <USBD_StdDevReq+0xc6>
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00b      	beq.n	8008c62 <USBD_StdDevReq+0x3a>
 8008c4a:	2b20      	cmp	r3, #32
 8008c4c:	d14f      	bne.n	8008cee <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	4798      	blx	r3
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c60:	e04a      	b.n	8008cf8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	785b      	ldrb	r3, [r3, #1]
 8008c66:	2b09      	cmp	r3, #9
 8008c68:	d83b      	bhi.n	8008ce2 <USBD_StdDevReq+0xba>
 8008c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c70 <USBD_StdDevReq+0x48>)
 8008c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c70:	08008cc5 	.word	0x08008cc5
 8008c74:	08008cd9 	.word	0x08008cd9
 8008c78:	08008ce3 	.word	0x08008ce3
 8008c7c:	08008ccf 	.word	0x08008ccf
 8008c80:	08008ce3 	.word	0x08008ce3
 8008c84:	08008ca3 	.word	0x08008ca3
 8008c88:	08008c99 	.word	0x08008c99
 8008c8c:	08008ce3 	.word	0x08008ce3
 8008c90:	08008cbb 	.word	0x08008cbb
 8008c94:	08008cad 	.word	0x08008cad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f9de 	bl	800905c <USBD_GetDescriptor>
          break;
 8008ca0:	e024      	b.n	8008cec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fb6d 	bl	8009384 <USBD_SetAddress>
          break;
 8008caa:	e01f      	b.n	8008cec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008cac:	6839      	ldr	r1, [r7, #0]
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fbac 	bl	800940c <USBD_SetConfig>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	73fb      	strb	r3, [r7, #15]
          break;
 8008cb8:	e018      	b.n	8008cec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fc4b 	bl	8009558 <USBD_GetConfig>
          break;
 8008cc2:	e013      	b.n	8008cec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fc7c 	bl	80095c4 <USBD_GetStatus>
          break;
 8008ccc:	e00e      	b.n	8008cec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fcab 	bl	800962c <USBD_SetFeature>
          break;
 8008cd6:	e009      	b.n	8008cec <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fcba 	bl	8009654 <USBD_ClrFeature>
          break;
 8008ce0:	e004      	b.n	8008cec <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fd11 	bl	800970c <USBD_CtlError>
          break;
 8008cea:	bf00      	nop
      }
      break;
 8008cec:	e004      	b.n	8008cf8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fd0b 	bl	800970c <USBD_CtlError>
      break;
 8008cf6:	bf00      	nop
  }

  return ret;
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop

08008d04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d1a:	2b40      	cmp	r3, #64	@ 0x40
 8008d1c:	d005      	beq.n	8008d2a <USBD_StdItfReq+0x26>
 8008d1e:	2b40      	cmp	r3, #64	@ 0x40
 8008d20:	d82f      	bhi.n	8008d82 <USBD_StdItfReq+0x7e>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <USBD_StdItfReq+0x26>
 8008d26:	2b20      	cmp	r3, #32
 8008d28:	d12b      	bne.n	8008d82 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	3b01      	subs	r3, #1
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d81d      	bhi.n	8008d74 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	889b      	ldrh	r3, [r3, #4]
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d813      	bhi.n	8008d6a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	4798      	blx	r3
 8008d50:	4603      	mov	r3, r0
 8008d52:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	88db      	ldrh	r3, [r3, #6]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d110      	bne.n	8008d7e <USBD_StdItfReq+0x7a>
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10d      	bne.n	8008d7e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fd9d 	bl	80098a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d68:	e009      	b.n	8008d7e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fccd 	bl	800970c <USBD_CtlError>
          break;
 8008d72:	e004      	b.n	8008d7e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fcc8 	bl	800970c <USBD_CtlError>
          break;
 8008d7c:	e000      	b.n	8008d80 <USBD_StdItfReq+0x7c>
          break;
 8008d7e:	bf00      	nop
      }
      break;
 8008d80:	e004      	b.n	8008d8c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fcc1 	bl	800970c <USBD_CtlError>
      break;
 8008d8a:	bf00      	nop
  }

  return ret;
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b084      	sub	sp, #16
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	889b      	ldrh	r3, [r3, #4]
 8008da8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008db2:	2b40      	cmp	r3, #64	@ 0x40
 8008db4:	d007      	beq.n	8008dc6 <USBD_StdEPReq+0x30>
 8008db6:	2b40      	cmp	r3, #64	@ 0x40
 8008db8:	f200 8145 	bhi.w	8009046 <USBD_StdEPReq+0x2b0>
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00c      	beq.n	8008dda <USBD_StdEPReq+0x44>
 8008dc0:	2b20      	cmp	r3, #32
 8008dc2:	f040 8140 	bne.w	8009046 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	4798      	blx	r3
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd8:	e13a      	b.n	8009050 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	785b      	ldrb	r3, [r3, #1]
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d007      	beq.n	8008df2 <USBD_StdEPReq+0x5c>
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	f300 8129 	bgt.w	800903a <USBD_StdEPReq+0x2a4>
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d07f      	beq.n	8008eec <USBD_StdEPReq+0x156>
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d03c      	beq.n	8008e6a <USBD_StdEPReq+0xd4>
 8008df0:	e123      	b.n	800903a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d002      	beq.n	8008e04 <USBD_StdEPReq+0x6e>
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d016      	beq.n	8008e30 <USBD_StdEPReq+0x9a>
 8008e02:	e02c      	b.n	8008e5e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00d      	beq.n	8008e26 <USBD_StdEPReq+0x90>
 8008e0a:	7bbb      	ldrb	r3, [r7, #14]
 8008e0c:	2b80      	cmp	r3, #128	@ 0x80
 8008e0e:	d00a      	beq.n	8008e26 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 f917 	bl	800a048 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e1a:	2180      	movs	r1, #128	@ 0x80
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f001 f913 	bl	800a048 <USBD_LL_StallEP>
 8008e22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e24:	e020      	b.n	8008e68 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fc6f 	bl	800970c <USBD_CtlError>
              break;
 8008e2e:	e01b      	b.n	8008e68 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	885b      	ldrh	r3, [r3, #2]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10e      	bne.n	8008e56 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e38:	7bbb      	ldrb	r3, [r7, #14]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00b      	beq.n	8008e56 <USBD_StdEPReq+0xc0>
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
 8008e40:	2b80      	cmp	r3, #128	@ 0x80
 8008e42:	d008      	beq.n	8008e56 <USBD_StdEPReq+0xc0>
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	88db      	ldrh	r3, [r3, #6]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d104      	bne.n	8008e56 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e4c:	7bbb      	ldrb	r3, [r7, #14]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f001 f8f9 	bl	800a048 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fd23 	bl	80098a2 <USBD_CtlSendStatus>

              break;
 8008e5c:	e004      	b.n	8008e68 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008e5e:	6839      	ldr	r1, [r7, #0]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fc53 	bl	800970c <USBD_CtlError>
              break;
 8008e66:	bf00      	nop
          }
          break;
 8008e68:	e0ec      	b.n	8009044 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d002      	beq.n	8008e7c <USBD_StdEPReq+0xe6>
 8008e76:	2b03      	cmp	r3, #3
 8008e78:	d016      	beq.n	8008ea8 <USBD_StdEPReq+0x112>
 8008e7a:	e030      	b.n	8008ede <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00d      	beq.n	8008e9e <USBD_StdEPReq+0x108>
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	2b80      	cmp	r3, #128	@ 0x80
 8008e86:	d00a      	beq.n	8008e9e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f001 f8db 	bl	800a048 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e92:	2180      	movs	r1, #128	@ 0x80
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 f8d7 	bl	800a048 <USBD_LL_StallEP>
 8008e9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e9c:	e025      	b.n	8008eea <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fc33 	bl	800970c <USBD_CtlError>
              break;
 8008ea6:	e020      	b.n	8008eea <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	885b      	ldrh	r3, [r3, #2]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d11b      	bne.n	8008ee8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008eb0:	7bbb      	ldrb	r3, [r7, #14]
 8008eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d004      	beq.n	8008ec4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008eba:	7bbb      	ldrb	r3, [r7, #14]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f001 f8e1 	bl	800a086 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fcec 	bl	80098a2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	4798      	blx	r3
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008edc:	e004      	b.n	8008ee8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fc13 	bl	800970c <USBD_CtlError>
              break;
 8008ee6:	e000      	b.n	8008eea <USBD_StdEPReq+0x154>
              break;
 8008ee8:	bf00      	nop
          }
          break;
 8008eea:	e0ab      	b.n	8009044 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d002      	beq.n	8008efe <USBD_StdEPReq+0x168>
 8008ef8:	2b03      	cmp	r3, #3
 8008efa:	d032      	beq.n	8008f62 <USBD_StdEPReq+0x1cc>
 8008efc:	e097      	b.n	800902e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008efe:	7bbb      	ldrb	r3, [r7, #14]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d007      	beq.n	8008f14 <USBD_StdEPReq+0x17e>
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
 8008f06:	2b80      	cmp	r3, #128	@ 0x80
 8008f08:	d004      	beq.n	8008f14 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fbfd 	bl	800970c <USBD_CtlError>
                break;
 8008f12:	e091      	b.n	8009038 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	da0b      	bge.n	8008f34 <USBD_StdEPReq+0x19e>
 8008f1c:	7bbb      	ldrb	r3, [r7, #14]
 8008f1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f22:	4613      	mov	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	3310      	adds	r3, #16
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	4413      	add	r3, r2
 8008f30:	3304      	adds	r3, #4
 8008f32:	e00b      	b.n	8008f4c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	4413      	add	r3, r2
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	2200      	movs	r2, #0
 8008f52:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	2202      	movs	r2, #2
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fc47 	bl	80097ee <USBD_CtlSendData>
              break;
 8008f60:	e06a      	b.n	8009038 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	da11      	bge.n	8008f8e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	f003 020f 	and.w	r2, r3, #15
 8008f70:	6879      	ldr	r1, [r7, #4]
 8008f72:	4613      	mov	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	440b      	add	r3, r1
 8008f7c:	3324      	adds	r3, #36	@ 0x24
 8008f7e:	881b      	ldrh	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d117      	bne.n	8008fb4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fbc0 	bl	800970c <USBD_CtlError>
                  break;
 8008f8c:	e054      	b.n	8009038 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	f003 020f 	and.w	r2, r3, #15
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	4613      	mov	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	440b      	add	r3, r1
 8008fa0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008fa4:	881b      	ldrh	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d104      	bne.n	8008fb4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 fbad 	bl	800970c <USBD_CtlError>
                  break;
 8008fb2:	e041      	b.n	8009038 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	da0b      	bge.n	8008fd4 <USBD_StdEPReq+0x23e>
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
 8008fbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	4413      	add	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	3310      	adds	r3, #16
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	4413      	add	r3, r2
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	e00b      	b.n	8008fec <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fd4:	7bbb      	ldrb	r3, [r7, #14]
 8008fd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fda:	4613      	mov	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4413      	add	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	4413      	add	r3, r2
 8008fea:	3304      	adds	r3, #4
 8008fec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d002      	beq.n	8008ffa <USBD_StdEPReq+0x264>
 8008ff4:	7bbb      	ldrb	r3, [r7, #14]
 8008ff6:	2b80      	cmp	r3, #128	@ 0x80
 8008ff8:	d103      	bne.n	8009002 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	e00e      	b.n	8009020 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f001 f85c 	bl	800a0c4 <USBD_LL_IsStallEP>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d003      	beq.n	800901a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	2201      	movs	r2, #1
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	e002      	b.n	8009020 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	2200      	movs	r2, #0
 800901e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	2202      	movs	r2, #2
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fbe1 	bl	80097ee <USBD_CtlSendData>
              break;
 800902c:	e004      	b.n	8009038 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fb6b 	bl	800970c <USBD_CtlError>
              break;
 8009036:	bf00      	nop
          }
          break;
 8009038:	e004      	b.n	8009044 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fb65 	bl	800970c <USBD_CtlError>
          break;
 8009042:	bf00      	nop
      }
      break;
 8009044:	e004      	b.n	8009050 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fb5f 	bl	800970c <USBD_CtlError>
      break;
 800904e:	bf00      	nop
  }

  return ret;
 8009050:	7bfb      	ldrb	r3, [r7, #15]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
	...

0800905c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009066:	2300      	movs	r3, #0
 8009068:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800906a:	2300      	movs	r3, #0
 800906c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800906e:	2300      	movs	r3, #0
 8009070:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	885b      	ldrh	r3, [r3, #2]
 8009076:	0a1b      	lsrs	r3, r3, #8
 8009078:	b29b      	uxth	r3, r3
 800907a:	3b01      	subs	r3, #1
 800907c:	2b0e      	cmp	r3, #14
 800907e:	f200 8152 	bhi.w	8009326 <USBD_GetDescriptor+0x2ca>
 8009082:	a201      	add	r2, pc, #4	@ (adr r2, 8009088 <USBD_GetDescriptor+0x2c>)
 8009084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009088:	080090f9 	.word	0x080090f9
 800908c:	08009111 	.word	0x08009111
 8009090:	08009151 	.word	0x08009151
 8009094:	08009327 	.word	0x08009327
 8009098:	08009327 	.word	0x08009327
 800909c:	080092c7 	.word	0x080092c7
 80090a0:	080092f3 	.word	0x080092f3
 80090a4:	08009327 	.word	0x08009327
 80090a8:	08009327 	.word	0x08009327
 80090ac:	08009327 	.word	0x08009327
 80090b0:	08009327 	.word	0x08009327
 80090b4:	08009327 	.word	0x08009327
 80090b8:	08009327 	.word	0x08009327
 80090bc:	08009327 	.word	0x08009327
 80090c0:	080090c5 	.word	0x080090c5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00b      	beq.n	80090e8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090d6:	69db      	ldr	r3, [r3, #28]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	7c12      	ldrb	r2, [r2, #16]
 80090dc:	f107 0108 	add.w	r1, r7, #8
 80090e0:	4610      	mov	r0, r2
 80090e2:	4798      	blx	r3
 80090e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090e6:	e126      	b.n	8009336 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fb0e 	bl	800970c <USBD_CtlError>
        err++;
 80090f0:	7afb      	ldrb	r3, [r7, #11]
 80090f2:	3301      	adds	r3, #1
 80090f4:	72fb      	strb	r3, [r7, #11]
      break;
 80090f6:	e11e      	b.n	8009336 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	7c12      	ldrb	r2, [r2, #16]
 8009104:	f107 0108 	add.w	r1, r7, #8
 8009108:	4610      	mov	r0, r2
 800910a:	4798      	blx	r3
 800910c:	60f8      	str	r0, [r7, #12]
      break;
 800910e:	e112      	b.n	8009336 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	7c1b      	ldrb	r3, [r3, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10d      	bne.n	8009134 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800911e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009120:	f107 0208 	add.w	r2, r7, #8
 8009124:	4610      	mov	r0, r2
 8009126:	4798      	blx	r3
 8009128:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	3301      	adds	r3, #1
 800912e:	2202      	movs	r2, #2
 8009130:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009132:	e100      	b.n	8009336 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800913a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800913c:	f107 0208 	add.w	r2, r7, #8
 8009140:	4610      	mov	r0, r2
 8009142:	4798      	blx	r3
 8009144:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	3301      	adds	r3, #1
 800914a:	2202      	movs	r2, #2
 800914c:	701a      	strb	r2, [r3, #0]
      break;
 800914e:	e0f2      	b.n	8009336 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	885b      	ldrh	r3, [r3, #2]
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b05      	cmp	r3, #5
 8009158:	f200 80ac 	bhi.w	80092b4 <USBD_GetDescriptor+0x258>
 800915c:	a201      	add	r2, pc, #4	@ (adr r2, 8009164 <USBD_GetDescriptor+0x108>)
 800915e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009162:	bf00      	nop
 8009164:	0800917d 	.word	0x0800917d
 8009168:	080091b1 	.word	0x080091b1
 800916c:	080091e5 	.word	0x080091e5
 8009170:	08009219 	.word	0x08009219
 8009174:	0800924d 	.word	0x0800924d
 8009178:	08009281 	.word	0x08009281
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00b      	beq.n	80091a0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	7c12      	ldrb	r2, [r2, #16]
 8009194:	f107 0108 	add.w	r1, r7, #8
 8009198:	4610      	mov	r0, r2
 800919a:	4798      	blx	r3
 800919c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800919e:	e091      	b.n	80092c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091a0:	6839      	ldr	r1, [r7, #0]
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fab2 	bl	800970c <USBD_CtlError>
            err++;
 80091a8:	7afb      	ldrb	r3, [r7, #11]
 80091aa:	3301      	adds	r3, #1
 80091ac:	72fb      	strb	r3, [r7, #11]
          break;
 80091ae:	e089      	b.n	80092c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00b      	beq.n	80091d4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	7c12      	ldrb	r2, [r2, #16]
 80091c8:	f107 0108 	add.w	r1, r7, #8
 80091cc:	4610      	mov	r0, r2
 80091ce:	4798      	blx	r3
 80091d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091d2:	e077      	b.n	80092c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fa98 	bl	800970c <USBD_CtlError>
            err++;
 80091dc:	7afb      	ldrb	r3, [r7, #11]
 80091de:	3301      	adds	r3, #1
 80091e0:	72fb      	strb	r3, [r7, #11]
          break;
 80091e2:	e06f      	b.n	80092c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00b      	beq.n	8009208 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	7c12      	ldrb	r2, [r2, #16]
 80091fc:	f107 0108 	add.w	r1, r7, #8
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009206:	e05d      	b.n	80092c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fa7e 	bl	800970c <USBD_CtlError>
            err++;
 8009210:	7afb      	ldrb	r3, [r7, #11]
 8009212:	3301      	adds	r3, #1
 8009214:	72fb      	strb	r3, [r7, #11]
          break;
 8009216:	e055      	b.n	80092c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00b      	beq.n	800923c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	7c12      	ldrb	r2, [r2, #16]
 8009230:	f107 0108 	add.w	r1, r7, #8
 8009234:	4610      	mov	r0, r2
 8009236:	4798      	blx	r3
 8009238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800923a:	e043      	b.n	80092c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fa64 	bl	800970c <USBD_CtlError>
            err++;
 8009244:	7afb      	ldrb	r3, [r7, #11]
 8009246:	3301      	adds	r3, #1
 8009248:	72fb      	strb	r3, [r7, #11]
          break;
 800924a:	e03b      	b.n	80092c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00b      	beq.n	8009270 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	7c12      	ldrb	r2, [r2, #16]
 8009264:	f107 0108 	add.w	r1, r7, #8
 8009268:	4610      	mov	r0, r2
 800926a:	4798      	blx	r3
 800926c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800926e:	e029      	b.n	80092c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fa4a 	bl	800970c <USBD_CtlError>
            err++;
 8009278:	7afb      	ldrb	r3, [r7, #11]
 800927a:	3301      	adds	r3, #1
 800927c:	72fb      	strb	r3, [r7, #11]
          break;
 800927e:	e021      	b.n	80092c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00b      	beq.n	80092a4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	7c12      	ldrb	r2, [r2, #16]
 8009298:	f107 0108 	add.w	r1, r7, #8
 800929c:	4610      	mov	r0, r2
 800929e:	4798      	blx	r3
 80092a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092a2:	e00f      	b.n	80092c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092a4:	6839      	ldr	r1, [r7, #0]
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fa30 	bl	800970c <USBD_CtlError>
            err++;
 80092ac:	7afb      	ldrb	r3, [r7, #11]
 80092ae:	3301      	adds	r3, #1
 80092b0:	72fb      	strb	r3, [r7, #11]
          break;
 80092b2:	e007      	b.n	80092c4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fa28 	bl	800970c <USBD_CtlError>
          err++;
 80092bc:	7afb      	ldrb	r3, [r7, #11]
 80092be:	3301      	adds	r3, #1
 80092c0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80092c2:	bf00      	nop
      }
      break;
 80092c4:	e037      	b.n	8009336 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	7c1b      	ldrb	r3, [r3, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d109      	bne.n	80092e2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092d6:	f107 0208 	add.w	r2, r7, #8
 80092da:	4610      	mov	r0, r2
 80092dc:	4798      	blx	r3
 80092de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092e0:	e029      	b.n	8009336 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fa11 	bl	800970c <USBD_CtlError>
        err++;
 80092ea:	7afb      	ldrb	r3, [r7, #11]
 80092ec:	3301      	adds	r3, #1
 80092ee:	72fb      	strb	r3, [r7, #11]
      break;
 80092f0:	e021      	b.n	8009336 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	7c1b      	ldrb	r3, [r3, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10d      	bne.n	8009316 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009302:	f107 0208 	add.w	r2, r7, #8
 8009306:	4610      	mov	r0, r2
 8009308:	4798      	blx	r3
 800930a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	3301      	adds	r3, #1
 8009310:	2207      	movs	r2, #7
 8009312:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009314:	e00f      	b.n	8009336 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f9f7 	bl	800970c <USBD_CtlError>
        err++;
 800931e:	7afb      	ldrb	r3, [r7, #11]
 8009320:	3301      	adds	r3, #1
 8009322:	72fb      	strb	r3, [r7, #11]
      break;
 8009324:	e007      	b.n	8009336 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f9ef 	bl	800970c <USBD_CtlError>
      err++;
 800932e:	7afb      	ldrb	r3, [r7, #11]
 8009330:	3301      	adds	r3, #1
 8009332:	72fb      	strb	r3, [r7, #11]
      break;
 8009334:	bf00      	nop
  }

  if (err != 0U)
 8009336:	7afb      	ldrb	r3, [r7, #11]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d11e      	bne.n	800937a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	88db      	ldrh	r3, [r3, #6]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d016      	beq.n	8009372 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009344:	893b      	ldrh	r3, [r7, #8]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00e      	beq.n	8009368 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	88da      	ldrh	r2, [r3, #6]
 800934e:	893b      	ldrh	r3, [r7, #8]
 8009350:	4293      	cmp	r3, r2
 8009352:	bf28      	it	cs
 8009354:	4613      	movcs	r3, r2
 8009356:	b29b      	uxth	r3, r3
 8009358:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800935a:	893b      	ldrh	r3, [r7, #8]
 800935c:	461a      	mov	r2, r3
 800935e:	68f9      	ldr	r1, [r7, #12]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fa44 	bl	80097ee <USBD_CtlSendData>
 8009366:	e009      	b.n	800937c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f9ce 	bl	800970c <USBD_CtlError>
 8009370:	e004      	b.n	800937c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fa95 	bl	80098a2 <USBD_CtlSendStatus>
 8009378:	e000      	b.n	800937c <USBD_GetDescriptor+0x320>
    return;
 800937a:	bf00      	nop
  }
}
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop

08009384 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	889b      	ldrh	r3, [r3, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d131      	bne.n	80093fa <USBD_SetAddress+0x76>
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	88db      	ldrh	r3, [r3, #6]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d12d      	bne.n	80093fa <USBD_SetAddress+0x76>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	885b      	ldrh	r3, [r3, #2]
 80093a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80093a4:	d829      	bhi.n	80093fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	885b      	ldrh	r3, [r3, #2]
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	d104      	bne.n	80093c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f9a3 	bl	800970c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093c6:	e01d      	b.n	8009404 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	7bfa      	ldrb	r2, [r7, #15]
 80093cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
 80093d2:	4619      	mov	r1, r3
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fea1 	bl	800a11c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fa61 	bl	80098a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d004      	beq.n	80093f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2202      	movs	r2, #2
 80093ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ee:	e009      	b.n	8009404 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093f8:	e004      	b.n	8009404 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f985 	bl	800970c <USBD_CtlError>
  }
}
 8009402:	bf00      	nop
 8009404:	bf00      	nop
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	885b      	ldrh	r3, [r3, #2]
 800941e:	b2da      	uxtb	r2, r3
 8009420:	4b4c      	ldr	r3, [pc, #304]	@ (8009554 <USBD_SetConfig+0x148>)
 8009422:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009424:	4b4b      	ldr	r3, [pc, #300]	@ (8009554 <USBD_SetConfig+0x148>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d905      	bls.n	8009438 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f96c 	bl	800970c <USBD_CtlError>
    return USBD_FAIL;
 8009434:	2303      	movs	r3, #3
 8009436:	e088      	b.n	800954a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b02      	cmp	r3, #2
 8009442:	d002      	beq.n	800944a <USBD_SetConfig+0x3e>
 8009444:	2b03      	cmp	r3, #3
 8009446:	d025      	beq.n	8009494 <USBD_SetConfig+0x88>
 8009448:	e071      	b.n	800952e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800944a:	4b42      	ldr	r3, [pc, #264]	@ (8009554 <USBD_SetConfig+0x148>)
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d01c      	beq.n	800948c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009452:	4b40      	ldr	r3, [pc, #256]	@ (8009554 <USBD_SetConfig+0x148>)
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	461a      	mov	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800945c:	4b3d      	ldr	r3, [pc, #244]	@ (8009554 <USBD_SetConfig+0x148>)
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	4619      	mov	r1, r3
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff f992 	bl	800878c <USBD_SetClassConfig>
 8009468:	4603      	mov	r3, r0
 800946a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800946c:	7bfb      	ldrb	r3, [r7, #15]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d004      	beq.n	800947c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f949 	bl	800970c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800947a:	e065      	b.n	8009548 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fa10 	bl	80098a2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2203      	movs	r2, #3
 8009486:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800948a:	e05d      	b.n	8009548 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fa08 	bl	80098a2 <USBD_CtlSendStatus>
      break;
 8009492:	e059      	b.n	8009548 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009494:	4b2f      	ldr	r3, [pc, #188]	@ (8009554 <USBD_SetConfig+0x148>)
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d112      	bne.n	80094c2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2202      	movs	r2, #2
 80094a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80094a4:	4b2b      	ldr	r3, [pc, #172]	@ (8009554 <USBD_SetConfig+0x148>)
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	461a      	mov	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094ae:	4b29      	ldr	r3, [pc, #164]	@ (8009554 <USBD_SetConfig+0x148>)
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7ff f985 	bl	80087c4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f9f1 	bl	80098a2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094c0:	e042      	b.n	8009548 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80094c2:	4b24      	ldr	r3, [pc, #144]	@ (8009554 <USBD_SetConfig+0x148>)
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d02a      	beq.n	8009526 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff f973 	bl	80087c4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80094de:	4b1d      	ldr	r3, [pc, #116]	@ (8009554 <USBD_SetConfig+0x148>)
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	461a      	mov	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009554 <USBD_SetConfig+0x148>)
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	4619      	mov	r1, r3
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7ff f94c 	bl	800878c <USBD_SetClassConfig>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00f      	beq.n	800951e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f903 	bl	800970c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	b2db      	uxtb	r3, r3
 800950c:	4619      	mov	r1, r3
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7ff f958 	bl	80087c4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2202      	movs	r2, #2
 8009518:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800951c:	e014      	b.n	8009548 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f9bf 	bl	80098a2 <USBD_CtlSendStatus>
      break;
 8009524:	e010      	b.n	8009548 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f9bb 	bl	80098a2 <USBD_CtlSendStatus>
      break;
 800952c:	e00c      	b.n	8009548 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f8eb 	bl	800970c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009536:	4b07      	ldr	r3, [pc, #28]	@ (8009554 <USBD_SetConfig+0x148>)
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	4619      	mov	r1, r3
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7ff f941 	bl	80087c4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009542:	2303      	movs	r3, #3
 8009544:	73fb      	strb	r3, [r7, #15]
      break;
 8009546:	bf00      	nop
  }

  return ret;
 8009548:	7bfb      	ldrb	r3, [r7, #15]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	2000043c 	.word	0x2000043c

08009558 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	88db      	ldrh	r3, [r3, #6]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d004      	beq.n	8009574 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f8cd 	bl	800970c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009572:	e023      	b.n	80095bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b02      	cmp	r3, #2
 800957e:	dc02      	bgt.n	8009586 <USBD_GetConfig+0x2e>
 8009580:	2b00      	cmp	r3, #0
 8009582:	dc03      	bgt.n	800958c <USBD_GetConfig+0x34>
 8009584:	e015      	b.n	80095b2 <USBD_GetConfig+0x5a>
 8009586:	2b03      	cmp	r3, #3
 8009588:	d00b      	beq.n	80095a2 <USBD_GetConfig+0x4a>
 800958a:	e012      	b.n	80095b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	3308      	adds	r3, #8
 8009596:	2201      	movs	r2, #1
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f927 	bl	80097ee <USBD_CtlSendData>
        break;
 80095a0:	e00c      	b.n	80095bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	3304      	adds	r3, #4
 80095a6:	2201      	movs	r2, #1
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f91f 	bl	80097ee <USBD_CtlSendData>
        break;
 80095b0:	e004      	b.n	80095bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f8a9 	bl	800970c <USBD_CtlError>
        break;
 80095ba:	bf00      	nop
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	3b01      	subs	r3, #1
 80095d8:	2b02      	cmp	r3, #2
 80095da:	d81e      	bhi.n	800961a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	88db      	ldrh	r3, [r3, #6]
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d004      	beq.n	80095ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f890 	bl	800970c <USBD_CtlError>
        break;
 80095ec:	e01a      	b.n	8009624 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d005      	beq.n	800960a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	f043 0202 	orr.w	r2, r3, #2
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	330c      	adds	r3, #12
 800960e:	2202      	movs	r2, #2
 8009610:	4619      	mov	r1, r3
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f8eb 	bl	80097ee <USBD_CtlSendData>
      break;
 8009618:	e004      	b.n	8009624 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 f875 	bl	800970c <USBD_CtlError>
      break;
 8009622:	bf00      	nop
  }
}
 8009624:	bf00      	nop
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	885b      	ldrh	r3, [r3, #2]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d106      	bne.n	800964c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2201      	movs	r2, #1
 8009642:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f92b 	bl	80098a2 <USBD_CtlSendStatus>
  }
}
 800964c:	bf00      	nop
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009664:	b2db      	uxtb	r3, r3
 8009666:	3b01      	subs	r3, #1
 8009668:	2b02      	cmp	r3, #2
 800966a:	d80b      	bhi.n	8009684 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	885b      	ldrh	r3, [r3, #2]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d10c      	bne.n	800968e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f910 	bl	80098a2 <USBD_CtlSendStatus>
      }
      break;
 8009682:	e004      	b.n	800968e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f840 	bl	800970c <USBD_CtlError>
      break;
 800968c:	e000      	b.n	8009690 <USBD_ClrFeature+0x3c>
      break;
 800968e:	bf00      	nop
  }
}
 8009690:	bf00      	nop
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	781a      	ldrb	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	3301      	adds	r3, #1
 80096b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	781a      	ldrb	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3301      	adds	r3, #1
 80096c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f7ff fa92 	bl	8008bec <SWAPBYTE>
 80096c8:	4603      	mov	r3, r0
 80096ca:	461a      	mov	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	3301      	adds	r3, #1
 80096d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	3301      	adds	r3, #1
 80096da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f7ff fa85 	bl	8008bec <SWAPBYTE>
 80096e2:	4603      	mov	r3, r0
 80096e4:	461a      	mov	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	3301      	adds	r3, #1
 80096ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	3301      	adds	r3, #1
 80096f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f7ff fa78 	bl	8008bec <SWAPBYTE>
 80096fc:	4603      	mov	r3, r0
 80096fe:	461a      	mov	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	80da      	strh	r2, [r3, #6]
}
 8009704:	bf00      	nop
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009716:	2180      	movs	r1, #128	@ 0x80
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fc95 	bl	800a048 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800971e:	2100      	movs	r1, #0
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fc91 	bl	800a048 <USBD_LL_StallEP>
}
 8009726:	bf00      	nop
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b086      	sub	sp, #24
 8009732:	af00      	add	r7, sp, #0
 8009734:	60f8      	str	r0, [r7, #12]
 8009736:	60b9      	str	r1, [r7, #8]
 8009738:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800973a:	2300      	movs	r3, #0
 800973c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d036      	beq.n	80097b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009748:	6938      	ldr	r0, [r7, #16]
 800974a:	f000 f836 	bl	80097ba <USBD_GetLen>
 800974e:	4603      	mov	r3, r0
 8009750:	3301      	adds	r3, #1
 8009752:	b29b      	uxth	r3, r3
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	b29a      	uxth	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800975c:	7dfb      	ldrb	r3, [r7, #23]
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	4413      	add	r3, r2
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	7812      	ldrb	r2, [r2, #0]
 8009766:	701a      	strb	r2, [r3, #0]
  idx++;
 8009768:	7dfb      	ldrb	r3, [r7, #23]
 800976a:	3301      	adds	r3, #1
 800976c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800976e:	7dfb      	ldrb	r3, [r7, #23]
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	4413      	add	r3, r2
 8009774:	2203      	movs	r2, #3
 8009776:	701a      	strb	r2, [r3, #0]
  idx++;
 8009778:	7dfb      	ldrb	r3, [r7, #23]
 800977a:	3301      	adds	r3, #1
 800977c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800977e:	e013      	b.n	80097a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009780:	7dfb      	ldrb	r3, [r7, #23]
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	4413      	add	r3, r2
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	7812      	ldrb	r2, [r2, #0]
 800978a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	3301      	adds	r3, #1
 8009790:	613b      	str	r3, [r7, #16]
    idx++;
 8009792:	7dfb      	ldrb	r3, [r7, #23]
 8009794:	3301      	adds	r3, #1
 8009796:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009798:	7dfb      	ldrb	r3, [r7, #23]
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	4413      	add	r3, r2
 800979e:	2200      	movs	r2, #0
 80097a0:	701a      	strb	r2, [r3, #0]
    idx++;
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
 80097a4:	3301      	adds	r3, #1
 80097a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e7      	bne.n	8009780 <USBD_GetString+0x52>
 80097b0:	e000      	b.n	80097b4 <USBD_GetString+0x86>
    return;
 80097b2:	bf00      	nop
  }
}
 80097b4:	3718      	adds	r7, #24
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b085      	sub	sp, #20
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80097ca:	e005      	b.n	80097d8 <USBD_GetLen+0x1e>
  {
    len++;
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
 80097ce:	3301      	adds	r3, #1
 80097d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	3301      	adds	r3, #1
 80097d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1f5      	bne.n	80097cc <USBD_GetLen+0x12>
  }

  return len;
 80097e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2202      	movs	r2, #2
 80097fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	2100      	movs	r1, #0
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f000 fca0 	bl	800a15a <USBD_LL_Transmit>

  return USBD_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	2100      	movs	r1, #0
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f000 fc8f 	bl	800a15a <USBD_LL_Transmit>

  return USBD_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b084      	sub	sp, #16
 800984a:	af00      	add	r7, sp, #0
 800984c:	60f8      	str	r0, [r7, #12]
 800984e:	60b9      	str	r1, [r7, #8]
 8009850:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2203      	movs	r2, #3
 8009856:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68ba      	ldr	r2, [r7, #8]
 800986e:	2100      	movs	r1, #0
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f000 fc93 	bl	800a19c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	2100      	movs	r1, #0
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 fc82 	bl	800a19c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b082      	sub	sp, #8
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2204      	movs	r2, #4
 80098ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80098b2:	2300      	movs	r3, #0
 80098b4:	2200      	movs	r2, #0
 80098b6:	2100      	movs	r1, #0
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fc4e 	bl	800a15a <USBD_LL_Transmit>

  return USBD_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2205      	movs	r2, #5
 80098d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098d8:	2300      	movs	r3, #0
 80098da:	2200      	movs	r2, #0
 80098dc:	2100      	movs	r1, #0
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fc5c 	bl	800a19c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
	...

080098f0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80098f4:	2200      	movs	r2, #0
 80098f6:	4912      	ldr	r1, [pc, #72]	@ (8009940 <MX_USB_Device_Init+0x50>)
 80098f8:	4812      	ldr	r0, [pc, #72]	@ (8009944 <MX_USB_Device_Init+0x54>)
 80098fa:	f7fe fed9 	bl	80086b0 <USBD_Init>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009904:	f7f7 fcb0 	bl	8001268 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009908:	490f      	ldr	r1, [pc, #60]	@ (8009948 <MX_USB_Device_Init+0x58>)
 800990a:	480e      	ldr	r0, [pc, #56]	@ (8009944 <MX_USB_Device_Init+0x54>)
 800990c:	f7fe ff00 	bl	8008710 <USBD_RegisterClass>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009916:	f7f7 fca7 	bl	8001268 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800991a:	490c      	ldr	r1, [pc, #48]	@ (800994c <MX_USB_Device_Init+0x5c>)
 800991c:	4809      	ldr	r0, [pc, #36]	@ (8009944 <MX_USB_Device_Init+0x54>)
 800991e:	f7fe fe21 	bl	8008564 <USBD_CDC_RegisterInterface>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d001      	beq.n	800992c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009928:	f7f7 fc9e 	bl	8001268 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800992c:	4805      	ldr	r0, [pc, #20]	@ (8009944 <MX_USB_Device_Init+0x54>)
 800992e:	f7fe ff16 	bl	800875e <USBD_Start>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d001      	beq.n	800993c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009938:	f7f7 fc96 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800993c:	bf00      	nop
 800993e:	bd80      	pop	{r7, pc}
 8009940:	20000130 	.word	0x20000130
 8009944:	20000440 	.word	0x20000440
 8009948:	20000018 	.word	0x20000018
 800994c:	2000011c 	.word	0x2000011c

08009950 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009954:	2200      	movs	r2, #0
 8009956:	4905      	ldr	r1, [pc, #20]	@ (800996c <CDC_Init_FS+0x1c>)
 8009958:	4805      	ldr	r0, [pc, #20]	@ (8009970 <CDC_Init_FS+0x20>)
 800995a:	f7fe fe18 	bl	800858e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800995e:	4905      	ldr	r1, [pc, #20]	@ (8009974 <CDC_Init_FS+0x24>)
 8009960:	4803      	ldr	r0, [pc, #12]	@ (8009970 <CDC_Init_FS+0x20>)
 8009962:	f7fe fe32 	bl	80085ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009966:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009968:	4618      	mov	r0, r3
 800996a:	bd80      	pop	{r7, pc}
 800996c:	20000f10 	.word	0x20000f10
 8009970:	20000440 	.word	0x20000440
 8009974:	20000710 	.word	0x20000710

08009978 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009978:	b480      	push	{r7}
 800997a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800997c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800997e:	4618      	mov	r0, r3
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	4603      	mov	r3, r0
 8009990:	6039      	str	r1, [r7, #0]
 8009992:	71fb      	strb	r3, [r7, #7]
 8009994:	4613      	mov	r3, r2
 8009996:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009998:	79fb      	ldrb	r3, [r7, #7]
 800999a:	2b23      	cmp	r3, #35	@ 0x23
 800999c:	d84a      	bhi.n	8009a34 <CDC_Control_FS+0xac>
 800999e:	a201      	add	r2, pc, #4	@ (adr r2, 80099a4 <CDC_Control_FS+0x1c>)
 80099a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a4:	08009a35 	.word	0x08009a35
 80099a8:	08009a35 	.word	0x08009a35
 80099ac:	08009a35 	.word	0x08009a35
 80099b0:	08009a35 	.word	0x08009a35
 80099b4:	08009a35 	.word	0x08009a35
 80099b8:	08009a35 	.word	0x08009a35
 80099bc:	08009a35 	.word	0x08009a35
 80099c0:	08009a35 	.word	0x08009a35
 80099c4:	08009a35 	.word	0x08009a35
 80099c8:	08009a35 	.word	0x08009a35
 80099cc:	08009a35 	.word	0x08009a35
 80099d0:	08009a35 	.word	0x08009a35
 80099d4:	08009a35 	.word	0x08009a35
 80099d8:	08009a35 	.word	0x08009a35
 80099dc:	08009a35 	.word	0x08009a35
 80099e0:	08009a35 	.word	0x08009a35
 80099e4:	08009a35 	.word	0x08009a35
 80099e8:	08009a35 	.word	0x08009a35
 80099ec:	08009a35 	.word	0x08009a35
 80099f0:	08009a35 	.word	0x08009a35
 80099f4:	08009a35 	.word	0x08009a35
 80099f8:	08009a35 	.word	0x08009a35
 80099fc:	08009a35 	.word	0x08009a35
 8009a00:	08009a35 	.word	0x08009a35
 8009a04:	08009a35 	.word	0x08009a35
 8009a08:	08009a35 	.word	0x08009a35
 8009a0c:	08009a35 	.word	0x08009a35
 8009a10:	08009a35 	.word	0x08009a35
 8009a14:	08009a35 	.word	0x08009a35
 8009a18:	08009a35 	.word	0x08009a35
 8009a1c:	08009a35 	.word	0x08009a35
 8009a20:	08009a35 	.word	0x08009a35
 8009a24:	08009a35 	.word	0x08009a35
 8009a28:	08009a35 	.word	0x08009a35
 8009a2c:	08009a35 	.word	0x08009a35
 8009a30:	08009a35 	.word	0x08009a35
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a34:	bf00      	nop
  }

  return (USBD_OK);
 8009a36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	4805      	ldr	r0, [pc, #20]	@ (8009a68 <CDC_Receive_FS+0x24>)
 8009a52:	f7fe fdba 	bl	80085ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a56:	4804      	ldr	r0, [pc, #16]	@ (8009a68 <CDC_Receive_FS+0x24>)
 8009a58:	f7fe fe00 	bl	800865c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009a5c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	20000440 	.word	0x20000440

08009a6c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	460b      	mov	r3, r1
 8009a76:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab4 <CDC_Transmit_FS+0x48>)
 8009a7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a82:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e00b      	b.n	8009aaa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009a92:	887b      	ldrh	r3, [r7, #2]
 8009a94:	461a      	mov	r2, r3
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	4806      	ldr	r0, [pc, #24]	@ (8009ab4 <CDC_Transmit_FS+0x48>)
 8009a9a:	f7fe fd78 	bl	800858e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009a9e:	4805      	ldr	r0, [pc, #20]	@ (8009ab4 <CDC_Transmit_FS+0x48>)
 8009aa0:	f7fe fdac 	bl	80085fc <USBD_CDC_TransmitPacket>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	20000440 	.word	0x20000440

08009ab8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b087      	sub	sp, #28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009aca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	371c      	adds	r7, #28
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
	...

08009adc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	6039      	str	r1, [r7, #0]
 8009ae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	2212      	movs	r2, #18
 8009aec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009aee:	4b03      	ldr	r3, [pc, #12]	@ (8009afc <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	20000150 	.word	0x20000150

08009b00 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	4603      	mov	r3, r0
 8009b08:	6039      	str	r1, [r7, #0]
 8009b0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	2204      	movs	r2, #4
 8009b10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b12:	4b03      	ldr	r3, [pc, #12]	@ (8009b20 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	20000164 	.word	0x20000164

08009b24 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	6039      	str	r1, [r7, #0]
 8009b2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b30:	79fb      	ldrb	r3, [r7, #7]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d105      	bne.n	8009b42 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	4907      	ldr	r1, [pc, #28]	@ (8009b58 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009b3a:	4808      	ldr	r0, [pc, #32]	@ (8009b5c <USBD_CDC_ProductStrDescriptor+0x38>)
 8009b3c:	f7ff fdf7 	bl	800972e <USBD_GetString>
 8009b40:	e004      	b.n	8009b4c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	4904      	ldr	r1, [pc, #16]	@ (8009b58 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009b46:	4805      	ldr	r0, [pc, #20]	@ (8009b5c <USBD_CDC_ProductStrDescriptor+0x38>)
 8009b48:	f7ff fdf1 	bl	800972e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b4c:	4b02      	ldr	r3, [pc, #8]	@ (8009b58 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20001710 	.word	0x20001710
 8009b5c:	0800b1b4 	.word	0x0800b1b4

08009b60 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	4603      	mov	r3, r0
 8009b68:	6039      	str	r1, [r7, #0]
 8009b6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	4904      	ldr	r1, [pc, #16]	@ (8009b80 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009b70:	4804      	ldr	r0, [pc, #16]	@ (8009b84 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009b72:	f7ff fddc 	bl	800972e <USBD_GetString>
  return USBD_StrDesc;
 8009b76:	4b02      	ldr	r3, [pc, #8]	@ (8009b80 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3708      	adds	r7, #8
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	20001710 	.word	0x20001710
 8009b84:	0800b1cc 	.word	0x0800b1cc

08009b88 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	6039      	str	r1, [r7, #0]
 8009b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	221a      	movs	r2, #26
 8009b98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b9a:	f000 f843 	bl	8009c24 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009b9e:	4b02      	ldr	r3, [pc, #8]	@ (8009ba8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	20000168 	.word	0x20000168

08009bac <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	6039      	str	r1, [r7, #0]
 8009bb6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009bb8:	79fb      	ldrb	r3, [r7, #7]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d105      	bne.n	8009bca <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	4907      	ldr	r1, [pc, #28]	@ (8009be0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009bc2:	4808      	ldr	r0, [pc, #32]	@ (8009be4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009bc4:	f7ff fdb3 	bl	800972e <USBD_GetString>
 8009bc8:	e004      	b.n	8009bd4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	4904      	ldr	r1, [pc, #16]	@ (8009be0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009bce:	4805      	ldr	r0, [pc, #20]	@ (8009be4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009bd0:	f7ff fdad 	bl	800972e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bd4:	4b02      	ldr	r3, [pc, #8]	@ (8009be0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	20001710 	.word	0x20001710
 8009be4:	0800b1e0 	.word	0x0800b1e0

08009be8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	4603      	mov	r3, r0
 8009bf0:	6039      	str	r1, [r7, #0]
 8009bf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bf4:	79fb      	ldrb	r3, [r7, #7]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d105      	bne.n	8009c06 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	4907      	ldr	r1, [pc, #28]	@ (8009c1c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009bfe:	4808      	ldr	r0, [pc, #32]	@ (8009c20 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009c00:	f7ff fd95 	bl	800972e <USBD_GetString>
 8009c04:	e004      	b.n	8009c10 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	4904      	ldr	r1, [pc, #16]	@ (8009c1c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009c0a:	4805      	ldr	r0, [pc, #20]	@ (8009c20 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009c0c:	f7ff fd8f 	bl	800972e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c10:	4b02      	ldr	r3, [pc, #8]	@ (8009c1c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20001710 	.word	0x20001710
 8009c20:	0800b1ec 	.word	0x0800b1ec

08009c24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8009c68 <Get_SerialNum+0x44>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c30:	4b0e      	ldr	r3, [pc, #56]	@ (8009c6c <Get_SerialNum+0x48>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c36:	4b0e      	ldr	r3, [pc, #56]	@ (8009c70 <Get_SerialNum+0x4c>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4413      	add	r3, r2
 8009c42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d009      	beq.n	8009c5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c4a:	2208      	movs	r2, #8
 8009c4c:	4909      	ldr	r1, [pc, #36]	@ (8009c74 <Get_SerialNum+0x50>)
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f000 f814 	bl	8009c7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c54:	2204      	movs	r2, #4
 8009c56:	4908      	ldr	r1, [pc, #32]	@ (8009c78 <Get_SerialNum+0x54>)
 8009c58:	68b8      	ldr	r0, [r7, #8]
 8009c5a:	f000 f80f 	bl	8009c7c <IntToUnicode>
  }
}
 8009c5e:	bf00      	nop
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	1fff7590 	.word	0x1fff7590
 8009c6c:	1fff7594 	.word	0x1fff7594
 8009c70:	1fff7598 	.word	0x1fff7598
 8009c74:	2000016a 	.word	0x2000016a
 8009c78:	2000017a 	.word	0x2000017a

08009c7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b087      	sub	sp, #28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	4613      	mov	r3, r2
 8009c88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c8e:	2300      	movs	r3, #0
 8009c90:	75fb      	strb	r3, [r7, #23]
 8009c92:	e027      	b.n	8009ce4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	0f1b      	lsrs	r3, r3, #28
 8009c98:	2b09      	cmp	r3, #9
 8009c9a:	d80b      	bhi.n	8009cb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	0f1b      	lsrs	r3, r3, #28
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	7dfb      	ldrb	r3, [r7, #23]
 8009ca4:	005b      	lsls	r3, r3, #1
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	440b      	add	r3, r1
 8009cac:	3230      	adds	r2, #48	@ 0x30
 8009cae:	b2d2      	uxtb	r2, r2
 8009cb0:	701a      	strb	r2, [r3, #0]
 8009cb2:	e00a      	b.n	8009cca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	0f1b      	lsrs	r3, r3, #28
 8009cb8:	b2da      	uxtb	r2, r3
 8009cba:	7dfb      	ldrb	r3, [r7, #23]
 8009cbc:	005b      	lsls	r3, r3, #1
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	440b      	add	r3, r1
 8009cc4:	3237      	adds	r2, #55	@ 0x37
 8009cc6:	b2d2      	uxtb	r2, r2
 8009cc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	011b      	lsls	r3, r3, #4
 8009cce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009cd0:	7dfb      	ldrb	r3, [r7, #23]
 8009cd2:	005b      	lsls	r3, r3, #1
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	4413      	add	r3, r2
 8009cda:	2200      	movs	r2, #0
 8009cdc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009cde:	7dfb      	ldrb	r3, [r7, #23]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	75fb      	strb	r3, [r7, #23]
 8009ce4:	7dfa      	ldrb	r2, [r7, #23]
 8009ce6:	79fb      	ldrb	r3, [r7, #7]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d3d3      	bcc.n	8009c94 <IntToUnicode+0x18>
  }
}
 8009cec:	bf00      	nop
 8009cee:	bf00      	nop
 8009cf0:	371c      	adds	r7, #28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
	...

08009cfc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b098      	sub	sp, #96	@ 0x60
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009d04:	f107 0310 	add.w	r3, r7, #16
 8009d08:	2250      	movs	r2, #80	@ 0x50
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 fb19 	bl	800a344 <memset>
  if(pcdHandle->Instance==USB)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a15      	ldr	r2, [pc, #84]	@ (8009d6c <HAL_PCD_MspInit+0x70>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d122      	bne.n	8009d62 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009d1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009d20:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009d22:	2300      	movs	r3, #0
 8009d24:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009d26:	f107 0310 	add.w	r3, r7, #16
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fa fe2e 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d001      	beq.n	8009d3a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009d36:	f7f7 fa97 	bl	8001268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009d70 <HAL_PCD_MspInit+0x74>)
 8009d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8009d70 <HAL_PCD_MspInit+0x74>)
 8009d40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d46:	4b0a      	ldr	r3, [pc, #40]	@ (8009d70 <HAL_PCD_MspInit+0x74>)
 8009d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009d52:	2200      	movs	r2, #0
 8009d54:	2100      	movs	r1, #0
 8009d56:	2014      	movs	r0, #20
 8009d58:	f7f7 fe77 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009d5c:	2014      	movs	r0, #20
 8009d5e:	f7f7 fe8e 	bl	8001a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009d62:	bf00      	nop
 8009d64:	3760      	adds	r7, #96	@ 0x60
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	40005c00 	.word	0x40005c00
 8009d70:	40021000 	.word	0x40021000

08009d74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009d88:	4619      	mov	r1, r3
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	f7fe fd32 	bl	80087f4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	460b      	mov	r3, r1
 8009da2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009daa:	78fa      	ldrb	r2, [r7, #3]
 8009dac:	6879      	ldr	r1, [r7, #4]
 8009dae:	4613      	mov	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	4413      	add	r3, r2
 8009db4:	00db      	lsls	r3, r3, #3
 8009db6:	440b      	add	r3, r1
 8009db8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	78fb      	ldrb	r3, [r7, #3]
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	f7fe fd6c 	bl	800889e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009dc6:	bf00      	nop
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b082      	sub	sp, #8
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009de0:	78fa      	ldrb	r2, [r7, #3]
 8009de2:	6879      	ldr	r1, [r7, #4]
 8009de4:	4613      	mov	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4413      	add	r3, r2
 8009dea:	00db      	lsls	r3, r3, #3
 8009dec:	440b      	add	r3, r1
 8009dee:	3324      	adds	r3, #36	@ 0x24
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	78fb      	ldrb	r3, [r7, #3]
 8009df4:	4619      	mov	r1, r3
 8009df6:	f7fe fdb5 	bl	8008964 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009dfa:	bf00      	nop
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b082      	sub	sp, #8
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fe fec9 	bl	8008ba8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009e16:	bf00      	nop
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e26:	2301      	movs	r3, #1
 8009e28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	795b      	ldrb	r3, [r3, #5]
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	d001      	beq.n	8009e36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e32:	f7f7 fa19 	bl	8001268 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009e3c:	7bfa      	ldrb	r2, [r7, #15]
 8009e3e:	4611      	mov	r1, r2
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7fe fe73 	bl	8008b2c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7fe fe1f 	bl	8008a90 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009e52:	bf00      	nop
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
	...

08009e5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe fe6e 	bl	8008b4c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	7a5b      	ldrb	r3, [r3, #9]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d005      	beq.n	8009e84 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e78:	4b04      	ldr	r3, [pc, #16]	@ (8009e8c <HAL_PCD_SuspendCallback+0x30>)
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	4a03      	ldr	r2, [pc, #12]	@ (8009e8c <HAL_PCD_SuspendCallback+0x30>)
 8009e7e:	f043 0306 	orr.w	r3, r3, #6
 8009e82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009e84:	bf00      	nop
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	e000ed00 	.word	0xe000ed00

08009e90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	7a5b      	ldrb	r3, [r3, #9]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d007      	beq.n	8009eb0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ea0:	4b08      	ldr	r3, [pc, #32]	@ (8009ec4 <HAL_PCD_ResumeCallback+0x34>)
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	4a07      	ldr	r2, [pc, #28]	@ (8009ec4 <HAL_PCD_ResumeCallback+0x34>)
 8009ea6:	f023 0306 	bic.w	r3, r3, #6
 8009eaa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009eac:	f000 f9f8 	bl	800a2a0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe fe5e 	bl	8008b78 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009ebc:	bf00      	nop
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	e000ed00 	.word	0xe000ed00

08009ec8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8009f80 <USBD_LL_Init+0xb8>)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a29      	ldr	r2, [pc, #164]	@ (8009f80 <USBD_LL_Init+0xb8>)
 8009edc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009ee0:	4b27      	ldr	r3, [pc, #156]	@ (8009f80 <USBD_LL_Init+0xb8>)
 8009ee2:	4a28      	ldr	r2, [pc, #160]	@ (8009f84 <USBD_LL_Init+0xbc>)
 8009ee4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009ee6:	4b26      	ldr	r3, [pc, #152]	@ (8009f80 <USBD_LL_Init+0xb8>)
 8009ee8:	2208      	movs	r2, #8
 8009eea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009eec:	4b24      	ldr	r3, [pc, #144]	@ (8009f80 <USBD_LL_Init+0xb8>)
 8009eee:	2202      	movs	r2, #2
 8009ef0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ef2:	4b23      	ldr	r3, [pc, #140]	@ (8009f80 <USBD_LL_Init+0xb8>)
 8009ef4:	2202      	movs	r2, #2
 8009ef6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009ef8:	4b21      	ldr	r3, [pc, #132]	@ (8009f80 <USBD_LL_Init+0xb8>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009efe:	4b20      	ldr	r3, [pc, #128]	@ (8009f80 <USBD_LL_Init+0xb8>)
 8009f00:	2200      	movs	r2, #0
 8009f02:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009f04:	4b1e      	ldr	r3, [pc, #120]	@ (8009f80 <USBD_LL_Init+0xb8>)
 8009f06:	2200      	movs	r2, #0
 8009f08:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8009f80 <USBD_LL_Init+0xb8>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009f10:	481b      	ldr	r0, [pc, #108]	@ (8009f80 <USBD_LL_Init+0xb8>)
 8009f12:	f7f8 fa57 	bl	80023c4 <HAL_PCD_Init>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d001      	beq.n	8009f20 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009f1c:	f7f7 f9a4 	bl	8001268 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009f26:	2318      	movs	r3, #24
 8009f28:	2200      	movs	r2, #0
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	f7f9 fede 	bl	8003cec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009f36:	2358      	movs	r3, #88	@ 0x58
 8009f38:	2200      	movs	r2, #0
 8009f3a:	2180      	movs	r1, #128	@ 0x80
 8009f3c:	f7f9 fed6 	bl	8003cec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009f46:	23c0      	movs	r3, #192	@ 0xc0
 8009f48:	2200      	movs	r2, #0
 8009f4a:	2181      	movs	r1, #129	@ 0x81
 8009f4c:	f7f9 fece 	bl	8003cec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009f56:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	f7f9 fec5 	bl	8003cec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009f68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	2182      	movs	r1, #130	@ 0x82
 8009f70:	f7f9 febc 	bl	8003cec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	20001910 	.word	0x20001910
 8009f84:	40005c00 	.word	0x40005c00

08009f88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f94:	2300      	movs	r3, #0
 8009f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7f8 fade 	bl	8002560 <HAL_PCD_Start>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 f97e 	bl	800a2ac <USBD_Get_USB_Status>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	4608      	mov	r0, r1
 8009fc8:	4611      	mov	r1, r2
 8009fca:	461a      	mov	r2, r3
 8009fcc:	4603      	mov	r3, r0
 8009fce:	70fb      	strb	r3, [r7, #3]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	70bb      	strb	r3, [r7, #2]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009fe6:	78bb      	ldrb	r3, [r7, #2]
 8009fe8:	883a      	ldrh	r2, [r7, #0]
 8009fea:	78f9      	ldrb	r1, [r7, #3]
 8009fec:	f7f8 fc25 	bl	800283a <HAL_PCD_EP_Open>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f000 f958 	bl	800a2ac <USBD_Get_USB_Status>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a000:	7bbb      	ldrb	r3, [r7, #14]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	460b      	mov	r3, r1
 800a014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a01a:	2300      	movs	r3, #0
 800a01c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a024:	78fa      	ldrb	r2, [r7, #3]
 800a026:	4611      	mov	r1, r2
 800a028:	4618      	mov	r0, r3
 800a02a:	f7f8 fc65 	bl	80028f8 <HAL_PCD_EP_Close>
 800a02e:	4603      	mov	r3, r0
 800a030:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a032:	7bfb      	ldrb	r3, [r7, #15]
 800a034:	4618      	mov	r0, r3
 800a036:	f000 f939 	bl	800a2ac <USBD_Get_USB_Status>
 800a03a:	4603      	mov	r3, r0
 800a03c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a03e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a054:	2300      	movs	r3, #0
 800a056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a062:	78fa      	ldrb	r2, [r7, #3]
 800a064:	4611      	mov	r1, r2
 800a066:	4618      	mov	r0, r3
 800a068:	f7f8 fd0e 	bl	8002a88 <HAL_PCD_EP_SetStall>
 800a06c:	4603      	mov	r3, r0
 800a06e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a070:	7bfb      	ldrb	r3, [r7, #15]
 800a072:	4618      	mov	r0, r3
 800a074:	f000 f91a 	bl	800a2ac <USBD_Get_USB_Status>
 800a078:	4603      	mov	r3, r0
 800a07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a07c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b084      	sub	sp, #16
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	460b      	mov	r3, r1
 800a090:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a092:	2300      	movs	r3, #0
 800a094:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a0a0:	78fa      	ldrb	r2, [r7, #3]
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7f8 fd41 	bl	8002b2c <HAL_PCD_EP_ClrStall>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 f8fb 	bl	800a2ac <USBD_Get_USB_Status>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a0d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a0d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	da0b      	bge.n	800a0f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a0e0:	78fb      	ldrb	r3, [r7, #3]
 800a0e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a0e6:	68f9      	ldr	r1, [r7, #12]
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	4413      	add	r3, r2
 800a0ee:	00db      	lsls	r3, r3, #3
 800a0f0:	440b      	add	r3, r1
 800a0f2:	3312      	adds	r3, #18
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	e00b      	b.n	800a110 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a0f8:	78fb      	ldrb	r3, [r7, #3]
 800a0fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a0fe:	68f9      	ldr	r1, [r7, #12]
 800a100:	4613      	mov	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	00db      	lsls	r3, r3, #3
 800a108:	440b      	add	r3, r1
 800a10a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a10e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a110:	4618      	mov	r0, r3
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	460b      	mov	r3, r1
 800a126:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a136:	78fa      	ldrb	r2, [r7, #3]
 800a138:	4611      	mov	r1, r2
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7f8 fb59 	bl	80027f2 <HAL_PCD_SetAddress>
 800a140:	4603      	mov	r3, r0
 800a142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a144:	7bfb      	ldrb	r3, [r7, #15]
 800a146:	4618      	mov	r0, r3
 800a148:	f000 f8b0 	bl	800a2ac <USBD_Get_USB_Status>
 800a14c:	4603      	mov	r3, r0
 800a14e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a150:	7bbb      	ldrb	r3, [r7, #14]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b086      	sub	sp, #24
 800a15e:	af00      	add	r7, sp, #0
 800a160:	60f8      	str	r0, [r7, #12]
 800a162:	607a      	str	r2, [r7, #4]
 800a164:	603b      	str	r3, [r7, #0]
 800a166:	460b      	mov	r3, r1
 800a168:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a178:	7af9      	ldrb	r1, [r7, #11]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	f7f8 fc4c 	bl	8002a1a <HAL_PCD_EP_Transmit>
 800a182:	4603      	mov	r3, r0
 800a184:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a186:	7dfb      	ldrb	r3, [r7, #23]
 800a188:	4618      	mov	r0, r3
 800a18a:	f000 f88f 	bl	800a2ac <USBD_Get_USB_Status>
 800a18e:	4603      	mov	r3, r0
 800a190:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a192:	7dbb      	ldrb	r3, [r7, #22]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b086      	sub	sp, #24
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	607a      	str	r2, [r7, #4]
 800a1a6:	603b      	str	r3, [r7, #0]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a1ba:	7af9      	ldrb	r1, [r7, #11]
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	f7f8 fbe2 	bl	8002988 <HAL_PCD_EP_Receive>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1c8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 f86e 	bl	800a2ac <USBD_Get_USB_Status>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1d4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b082      	sub	sp, #8
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a1f0:	78fa      	ldrb	r2, [r7, #3]
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7f8 fbf8 	bl	80029ea <HAL_PCD_EP_GetRxCount>
 800a1fa:	4603      	mov	r3, r0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	460b      	mov	r3, r1
 800a20e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <HAL_PCDEx_LPM_Callback+0x18>
 800a216:	2b01      	cmp	r3, #1
 800a218:	d013      	beq.n	800a242 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a21a:	e023      	b.n	800a264 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	7a5b      	ldrb	r3, [r3, #9]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d007      	beq.n	800a234 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a224:	f000 f83c 	bl	800a2a0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a228:	4b10      	ldr	r3, [pc, #64]	@ (800a26c <HAL_PCDEx_LPM_Callback+0x68>)
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	4a0f      	ldr	r2, [pc, #60]	@ (800a26c <HAL_PCDEx_LPM_Callback+0x68>)
 800a22e:	f023 0306 	bic.w	r3, r3, #6
 800a232:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fc9c 	bl	8008b78 <USBD_LL_Resume>
    break;
 800a240:	e010      	b.n	800a264 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fe fc7f 	bl	8008b4c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	7a5b      	ldrb	r3, [r3, #9]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d005      	beq.n	800a262 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a256:	4b05      	ldr	r3, [pc, #20]	@ (800a26c <HAL_PCDEx_LPM_Callback+0x68>)
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	4a04      	ldr	r2, [pc, #16]	@ (800a26c <HAL_PCDEx_LPM_Callback+0x68>)
 800a25c:	f043 0306 	orr.w	r3, r3, #6
 800a260:	6113      	str	r3, [r2, #16]
    break;
 800a262:	bf00      	nop
}
 800a264:	bf00      	nop
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	e000ed00 	.word	0xe000ed00

0800a270 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a278:	4b03      	ldr	r3, [pc, #12]	@ (800a288 <USBD_static_malloc+0x18>)
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	370c      	adds	r7, #12
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	20001bec 	.word	0x20001bec

0800a28c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]

}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a2a4:	f7f6 fdea 	bl	8000e7c <SystemClock_Config>
}
 800a2a8:	bf00      	nop
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2ba:	79fb      	ldrb	r3, [r7, #7]
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d817      	bhi.n	800a2f0 <USBD_Get_USB_Status+0x44>
 800a2c0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2c8 <USBD_Get_USB_Status+0x1c>)
 800a2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c6:	bf00      	nop
 800a2c8:	0800a2d9 	.word	0x0800a2d9
 800a2cc:	0800a2df 	.word	0x0800a2df
 800a2d0:	0800a2e5 	.word	0x0800a2e5
 800a2d4:	0800a2eb 	.word	0x0800a2eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	73fb      	strb	r3, [r7, #15]
    break;
 800a2dc:	e00b      	b.n	800a2f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e2:	e008      	b.n	800a2f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e8:	e005      	b.n	800a2f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ee:	e002      	b.n	800a2f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2f4:	bf00      	nop
  }
  return usb_status;
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <_vsiprintf_r>:
 800a304:	b500      	push	{lr}
 800a306:	b09b      	sub	sp, #108	@ 0x6c
 800a308:	9100      	str	r1, [sp, #0]
 800a30a:	9104      	str	r1, [sp, #16]
 800a30c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a310:	9105      	str	r1, [sp, #20]
 800a312:	9102      	str	r1, [sp, #8]
 800a314:	4905      	ldr	r1, [pc, #20]	@ (800a32c <_vsiprintf_r+0x28>)
 800a316:	9103      	str	r1, [sp, #12]
 800a318:	4669      	mov	r1, sp
 800a31a:	f000 f9a9 	bl	800a670 <_svfiprintf_r>
 800a31e:	9b00      	ldr	r3, [sp, #0]
 800a320:	2200      	movs	r2, #0
 800a322:	701a      	strb	r2, [r3, #0]
 800a324:	b01b      	add	sp, #108	@ 0x6c
 800a326:	f85d fb04 	ldr.w	pc, [sp], #4
 800a32a:	bf00      	nop
 800a32c:	ffff0208 	.word	0xffff0208

0800a330 <vsiprintf>:
 800a330:	4613      	mov	r3, r2
 800a332:	460a      	mov	r2, r1
 800a334:	4601      	mov	r1, r0
 800a336:	4802      	ldr	r0, [pc, #8]	@ (800a340 <vsiprintf+0x10>)
 800a338:	6800      	ldr	r0, [r0, #0]
 800a33a:	f7ff bfe3 	b.w	800a304 <_vsiprintf_r>
 800a33e:	bf00      	nop
 800a340:	20000184 	.word	0x20000184

0800a344 <memset>:
 800a344:	4402      	add	r2, r0
 800a346:	4603      	mov	r3, r0
 800a348:	4293      	cmp	r3, r2
 800a34a:	d100      	bne.n	800a34e <memset+0xa>
 800a34c:	4770      	bx	lr
 800a34e:	f803 1b01 	strb.w	r1, [r3], #1
 800a352:	e7f9      	b.n	800a348 <memset+0x4>

0800a354 <__errno>:
 800a354:	4b01      	ldr	r3, [pc, #4]	@ (800a35c <__errno+0x8>)
 800a356:	6818      	ldr	r0, [r3, #0]
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	20000184 	.word	0x20000184

0800a360 <__libc_init_array>:
 800a360:	b570      	push	{r4, r5, r6, lr}
 800a362:	4d0d      	ldr	r5, [pc, #52]	@ (800a398 <__libc_init_array+0x38>)
 800a364:	4c0d      	ldr	r4, [pc, #52]	@ (800a39c <__libc_init_array+0x3c>)
 800a366:	1b64      	subs	r4, r4, r5
 800a368:	10a4      	asrs	r4, r4, #2
 800a36a:	2600      	movs	r6, #0
 800a36c:	42a6      	cmp	r6, r4
 800a36e:	d109      	bne.n	800a384 <__libc_init_array+0x24>
 800a370:	4d0b      	ldr	r5, [pc, #44]	@ (800a3a0 <__libc_init_array+0x40>)
 800a372:	4c0c      	ldr	r4, [pc, #48]	@ (800a3a4 <__libc_init_array+0x44>)
 800a374:	f000 fc66 	bl	800ac44 <_init>
 800a378:	1b64      	subs	r4, r4, r5
 800a37a:	10a4      	asrs	r4, r4, #2
 800a37c:	2600      	movs	r6, #0
 800a37e:	42a6      	cmp	r6, r4
 800a380:	d105      	bne.n	800a38e <__libc_init_array+0x2e>
 800a382:	bd70      	pop	{r4, r5, r6, pc}
 800a384:	f855 3b04 	ldr.w	r3, [r5], #4
 800a388:	4798      	blx	r3
 800a38a:	3601      	adds	r6, #1
 800a38c:	e7ee      	b.n	800a36c <__libc_init_array+0xc>
 800a38e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a392:	4798      	blx	r3
 800a394:	3601      	adds	r6, #1
 800a396:	e7f2      	b.n	800a37e <__libc_init_array+0x1e>
 800a398:	0800b278 	.word	0x0800b278
 800a39c:	0800b278 	.word	0x0800b278
 800a3a0:	0800b278 	.word	0x0800b278
 800a3a4:	0800b27c 	.word	0x0800b27c

0800a3a8 <__retarget_lock_acquire_recursive>:
 800a3a8:	4770      	bx	lr

0800a3aa <__retarget_lock_release_recursive>:
 800a3aa:	4770      	bx	lr

0800a3ac <memcpy>:
 800a3ac:	440a      	add	r2, r1
 800a3ae:	4291      	cmp	r1, r2
 800a3b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3b4:	d100      	bne.n	800a3b8 <memcpy+0xc>
 800a3b6:	4770      	bx	lr
 800a3b8:	b510      	push	{r4, lr}
 800a3ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3c2:	4291      	cmp	r1, r2
 800a3c4:	d1f9      	bne.n	800a3ba <memcpy+0xe>
 800a3c6:	bd10      	pop	{r4, pc}

0800a3c8 <_free_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	4605      	mov	r5, r0
 800a3cc:	2900      	cmp	r1, #0
 800a3ce:	d041      	beq.n	800a454 <_free_r+0x8c>
 800a3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3d4:	1f0c      	subs	r4, r1, #4
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	bfb8      	it	lt
 800a3da:	18e4      	addlt	r4, r4, r3
 800a3dc:	f000 f8e0 	bl	800a5a0 <__malloc_lock>
 800a3e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a458 <_free_r+0x90>)
 800a3e2:	6813      	ldr	r3, [r2, #0]
 800a3e4:	b933      	cbnz	r3, 800a3f4 <_free_r+0x2c>
 800a3e6:	6063      	str	r3, [r4, #4]
 800a3e8:	6014      	str	r4, [r2, #0]
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3f0:	f000 b8dc 	b.w	800a5ac <__malloc_unlock>
 800a3f4:	42a3      	cmp	r3, r4
 800a3f6:	d908      	bls.n	800a40a <_free_r+0x42>
 800a3f8:	6820      	ldr	r0, [r4, #0]
 800a3fa:	1821      	adds	r1, r4, r0
 800a3fc:	428b      	cmp	r3, r1
 800a3fe:	bf01      	itttt	eq
 800a400:	6819      	ldreq	r1, [r3, #0]
 800a402:	685b      	ldreq	r3, [r3, #4]
 800a404:	1809      	addeq	r1, r1, r0
 800a406:	6021      	streq	r1, [r4, #0]
 800a408:	e7ed      	b.n	800a3e6 <_free_r+0x1e>
 800a40a:	461a      	mov	r2, r3
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	b10b      	cbz	r3, 800a414 <_free_r+0x4c>
 800a410:	42a3      	cmp	r3, r4
 800a412:	d9fa      	bls.n	800a40a <_free_r+0x42>
 800a414:	6811      	ldr	r1, [r2, #0]
 800a416:	1850      	adds	r0, r2, r1
 800a418:	42a0      	cmp	r0, r4
 800a41a:	d10b      	bne.n	800a434 <_free_r+0x6c>
 800a41c:	6820      	ldr	r0, [r4, #0]
 800a41e:	4401      	add	r1, r0
 800a420:	1850      	adds	r0, r2, r1
 800a422:	4283      	cmp	r3, r0
 800a424:	6011      	str	r1, [r2, #0]
 800a426:	d1e0      	bne.n	800a3ea <_free_r+0x22>
 800a428:	6818      	ldr	r0, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	6053      	str	r3, [r2, #4]
 800a42e:	4408      	add	r0, r1
 800a430:	6010      	str	r0, [r2, #0]
 800a432:	e7da      	b.n	800a3ea <_free_r+0x22>
 800a434:	d902      	bls.n	800a43c <_free_r+0x74>
 800a436:	230c      	movs	r3, #12
 800a438:	602b      	str	r3, [r5, #0]
 800a43a:	e7d6      	b.n	800a3ea <_free_r+0x22>
 800a43c:	6820      	ldr	r0, [r4, #0]
 800a43e:	1821      	adds	r1, r4, r0
 800a440:	428b      	cmp	r3, r1
 800a442:	bf04      	itt	eq
 800a444:	6819      	ldreq	r1, [r3, #0]
 800a446:	685b      	ldreq	r3, [r3, #4]
 800a448:	6063      	str	r3, [r4, #4]
 800a44a:	bf04      	itt	eq
 800a44c:	1809      	addeq	r1, r1, r0
 800a44e:	6021      	streq	r1, [r4, #0]
 800a450:	6054      	str	r4, [r2, #4]
 800a452:	e7ca      	b.n	800a3ea <_free_r+0x22>
 800a454:	bd38      	pop	{r3, r4, r5, pc}
 800a456:	bf00      	nop
 800a458:	20001f50 	.word	0x20001f50

0800a45c <sbrk_aligned>:
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	4e0f      	ldr	r6, [pc, #60]	@ (800a49c <sbrk_aligned+0x40>)
 800a460:	460c      	mov	r4, r1
 800a462:	6831      	ldr	r1, [r6, #0]
 800a464:	4605      	mov	r5, r0
 800a466:	b911      	cbnz	r1, 800a46e <sbrk_aligned+0x12>
 800a468:	f000 fba6 	bl	800abb8 <_sbrk_r>
 800a46c:	6030      	str	r0, [r6, #0]
 800a46e:	4621      	mov	r1, r4
 800a470:	4628      	mov	r0, r5
 800a472:	f000 fba1 	bl	800abb8 <_sbrk_r>
 800a476:	1c43      	adds	r3, r0, #1
 800a478:	d103      	bne.n	800a482 <sbrk_aligned+0x26>
 800a47a:	f04f 34ff 	mov.w	r4, #4294967295
 800a47e:	4620      	mov	r0, r4
 800a480:	bd70      	pop	{r4, r5, r6, pc}
 800a482:	1cc4      	adds	r4, r0, #3
 800a484:	f024 0403 	bic.w	r4, r4, #3
 800a488:	42a0      	cmp	r0, r4
 800a48a:	d0f8      	beq.n	800a47e <sbrk_aligned+0x22>
 800a48c:	1a21      	subs	r1, r4, r0
 800a48e:	4628      	mov	r0, r5
 800a490:	f000 fb92 	bl	800abb8 <_sbrk_r>
 800a494:	3001      	adds	r0, #1
 800a496:	d1f2      	bne.n	800a47e <sbrk_aligned+0x22>
 800a498:	e7ef      	b.n	800a47a <sbrk_aligned+0x1e>
 800a49a:	bf00      	nop
 800a49c:	20001f4c 	.word	0x20001f4c

0800a4a0 <_malloc_r>:
 800a4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4a4:	1ccd      	adds	r5, r1, #3
 800a4a6:	f025 0503 	bic.w	r5, r5, #3
 800a4aa:	3508      	adds	r5, #8
 800a4ac:	2d0c      	cmp	r5, #12
 800a4ae:	bf38      	it	cc
 800a4b0:	250c      	movcc	r5, #12
 800a4b2:	2d00      	cmp	r5, #0
 800a4b4:	4606      	mov	r6, r0
 800a4b6:	db01      	blt.n	800a4bc <_malloc_r+0x1c>
 800a4b8:	42a9      	cmp	r1, r5
 800a4ba:	d904      	bls.n	800a4c6 <_malloc_r+0x26>
 800a4bc:	230c      	movs	r3, #12
 800a4be:	6033      	str	r3, [r6, #0]
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a59c <_malloc_r+0xfc>
 800a4ca:	f000 f869 	bl	800a5a0 <__malloc_lock>
 800a4ce:	f8d8 3000 	ldr.w	r3, [r8]
 800a4d2:	461c      	mov	r4, r3
 800a4d4:	bb44      	cbnz	r4, 800a528 <_malloc_r+0x88>
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	4630      	mov	r0, r6
 800a4da:	f7ff ffbf 	bl	800a45c <sbrk_aligned>
 800a4de:	1c43      	adds	r3, r0, #1
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	d158      	bne.n	800a596 <_malloc_r+0xf6>
 800a4e4:	f8d8 4000 	ldr.w	r4, [r8]
 800a4e8:	4627      	mov	r7, r4
 800a4ea:	2f00      	cmp	r7, #0
 800a4ec:	d143      	bne.n	800a576 <_malloc_r+0xd6>
 800a4ee:	2c00      	cmp	r4, #0
 800a4f0:	d04b      	beq.n	800a58a <_malloc_r+0xea>
 800a4f2:	6823      	ldr	r3, [r4, #0]
 800a4f4:	4639      	mov	r1, r7
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	eb04 0903 	add.w	r9, r4, r3
 800a4fc:	f000 fb5c 	bl	800abb8 <_sbrk_r>
 800a500:	4581      	cmp	r9, r0
 800a502:	d142      	bne.n	800a58a <_malloc_r+0xea>
 800a504:	6821      	ldr	r1, [r4, #0]
 800a506:	1a6d      	subs	r5, r5, r1
 800a508:	4629      	mov	r1, r5
 800a50a:	4630      	mov	r0, r6
 800a50c:	f7ff ffa6 	bl	800a45c <sbrk_aligned>
 800a510:	3001      	adds	r0, #1
 800a512:	d03a      	beq.n	800a58a <_malloc_r+0xea>
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	442b      	add	r3, r5
 800a518:	6023      	str	r3, [r4, #0]
 800a51a:	f8d8 3000 	ldr.w	r3, [r8]
 800a51e:	685a      	ldr	r2, [r3, #4]
 800a520:	bb62      	cbnz	r2, 800a57c <_malloc_r+0xdc>
 800a522:	f8c8 7000 	str.w	r7, [r8]
 800a526:	e00f      	b.n	800a548 <_malloc_r+0xa8>
 800a528:	6822      	ldr	r2, [r4, #0]
 800a52a:	1b52      	subs	r2, r2, r5
 800a52c:	d420      	bmi.n	800a570 <_malloc_r+0xd0>
 800a52e:	2a0b      	cmp	r2, #11
 800a530:	d917      	bls.n	800a562 <_malloc_r+0xc2>
 800a532:	1961      	adds	r1, r4, r5
 800a534:	42a3      	cmp	r3, r4
 800a536:	6025      	str	r5, [r4, #0]
 800a538:	bf18      	it	ne
 800a53a:	6059      	strne	r1, [r3, #4]
 800a53c:	6863      	ldr	r3, [r4, #4]
 800a53e:	bf08      	it	eq
 800a540:	f8c8 1000 	streq.w	r1, [r8]
 800a544:	5162      	str	r2, [r4, r5]
 800a546:	604b      	str	r3, [r1, #4]
 800a548:	4630      	mov	r0, r6
 800a54a:	f000 f82f 	bl	800a5ac <__malloc_unlock>
 800a54e:	f104 000b 	add.w	r0, r4, #11
 800a552:	1d23      	adds	r3, r4, #4
 800a554:	f020 0007 	bic.w	r0, r0, #7
 800a558:	1ac2      	subs	r2, r0, r3
 800a55a:	bf1c      	itt	ne
 800a55c:	1a1b      	subne	r3, r3, r0
 800a55e:	50a3      	strne	r3, [r4, r2]
 800a560:	e7af      	b.n	800a4c2 <_malloc_r+0x22>
 800a562:	6862      	ldr	r2, [r4, #4]
 800a564:	42a3      	cmp	r3, r4
 800a566:	bf0c      	ite	eq
 800a568:	f8c8 2000 	streq.w	r2, [r8]
 800a56c:	605a      	strne	r2, [r3, #4]
 800a56e:	e7eb      	b.n	800a548 <_malloc_r+0xa8>
 800a570:	4623      	mov	r3, r4
 800a572:	6864      	ldr	r4, [r4, #4]
 800a574:	e7ae      	b.n	800a4d4 <_malloc_r+0x34>
 800a576:	463c      	mov	r4, r7
 800a578:	687f      	ldr	r7, [r7, #4]
 800a57a:	e7b6      	b.n	800a4ea <_malloc_r+0x4a>
 800a57c:	461a      	mov	r2, r3
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	42a3      	cmp	r3, r4
 800a582:	d1fb      	bne.n	800a57c <_malloc_r+0xdc>
 800a584:	2300      	movs	r3, #0
 800a586:	6053      	str	r3, [r2, #4]
 800a588:	e7de      	b.n	800a548 <_malloc_r+0xa8>
 800a58a:	230c      	movs	r3, #12
 800a58c:	6033      	str	r3, [r6, #0]
 800a58e:	4630      	mov	r0, r6
 800a590:	f000 f80c 	bl	800a5ac <__malloc_unlock>
 800a594:	e794      	b.n	800a4c0 <_malloc_r+0x20>
 800a596:	6005      	str	r5, [r0, #0]
 800a598:	e7d6      	b.n	800a548 <_malloc_r+0xa8>
 800a59a:	bf00      	nop
 800a59c:	20001f50 	.word	0x20001f50

0800a5a0 <__malloc_lock>:
 800a5a0:	4801      	ldr	r0, [pc, #4]	@ (800a5a8 <__malloc_lock+0x8>)
 800a5a2:	f7ff bf01 	b.w	800a3a8 <__retarget_lock_acquire_recursive>
 800a5a6:	bf00      	nop
 800a5a8:	20001f48 	.word	0x20001f48

0800a5ac <__malloc_unlock>:
 800a5ac:	4801      	ldr	r0, [pc, #4]	@ (800a5b4 <__malloc_unlock+0x8>)
 800a5ae:	f7ff befc 	b.w	800a3aa <__retarget_lock_release_recursive>
 800a5b2:	bf00      	nop
 800a5b4:	20001f48 	.word	0x20001f48

0800a5b8 <__ssputs_r>:
 800a5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5bc:	688e      	ldr	r6, [r1, #8]
 800a5be:	461f      	mov	r7, r3
 800a5c0:	42be      	cmp	r6, r7
 800a5c2:	680b      	ldr	r3, [r1, #0]
 800a5c4:	4682      	mov	sl, r0
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	4690      	mov	r8, r2
 800a5ca:	d82d      	bhi.n	800a628 <__ssputs_r+0x70>
 800a5cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a5d4:	d026      	beq.n	800a624 <__ssputs_r+0x6c>
 800a5d6:	6965      	ldr	r5, [r4, #20]
 800a5d8:	6909      	ldr	r1, [r1, #16]
 800a5da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5de:	eba3 0901 	sub.w	r9, r3, r1
 800a5e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5e6:	1c7b      	adds	r3, r7, #1
 800a5e8:	444b      	add	r3, r9
 800a5ea:	106d      	asrs	r5, r5, #1
 800a5ec:	429d      	cmp	r5, r3
 800a5ee:	bf38      	it	cc
 800a5f0:	461d      	movcc	r5, r3
 800a5f2:	0553      	lsls	r3, r2, #21
 800a5f4:	d527      	bpl.n	800a646 <__ssputs_r+0x8e>
 800a5f6:	4629      	mov	r1, r5
 800a5f8:	f7ff ff52 	bl	800a4a0 <_malloc_r>
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	b360      	cbz	r0, 800a65a <__ssputs_r+0xa2>
 800a600:	6921      	ldr	r1, [r4, #16]
 800a602:	464a      	mov	r2, r9
 800a604:	f7ff fed2 	bl	800a3ac <memcpy>
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a60e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a612:	81a3      	strh	r3, [r4, #12]
 800a614:	6126      	str	r6, [r4, #16]
 800a616:	6165      	str	r5, [r4, #20]
 800a618:	444e      	add	r6, r9
 800a61a:	eba5 0509 	sub.w	r5, r5, r9
 800a61e:	6026      	str	r6, [r4, #0]
 800a620:	60a5      	str	r5, [r4, #8]
 800a622:	463e      	mov	r6, r7
 800a624:	42be      	cmp	r6, r7
 800a626:	d900      	bls.n	800a62a <__ssputs_r+0x72>
 800a628:	463e      	mov	r6, r7
 800a62a:	6820      	ldr	r0, [r4, #0]
 800a62c:	4632      	mov	r2, r6
 800a62e:	4641      	mov	r1, r8
 800a630:	f000 faa8 	bl	800ab84 <memmove>
 800a634:	68a3      	ldr	r3, [r4, #8]
 800a636:	1b9b      	subs	r3, r3, r6
 800a638:	60a3      	str	r3, [r4, #8]
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	4433      	add	r3, r6
 800a63e:	6023      	str	r3, [r4, #0]
 800a640:	2000      	movs	r0, #0
 800a642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a646:	462a      	mov	r2, r5
 800a648:	f000 fac6 	bl	800abd8 <_realloc_r>
 800a64c:	4606      	mov	r6, r0
 800a64e:	2800      	cmp	r0, #0
 800a650:	d1e0      	bne.n	800a614 <__ssputs_r+0x5c>
 800a652:	6921      	ldr	r1, [r4, #16]
 800a654:	4650      	mov	r0, sl
 800a656:	f7ff feb7 	bl	800a3c8 <_free_r>
 800a65a:	230c      	movs	r3, #12
 800a65c:	f8ca 3000 	str.w	r3, [sl]
 800a660:	89a3      	ldrh	r3, [r4, #12]
 800a662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a666:	81a3      	strh	r3, [r4, #12]
 800a668:	f04f 30ff 	mov.w	r0, #4294967295
 800a66c:	e7e9      	b.n	800a642 <__ssputs_r+0x8a>
	...

0800a670 <_svfiprintf_r>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	4698      	mov	r8, r3
 800a676:	898b      	ldrh	r3, [r1, #12]
 800a678:	061b      	lsls	r3, r3, #24
 800a67a:	b09d      	sub	sp, #116	@ 0x74
 800a67c:	4607      	mov	r7, r0
 800a67e:	460d      	mov	r5, r1
 800a680:	4614      	mov	r4, r2
 800a682:	d510      	bpl.n	800a6a6 <_svfiprintf_r+0x36>
 800a684:	690b      	ldr	r3, [r1, #16]
 800a686:	b973      	cbnz	r3, 800a6a6 <_svfiprintf_r+0x36>
 800a688:	2140      	movs	r1, #64	@ 0x40
 800a68a:	f7ff ff09 	bl	800a4a0 <_malloc_r>
 800a68e:	6028      	str	r0, [r5, #0]
 800a690:	6128      	str	r0, [r5, #16]
 800a692:	b930      	cbnz	r0, 800a6a2 <_svfiprintf_r+0x32>
 800a694:	230c      	movs	r3, #12
 800a696:	603b      	str	r3, [r7, #0]
 800a698:	f04f 30ff 	mov.w	r0, #4294967295
 800a69c:	b01d      	add	sp, #116	@ 0x74
 800a69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a2:	2340      	movs	r3, #64	@ 0x40
 800a6a4:	616b      	str	r3, [r5, #20]
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6aa:	2320      	movs	r3, #32
 800a6ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6b4:	2330      	movs	r3, #48	@ 0x30
 800a6b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a854 <_svfiprintf_r+0x1e4>
 800a6ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6be:	f04f 0901 	mov.w	r9, #1
 800a6c2:	4623      	mov	r3, r4
 800a6c4:	469a      	mov	sl, r3
 800a6c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6ca:	b10a      	cbz	r2, 800a6d0 <_svfiprintf_r+0x60>
 800a6cc:	2a25      	cmp	r2, #37	@ 0x25
 800a6ce:	d1f9      	bne.n	800a6c4 <_svfiprintf_r+0x54>
 800a6d0:	ebba 0b04 	subs.w	fp, sl, r4
 800a6d4:	d00b      	beq.n	800a6ee <_svfiprintf_r+0x7e>
 800a6d6:	465b      	mov	r3, fp
 800a6d8:	4622      	mov	r2, r4
 800a6da:	4629      	mov	r1, r5
 800a6dc:	4638      	mov	r0, r7
 800a6de:	f7ff ff6b 	bl	800a5b8 <__ssputs_r>
 800a6e2:	3001      	adds	r0, #1
 800a6e4:	f000 80a7 	beq.w	800a836 <_svfiprintf_r+0x1c6>
 800a6e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6ea:	445a      	add	r2, fp
 800a6ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6ee:	f89a 3000 	ldrb.w	r3, [sl]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f000 809f 	beq.w	800a836 <_svfiprintf_r+0x1c6>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a6fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a702:	f10a 0a01 	add.w	sl, sl, #1
 800a706:	9304      	str	r3, [sp, #16]
 800a708:	9307      	str	r3, [sp, #28]
 800a70a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a70e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a710:	4654      	mov	r4, sl
 800a712:	2205      	movs	r2, #5
 800a714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a718:	484e      	ldr	r0, [pc, #312]	@ (800a854 <_svfiprintf_r+0x1e4>)
 800a71a:	f7f5 fd81 	bl	8000220 <memchr>
 800a71e:	9a04      	ldr	r2, [sp, #16]
 800a720:	b9d8      	cbnz	r0, 800a75a <_svfiprintf_r+0xea>
 800a722:	06d0      	lsls	r0, r2, #27
 800a724:	bf44      	itt	mi
 800a726:	2320      	movmi	r3, #32
 800a728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a72c:	0711      	lsls	r1, r2, #28
 800a72e:	bf44      	itt	mi
 800a730:	232b      	movmi	r3, #43	@ 0x2b
 800a732:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a736:	f89a 3000 	ldrb.w	r3, [sl]
 800a73a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a73c:	d015      	beq.n	800a76a <_svfiprintf_r+0xfa>
 800a73e:	9a07      	ldr	r2, [sp, #28]
 800a740:	4654      	mov	r4, sl
 800a742:	2000      	movs	r0, #0
 800a744:	f04f 0c0a 	mov.w	ip, #10
 800a748:	4621      	mov	r1, r4
 800a74a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a74e:	3b30      	subs	r3, #48	@ 0x30
 800a750:	2b09      	cmp	r3, #9
 800a752:	d94b      	bls.n	800a7ec <_svfiprintf_r+0x17c>
 800a754:	b1b0      	cbz	r0, 800a784 <_svfiprintf_r+0x114>
 800a756:	9207      	str	r2, [sp, #28]
 800a758:	e014      	b.n	800a784 <_svfiprintf_r+0x114>
 800a75a:	eba0 0308 	sub.w	r3, r0, r8
 800a75e:	fa09 f303 	lsl.w	r3, r9, r3
 800a762:	4313      	orrs	r3, r2
 800a764:	9304      	str	r3, [sp, #16]
 800a766:	46a2      	mov	sl, r4
 800a768:	e7d2      	b.n	800a710 <_svfiprintf_r+0xa0>
 800a76a:	9b03      	ldr	r3, [sp, #12]
 800a76c:	1d19      	adds	r1, r3, #4
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	9103      	str	r1, [sp, #12]
 800a772:	2b00      	cmp	r3, #0
 800a774:	bfbb      	ittet	lt
 800a776:	425b      	neglt	r3, r3
 800a778:	f042 0202 	orrlt.w	r2, r2, #2
 800a77c:	9307      	strge	r3, [sp, #28]
 800a77e:	9307      	strlt	r3, [sp, #28]
 800a780:	bfb8      	it	lt
 800a782:	9204      	strlt	r2, [sp, #16]
 800a784:	7823      	ldrb	r3, [r4, #0]
 800a786:	2b2e      	cmp	r3, #46	@ 0x2e
 800a788:	d10a      	bne.n	800a7a0 <_svfiprintf_r+0x130>
 800a78a:	7863      	ldrb	r3, [r4, #1]
 800a78c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a78e:	d132      	bne.n	800a7f6 <_svfiprintf_r+0x186>
 800a790:	9b03      	ldr	r3, [sp, #12]
 800a792:	1d1a      	adds	r2, r3, #4
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	9203      	str	r2, [sp, #12]
 800a798:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a79c:	3402      	adds	r4, #2
 800a79e:	9305      	str	r3, [sp, #20]
 800a7a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a864 <_svfiprintf_r+0x1f4>
 800a7a4:	7821      	ldrb	r1, [r4, #0]
 800a7a6:	2203      	movs	r2, #3
 800a7a8:	4650      	mov	r0, sl
 800a7aa:	f7f5 fd39 	bl	8000220 <memchr>
 800a7ae:	b138      	cbz	r0, 800a7c0 <_svfiprintf_r+0x150>
 800a7b0:	9b04      	ldr	r3, [sp, #16]
 800a7b2:	eba0 000a 	sub.w	r0, r0, sl
 800a7b6:	2240      	movs	r2, #64	@ 0x40
 800a7b8:	4082      	lsls	r2, r0
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	3401      	adds	r4, #1
 800a7be:	9304      	str	r3, [sp, #16]
 800a7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c4:	4824      	ldr	r0, [pc, #144]	@ (800a858 <_svfiprintf_r+0x1e8>)
 800a7c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a7ca:	2206      	movs	r2, #6
 800a7cc:	f7f5 fd28 	bl	8000220 <memchr>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d036      	beq.n	800a842 <_svfiprintf_r+0x1d2>
 800a7d4:	4b21      	ldr	r3, [pc, #132]	@ (800a85c <_svfiprintf_r+0x1ec>)
 800a7d6:	bb1b      	cbnz	r3, 800a820 <_svfiprintf_r+0x1b0>
 800a7d8:	9b03      	ldr	r3, [sp, #12]
 800a7da:	3307      	adds	r3, #7
 800a7dc:	f023 0307 	bic.w	r3, r3, #7
 800a7e0:	3308      	adds	r3, #8
 800a7e2:	9303      	str	r3, [sp, #12]
 800a7e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7e6:	4433      	add	r3, r6
 800a7e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ea:	e76a      	b.n	800a6c2 <_svfiprintf_r+0x52>
 800a7ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7f0:	460c      	mov	r4, r1
 800a7f2:	2001      	movs	r0, #1
 800a7f4:	e7a8      	b.n	800a748 <_svfiprintf_r+0xd8>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	3401      	adds	r4, #1
 800a7fa:	9305      	str	r3, [sp, #20]
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	f04f 0c0a 	mov.w	ip, #10
 800a802:	4620      	mov	r0, r4
 800a804:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a808:	3a30      	subs	r2, #48	@ 0x30
 800a80a:	2a09      	cmp	r2, #9
 800a80c:	d903      	bls.n	800a816 <_svfiprintf_r+0x1a6>
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d0c6      	beq.n	800a7a0 <_svfiprintf_r+0x130>
 800a812:	9105      	str	r1, [sp, #20]
 800a814:	e7c4      	b.n	800a7a0 <_svfiprintf_r+0x130>
 800a816:	fb0c 2101 	mla	r1, ip, r1, r2
 800a81a:	4604      	mov	r4, r0
 800a81c:	2301      	movs	r3, #1
 800a81e:	e7f0      	b.n	800a802 <_svfiprintf_r+0x192>
 800a820:	ab03      	add	r3, sp, #12
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	462a      	mov	r2, r5
 800a826:	4b0e      	ldr	r3, [pc, #56]	@ (800a860 <_svfiprintf_r+0x1f0>)
 800a828:	a904      	add	r1, sp, #16
 800a82a:	4638      	mov	r0, r7
 800a82c:	f3af 8000 	nop.w
 800a830:	1c42      	adds	r2, r0, #1
 800a832:	4606      	mov	r6, r0
 800a834:	d1d6      	bne.n	800a7e4 <_svfiprintf_r+0x174>
 800a836:	89ab      	ldrh	r3, [r5, #12]
 800a838:	065b      	lsls	r3, r3, #25
 800a83a:	f53f af2d 	bmi.w	800a698 <_svfiprintf_r+0x28>
 800a83e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a840:	e72c      	b.n	800a69c <_svfiprintf_r+0x2c>
 800a842:	ab03      	add	r3, sp, #12
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	462a      	mov	r2, r5
 800a848:	4b05      	ldr	r3, [pc, #20]	@ (800a860 <_svfiprintf_r+0x1f0>)
 800a84a:	a904      	add	r1, sp, #16
 800a84c:	4638      	mov	r0, r7
 800a84e:	f000 f879 	bl	800a944 <_printf_i>
 800a852:	e7ed      	b.n	800a830 <_svfiprintf_r+0x1c0>
 800a854:	0800b23c 	.word	0x0800b23c
 800a858:	0800b246 	.word	0x0800b246
 800a85c:	00000000 	.word	0x00000000
 800a860:	0800a5b9 	.word	0x0800a5b9
 800a864:	0800b242 	.word	0x0800b242

0800a868 <_printf_common>:
 800a868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a86c:	4616      	mov	r6, r2
 800a86e:	4698      	mov	r8, r3
 800a870:	688a      	ldr	r2, [r1, #8]
 800a872:	690b      	ldr	r3, [r1, #16]
 800a874:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a878:	4293      	cmp	r3, r2
 800a87a:	bfb8      	it	lt
 800a87c:	4613      	movlt	r3, r2
 800a87e:	6033      	str	r3, [r6, #0]
 800a880:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a884:	4607      	mov	r7, r0
 800a886:	460c      	mov	r4, r1
 800a888:	b10a      	cbz	r2, 800a88e <_printf_common+0x26>
 800a88a:	3301      	adds	r3, #1
 800a88c:	6033      	str	r3, [r6, #0]
 800a88e:	6823      	ldr	r3, [r4, #0]
 800a890:	0699      	lsls	r1, r3, #26
 800a892:	bf42      	ittt	mi
 800a894:	6833      	ldrmi	r3, [r6, #0]
 800a896:	3302      	addmi	r3, #2
 800a898:	6033      	strmi	r3, [r6, #0]
 800a89a:	6825      	ldr	r5, [r4, #0]
 800a89c:	f015 0506 	ands.w	r5, r5, #6
 800a8a0:	d106      	bne.n	800a8b0 <_printf_common+0x48>
 800a8a2:	f104 0a19 	add.w	sl, r4, #25
 800a8a6:	68e3      	ldr	r3, [r4, #12]
 800a8a8:	6832      	ldr	r2, [r6, #0]
 800a8aa:	1a9b      	subs	r3, r3, r2
 800a8ac:	42ab      	cmp	r3, r5
 800a8ae:	dc26      	bgt.n	800a8fe <_printf_common+0x96>
 800a8b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a8b4:	6822      	ldr	r2, [r4, #0]
 800a8b6:	3b00      	subs	r3, #0
 800a8b8:	bf18      	it	ne
 800a8ba:	2301      	movne	r3, #1
 800a8bc:	0692      	lsls	r2, r2, #26
 800a8be:	d42b      	bmi.n	800a918 <_printf_common+0xb0>
 800a8c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a8c4:	4641      	mov	r1, r8
 800a8c6:	4638      	mov	r0, r7
 800a8c8:	47c8      	blx	r9
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	d01e      	beq.n	800a90c <_printf_common+0xa4>
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	6922      	ldr	r2, [r4, #16]
 800a8d2:	f003 0306 	and.w	r3, r3, #6
 800a8d6:	2b04      	cmp	r3, #4
 800a8d8:	bf02      	ittt	eq
 800a8da:	68e5      	ldreq	r5, [r4, #12]
 800a8dc:	6833      	ldreq	r3, [r6, #0]
 800a8de:	1aed      	subeq	r5, r5, r3
 800a8e0:	68a3      	ldr	r3, [r4, #8]
 800a8e2:	bf0c      	ite	eq
 800a8e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8e8:	2500      	movne	r5, #0
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	bfc4      	itt	gt
 800a8ee:	1a9b      	subgt	r3, r3, r2
 800a8f0:	18ed      	addgt	r5, r5, r3
 800a8f2:	2600      	movs	r6, #0
 800a8f4:	341a      	adds	r4, #26
 800a8f6:	42b5      	cmp	r5, r6
 800a8f8:	d11a      	bne.n	800a930 <_printf_common+0xc8>
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	e008      	b.n	800a910 <_printf_common+0xa8>
 800a8fe:	2301      	movs	r3, #1
 800a900:	4652      	mov	r2, sl
 800a902:	4641      	mov	r1, r8
 800a904:	4638      	mov	r0, r7
 800a906:	47c8      	blx	r9
 800a908:	3001      	adds	r0, #1
 800a90a:	d103      	bne.n	800a914 <_printf_common+0xac>
 800a90c:	f04f 30ff 	mov.w	r0, #4294967295
 800a910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a914:	3501      	adds	r5, #1
 800a916:	e7c6      	b.n	800a8a6 <_printf_common+0x3e>
 800a918:	18e1      	adds	r1, r4, r3
 800a91a:	1c5a      	adds	r2, r3, #1
 800a91c:	2030      	movs	r0, #48	@ 0x30
 800a91e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a922:	4422      	add	r2, r4
 800a924:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a928:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a92c:	3302      	adds	r3, #2
 800a92e:	e7c7      	b.n	800a8c0 <_printf_common+0x58>
 800a930:	2301      	movs	r3, #1
 800a932:	4622      	mov	r2, r4
 800a934:	4641      	mov	r1, r8
 800a936:	4638      	mov	r0, r7
 800a938:	47c8      	blx	r9
 800a93a:	3001      	adds	r0, #1
 800a93c:	d0e6      	beq.n	800a90c <_printf_common+0xa4>
 800a93e:	3601      	adds	r6, #1
 800a940:	e7d9      	b.n	800a8f6 <_printf_common+0x8e>
	...

0800a944 <_printf_i>:
 800a944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a948:	7e0f      	ldrb	r7, [r1, #24]
 800a94a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a94c:	2f78      	cmp	r7, #120	@ 0x78
 800a94e:	4691      	mov	r9, r2
 800a950:	4680      	mov	r8, r0
 800a952:	460c      	mov	r4, r1
 800a954:	469a      	mov	sl, r3
 800a956:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a95a:	d807      	bhi.n	800a96c <_printf_i+0x28>
 800a95c:	2f62      	cmp	r7, #98	@ 0x62
 800a95e:	d80a      	bhi.n	800a976 <_printf_i+0x32>
 800a960:	2f00      	cmp	r7, #0
 800a962:	f000 80d2 	beq.w	800ab0a <_printf_i+0x1c6>
 800a966:	2f58      	cmp	r7, #88	@ 0x58
 800a968:	f000 80b9 	beq.w	800aade <_printf_i+0x19a>
 800a96c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a970:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a974:	e03a      	b.n	800a9ec <_printf_i+0xa8>
 800a976:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a97a:	2b15      	cmp	r3, #21
 800a97c:	d8f6      	bhi.n	800a96c <_printf_i+0x28>
 800a97e:	a101      	add	r1, pc, #4	@ (adr r1, 800a984 <_printf_i+0x40>)
 800a980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a984:	0800a9dd 	.word	0x0800a9dd
 800a988:	0800a9f1 	.word	0x0800a9f1
 800a98c:	0800a96d 	.word	0x0800a96d
 800a990:	0800a96d 	.word	0x0800a96d
 800a994:	0800a96d 	.word	0x0800a96d
 800a998:	0800a96d 	.word	0x0800a96d
 800a99c:	0800a9f1 	.word	0x0800a9f1
 800a9a0:	0800a96d 	.word	0x0800a96d
 800a9a4:	0800a96d 	.word	0x0800a96d
 800a9a8:	0800a96d 	.word	0x0800a96d
 800a9ac:	0800a96d 	.word	0x0800a96d
 800a9b0:	0800aaf1 	.word	0x0800aaf1
 800a9b4:	0800aa1b 	.word	0x0800aa1b
 800a9b8:	0800aaab 	.word	0x0800aaab
 800a9bc:	0800a96d 	.word	0x0800a96d
 800a9c0:	0800a96d 	.word	0x0800a96d
 800a9c4:	0800ab13 	.word	0x0800ab13
 800a9c8:	0800a96d 	.word	0x0800a96d
 800a9cc:	0800aa1b 	.word	0x0800aa1b
 800a9d0:	0800a96d 	.word	0x0800a96d
 800a9d4:	0800a96d 	.word	0x0800a96d
 800a9d8:	0800aab3 	.word	0x0800aab3
 800a9dc:	6833      	ldr	r3, [r6, #0]
 800a9de:	1d1a      	adds	r2, r3, #4
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	6032      	str	r2, [r6, #0]
 800a9e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e09d      	b.n	800ab2c <_printf_i+0x1e8>
 800a9f0:	6833      	ldr	r3, [r6, #0]
 800a9f2:	6820      	ldr	r0, [r4, #0]
 800a9f4:	1d19      	adds	r1, r3, #4
 800a9f6:	6031      	str	r1, [r6, #0]
 800a9f8:	0606      	lsls	r6, r0, #24
 800a9fa:	d501      	bpl.n	800aa00 <_printf_i+0xbc>
 800a9fc:	681d      	ldr	r5, [r3, #0]
 800a9fe:	e003      	b.n	800aa08 <_printf_i+0xc4>
 800aa00:	0645      	lsls	r5, r0, #25
 800aa02:	d5fb      	bpl.n	800a9fc <_printf_i+0xb8>
 800aa04:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa08:	2d00      	cmp	r5, #0
 800aa0a:	da03      	bge.n	800aa14 <_printf_i+0xd0>
 800aa0c:	232d      	movs	r3, #45	@ 0x2d
 800aa0e:	426d      	negs	r5, r5
 800aa10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa14:	4859      	ldr	r0, [pc, #356]	@ (800ab7c <_printf_i+0x238>)
 800aa16:	230a      	movs	r3, #10
 800aa18:	e011      	b.n	800aa3e <_printf_i+0xfa>
 800aa1a:	6821      	ldr	r1, [r4, #0]
 800aa1c:	6833      	ldr	r3, [r6, #0]
 800aa1e:	0608      	lsls	r0, r1, #24
 800aa20:	f853 5b04 	ldr.w	r5, [r3], #4
 800aa24:	d402      	bmi.n	800aa2c <_printf_i+0xe8>
 800aa26:	0649      	lsls	r1, r1, #25
 800aa28:	bf48      	it	mi
 800aa2a:	b2ad      	uxthmi	r5, r5
 800aa2c:	2f6f      	cmp	r7, #111	@ 0x6f
 800aa2e:	4853      	ldr	r0, [pc, #332]	@ (800ab7c <_printf_i+0x238>)
 800aa30:	6033      	str	r3, [r6, #0]
 800aa32:	bf14      	ite	ne
 800aa34:	230a      	movne	r3, #10
 800aa36:	2308      	moveq	r3, #8
 800aa38:	2100      	movs	r1, #0
 800aa3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aa3e:	6866      	ldr	r6, [r4, #4]
 800aa40:	60a6      	str	r6, [r4, #8]
 800aa42:	2e00      	cmp	r6, #0
 800aa44:	bfa2      	ittt	ge
 800aa46:	6821      	ldrge	r1, [r4, #0]
 800aa48:	f021 0104 	bicge.w	r1, r1, #4
 800aa4c:	6021      	strge	r1, [r4, #0]
 800aa4e:	b90d      	cbnz	r5, 800aa54 <_printf_i+0x110>
 800aa50:	2e00      	cmp	r6, #0
 800aa52:	d04b      	beq.n	800aaec <_printf_i+0x1a8>
 800aa54:	4616      	mov	r6, r2
 800aa56:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa5a:	fb03 5711 	mls	r7, r3, r1, r5
 800aa5e:	5dc7      	ldrb	r7, [r0, r7]
 800aa60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa64:	462f      	mov	r7, r5
 800aa66:	42bb      	cmp	r3, r7
 800aa68:	460d      	mov	r5, r1
 800aa6a:	d9f4      	bls.n	800aa56 <_printf_i+0x112>
 800aa6c:	2b08      	cmp	r3, #8
 800aa6e:	d10b      	bne.n	800aa88 <_printf_i+0x144>
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	07df      	lsls	r7, r3, #31
 800aa74:	d508      	bpl.n	800aa88 <_printf_i+0x144>
 800aa76:	6923      	ldr	r3, [r4, #16]
 800aa78:	6861      	ldr	r1, [r4, #4]
 800aa7a:	4299      	cmp	r1, r3
 800aa7c:	bfde      	ittt	le
 800aa7e:	2330      	movle	r3, #48	@ 0x30
 800aa80:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa84:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa88:	1b92      	subs	r2, r2, r6
 800aa8a:	6122      	str	r2, [r4, #16]
 800aa8c:	f8cd a000 	str.w	sl, [sp]
 800aa90:	464b      	mov	r3, r9
 800aa92:	aa03      	add	r2, sp, #12
 800aa94:	4621      	mov	r1, r4
 800aa96:	4640      	mov	r0, r8
 800aa98:	f7ff fee6 	bl	800a868 <_printf_common>
 800aa9c:	3001      	adds	r0, #1
 800aa9e:	d14a      	bne.n	800ab36 <_printf_i+0x1f2>
 800aaa0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa4:	b004      	add	sp, #16
 800aaa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaaa:	6823      	ldr	r3, [r4, #0]
 800aaac:	f043 0320 	orr.w	r3, r3, #32
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	4833      	ldr	r0, [pc, #204]	@ (800ab80 <_printf_i+0x23c>)
 800aab4:	2778      	movs	r7, #120	@ 0x78
 800aab6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aaba:	6823      	ldr	r3, [r4, #0]
 800aabc:	6831      	ldr	r1, [r6, #0]
 800aabe:	061f      	lsls	r7, r3, #24
 800aac0:	f851 5b04 	ldr.w	r5, [r1], #4
 800aac4:	d402      	bmi.n	800aacc <_printf_i+0x188>
 800aac6:	065f      	lsls	r7, r3, #25
 800aac8:	bf48      	it	mi
 800aaca:	b2ad      	uxthmi	r5, r5
 800aacc:	6031      	str	r1, [r6, #0]
 800aace:	07d9      	lsls	r1, r3, #31
 800aad0:	bf44      	itt	mi
 800aad2:	f043 0320 	orrmi.w	r3, r3, #32
 800aad6:	6023      	strmi	r3, [r4, #0]
 800aad8:	b11d      	cbz	r5, 800aae2 <_printf_i+0x19e>
 800aada:	2310      	movs	r3, #16
 800aadc:	e7ac      	b.n	800aa38 <_printf_i+0xf4>
 800aade:	4827      	ldr	r0, [pc, #156]	@ (800ab7c <_printf_i+0x238>)
 800aae0:	e7e9      	b.n	800aab6 <_printf_i+0x172>
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	f023 0320 	bic.w	r3, r3, #32
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	e7f6      	b.n	800aada <_printf_i+0x196>
 800aaec:	4616      	mov	r6, r2
 800aaee:	e7bd      	b.n	800aa6c <_printf_i+0x128>
 800aaf0:	6833      	ldr	r3, [r6, #0]
 800aaf2:	6825      	ldr	r5, [r4, #0]
 800aaf4:	6961      	ldr	r1, [r4, #20]
 800aaf6:	1d18      	adds	r0, r3, #4
 800aaf8:	6030      	str	r0, [r6, #0]
 800aafa:	062e      	lsls	r6, r5, #24
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	d501      	bpl.n	800ab04 <_printf_i+0x1c0>
 800ab00:	6019      	str	r1, [r3, #0]
 800ab02:	e002      	b.n	800ab0a <_printf_i+0x1c6>
 800ab04:	0668      	lsls	r0, r5, #25
 800ab06:	d5fb      	bpl.n	800ab00 <_printf_i+0x1bc>
 800ab08:	8019      	strh	r1, [r3, #0]
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	6123      	str	r3, [r4, #16]
 800ab0e:	4616      	mov	r6, r2
 800ab10:	e7bc      	b.n	800aa8c <_printf_i+0x148>
 800ab12:	6833      	ldr	r3, [r6, #0]
 800ab14:	1d1a      	adds	r2, r3, #4
 800ab16:	6032      	str	r2, [r6, #0]
 800ab18:	681e      	ldr	r6, [r3, #0]
 800ab1a:	6862      	ldr	r2, [r4, #4]
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	4630      	mov	r0, r6
 800ab20:	f7f5 fb7e 	bl	8000220 <memchr>
 800ab24:	b108      	cbz	r0, 800ab2a <_printf_i+0x1e6>
 800ab26:	1b80      	subs	r0, r0, r6
 800ab28:	6060      	str	r0, [r4, #4]
 800ab2a:	6863      	ldr	r3, [r4, #4]
 800ab2c:	6123      	str	r3, [r4, #16]
 800ab2e:	2300      	movs	r3, #0
 800ab30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab34:	e7aa      	b.n	800aa8c <_printf_i+0x148>
 800ab36:	6923      	ldr	r3, [r4, #16]
 800ab38:	4632      	mov	r2, r6
 800ab3a:	4649      	mov	r1, r9
 800ab3c:	4640      	mov	r0, r8
 800ab3e:	47d0      	blx	sl
 800ab40:	3001      	adds	r0, #1
 800ab42:	d0ad      	beq.n	800aaa0 <_printf_i+0x15c>
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	079b      	lsls	r3, r3, #30
 800ab48:	d413      	bmi.n	800ab72 <_printf_i+0x22e>
 800ab4a:	68e0      	ldr	r0, [r4, #12]
 800ab4c:	9b03      	ldr	r3, [sp, #12]
 800ab4e:	4298      	cmp	r0, r3
 800ab50:	bfb8      	it	lt
 800ab52:	4618      	movlt	r0, r3
 800ab54:	e7a6      	b.n	800aaa4 <_printf_i+0x160>
 800ab56:	2301      	movs	r3, #1
 800ab58:	4632      	mov	r2, r6
 800ab5a:	4649      	mov	r1, r9
 800ab5c:	4640      	mov	r0, r8
 800ab5e:	47d0      	blx	sl
 800ab60:	3001      	adds	r0, #1
 800ab62:	d09d      	beq.n	800aaa0 <_printf_i+0x15c>
 800ab64:	3501      	adds	r5, #1
 800ab66:	68e3      	ldr	r3, [r4, #12]
 800ab68:	9903      	ldr	r1, [sp, #12]
 800ab6a:	1a5b      	subs	r3, r3, r1
 800ab6c:	42ab      	cmp	r3, r5
 800ab6e:	dcf2      	bgt.n	800ab56 <_printf_i+0x212>
 800ab70:	e7eb      	b.n	800ab4a <_printf_i+0x206>
 800ab72:	2500      	movs	r5, #0
 800ab74:	f104 0619 	add.w	r6, r4, #25
 800ab78:	e7f5      	b.n	800ab66 <_printf_i+0x222>
 800ab7a:	bf00      	nop
 800ab7c:	0800b24d 	.word	0x0800b24d
 800ab80:	0800b25e 	.word	0x0800b25e

0800ab84 <memmove>:
 800ab84:	4288      	cmp	r0, r1
 800ab86:	b510      	push	{r4, lr}
 800ab88:	eb01 0402 	add.w	r4, r1, r2
 800ab8c:	d902      	bls.n	800ab94 <memmove+0x10>
 800ab8e:	4284      	cmp	r4, r0
 800ab90:	4623      	mov	r3, r4
 800ab92:	d807      	bhi.n	800aba4 <memmove+0x20>
 800ab94:	1e43      	subs	r3, r0, #1
 800ab96:	42a1      	cmp	r1, r4
 800ab98:	d008      	beq.n	800abac <memmove+0x28>
 800ab9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aba2:	e7f8      	b.n	800ab96 <memmove+0x12>
 800aba4:	4402      	add	r2, r0
 800aba6:	4601      	mov	r1, r0
 800aba8:	428a      	cmp	r2, r1
 800abaa:	d100      	bne.n	800abae <memmove+0x2a>
 800abac:	bd10      	pop	{r4, pc}
 800abae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abb6:	e7f7      	b.n	800aba8 <memmove+0x24>

0800abb8 <_sbrk_r>:
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	4d06      	ldr	r5, [pc, #24]	@ (800abd4 <_sbrk_r+0x1c>)
 800abbc:	2300      	movs	r3, #0
 800abbe:	4604      	mov	r4, r0
 800abc0:	4608      	mov	r0, r1
 800abc2:	602b      	str	r3, [r5, #0]
 800abc4:	f7f6 fd62 	bl	800168c <_sbrk>
 800abc8:	1c43      	adds	r3, r0, #1
 800abca:	d102      	bne.n	800abd2 <_sbrk_r+0x1a>
 800abcc:	682b      	ldr	r3, [r5, #0]
 800abce:	b103      	cbz	r3, 800abd2 <_sbrk_r+0x1a>
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	20001f44 	.word	0x20001f44

0800abd8 <_realloc_r>:
 800abd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abdc:	4680      	mov	r8, r0
 800abde:	4615      	mov	r5, r2
 800abe0:	460c      	mov	r4, r1
 800abe2:	b921      	cbnz	r1, 800abee <_realloc_r+0x16>
 800abe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abe8:	4611      	mov	r1, r2
 800abea:	f7ff bc59 	b.w	800a4a0 <_malloc_r>
 800abee:	b92a      	cbnz	r2, 800abfc <_realloc_r+0x24>
 800abf0:	f7ff fbea 	bl	800a3c8 <_free_r>
 800abf4:	2400      	movs	r4, #0
 800abf6:	4620      	mov	r0, r4
 800abf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abfc:	f000 f81a 	bl	800ac34 <_malloc_usable_size_r>
 800ac00:	4285      	cmp	r5, r0
 800ac02:	4606      	mov	r6, r0
 800ac04:	d802      	bhi.n	800ac0c <_realloc_r+0x34>
 800ac06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ac0a:	d8f4      	bhi.n	800abf6 <_realloc_r+0x1e>
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	4640      	mov	r0, r8
 800ac10:	f7ff fc46 	bl	800a4a0 <_malloc_r>
 800ac14:	4607      	mov	r7, r0
 800ac16:	2800      	cmp	r0, #0
 800ac18:	d0ec      	beq.n	800abf4 <_realloc_r+0x1c>
 800ac1a:	42b5      	cmp	r5, r6
 800ac1c:	462a      	mov	r2, r5
 800ac1e:	4621      	mov	r1, r4
 800ac20:	bf28      	it	cs
 800ac22:	4632      	movcs	r2, r6
 800ac24:	f7ff fbc2 	bl	800a3ac <memcpy>
 800ac28:	4621      	mov	r1, r4
 800ac2a:	4640      	mov	r0, r8
 800ac2c:	f7ff fbcc 	bl	800a3c8 <_free_r>
 800ac30:	463c      	mov	r4, r7
 800ac32:	e7e0      	b.n	800abf6 <_realloc_r+0x1e>

0800ac34 <_malloc_usable_size_r>:
 800ac34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac38:	1f18      	subs	r0, r3, #4
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	bfbc      	itt	lt
 800ac3e:	580b      	ldrlt	r3, [r1, r0]
 800ac40:	18c0      	addlt	r0, r0, r3
 800ac42:	4770      	bx	lr

0800ac44 <_init>:
 800ac44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac46:	bf00      	nop
 800ac48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac4a:	bc08      	pop	{r3}
 800ac4c:	469e      	mov	lr, r3
 800ac4e:	4770      	bx	lr

0800ac50 <_fini>:
 800ac50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac52:	bf00      	nop
 800ac54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac56:	bc08      	pop	{r3}
 800ac58:	469e      	mov	lr, r3
 800ac5a:	4770      	bx	lr
