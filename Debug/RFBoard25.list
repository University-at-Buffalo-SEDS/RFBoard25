
RFBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad18  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0800aef8  0800aef8  0000bef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b39c  0800b39c  0000d254  2**0
                  CONTENTS
  4 .ARM          00000008  0800b39c  0800b39c  0000c39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3a4  0800b3a4  0000d254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3a4  0800b3a4  0000c3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b3a8  0800b3a8  0000c3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000254  20000000  0800b3ac  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d88  20000254  0800b600  0000d254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fdc  0800b600  0000dfdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db26  00000000  00000000  0000d284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042f1  00000000  00000000  0002adaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b8  00000000  00000000  0002f0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001231  00000000  00000000  00030858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ab1  00000000  00000000  00031a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f4bb  00000000  00000000  0005453a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd19c  00000000  00000000  000739f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140b91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000694c  00000000  00000000  00140bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00147520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000254 	.word	0x20000254
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800aee0 	.word	0x0800aee0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000258 	.word	0x20000258
 800021c:	0800aee0 	.word	0x0800aee0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b96a 	b.w	8000924 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	460c      	mov	r4, r1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d14e      	bne.n	8000712 <__udivmoddi4+0xaa>
 8000674:	4694      	mov	ip, r2
 8000676:	458c      	cmp	ip, r1
 8000678:	4686      	mov	lr, r0
 800067a:	fab2 f282 	clz	r2, r2
 800067e:	d962      	bls.n	8000746 <__udivmoddi4+0xde>
 8000680:	b14a      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000682:	f1c2 0320 	rsb	r3, r2, #32
 8000686:	4091      	lsls	r1, r2
 8000688:	fa20 f303 	lsr.w	r3, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	4319      	orrs	r1, r3
 8000692:	fa00 fe02 	lsl.w	lr, r0, r2
 8000696:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800069a:	fa1f f68c 	uxth.w	r6, ip
 800069e:	fbb1 f4f7 	udiv	r4, r1, r7
 80006a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006a6:	fb07 1114 	mls	r1, r7, r4, r1
 80006aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ae:	fb04 f106 	mul.w	r1, r4, r6
 80006b2:	4299      	cmp	r1, r3
 80006b4:	d90a      	bls.n	80006cc <__udivmoddi4+0x64>
 80006b6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80006be:	f080 8112 	bcs.w	80008e6 <__udivmoddi4+0x27e>
 80006c2:	4299      	cmp	r1, r3
 80006c4:	f240 810f 	bls.w	80008e6 <__udivmoddi4+0x27e>
 80006c8:	3c02      	subs	r4, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a59      	subs	r1, r3, r1
 80006ce:	fa1f f38e 	uxth.w	r3, lr
 80006d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006d6:	fb07 1110 	mls	r1, r7, r0, r1
 80006da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006de:	fb00 f606 	mul.w	r6, r0, r6
 80006e2:	429e      	cmp	r6, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x94>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80006ee:	f080 80fc 	bcs.w	80008ea <__udivmoddi4+0x282>
 80006f2:	429e      	cmp	r6, r3
 80006f4:	f240 80f9 	bls.w	80008ea <__udivmoddi4+0x282>
 80006f8:	4463      	add	r3, ip
 80006fa:	3802      	subs	r0, #2
 80006fc:	1b9b      	subs	r3, r3, r6
 80006fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000702:	2100      	movs	r1, #0
 8000704:	b11d      	cbz	r5, 800070e <__udivmoddi4+0xa6>
 8000706:	40d3      	lsrs	r3, r2
 8000708:	2200      	movs	r2, #0
 800070a:	e9c5 3200 	strd	r3, r2, [r5]
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	428b      	cmp	r3, r1
 8000714:	d905      	bls.n	8000722 <__udivmoddi4+0xba>
 8000716:	b10d      	cbz	r5, 800071c <__udivmoddi4+0xb4>
 8000718:	e9c5 0100 	strd	r0, r1, [r5]
 800071c:	2100      	movs	r1, #0
 800071e:	4608      	mov	r0, r1
 8000720:	e7f5      	b.n	800070e <__udivmoddi4+0xa6>
 8000722:	fab3 f183 	clz	r1, r3
 8000726:	2900      	cmp	r1, #0
 8000728:	d146      	bne.n	80007b8 <__udivmoddi4+0x150>
 800072a:	42a3      	cmp	r3, r4
 800072c:	d302      	bcc.n	8000734 <__udivmoddi4+0xcc>
 800072e:	4290      	cmp	r0, r2
 8000730:	f0c0 80f0 	bcc.w	8000914 <__udivmoddi4+0x2ac>
 8000734:	1a86      	subs	r6, r0, r2
 8000736:	eb64 0303 	sbc.w	r3, r4, r3
 800073a:	2001      	movs	r0, #1
 800073c:	2d00      	cmp	r5, #0
 800073e:	d0e6      	beq.n	800070e <__udivmoddi4+0xa6>
 8000740:	e9c5 6300 	strd	r6, r3, [r5]
 8000744:	e7e3      	b.n	800070e <__udivmoddi4+0xa6>
 8000746:	2a00      	cmp	r2, #0
 8000748:	f040 8090 	bne.w	800086c <__udivmoddi4+0x204>
 800074c:	eba1 040c 	sub.w	r4, r1, ip
 8000750:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000754:	fa1f f78c 	uxth.w	r7, ip
 8000758:	2101      	movs	r1, #1
 800075a:	fbb4 f6f8 	udiv	r6, r4, r8
 800075e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000762:	fb08 4416 	mls	r4, r8, r6, r4
 8000766:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800076a:	fb07 f006 	mul.w	r0, r7, r6
 800076e:	4298      	cmp	r0, r3
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0x11c>
 8000772:	eb1c 0303 	adds.w	r3, ip, r3
 8000776:	f106 34ff 	add.w	r4, r6, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x11a>
 800077c:	4298      	cmp	r0, r3
 800077e:	f200 80cd 	bhi.w	800091c <__udivmoddi4+0x2b4>
 8000782:	4626      	mov	r6, r4
 8000784:	1a1c      	subs	r4, r3, r0
 8000786:	fa1f f38e 	uxth.w	r3, lr
 800078a:	fbb4 f0f8 	udiv	r0, r4, r8
 800078e:	fb08 4410 	mls	r4, r8, r0, r4
 8000792:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000796:	fb00 f707 	mul.w	r7, r0, r7
 800079a:	429f      	cmp	r7, r3
 800079c:	d908      	bls.n	80007b0 <__udivmoddi4+0x148>
 800079e:	eb1c 0303 	adds.w	r3, ip, r3
 80007a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80007a6:	d202      	bcs.n	80007ae <__udivmoddi4+0x146>
 80007a8:	429f      	cmp	r7, r3
 80007aa:	f200 80b0 	bhi.w	800090e <__udivmoddi4+0x2a6>
 80007ae:	4620      	mov	r0, r4
 80007b0:	1bdb      	subs	r3, r3, r7
 80007b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b6:	e7a5      	b.n	8000704 <__udivmoddi4+0x9c>
 80007b8:	f1c1 0620 	rsb	r6, r1, #32
 80007bc:	408b      	lsls	r3, r1
 80007be:	fa22 f706 	lsr.w	r7, r2, r6
 80007c2:	431f      	orrs	r7, r3
 80007c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007c8:	fa04 f301 	lsl.w	r3, r4, r1
 80007cc:	ea43 030c 	orr.w	r3, r3, ip
 80007d0:	40f4      	lsrs	r4, r6
 80007d2:	fa00 f801 	lsl.w	r8, r0, r1
 80007d6:	0c38      	lsrs	r0, r7, #16
 80007d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007dc:	fbb4 fef0 	udiv	lr, r4, r0
 80007e0:	fa1f fc87 	uxth.w	ip, r7
 80007e4:	fb00 441e 	mls	r4, r0, lr, r4
 80007e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007ec:	fb0e f90c 	mul.w	r9, lr, ip
 80007f0:	45a1      	cmp	r9, r4
 80007f2:	fa02 f201 	lsl.w	r2, r2, r1
 80007f6:	d90a      	bls.n	800080e <__udivmoddi4+0x1a6>
 80007f8:	193c      	adds	r4, r7, r4
 80007fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007fe:	f080 8084 	bcs.w	800090a <__udivmoddi4+0x2a2>
 8000802:	45a1      	cmp	r9, r4
 8000804:	f240 8081 	bls.w	800090a <__udivmoddi4+0x2a2>
 8000808:	f1ae 0e02 	sub.w	lr, lr, #2
 800080c:	443c      	add	r4, r7
 800080e:	eba4 0409 	sub.w	r4, r4, r9
 8000812:	fa1f f983 	uxth.w	r9, r3
 8000816:	fbb4 f3f0 	udiv	r3, r4, r0
 800081a:	fb00 4413 	mls	r4, r0, r3, r4
 800081e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000822:	fb03 fc0c 	mul.w	ip, r3, ip
 8000826:	45a4      	cmp	ip, r4
 8000828:	d907      	bls.n	800083a <__udivmoddi4+0x1d2>
 800082a:	193c      	adds	r4, r7, r4
 800082c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000830:	d267      	bcs.n	8000902 <__udivmoddi4+0x29a>
 8000832:	45a4      	cmp	ip, r4
 8000834:	d965      	bls.n	8000902 <__udivmoddi4+0x29a>
 8000836:	3b02      	subs	r3, #2
 8000838:	443c      	add	r4, r7
 800083a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800083e:	fba0 9302 	umull	r9, r3, r0, r2
 8000842:	eba4 040c 	sub.w	r4, r4, ip
 8000846:	429c      	cmp	r4, r3
 8000848:	46ce      	mov	lr, r9
 800084a:	469c      	mov	ip, r3
 800084c:	d351      	bcc.n	80008f2 <__udivmoddi4+0x28a>
 800084e:	d04e      	beq.n	80008ee <__udivmoddi4+0x286>
 8000850:	b155      	cbz	r5, 8000868 <__udivmoddi4+0x200>
 8000852:	ebb8 030e 	subs.w	r3, r8, lr
 8000856:	eb64 040c 	sbc.w	r4, r4, ip
 800085a:	fa04 f606 	lsl.w	r6, r4, r6
 800085e:	40cb      	lsrs	r3, r1
 8000860:	431e      	orrs	r6, r3
 8000862:	40cc      	lsrs	r4, r1
 8000864:	e9c5 6400 	strd	r6, r4, [r5]
 8000868:	2100      	movs	r1, #0
 800086a:	e750      	b.n	800070e <__udivmoddi4+0xa6>
 800086c:	f1c2 0320 	rsb	r3, r2, #32
 8000870:	fa20 f103 	lsr.w	r1, r0, r3
 8000874:	fa0c fc02 	lsl.w	ip, ip, r2
 8000878:	fa24 f303 	lsr.w	r3, r4, r3
 800087c:	4094      	lsls	r4, r2
 800087e:	430c      	orrs	r4, r1
 8000880:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000884:	fa00 fe02 	lsl.w	lr, r0, r2
 8000888:	fa1f f78c 	uxth.w	r7, ip
 800088c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000890:	fb08 3110 	mls	r1, r8, r0, r3
 8000894:	0c23      	lsrs	r3, r4, #16
 8000896:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800089a:	fb00 f107 	mul.w	r1, r0, r7
 800089e:	4299      	cmp	r1, r3
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0x24c>
 80008a2:	eb1c 0303 	adds.w	r3, ip, r3
 80008a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80008aa:	d22c      	bcs.n	8000906 <__udivmoddi4+0x29e>
 80008ac:	4299      	cmp	r1, r3
 80008ae:	d92a      	bls.n	8000906 <__udivmoddi4+0x29e>
 80008b0:	3802      	subs	r0, #2
 80008b2:	4463      	add	r3, ip
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	b2a4      	uxth	r4, r4
 80008b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008bc:	fb08 3311 	mls	r3, r8, r1, r3
 80008c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008c4:	fb01 f307 	mul.w	r3, r1, r7
 80008c8:	42a3      	cmp	r3, r4
 80008ca:	d908      	bls.n	80008de <__udivmoddi4+0x276>
 80008cc:	eb1c 0404 	adds.w	r4, ip, r4
 80008d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80008d4:	d213      	bcs.n	80008fe <__udivmoddi4+0x296>
 80008d6:	42a3      	cmp	r3, r4
 80008d8:	d911      	bls.n	80008fe <__udivmoddi4+0x296>
 80008da:	3902      	subs	r1, #2
 80008dc:	4464      	add	r4, ip
 80008de:	1ae4      	subs	r4, r4, r3
 80008e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008e4:	e739      	b.n	800075a <__udivmoddi4+0xf2>
 80008e6:	4604      	mov	r4, r0
 80008e8:	e6f0      	b.n	80006cc <__udivmoddi4+0x64>
 80008ea:	4608      	mov	r0, r1
 80008ec:	e706      	b.n	80006fc <__udivmoddi4+0x94>
 80008ee:	45c8      	cmp	r8, r9
 80008f0:	d2ae      	bcs.n	8000850 <__udivmoddi4+0x1e8>
 80008f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80008f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80008fa:	3801      	subs	r0, #1
 80008fc:	e7a8      	b.n	8000850 <__udivmoddi4+0x1e8>
 80008fe:	4631      	mov	r1, r6
 8000900:	e7ed      	b.n	80008de <__udivmoddi4+0x276>
 8000902:	4603      	mov	r3, r0
 8000904:	e799      	b.n	800083a <__udivmoddi4+0x1d2>
 8000906:	4630      	mov	r0, r6
 8000908:	e7d4      	b.n	80008b4 <__udivmoddi4+0x24c>
 800090a:	46d6      	mov	lr, sl
 800090c:	e77f      	b.n	800080e <__udivmoddi4+0x1a6>
 800090e:	4463      	add	r3, ip
 8000910:	3802      	subs	r0, #2
 8000912:	e74d      	b.n	80007b0 <__udivmoddi4+0x148>
 8000914:	4606      	mov	r6, r0
 8000916:	4623      	mov	r3, r4
 8000918:	4608      	mov	r0, r1
 800091a:	e70f      	b.n	800073c <__udivmoddi4+0xd4>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	e730      	b.n	8000784 <__udivmoddi4+0x11c>
 8000922:	bf00      	nop

08000924 <__aeabi_idiv0>:
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <cs_low>:

ublox_status_e sendSPICommand(NeoGPSConfig_t *config, UBX_Packet_t *outgoing, uint32_t max_wait);

#define SPI_RX_BUFFER_SIZE 128

static void cs_low(NeoGPSConfig_t *config) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(config->cs_pin_port, config->cs_pin, GPIO_PIN_RESET);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6858      	ldr	r0, [r3, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	891b      	ldrh	r3, [r3, #8]
 8000938:	2200      	movs	r2, #0
 800093a:	4619      	mov	r1, r3
 800093c:	f001 fd34 	bl	80023a8 <HAL_GPIO_WritePin>
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <cs_high>:

static void cs_high(NeoGPSConfig_t *config) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(config->cs_pin_port, config->cs_pin, GPIO_PIN_SET);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6858      	ldr	r0, [r3, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	891b      	ldrh	r3, [r3, #8]
 8000958:	2201      	movs	r2, #1
 800095a:	4619      	mov	r1, r3
 800095c:	f001 fd24 	bl	80023a8 <HAL_GPIO_WritePin>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <parseLatLong>:
	//if (getPortSettings(PORT_ID_SPI, max_wait) == false)
	//    return (false); // Something went wrong. Bail.
	return false;
}

float parseLatLong(uint8_t *rx){
 8000968:	b480      	push	{r7}
 800096a:	b089      	sub	sp, #36	@ 0x24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	//grab the degrees part
	uint8_t deg = rx[0] * 10 + rx[1];
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	4413      	add	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3301      	adds	r3, #1
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4413      	add	r3, r2
 8000986:	74fb      	strb	r3, [r7, #19]

	//grab the minutes (rx[5] is the decimal
	float minutes = 0;
 8000988:	f04f 0300 	mov.w	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
	float place = 10;
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <parseLatLong+0xa8>)
 8000990:	61bb      	str	r3, [r7, #24]

	for (int i = 0; i < 10; i++) {
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
 8000996:	e01e      	b.n	80009d6 <parseLatLong+0x6e>
		minutes += place * rx[2+i];
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	3302      	adds	r3, #2
 800099c:	461a      	mov	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	ee07 3a90 	vmov	s15, r3
 80009a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80009b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80009b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009bc:	edc7 7a07 	vstr	s15, [r7, #28]
		place/=10;
 80009c0:	ed97 7a06 	vldr	s14, [r7, #24]
 80009c4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80009c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009cc:	edc7 7a06 	vstr	s15, [r7, #24]
	for (int i = 0; i < 10; i++) {
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	3301      	adds	r3, #1
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	2b09      	cmp	r3, #9
 80009da:	dddd      	ble.n	8000998 <parseLatLong+0x30>
	}

	//final answer
	float lat = (float)deg + (minutes/60);
 80009dc:	7cfb      	ldrb	r3, [r7, #19]
 80009de:	ee07 3a90 	vmov	s15, r3
 80009e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80009ea:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8000a14 <parseLatLong+0xac>
 80009ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80009f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009f6:	edc7 7a03 	vstr	s15, [r7, #12]

	return lat;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	ee07 3a90 	vmov	s15, r3
}
 8000a00:	eeb0 0a67 	vmov.f32	s0, s15
 8000a04:	3724      	adds	r7, #36	@ 0x24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	41200000 	.word	0x41200000
 8000a14:	42700000 	.word	0x42700000

08000a18 <receive_nmea_payload_section>:
uint8_t GLOBAL_HIGH_TX[SPI_RX_BUFFER_SIZE] = {[0 ... SPI_RX_BUFFER_SIZE-1] = 0xFF};

float latitude_deg = 0;
float longitude_deg = 0;

bool receive_nmea_payload_section(SPI_HandleTypeDef *spi_port, uint8_t *tx, uint8_t *rx, uint16_t size, uint32_t max_wait) { //stop at , or size bytes
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	807b      	strh	r3, [r7, #2]
	//read first byte to see if it's a comma (stop reading)
	HAL_SPI_TransmitReceive(spi_port, tx, rx, 1, max_wait);
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	68b9      	ldr	r1, [r7, #8]
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f004 fbce 	bl	80051d2 <HAL_SPI_TransmitReceive>

	if (rx[0] == ',') return false;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000a3c:	d101      	bne.n	8000a42 <receive_nmea_payload_section+0x2a>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e00c      	b.n	8000a5c <receive_nmea_payload_section+0x44>

	//otherwise continue to read the rest into rx
	HAL_SPI_TransmitReceive(spi_port, tx, rx+1, size-1, max_wait);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	1c5a      	adds	r2, r3, #1
 8000a46:	887b      	ldrh	r3, [r7, #2]
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	b299      	uxth	r1, r3
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	460b      	mov	r3, r1
 8000a52:	68b9      	ldr	r1, [r7, #8]
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f004 fbbc 	bl	80051d2 <HAL_SPI_TransmitReceive>

	return true;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <read_nmea_gga>:

//,time,lat,ns,lon,ew,quality,numsv,hdop,alt
void read_nmea_gga(NeoGPSConfig_t *config, uint32_t max_wait) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b0c6      	sub	sp, #280	@ 0x118
 8000a68:	af02      	add	r7, sp, #8
 8000a6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a72:	6018      	str	r0, [r3, #0]
 8000a74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000a7c:	6019      	str	r1, [r3, #0]
	uint8_t rx[NMEA_PAYLOAD_SIZE];

	//receive the time ( hhmmss.ss) + comma after
	receive_nmea_payload_section(config->spi_port, GLOBAL_HIGH_TX, rx, 8+1, max_wait);
 8000a7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	f107 0210 	add.w	r2, r7, #16
 8000a8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2309      	movs	r3, #9
 8000a9c:	4934      	ldr	r1, [pc, #208]	@ (8000b70 <read_nmea_gga+0x10c>)
 8000a9e:	f7ff ffbb 	bl	8000a18 <receive_nmea_payload_section>


	//receive the latitude(ddmm.mmmmm)+ comma after
	if (receive_nmea_payload_section(config->spi_port, GLOBAL_HIGH_TX, rx, 10+1, max_wait) == true) {
 8000aa2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000aa6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6818      	ldr	r0, [r3, #0]
 8000aae:	f107 0210 	add.w	r2, r7, #16
 8000ab2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ab6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	230b      	movs	r3, #11
 8000ac0:	492b      	ldr	r1, [pc, #172]	@ (8000b70 <read_nmea_gga+0x10c>)
 8000ac2:	f7ff ffa9 	bl	8000a18 <receive_nmea_payload_section>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d009      	beq.n	8000ae0 <read_nmea_gga+0x7c>
		latitude_deg = parseLatLong(rx);
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff49 	bl	8000968 <parseLatLong>
 8000ad6:	eef0 7a40 	vmov.f32	s15, s0
 8000ada:	4b26      	ldr	r3, [pc, #152]	@ (8000b74 <read_nmea_gga+0x110>)
 8000adc:	edc3 7a00 	vstr	s15, [r3]
	}

	//receive the NS indicator and comma after
	uint8_t ns_indicator;
	receive_nmea_payload_section(config->spi_port, GLOBAL_HIGH_TX, &ns_indicator, 1+1, max_wait);
 8000ae0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ae4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6818      	ldr	r0, [r3, #0]
 8000aec:	f107 020f 	add.w	r2, r7, #15
 8000af0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000af4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2302      	movs	r3, #2
 8000afe:	491c      	ldr	r1, [pc, #112]	@ (8000b70 <read_nmea_gga+0x10c>)
 8000b00:	f7ff ff8a 	bl	8000a18 <receive_nmea_payload_section>

	//receive the longitude(ddmm.mmmmm)+ comma after
	if (receive_nmea_payload_section(config->spi_port, GLOBAL_HIGH_TX, rx, 10+1, max_wait) == true) {
 8000b04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b08:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	f107 0210 	add.w	r2, r7, #16
 8000b14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b18:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	230b      	movs	r3, #11
 8000b22:	4913      	ldr	r1, [pc, #76]	@ (8000b70 <read_nmea_gga+0x10c>)
 8000b24:	f7ff ff78 	bl	8000a18 <receive_nmea_payload_section>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d009      	beq.n	8000b42 <read_nmea_gga+0xde>
		longitude_deg = parseLatLong(rx);
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff18 	bl	8000968 <parseLatLong>
 8000b38:	eef0 7a40 	vmov.f32	s15, s0
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <read_nmea_gga+0x114>)
 8000b3e:	edc3 7a00 	vstr	s15, [r3]
	}

	//receive the EW indicator and comma after
	uint8_t ew_indicator;
	receive_nmea_payload_section(config->spi_port, GLOBAL_HIGH_TX, &ew_indicator, 1+1, max_wait);
 8000b42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6818      	ldr	r0, [r3, #0]
 8000b4e:	f107 020e 	add.w	r2, r7, #14
 8000b52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b56:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2302      	movs	r3, #2
 8000b60:	4903      	ldr	r1, [pc, #12]	@ (8000b70 <read_nmea_gga+0x10c>)
 8000b62:	f7ff ff59 	bl	8000a18 <receive_nmea_payload_section>

	//receive the quality and comma after
	//uint8_t quality;
	//receive_nmea_payload_section(config->spi_port, GLOBAL_HIGH_TX, &quality, 1+1, max_wait);

}
 8000b66:	bf00      	nop
 8000b68:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000270 	.word	0x20000270
 8000b78:	20000274 	.word	0x20000274

08000b7c <read_nmea_gll>:

//,lat,NS,lon,EW,time,status,posMode*cs\r\n
void read_nmea_gll(NeoGPSConfig_t *config, uint32_t max_wait) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0c8      	sub	sp, #288	@ 0x120
 8000b80:	af02      	add	r7, sp, #8
 8000b82:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b86:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000b8a:	6018      	str	r0, [r3, #0]
 8000b8c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b90:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000b94:	6019      	str	r1, [r3, #0]
	uint8_t rx[NMEA_PAYLOAD_SIZE];

	//receive the latitude(ddmm.mmmmm)+ comma after
	receive_nmea_payload_section(config->spi_port, GLOBAL_HIGH_TX, rx, 10+1, max_wait);
 8000b96:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b9a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6818      	ldr	r0, [r3, #0]
 8000ba2:	f107 0210 	add.w	r2, r7, #16
 8000ba6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000baa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	230b      	movs	r3, #11
 8000bb4:	4929      	ldr	r1, [pc, #164]	@ (8000c5c <read_nmea_gll+0xe0>)
 8000bb6:	f7ff ff2f 	bl	8000a18 <receive_nmea_payload_section>

	float lat = parseLatLong(rx);
 8000bba:	f107 0310 	add.w	r3, r7, #16
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fed2 	bl	8000968 <parseLatLong>
 8000bc4:	ed87 0a45 	vstr	s0, [r7, #276]	@ 0x114

	//receive the NS indicator and comma after
	uint8_t ns_indicator;
	receive_nmea_payload_section(config->spi_port, GLOBAL_HIGH_TX, &ns_indicator, 1+1, max_wait);
 8000bc8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bcc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	f107 020f 	add.w	r2, r7, #15
 8000bd8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bdc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2302      	movs	r3, #2
 8000be6:	491d      	ldr	r1, [pc, #116]	@ (8000c5c <read_nmea_gll+0xe0>)
 8000be8:	f7ff ff16 	bl	8000a18 <receive_nmea_payload_section>

	//receive the longitude(ddmm.mmmmm)+ comma after
	receive_nmea_payload_section(config->spi_port, GLOBAL_HIGH_TX, rx, 10+1, max_wait);
 8000bec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bf0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	6818      	ldr	r0, [r3, #0]
 8000bf8:	f107 0210 	add.w	r2, r7, #16
 8000bfc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c00:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	230b      	movs	r3, #11
 8000c0a:	4914      	ldr	r1, [pc, #80]	@ (8000c5c <read_nmea_gll+0xe0>)
 8000c0c:	f7ff ff04 	bl	8000a18 <receive_nmea_payload_section>

	float lon = parseLatLong(rx);
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fea7 	bl	8000968 <parseLatLong>
 8000c1a:	ed87 0a44 	vstr	s0, [r7, #272]	@ 0x110

	//receive the EW indicator and comma after
	uint8_t ew_indicator;
	receive_nmea_payload_section(config->spi_port, GLOBAL_HIGH_TX, &ew_indicator, 1+1, max_wait);
 8000c1e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6818      	ldr	r0, [r3, #0]
 8000c2a:	f107 020e 	add.w	r2, r7, #14
 8000c2e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c32:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	4907      	ldr	r1, [pc, #28]	@ (8000c5c <read_nmea_gll+0xe0>)
 8000c3e:	f7ff feeb 	bl	8000a18 <receive_nmea_payload_section>

	//ignore the rest and output our data
	latitude_deg = lat;
 8000c42:	4a07      	ldr	r2, [pc, #28]	@ (8000c60 <read_nmea_gll+0xe4>)
 8000c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c48:	6013      	str	r3, [r2, #0]
	longitude_deg = lon;
 8000c4a:	4a06      	ldr	r2, [pc, #24]	@ (8000c64 <read_nmea_gll+0xe8>)
 8000c4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000c50:	6013      	str	r3, [r2, #0]
}
 8000c52:	bf00      	nop
 8000c54:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000270 	.word	0x20000270
 8000c64:	20000274 	.word	0x20000274

08000c68 <read_nmea_gns>:

//,time,lat,NS,lon,EW,posMode,numSV,HDOP,alt,sep,diffAge,diffStation,navStatus*c ↲s\r\n
void read_nmea_gns(NeoGPSConfig_t *config, uint32_t max_wait) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
	//for our purposes the gns and gga have the same data we want and in the same format
	//some of the data they carry after lat and lon is different but we don't care, so parse
	//them as the same to save me time. I am lazy.
	read_nmea_gga(config, max_wait);
 8000c72:	6839      	ldr	r1, [r7, #0]
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff fef5 	bl	8000a64 <read_nmea_gga>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <read_nmea_rmc>:

//,time,status,lat,NS,lon,EW,spd,cog,date,mv,mvEW,posMode,navStatus*cs\r\n
void read_nmea_rmc(NeoGPSConfig_t *config, uint32_t max_wait) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0c8      	sub	sp, #288	@ 0x120
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c8e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000c92:	6018      	str	r0, [r3, #0]
 8000c94:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000c9c:	6019      	str	r1, [r3, #0]
	uint8_t rx[NMEA_PAYLOAD_SIZE];

	//receive the time ( hhmmss.ss) + comma after
	HAL_SPI_TransmitReceive(config->spi_port, GLOBAL_HIGH_TX, rx, 8+1, max_wait);
 8000c9e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ca2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6818      	ldr	r0, [r3, #0]
 8000caa:	f107 0210 	add.w	r2, r7, #16
 8000cae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cb2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	2309      	movs	r3, #9
 8000cbc:	4944      	ldr	r1, [pc, #272]	@ (8000dd0 <read_nmea_rmc+0x14c>)
 8000cbe:	f004 fa88 	bl	80051d2 <HAL_SPI_TransmitReceive>

	//receive the status (don't care)
	HAL_SPI_TransmitReceive(config->spi_port, GLOBAL_HIGH_TX, rx, 1+1, max_wait);
 8000cc2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cc6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6818      	ldr	r0, [r3, #0]
 8000cce:	f107 0210 	add.w	r2, r7, #16
 8000cd2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cd6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	2302      	movs	r3, #2
 8000ce0:	493b      	ldr	r1, [pc, #236]	@ (8000dd0 <read_nmea_rmc+0x14c>)
 8000ce2:	f004 fa76 	bl	80051d2 <HAL_SPI_TransmitReceive>

	//receive the latitude(ddmm.mmmmm)+ comma after
	HAL_SPI_TransmitReceive(config->spi_port, GLOBAL_HIGH_TX, rx, 10+1, max_wait);
 8000ce6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6818      	ldr	r0, [r3, #0]
 8000cf2:	f107 0210 	add.w	r2, r7, #16
 8000cf6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cfa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	230b      	movs	r3, #11
 8000d04:	4932      	ldr	r1, [pc, #200]	@ (8000dd0 <read_nmea_rmc+0x14c>)
 8000d06:	f004 fa64 	bl	80051d2 <HAL_SPI_TransmitReceive>

	float lat = parseLatLong(rx);
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fe2a 	bl	8000968 <parseLatLong>
 8000d14:	ed87 0a45 	vstr	s0, [r7, #276]	@ 0x114

	//receive the NS indicator and comma after
	uint8_t ns_indicator;
	HAL_SPI_TransmitReceive(config->spi_port, GLOBAL_HIGH_TX, &ns_indicator, 1+1, max_wait);
 8000d18:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d1c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	6818      	ldr	r0, [r3, #0]
 8000d24:	f107 020f 	add.w	r2, r7, #15
 8000d28:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d2c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2302      	movs	r3, #2
 8000d36:	4926      	ldr	r1, [pc, #152]	@ (8000dd0 <read_nmea_rmc+0x14c>)
 8000d38:	f004 fa4b 	bl	80051d2 <HAL_SPI_TransmitReceive>

	//receive the longitude(ddmm.mmmmm)+ comma after
	HAL_SPI_TransmitReceive(config->spi_port, GLOBAL_HIGH_TX, rx, 10+1, max_wait);
 8000d3c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d40:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	f107 0210 	add.w	r2, r7, #16
 8000d4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d50:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	230b      	movs	r3, #11
 8000d5a:	491d      	ldr	r1, [pc, #116]	@ (8000dd0 <read_nmea_rmc+0x14c>)
 8000d5c:	f004 fa39 	bl	80051d2 <HAL_SPI_TransmitReceive>

	float lon = parseLatLong(rx);
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fdff 	bl	8000968 <parseLatLong>
 8000d6a:	ed87 0a44 	vstr	s0, [r7, #272]	@ 0x110

	//receive the EW indicator and comma after
	uint8_t ew_indicator;
	HAL_SPI_TransmitReceive(config->spi_port, GLOBAL_HIGH_TX, &ew_indicator, 1+1, max_wait);
 8000d6e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d72:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	f107 020e 	add.w	r2, r7, #14
 8000d7e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d82:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	4910      	ldr	r1, [pc, #64]	@ (8000dd0 <read_nmea_rmc+0x14c>)
 8000d8e:	f004 fa20 	bl	80051d2 <HAL_SPI_TransmitReceive>

	//receive the quality and comma after
	uint8_t quality;
	HAL_SPI_TransmitReceive(config->spi_port, GLOBAL_HIGH_TX, &quality, 1+1, max_wait);
 8000d92:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d96:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	f107 020d 	add.w	r2, r7, #13
 8000da2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000da6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2302      	movs	r3, #2
 8000db0:	4907      	ldr	r1, [pc, #28]	@ (8000dd0 <read_nmea_rmc+0x14c>)
 8000db2:	f004 fa0e 	bl	80051d2 <HAL_SPI_TransmitReceive>

	//ignore the rest and output our data
	latitude_deg = lat;
 8000db6:	4a07      	ldr	r2, [pc, #28]	@ (8000dd4 <read_nmea_rmc+0x150>)
 8000db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000dbc:	6013      	str	r3, [r2, #0]
	longitude_deg = lon;
 8000dbe:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <read_nmea_rmc+0x154>)
 8000dc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000dc4:	6013      	str	r3, [r2, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000270 	.word	0x20000270
 8000dd8:	20000274 	.word	0x20000274

08000ddc <receive_nmea>:


bool receive_nmea(NeoGPSConfig_t *config, uint32_t max_wait, uint32_t max_ignores) {
 8000ddc:	b5b0      	push	{r4, r5, r7, lr}
 8000dde:	b08c      	sub	sp, #48	@ 0x30
 8000de0:	af02      	add	r7, sp, #8
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
	HAL_Delay(10);
 8000de8:	200a      	movs	r0, #10
 8000dea:	f000 fe6d 	bl	8001ac8 <HAL_Delay>
	debug_print("Receiving a nmea...");
 8000dee:	487a      	ldr	r0, [pc, #488]	@ (8000fd8 <receive_nmea+0x1fc>)
 8000df0:	f000 f92c 	bl	800104c <debug_print>
	HAL_Delay(10);
 8000df4:	200a      	movs	r0, #10
 8000df6:	f000 fe67 	bl	8001ac8 <HAL_Delay>

	uint8_t rx[5];

	//begin the transaction
	cs_low(config);
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f7ff fd94 	bl	8000928 <cs_low>

	uint32_t ignores = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
	//ignore until we find the start of a nmea ($)
	while(ignores < max_ignores) {
 8000e04:	e00f      	b.n	8000e26 <receive_nmea+0x4a>
		HAL_SPI_TransmitReceive(config->spi_port, GLOBAL_HIGH_TX, rx, 1, max_wait);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6818      	ldr	r0, [r3, #0]
 8000e0a:	f107 0214 	add.w	r2, r7, #20
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2301      	movs	r3, #1
 8000e14:	4971      	ldr	r1, [pc, #452]	@ (8000fdc <receive_nmea+0x200>)
 8000e16:	f004 f9dc 	bl	80051d2 <HAL_SPI_TransmitReceive>
		if ((char)rx[0] == '$')
 8000e1a:	7d3b      	ldrb	r3, [r7, #20]
 8000e1c:	2b24      	cmp	r3, #36	@ 0x24
 8000e1e:	d007      	beq.n	8000e30 <receive_nmea+0x54>
			break;
		ignores++;
 8000e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e22:	3301      	adds	r3, #1
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
	while(ignores < max_ignores) {
 8000e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d3eb      	bcc.n	8000e06 <receive_nmea+0x2a>
 8000e2e:	e000      	b.n	8000e32 <receive_nmea+0x56>
			break;
 8000e30:	bf00      	nop
	}

	if ((char)rx[0]!='$') {
 8000e32:	7d3b      	ldrb	r3, [r7, #20]
 8000e34:	2b24      	cmp	r3, #36	@ 0x24
 8000e36:	d004      	beq.n	8000e42 <receive_nmea+0x66>
		cs_high(config);
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f7ff fd85 	bl	8000948 <cs_high>
		return false; //we did not get a message after max ignores
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e0c6      	b.n	8000fd0 <receive_nmea+0x1f4>
	}
	//otherwise continue parsing the message

	uint32_t message_index = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
	//receive the talker id
	HAL_SPI_TransmitReceive(config->spi_port, GLOBAL_HIGH_TX, rx, 2, max_wait);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	6818      	ldr	r0, [r3, #0]
 8000e4a:	f107 0214 	add.w	r2, r7, #20
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2302      	movs	r3, #2
 8000e54:	4961      	ldr	r1, [pc, #388]	@ (8000fdc <receive_nmea+0x200>)
 8000e56:	f004 f9bc 	bl	80051d2 <HAL_SPI_TransmitReceive>
	message_index+=2;
 8000e5a:	6a3b      	ldr	r3, [r7, #32]
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]

	//receive the sentence format
	//add 1 to the length of format to account for the comma
	HAL_SPI_TransmitReceive(config->spi_port, GLOBAL_HIGH_TX, rx+message_index, 3+1, max_wait);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6818      	ldr	r0, [r3, #0]
 8000e64:	f107 0214 	add.w	r2, r7, #20
 8000e68:	6a3b      	ldr	r3, [r7, #32]
 8000e6a:	441a      	add	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2304      	movs	r3, #4
 8000e72:	495a      	ldr	r1, [pc, #360]	@ (8000fdc <receive_nmea+0x200>)
 8000e74:	f004 f9ad 	bl	80051d2 <HAL_SPI_TransmitReceive>

	//now we are up to the payload, so we should pass control to the relevant parsing function based on sentence type.
	//first check if it is a ublox proprietary message (PUBX)

	char *sent = (char*)rx + 2;
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	61fb      	str	r3, [r7, #28]
	if (strncmp((char*)rx, "PUBX", 4) == 0) {
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2204      	movs	r2, #4
 8000e86:	4956      	ldr	r1, [pc, #344]	@ (8000fe0 <receive_nmea+0x204>)
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f009 fb9f 	bl	800a5cc <strncmp>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d107      	bne.n	8000ea4 <receive_nmea+0xc8>
		//I have no need for this data at this time, so return false and ignore.
		cs_high(config);
 8000e94:	68f8      	ldr	r0, [r7, #12]
 8000e96:	f7ff fd57 	bl	8000948 <cs_high>
		debug_print("PUBX: Ignore"); //should never happen, because we only get this if we poll for it.
 8000e9a:	4852      	ldr	r0, [pc, #328]	@ (8000fe4 <receive_nmea+0x208>)
 8000e9c:	f000 f8d6 	bl	800104c <debug_print>
		return false;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e095      	b.n	8000fd0 <receive_nmea+0x1f4>
	} else { //else check the sentence format field
		if (strncmp(sent, "GGA", 3) == 0) {
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	4950      	ldr	r1, [pc, #320]	@ (8000fe8 <receive_nmea+0x20c>)
 8000ea8:	69f8      	ldr	r0, [r7, #28]
 8000eaa:	f009 fb8f 	bl	800a5cc <strncmp>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d119      	bne.n	8000ee8 <receive_nmea+0x10c>
			read_nmea_gga(config, max_wait);
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f7ff fdd4 	bl	8000a64 <read_nmea_gga>
			debug_print("GGA parsed. Latitude: %f, Longitude: %f", latitude_deg, longitude_deg);
 8000ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8000fec <receive_nmea+0x210>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fb61 	bl	8000588 <__aeabi_f2d>
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	460d      	mov	r5, r1
 8000eca:	4b49      	ldr	r3, [pc, #292]	@ (8000ff0 <receive_nmea+0x214>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fb5a 	bl	8000588 <__aeabi_f2d>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	ec43 2b11 	vmov	d1, r2, r3
 8000edc:	ec45 4b10 	vmov	d0, r4, r5
 8000ee0:	4844      	ldr	r0, [pc, #272]	@ (8000ff4 <receive_nmea+0x218>)
 8000ee2:	f000 f8b3 	bl	800104c <debug_print>
 8000ee6:	e072      	b.n	8000fce <receive_nmea+0x1f2>
		} else if (strncmp(sent, "GLL", 3) == 0) {
 8000ee8:	2203      	movs	r2, #3
 8000eea:	4943      	ldr	r1, [pc, #268]	@ (8000ff8 <receive_nmea+0x21c>)
 8000eec:	69f8      	ldr	r0, [r7, #28]
 8000eee:	f009 fb6d 	bl	800a5cc <strncmp>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d119      	bne.n	8000f2c <receive_nmea+0x150>
			read_nmea_gll(config, max_wait);
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f7ff fe3e 	bl	8000b7c <read_nmea_gll>
			debug_print("GLL parsed. Latitude: %f, Longitude: %f", latitude_deg, longitude_deg);
 8000f00:	4b3a      	ldr	r3, [pc, #232]	@ (8000fec <receive_nmea+0x210>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fb3f 	bl	8000588 <__aeabi_f2d>
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	460d      	mov	r5, r1
 8000f0e:	4b38      	ldr	r3, [pc, #224]	@ (8000ff0 <receive_nmea+0x214>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fb38 	bl	8000588 <__aeabi_f2d>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	ec43 2b11 	vmov	d1, r2, r3
 8000f20:	ec45 4b10 	vmov	d0, r4, r5
 8000f24:	4835      	ldr	r0, [pc, #212]	@ (8000ffc <receive_nmea+0x220>)
 8000f26:	f000 f891 	bl	800104c <debug_print>
 8000f2a:	e050      	b.n	8000fce <receive_nmea+0x1f2>
		} else if (strncmp(sent, "GNS", 3) == 0) {
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	4934      	ldr	r1, [pc, #208]	@ (8001000 <receive_nmea+0x224>)
 8000f30:	69f8      	ldr	r0, [r7, #28]
 8000f32:	f009 fb4b 	bl	800a5cc <strncmp>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d119      	bne.n	8000f70 <receive_nmea+0x194>
			read_nmea_gns(config, max_wait);
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f7ff fe92 	bl	8000c68 <read_nmea_gns>
			debug_print("GNS parsed. Latitude: %f, Longitude: %f", latitude_deg, longitude_deg);
 8000f44:	4b29      	ldr	r3, [pc, #164]	@ (8000fec <receive_nmea+0x210>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fb1d 	bl	8000588 <__aeabi_f2d>
 8000f4e:	4604      	mov	r4, r0
 8000f50:	460d      	mov	r5, r1
 8000f52:	4b27      	ldr	r3, [pc, #156]	@ (8000ff0 <receive_nmea+0x214>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fb16 	bl	8000588 <__aeabi_f2d>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	ec43 2b11 	vmov	d1, r2, r3
 8000f64:	ec45 4b10 	vmov	d0, r4, r5
 8000f68:	4826      	ldr	r0, [pc, #152]	@ (8001004 <receive_nmea+0x228>)
 8000f6a:	f000 f86f 	bl	800104c <debug_print>
 8000f6e:	e02e      	b.n	8000fce <receive_nmea+0x1f2>
		} else if (strncmp(sent, "RMC", 3) == 0) {
 8000f70:	2203      	movs	r2, #3
 8000f72:	4925      	ldr	r1, [pc, #148]	@ (8001008 <receive_nmea+0x22c>)
 8000f74:	69f8      	ldr	r0, [r7, #28]
 8000f76:	f009 fb29 	bl	800a5cc <strncmp>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d119      	bne.n	8000fb4 <receive_nmea+0x1d8>
			read_nmea_rmc(config, max_wait);
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f7ff fe7e 	bl	8000c84 <read_nmea_rmc>
			debug_print("RMC parsed. Latitude: %f, Longitude: %f", latitude_deg, longitude_deg);
 8000f88:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <receive_nmea+0x210>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fafb 	bl	8000588 <__aeabi_f2d>
 8000f92:	4604      	mov	r4, r0
 8000f94:	460d      	mov	r5, r1
 8000f96:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <receive_nmea+0x214>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff faf4 	bl	8000588 <__aeabi_f2d>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	ec43 2b11 	vmov	d1, r2, r3
 8000fa8:	ec45 4b10 	vmov	d0, r4, r5
 8000fac:	4817      	ldr	r0, [pc, #92]	@ (800100c <receive_nmea+0x230>)
 8000fae:	f000 f84d 	bl	800104c <debug_print>
 8000fb2:	e00c      	b.n	8000fce <receive_nmea+0x1f2>
		} else {
			cs_high(config);
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f7ff fcc7 	bl	8000948 <cs_high>
			debug_print("%c%c%c: Ignore", rx[2], rx[3], rx[4]);
 8000fba:	7dbb      	ldrb	r3, [r7, #22]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	7e3b      	ldrb	r3, [r7, #24]
 8000fc4:	4812      	ldr	r0, [pc, #72]	@ (8001010 <receive_nmea+0x234>)
 8000fc6:	f000 f841 	bl	800104c <debug_print>
			return false;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <receive_nmea+0x1f4>
		}
	}
	return true;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3728      	adds	r7, #40	@ 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd8:	0800b1c8 	.word	0x0800b1c8
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	0800b1dc 	.word	0x0800b1dc
 8000fe4:	0800b1e4 	.word	0x0800b1e4
 8000fe8:	0800b1f4 	.word	0x0800b1f4
 8000fec:	20000270 	.word	0x20000270
 8000ff0:	20000274 	.word	0x20000274
 8000ff4:	0800b1f8 	.word	0x0800b1f8
 8000ff8:	0800b220 	.word	0x0800b220
 8000ffc:	0800b224 	.word	0x0800b224
 8001000:	0800b24c 	.word	0x0800b24c
 8001004:	0800b250 	.word	0x0800b250
 8001008:	0800b278 	.word	0x0800b278
 800100c:	0800b27c 	.word	0x0800b27c
 8001010:	0800b2a4 	.word	0x0800b2a4

08001014 <neom9n_begin>:

bool neom9n_begin(NeoGPSConfig_t *config, uint32_t max_wait) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
	debug_print("Beginning...\r\n");
 800101e:	480a      	ldr	r0, [pc, #40]	@ (8001048 <neom9n_begin+0x34>)
 8001020:	f000 f814 	bl	800104c <debug_print>
	HAL_Delay(2000);
 8001024:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001028:	f000 fd4e 	bl	8001ac8 <HAL_Delay>
	cs_high(config);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff fc8b 	bl	8000948 <cs_high>
	//test_poll(config, max_wait);
	while(1) {
		receive_nmea(config,max_wait, 1000);
 8001032:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001036:	6839      	ldr	r1, [r7, #0]
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff fecf 	bl	8000ddc <receive_nmea>
		HAL_Delay(100);
 800103e:	2064      	movs	r0, #100	@ 0x64
 8001040:	f000 fd42 	bl	8001ac8 <HAL_Delay>
		receive_nmea(config,max_wait, 1000);
 8001044:	bf00      	nop
 8001046:	e7f4      	b.n	8001032 <neom9n_begin+0x1e>
 8001048:	0800b2b4 	.word	0x0800b2b4

0800104c <debug_print>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void debug_print(const char *format, ...) {
 800104c:	b40f      	push	{r0, r1, r2, r3}
 800104e:	b580      	push	{r7, lr}
 8001050:	b0c2      	sub	sp, #264	@ 0x108
 8001052:	af00      	add	r7, sp, #0
	char buf[PRINT_BUFFER_SIZE];
	va_list args;
	va_start(args, format);
 8001054:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800105c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001060:	601a      	str	r2, [r3, #0]
	int n = vsprintf(buf, format, args);
 8001062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800106a:	1d38      	adds	r0, r7, #4
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8001072:	f009 fa99 	bl	800a5a8 <vsiprintf>
 8001076:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	CDC_Transmit_FS(buf, n);
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8001080:	4618      	mov	r0, r3
 8001082:	f008 fe2f 	bl	8009ce4 <CDC_Transmit_FS>
	va_end(args);
}
 8001086:	bf00      	nop
 8001088:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800108c:	46bd      	mov	sp, r7
 800108e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001092:	b004      	add	sp, #16
 8001094:	4770      	bx	lr
	...

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109e:	f000 fca2 	bl	80019e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a2:	f000 f827 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a6:	f000 f9c3 	bl	8001430 <MX_GPIO_Init>
  MX_SPI1_Init();
 80010aa:	f000 f8eb 	bl	8001284 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80010ae:	f000 f927 	bl	8001300 <MX_USART1_UART_Init>
  MX_FDCAN2_Init();
 80010b2:	f000 f861 	bl	8001178 <MX_FDCAN2_Init>
  MX_I2C3_Init();
 80010b6:	f000 f8a5 	bl	8001204 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 80010ba:	f000 f96d 	bl	8001398 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 80010be:	f008 fd53 	bl	8009b68 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  NeoGPSConfig_t neo_config = {
 80010c2:	4a09      	ldr	r2, [pc, #36]	@ (80010e8 <main+0x50>)
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  		&hspi1,
		CS_NeoGPS_GPIO_Port,
		CS_NeoGPS_Pin
  };
  neom9n_begin(&neo_config, 10000000);
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4907      	ldr	r1, [pc, #28]	@ (80010ec <main+0x54>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff9f 	bl	8001014 <neom9n_begin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  debug_print("bruh mooment\n\r");
 80010d6:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <main+0x58>)
 80010d8:	f7ff ffb8 	bl	800104c <debug_print>
	  HAL_Delay(1000);
 80010dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010e0:	f000 fcf2 	bl	8001ac8 <HAL_Delay>
	  debug_print("bruh mooment\n\r");
 80010e4:	bf00      	nop
 80010e6:	e7f6      	b.n	80010d6 <main+0x3e>
 80010e8:	0800b2d4 	.word	0x0800b2d4
 80010ec:	00989680 	.word	0x00989680
 80010f0:	0800b2c4 	.word	0x0800b2c4

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	@ 0x50
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	2238      	movs	r2, #56	@ 0x38
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f009 fa5a 	bl	800a5bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001116:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800111a:	f002 ff91 	bl	8004040 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800111e:	2322      	movs	r3, #34	@ 0x22
 8001120:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001122:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001128:	2340      	movs	r3, #64	@ 0x40
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800112c:	2301      	movs	r3, #1
 800112e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001130:	2300      	movs	r3, #0
 8001132:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	4618      	mov	r0, r3
 800113a:	f003 f835 	bl	80041a8 <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001144:	f000 f9cc 	bl	80014e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800114c:	2301      	movs	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f003 fb33 	bl	80047cc <HAL_RCC_ClockConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800116c:	f000 f9b8 	bl	80014e0 <Error_Handler>
  }
}
 8001170:	bf00      	nop
 8001172:	3750      	adds	r7, #80	@ 0x50
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800117c:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 800117e:	4a20      	ldr	r2, [pc, #128]	@ (8001200 <MX_FDCAN2_Init+0x88>)
 8001180:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001182:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001188:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800118e:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 8001196:	2200      	movs	r2, #0
 8001198:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800119a:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 800119c:	2200      	movs	r2, #0
 800119e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 80011a8:	2210      	movs	r2, #16
 80011aa:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 80011b2:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 80011b8:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80011be:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80011c4:	4b0d      	ldr	r3, [pc, #52]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 80011d8:	2200      	movs	r2, #0
 80011da:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80011dc:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 80011de:	2200      	movs	r2, #0
 80011e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	@ (80011fc <MX_FDCAN2_Init+0x84>)
 80011ea:	f000 fd9f 	bl	8001d2c <HAL_FDCAN_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80011f4:	f000 f974 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000278 	.word	0x20000278
 8001200:	40006800 	.word	0x40006800

08001204 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001208:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <MX_I2C3_Init+0x74>)
 800120a:	4a1c      	ldr	r2, [pc, #112]	@ (800127c <MX_I2C3_Init+0x78>)
 800120c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 800120e:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <MX_I2C3_Init+0x74>)
 8001210:	4a1b      	ldr	r2, [pc, #108]	@ (8001280 <MX_I2C3_Init+0x7c>)
 8001212:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001214:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <MX_I2C3_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121a:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <MX_I2C3_Init+0x74>)
 800121c:	2201      	movs	r2, #1
 800121e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001220:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <MX_I2C3_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001226:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <MX_I2C3_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <MX_I2C3_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001232:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <MX_I2C3_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <MX_I2C3_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800123e:	480e      	ldr	r0, [pc, #56]	@ (8001278 <MX_I2C3_Init+0x74>)
 8001240:	f001 f8ca 	bl	80023d8 <HAL_I2C_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800124a:	f000 f949 	bl	80014e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124e:	2100      	movs	r1, #0
 8001250:	4809      	ldr	r0, [pc, #36]	@ (8001278 <MX_I2C3_Init+0x74>)
 8001252:	f001 f95c 	bl	800250e <HAL_I2CEx_ConfigAnalogFilter>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800125c:	f000 f940 	bl	80014e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001260:	2100      	movs	r1, #0
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_I2C3_Init+0x74>)
 8001264:	f001 f99e 	bl	80025a4 <HAL_I2CEx_ConfigDigitalFilter>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800126e:	f000 f937 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200002dc 	.word	0x200002dc
 800127c:	40007800 	.word	0x40007800
 8001280:	00503d58 	.word	0x00503d58

08001284 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001288:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <MX_SPI1_Init+0x74>)
 800128a:	4a1c      	ldr	r2, [pc, #112]	@ (80012fc <MX_SPI1_Init+0x78>)
 800128c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800128e:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <MX_SPI1_Init+0x74>)
 8001290:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001296:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <MX_SPI1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800129c:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <MX_SPI1_Init+0x74>)
 800129e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a4:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012aa:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012ba:	2238      	movs	r2, #56	@ 0x38
 80012bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012be:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012d0:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012d2:	2207      	movs	r2, #7
 80012d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012d6:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012e2:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012e4:	f003 feca 	bl	800507c <HAL_SPI_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012ee:	f000 f8f7 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000330 	.word	0x20000330
 80012fc:	40013000 	.word	0x40013000

08001300 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001304:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001306:	4a23      	ldr	r2, [pc, #140]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 8001308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131e:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001336:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800133c:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001342:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001348:	4811      	ldr	r0, [pc, #68]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800134a:	f004 fac5 	bl	80058d8 <HAL_UART_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001354:	f000 f8c4 	bl	80014e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001358:	2100      	movs	r1, #0
 800135a:	480d      	ldr	r0, [pc, #52]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800135c:	f005 f860 	bl	8006420 <HAL_UARTEx_SetTxFifoThreshold>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001366:	f000 f8bb 	bl	80014e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800136a:	2100      	movs	r1, #0
 800136c:	4808      	ldr	r0, [pc, #32]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800136e:	f005 f895 	bl	800649c <HAL_UARTEx_SetRxFifoThreshold>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001378:	f000 f8b2 	bl	80014e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800137c:	4804      	ldr	r0, [pc, #16]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800137e:	f005 f816 	bl	80063ae <HAL_UARTEx_DisableFifoMode>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001388:	f000 f8aa 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000394 	.word	0x20000394
 8001394:	40013800 	.word	0x40013800

08001398 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800139c:	4b22      	ldr	r3, [pc, #136]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 800139e:	4a23      	ldr	r2, [pc, #140]	@ (800142c <MX_USART2_UART_Init+0x94>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013a2:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ce:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d4:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013da:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e0:	4811      	ldr	r0, [pc, #68]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013e2:	f004 fa79 	bl	80058d8 <HAL_UART_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013ec:	f000 f878 	bl	80014e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f0:	2100      	movs	r1, #0
 80013f2:	480d      	ldr	r0, [pc, #52]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013f4:	f005 f814 	bl	8006420 <HAL_UARTEx_SetTxFifoThreshold>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013fe:	f000 f86f 	bl	80014e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001402:	2100      	movs	r1, #0
 8001404:	4808      	ldr	r0, [pc, #32]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 8001406:	f005 f849 	bl	800649c <HAL_UARTEx_SetRxFifoThreshold>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001410:	f000 f866 	bl	80014e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 8001416:	f004 ffca 	bl	80063ae <HAL_UARTEx_DisableFifoMode>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001420:	f000 f85e 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000428 	.word	0x20000428
 800142c:	40004400 	.word	0x40004400

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	4b24      	ldr	r3, [pc, #144]	@ (80014d8 <MX_GPIO_Init+0xa8>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	4a23      	ldr	r2, [pc, #140]	@ (80014d8 <MX_GPIO_Init+0xa8>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001452:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <MX_GPIO_Init+0xa8>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800145e:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <MX_GPIO_Init+0xa8>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	4a1d      	ldr	r2, [pc, #116]	@ (80014d8 <MX_GPIO_Init+0xa8>)
 8001464:	f043 0320 	orr.w	r3, r3, #32
 8001468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146a:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <MX_GPIO_Init+0xa8>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	f003 0320 	and.w	r3, r3, #32
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <MX_GPIO_Init+0xa8>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <MX_GPIO_Init+0xa8>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <MX_GPIO_Init+0xa8>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <MX_GPIO_Init+0xa8>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	4a11      	ldr	r2, [pc, #68]	@ (80014d8 <MX_GPIO_Init+0xa8>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149a:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <MX_GPIO_Init+0xa8>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_NeoGPS_Pin|LED_D2_Pin|Patrick_Pin|LED_POWER_Pin
 80014a6:	2200      	movs	r2, #0
 80014a8:	f64c 0142 	movw	r1, #51266	@ 0xc842
 80014ac:	480b      	ldr	r0, [pc, #44]	@ (80014dc <MX_GPIO_Init+0xac>)
 80014ae:	f000 ff7b 	bl	80023a8 <HAL_GPIO_WritePin>
                          |Squidward_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_NeoGPS_Pin LED_D2_Pin Patrick_Pin LED_POWER_Pin
                           Squidward_Pin */
  GPIO_InitStruct.Pin = CS_NeoGPS_Pin|LED_D2_Pin|Patrick_Pin|LED_POWER_Pin
 80014b2:	f64c 0342 	movw	r3, #51266	@ 0xc842
 80014b6:	617b      	str	r3, [r7, #20]
                          |Squidward_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4804      	ldr	r0, [pc, #16]	@ (80014dc <MX_GPIO_Init+0xac>)
 80014cc:	f000 fdea 	bl	80020a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	@ 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000
 80014dc:	48000400 	.word	0x48000400

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <Error_Handler+0x8>

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <HAL_MspInit+0x44>)
 80014f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001530 <HAL_MspInit+0x44>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80014fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <HAL_MspInit+0x44>)
 8001500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <HAL_MspInit+0x44>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150e:	4a08      	ldr	r2, [pc, #32]	@ (8001530 <HAL_MspInit+0x44>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001514:	6593      	str	r3, [r2, #88]	@ 0x58
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_MspInit+0x44>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001522:	f002 fe31 	bl	8004188 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000

08001534 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b09e      	sub	sp, #120	@ 0x78
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2250      	movs	r2, #80	@ 0x50
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f009 f831 	bl	800a5bc <memset>
  if(hfdcan->Instance==FDCAN2)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a20      	ldr	r2, [pc, #128]	@ (80015e0 <HAL_FDCAN_MspInit+0xac>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d138      	bne.n	80015d6 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001568:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800156a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800156e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4618      	mov	r0, r3
 8001576:	f003 fb45 	bl	8004c04 <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001580:	f7ff ffae 	bl	80014e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001584:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <HAL_FDCAN_MspInit+0xb0>)
 8001586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001588:	4a16      	ldr	r2, [pc, #88]	@ (80015e4 <HAL_FDCAN_MspInit+0xb0>)
 800158a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800158e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001590:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <HAL_FDCAN_MspInit+0xb0>)
 8001592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <HAL_FDCAN_MspInit+0xb0>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a0:	4a10      	ldr	r2, [pc, #64]	@ (80015e4 <HAL_FDCAN_MspInit+0xb0>)
 80015a2:	f043 0302 	orr.w	r3, r3, #2
 80015a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a8:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <HAL_FDCAN_MspInit+0xb0>)
 80015aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80015b4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80015b8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80015c6:	2309      	movs	r3, #9
 80015c8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <HAL_FDCAN_MspInit+0xb4>)
 80015d2:	f000 fd67 	bl	80020a4 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 80015d6:	bf00      	nop
 80015d8:	3778      	adds	r7, #120	@ 0x78
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40006800 	.word	0x40006800
 80015e4:	40021000 	.word	0x40021000
 80015e8:	48000400 	.word	0x48000400

080015ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b09e      	sub	sp, #120	@ 0x78
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2250      	movs	r2, #80	@ 0x50
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f008 ffd5 	bl	800a5bc <memset>
  if(hi2c->Instance==I2C3)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a2e      	ldr	r2, [pc, #184]	@ (80016d0 <HAL_I2C_MspInit+0xe4>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d154      	bne.n	80016c6 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800161c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001620:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001622:	2300      	movs	r3, #0
 8001624:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4618      	mov	r0, r3
 800162c:	f003 faea 	bl	8004c04 <HAL_RCCEx_PeriphCLKConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001636:	f7ff ff53 	bl	80014e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	4b26      	ldr	r3, [pc, #152]	@ (80016d4 <HAL_I2C_MspInit+0xe8>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163e:	4a25      	ldr	r2, [pc, #148]	@ (80016d4 <HAL_I2C_MspInit+0xe8>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001646:	4b23      	ldr	r3, [pc, #140]	@ (80016d4 <HAL_I2C_MspInit+0xe8>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b20      	ldr	r3, [pc, #128]	@ (80016d4 <HAL_I2C_MspInit+0xe8>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	4a1f      	ldr	r2, [pc, #124]	@ (80016d4 <HAL_I2C_MspInit+0xe8>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165e:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <HAL_I2C_MspInit+0xe8>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800166a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800166e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001670:	2312      	movs	r3, #18
 8001672:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 800167c:	2302      	movs	r3, #2
 800167e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001684:	4619      	mov	r1, r3
 8001686:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800168a:	f000 fd0b 	bl	80020a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800168e:	2320      	movs	r3, #32
 8001690:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001692:	2312      	movs	r3, #18
 8001694:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800169e:	2308      	movs	r3, #8
 80016a0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016a6:	4619      	mov	r1, r3
 80016a8:	480b      	ldr	r0, [pc, #44]	@ (80016d8 <HAL_I2C_MspInit+0xec>)
 80016aa:	f000 fcfb 	bl	80020a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <HAL_I2C_MspInit+0xe8>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b2:	4a08      	ldr	r2, [pc, #32]	@ (80016d4 <HAL_I2C_MspInit+0xe8>)
 80016b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80016b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <HAL_I2C_MspInit+0xe8>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80016c6:	bf00      	nop
 80016c8:	3778      	adds	r7, #120	@ 0x78
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40007800 	.word	0x40007800
 80016d4:	40021000 	.word	0x40021000
 80016d8:	48000400 	.word	0x48000400

080016dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	@ 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a17      	ldr	r2, [pc, #92]	@ (8001758 <HAL_SPI_MspInit+0x7c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d128      	bne.n	8001750 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fe:	4b17      	ldr	r3, [pc, #92]	@ (800175c <HAL_SPI_MspInit+0x80>)
 8001700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001702:	4a16      	ldr	r2, [pc, #88]	@ (800175c <HAL_SPI_MspInit+0x80>)
 8001704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001708:	6613      	str	r3, [r2, #96]	@ 0x60
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <HAL_SPI_MspInit+0x80>)
 800170c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_SPI_MspInit+0x80>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	4a10      	ldr	r2, [pc, #64]	@ (800175c <HAL_SPI_MspInit+0x80>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <HAL_SPI_MspInit+0x80>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800172e:	23e0      	movs	r3, #224	@ 0xe0
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800173e:	2305      	movs	r3, #5
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174c:	f000 fcaa 	bl	80020a4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	@ 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40013000 	.word	0x40013000
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b0a0      	sub	sp, #128	@ 0x80
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	2250      	movs	r2, #80	@ 0x50
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f008 ff1b 	bl	800a5bc <memset>
  if(huart->Instance==USART1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a3e      	ldr	r2, [pc, #248]	@ (8001884 <HAL_UART_MspInit+0x124>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d138      	bne.n	8001802 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001790:	2301      	movs	r3, #1
 8001792:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4618      	mov	r0, r3
 800179e:	f003 fa31 	bl	8004c04 <HAL_RCCEx_PeriphCLKConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017a8:	f7ff fe9a 	bl	80014e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ac:	4b36      	ldr	r3, [pc, #216]	@ (8001888 <HAL_UART_MspInit+0x128>)
 80017ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b0:	4a35      	ldr	r2, [pc, #212]	@ (8001888 <HAL_UART_MspInit+0x128>)
 80017b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80017b8:	4b33      	ldr	r3, [pc, #204]	@ (8001888 <HAL_UART_MspInit+0x128>)
 80017ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	4b30      	ldr	r3, [pc, #192]	@ (8001888 <HAL_UART_MspInit+0x128>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c8:	4a2f      	ldr	r2, [pc, #188]	@ (8001888 <HAL_UART_MspInit+0x128>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001888 <HAL_UART_MspInit+0x128>)
 80017d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017ee:	2307      	movs	r3, #7
 80017f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fc:	f000 fc52 	bl	80020a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001800:	e03b      	b.n	800187a <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a21      	ldr	r2, [pc, #132]	@ (800188c <HAL_UART_MspInit+0x12c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d136      	bne.n	800187a <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800180c:	2302      	movs	r3, #2
 800180e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4618      	mov	r0, r3
 800181a:	f003 f9f3 	bl	8004c04 <HAL_RCCEx_PeriphCLKConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001824:	f7ff fe5c 	bl	80014e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001828:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <HAL_UART_MspInit+0x128>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182c:	4a16      	ldr	r2, [pc, #88]	@ (8001888 <HAL_UART_MspInit+0x128>)
 800182e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001832:	6593      	str	r3, [r2, #88]	@ 0x58
 8001834:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <HAL_UART_MspInit+0x128>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_UART_MspInit+0x128>)
 8001842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001844:	4a10      	ldr	r2, [pc, #64]	@ (8001888 <HAL_UART_MspInit+0x128>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184c:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <HAL_UART_MspInit+0x128>)
 800184e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001858:	230c      	movs	r3, #12
 800185a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001868:	2307      	movs	r3, #7
 800186a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001870:	4619      	mov	r1, r3
 8001872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001876:	f000 fc15 	bl	80020a4 <HAL_GPIO_Init>
}
 800187a:	bf00      	nop
 800187c:	3780      	adds	r7, #128	@ 0x80
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40013800 	.word	0x40013800
 8001888:	40021000 	.word	0x40021000
 800188c:	40004400 	.word	0x40004400

08001890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <NMI_Handler+0x4>

08001898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <HardFault_Handler+0x4>

080018a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <MemManage_Handler+0x4>

080018a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <BusFault_Handler+0x4>

080018b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <UsageFault_Handler+0x4>

080018b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e6:	f000 f8d1 	bl	8001a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <USB_LP_IRQHandler+0x10>)
 80018f6:	f000 ff91 	bl	800281c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20001998 	.word	0x20001998

08001904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800190c:	4a14      	ldr	r2, [pc, #80]	@ (8001960 <_sbrk+0x5c>)
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <_sbrk+0x60>)
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001918:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <_sbrk+0x64>)
 8001922:	4a12      	ldr	r2, [pc, #72]	@ (800196c <_sbrk+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	429a      	cmp	r2, r3
 8001932:	d207      	bcs.n	8001944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001934:	f008 fe5c 	bl	800a5f0 <__errno>
 8001938:	4603      	mov	r3, r0
 800193a:	220c      	movs	r2, #12
 800193c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	e009      	b.n	8001958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001944:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194a:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	4a05      	ldr	r2, [pc, #20]	@ (8001968 <_sbrk+0x64>)
 8001954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2001c000 	.word	0x2001c000
 8001964:	00000400 	.word	0x00000400
 8001968:	200004bc 	.word	0x200004bc
 800196c:	20001fe0 	.word	0x20001fe0

08001970 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <SystemInit+0x20>)
 8001976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800197a:	4a05      	ldr	r2, [pc, #20]	@ (8001990 <SystemInit+0x20>)
 800197c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001994:	480d      	ldr	r0, [pc, #52]	@ (80019cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001996:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001998:	f7ff ffea 	bl	8001970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800199c:	480c      	ldr	r0, [pc, #48]	@ (80019d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800199e:	490d      	ldr	r1, [pc, #52]	@ (80019d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019a0:	4a0d      	ldr	r2, [pc, #52]	@ (80019d8 <LoopForever+0xe>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019b4:	4c0a      	ldr	r4, [pc, #40]	@ (80019e0 <LoopForever+0x16>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019c2:	f008 fe1b 	bl	800a5fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019c6:	f7ff fb67 	bl	8001098 <main>

080019ca <LoopForever>:

LoopForever:
    b LoopForever
 80019ca:	e7fe      	b.n	80019ca <LoopForever>
  ldr   r0, =_estack
 80019cc:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d4:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 80019d8:	0800b3ac 	.word	0x0800b3ac
  ldr r2, =_sbss
 80019dc:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 80019e0:	20001fdc 	.word	0x20001fdc

080019e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC1_2_IRQHandler>

080019e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f0:	2003      	movs	r0, #3
 80019f2:	f000 f95b 	bl	8001cac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019f6:	200f      	movs	r0, #15
 80019f8:	f000 f80e 	bl	8001a18 <HAL_InitTick>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	71fb      	strb	r3, [r7, #7]
 8001a06:	e001      	b.n	8001a0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a08:	f7ff fd70 	bl	80014ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a0c:	79fb      	ldrb	r3, [r7, #7]

}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a24:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <HAL_InitTick+0x68>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d022      	beq.n	8001a72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a2c:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <HAL_InitTick+0x6c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <HAL_InitTick+0x68>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f966 	bl	8001d12 <HAL_SYSTICK_Config>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10f      	bne.n	8001a6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b0f      	cmp	r3, #15
 8001a50:	d809      	bhi.n	8001a66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a52:	2200      	movs	r2, #0
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5a:	f000 f932 	bl	8001cc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a88 <HAL_InitTick+0x70>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	e007      	b.n	8001a76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
 8001a6a:	e004      	b.n	8001a76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	e001      	b.n	8001a76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000088 	.word	0x20000088
 8001a84:	20000080 	.word	0x20000080
 8001a88:	20000084 	.word	0x20000084

08001a8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a90:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <HAL_IncTick+0x1c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <HAL_IncTick+0x20>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4a03      	ldr	r2, [pc, #12]	@ (8001aa8 <HAL_IncTick+0x1c>)
 8001a9c:	6013      	str	r3, [r2, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	200004c0 	.word	0x200004c0
 8001aac:	20000088 	.word	0x20000088

08001ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	@ (8001ac4 <HAL_GetTick+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	200004c0 	.word	0x200004c0

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff ffee 	bl	8001ab0 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d004      	beq.n	8001aec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <HAL_Delay+0x40>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aec:	bf00      	nop
 8001aee:	f7ff ffdf 	bl	8001ab0 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d8f7      	bhi.n	8001aee <HAL_Delay+0x26>
  {
  }
}
 8001afe:	bf00      	nop
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000088 	.word	0x20000088

08001b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	@ (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b58:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <__NVIC_GetPriorityGrouping+0x18>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	f003 0307 	and.w	r3, r3, #7
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	db0b      	blt.n	8001b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	4907      	ldr	r1, [pc, #28]	@ (8001ba8 <__NVIC_EnableIRQ+0x38>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	2001      	movs	r0, #1
 8001b92:	fa00 f202 	lsl.w	r2, r0, r2
 8001b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000e100 	.word	0xe000e100

08001bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db0a      	blt.n	8001bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	490c      	ldr	r1, [pc, #48]	@ (8001bf8 <__NVIC_SetPriority+0x4c>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd4:	e00a      	b.n	8001bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4908      	ldr	r1, [pc, #32]	@ (8001bfc <__NVIC_SetPriority+0x50>)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3b04      	subs	r3, #4
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	440b      	add	r3, r1
 8001bea:	761a      	strb	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	@ 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f1c3 0307 	rsb	r3, r3, #7
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	bf28      	it	cs
 8001c1e:	2304      	movcs	r3, #4
 8001c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3304      	adds	r3, #4
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d902      	bls.n	8001c30 <NVIC_EncodePriority+0x30>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3b03      	subs	r3, #3
 8001c2e:	e000      	b.n	8001c32 <NVIC_EncodePriority+0x32>
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	401a      	ands	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c48:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	43d9      	mvns	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	4313      	orrs	r3, r2
         );
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3724      	adds	r7, #36	@ 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c78:	d301      	bcc.n	8001c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00f      	b.n	8001c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <SysTick_Config+0x40>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c86:	210f      	movs	r1, #15
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f7ff ff8e 	bl	8001bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c90:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <SysTick_Config+0x40>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c96:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <SysTick_Config+0x40>)
 8001c98:	2207      	movs	r2, #7
 8001c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	e000e010 	.word	0xe000e010

08001cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ff29 	bl	8001b0c <__NVIC_SetPriorityGrouping>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd0:	f7ff ff40 	bl	8001b54 <__NVIC_GetPriorityGrouping>
 8001cd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f7ff ff90 	bl	8001c00 <NVIC_EncodePriority>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff5f 	bl	8001bac <__NVIC_SetPriority>
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff33 	bl	8001b70 <__NVIC_EnableIRQ>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ffa4 	bl	8001c68 <SysTick_Config>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e147      	b.n	8001fce <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fbee 	bl	8001534 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0210 	bic.w	r2, r2, #16
 8001d66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d68:	f7ff fea2 	bl	8001ab0 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001d6e:	e012      	b.n	8001d96 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001d70:	f7ff fe9e 	bl	8001ab0 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b0a      	cmp	r3, #10
 8001d7c:	d90b      	bls.n	8001d96 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d82:	f043 0201 	orr.w	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e11b      	b.n	8001fce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d0e5      	beq.n	8001d70 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699a      	ldr	r2, [r3, #24]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001db4:	f7ff fe7c 	bl	8001ab0 <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001dba:	e012      	b.n	8001de2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001dbc:	f7ff fe78 	bl	8001ab0 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b0a      	cmp	r3, #10
 8001dc8:	d90b      	bls.n	8001de2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dce:	f043 0201 	orr.w	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0f5      	b.n	8001fce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0e5      	beq.n	8001dbc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699a      	ldr	r2, [r3, #24]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0202 	orr.w	r2, r2, #2
 8001dfe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a74      	ldr	r2, [pc, #464]	@ (8001fd8 <HAL_FDCAN_Init+0x2ac>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d103      	bne.n	8001e12 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001e0a:	4a74      	ldr	r2, [pc, #464]	@ (8001fdc <HAL_FDCAN_Init+0x2b0>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7c1b      	ldrb	r3, [r3, #16]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d108      	bne.n	8001e2c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	699a      	ldr	r2, [r3, #24]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e28:	619a      	str	r2, [r3, #24]
 8001e2a:	e007      	b.n	8001e3c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e3a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7c5b      	ldrb	r3, [r3, #17]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d108      	bne.n	8001e56 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699a      	ldr	r2, [r3, #24]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e52:	619a      	str	r2, [r3, #24]
 8001e54:	e007      	b.n	8001e66 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699a      	ldr	r2, [r3, #24]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001e64:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7c9b      	ldrb	r3, [r3, #18]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d108      	bne.n	8001e80 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e7c:	619a      	str	r2, [r3, #24]
 8001e7e:	e007      	b.n	8001e90 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001e8e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	699a      	ldr	r2, [r3, #24]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001eb4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0210 	bic.w	r2, r2, #16
 8001ec4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d108      	bne.n	8001ee0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699a      	ldr	r2, [r3, #24]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0204 	orr.w	r2, r2, #4
 8001edc:	619a      	str	r2, [r3, #24]
 8001ede:	e02c      	b.n	8001f3a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d028      	beq.n	8001f3a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d01c      	beq.n	8001f2a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001efe:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0210 	orr.w	r2, r2, #16
 8001f0e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d110      	bne.n	8001f3a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0220 	orr.w	r2, r2, #32
 8001f26:	619a      	str	r2, [r3, #24]
 8001f28:	e007      	b.n	8001f3a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699a      	ldr	r2, [r3, #24]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0220 	orr.w	r2, r2, #32
 8001f38:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f4a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001f52:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001f62:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f64:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f6e:	d115      	bne.n	8001f9c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f74:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001f7e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f84:	3b01      	subs	r3, #1
 8001f86:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001f88:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f90:	3b01      	subs	r3, #1
 8001f92:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001f98:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001f9a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f814 	bl	8001fe0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40006400 	.word	0x40006400
 8001fdc:	40006500 	.word	0x40006500

08001fe0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001fe8:	4b2c      	ldr	r3, [pc, #176]	@ (800209c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001fea:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a2b      	ldr	r2, [pc, #172]	@ (80020a0 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d103      	bne.n	8001ffe <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001ffc:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800200c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002014:	041a      	lsls	r2, r3, #16
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002032:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800203a:	061a      	lsls	r2, r3, #24
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	e005      	b.n	8002080 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3304      	adds	r3, #4
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	429a      	cmp	r2, r3
 800208a:	d3f3      	bcc.n	8002074 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	4000a400 	.word	0x4000a400
 80020a0:	40006800 	.word	0x40006800

080020a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020b2:	e15a      	b.n	800236a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2101      	movs	r1, #1
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 814c 	beq.w	8002364 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d005      	beq.n	80020e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d130      	bne.n	8002146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800211a:	2201      	movs	r2, #1
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	f003 0201 	and.w	r2, r3, #1
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	2b03      	cmp	r3, #3
 8002150:	d017      	beq.n	8002182 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	2203      	movs	r2, #3
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d123      	bne.n	80021d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	08da      	lsrs	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	08da      	lsrs	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3208      	adds	r2, #8
 80021d0:	6939      	ldr	r1, [r7, #16]
 80021d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	2203      	movs	r2, #3
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0203 	and.w	r2, r3, #3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80a6 	beq.w	8002364 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002218:	4b5b      	ldr	r3, [pc, #364]	@ (8002388 <HAL_GPIO_Init+0x2e4>)
 800221a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800221c:	4a5a      	ldr	r2, [pc, #360]	@ (8002388 <HAL_GPIO_Init+0x2e4>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6613      	str	r3, [r2, #96]	@ 0x60
 8002224:	4b58      	ldr	r3, [pc, #352]	@ (8002388 <HAL_GPIO_Init+0x2e4>)
 8002226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002230:	4a56      	ldr	r2, [pc, #344]	@ (800238c <HAL_GPIO_Init+0x2e8>)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	220f      	movs	r2, #15
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800225a:	d01f      	beq.n	800229c <HAL_GPIO_Init+0x1f8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a4c      	ldr	r2, [pc, #304]	@ (8002390 <HAL_GPIO_Init+0x2ec>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d019      	beq.n	8002298 <HAL_GPIO_Init+0x1f4>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a4b      	ldr	r2, [pc, #300]	@ (8002394 <HAL_GPIO_Init+0x2f0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d013      	beq.n	8002294 <HAL_GPIO_Init+0x1f0>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a4a      	ldr	r2, [pc, #296]	@ (8002398 <HAL_GPIO_Init+0x2f4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00d      	beq.n	8002290 <HAL_GPIO_Init+0x1ec>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a49      	ldr	r2, [pc, #292]	@ (800239c <HAL_GPIO_Init+0x2f8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d007      	beq.n	800228c <HAL_GPIO_Init+0x1e8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a48      	ldr	r2, [pc, #288]	@ (80023a0 <HAL_GPIO_Init+0x2fc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d101      	bne.n	8002288 <HAL_GPIO_Init+0x1e4>
 8002284:	2305      	movs	r3, #5
 8002286:	e00a      	b.n	800229e <HAL_GPIO_Init+0x1fa>
 8002288:	2306      	movs	r3, #6
 800228a:	e008      	b.n	800229e <HAL_GPIO_Init+0x1fa>
 800228c:	2304      	movs	r3, #4
 800228e:	e006      	b.n	800229e <HAL_GPIO_Init+0x1fa>
 8002290:	2303      	movs	r3, #3
 8002292:	e004      	b.n	800229e <HAL_GPIO_Init+0x1fa>
 8002294:	2302      	movs	r3, #2
 8002296:	e002      	b.n	800229e <HAL_GPIO_Init+0x1fa>
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <HAL_GPIO_Init+0x1fa>
 800229c:	2300      	movs	r3, #0
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	f002 0203 	and.w	r2, r2, #3
 80022a4:	0092      	lsls	r2, r2, #2
 80022a6:	4093      	lsls	r3, r2
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ae:	4937      	ldr	r1, [pc, #220]	@ (800238c <HAL_GPIO_Init+0x2e8>)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	3302      	adds	r3, #2
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022bc:	4b39      	ldr	r3, [pc, #228]	@ (80023a4 <HAL_GPIO_Init+0x300>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022e0:	4a30      	ldr	r2, [pc, #192]	@ (80023a4 <HAL_GPIO_Init+0x300>)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022e6:	4b2f      	ldr	r3, [pc, #188]	@ (80023a4 <HAL_GPIO_Init+0x300>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800230a:	4a26      	ldr	r2, [pc, #152]	@ (80023a4 <HAL_GPIO_Init+0x300>)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002310:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_GPIO_Init+0x300>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	43db      	mvns	r3, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002334:	4a1b      	ldr	r2, [pc, #108]	@ (80023a4 <HAL_GPIO_Init+0x300>)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800233a:	4b1a      	ldr	r3, [pc, #104]	@ (80023a4 <HAL_GPIO_Init+0x300>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800235e:	4a11      	ldr	r2, [pc, #68]	@ (80023a4 <HAL_GPIO_Init+0x300>)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3301      	adds	r3, #1
 8002368:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	f47f ae9d 	bne.w	80020b4 <HAL_GPIO_Init+0x10>
  }
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40021000 	.word	0x40021000
 800238c:	40010000 	.word	0x40010000
 8002390:	48000400 	.word	0x48000400
 8002394:	48000800 	.word	0x48000800
 8002398:	48000c00 	.word	0x48000c00
 800239c:	48001000 	.word	0x48001000
 80023a0:	48001400 	.word	0x48001400
 80023a4:	40010400 	.word	0x40010400

080023a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
 80023b4:	4613      	mov	r3, r2
 80023b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023b8:	787b      	ldrb	r3, [r7, #1]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023be:	887a      	ldrh	r2, [r7, #2]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023c4:	e002      	b.n	80023cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e08d      	b.n	8002506 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff f8f4 	bl	80015ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2224      	movs	r2, #36	@ 0x24
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0201 	bic.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002428:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002438:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	e006      	b.n	8002460 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800245e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d108      	bne.n	800247a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	e007      	b.n	800248a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002488:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800249c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69d9      	ldr	r1, [r3, #28]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1a      	ldr	r2, [r3, #32]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b20      	cmp	r3, #32
 8002522:	d138      	bne.n	8002596 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800252e:	2302      	movs	r3, #2
 8002530:	e032      	b.n	8002598 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2224      	movs	r2, #36	@ 0x24
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0201 	bic.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002560:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6819      	ldr	r1, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0201 	orr.w	r2, r2, #1
 8002580:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	e000      	b.n	8002598 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002596:	2302      	movs	r3, #2
  }
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	d139      	bne.n	800262e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e033      	b.n	8002630 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2224      	movs	r2, #36	@ 0x24
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800262e:	2302      	movs	r3, #2
  }
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e0c0      	b.n	80027d0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f007 fc86 	bl	8009f74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2203      	movs	r2, #3
 800266c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f003 ffb4 	bl	80065e2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267a:	2300      	movs	r3, #0
 800267c:	73fb      	strb	r3, [r7, #15]
 800267e:	e03e      	b.n	80026fe <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	440b      	add	r3, r1
 800268e:	3311      	adds	r3, #17
 8002690:	2201      	movs	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	440b      	add	r3, r1
 80026a2:	3310      	adds	r3, #16
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	440b      	add	r3, r1
 80026b6:	3313      	adds	r3, #19
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	3320      	adds	r3, #32
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	3324      	adds	r3, #36	@ 0x24
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	3301      	adds	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	791b      	ldrb	r3, [r3, #4]
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	429a      	cmp	r2, r3
 8002706:	d3bb      	bcc.n	8002680 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002708:	2300      	movs	r3, #0
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	e044      	b.n	8002798 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	440b      	add	r3, r1
 8002732:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	440b      	add	r3, r1
 8002748:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	440b      	add	r3, r1
 800275e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002766:	7bfa      	ldrb	r2, [r7, #15]
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	440b      	add	r3, r1
 800278a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	3301      	adds	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	791b      	ldrb	r3, [r3, #4]
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d3b5      	bcc.n	800270e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3304      	adds	r3, #4
 80027aa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80027ae:	f003 ff33 	bl	8006618 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	7a9b      	ldrb	r3, [r3, #10]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d102      	bne.n	80027ce <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f001 fc0e 	bl	8003fea <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_PCD_Start+0x16>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e012      	b.n	8002814 <HAL_PCD_Start+0x3c>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f003 feda 	bl	80065b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f005 fcb7 	bl	8008178 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f005 fcbc 	bl	80081a6 <USB_ReadInterrupts>
 800282e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fb06 	bl	8002e4c <PCD_EP_ISR_Handler>

    return;
 8002840:	e110      	b.n	8002a64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002854:	b29a      	uxth	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800285e:	b292      	uxth	r2, r2
 8002860:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f007 fc16 	bl	800a096 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800286a:	2100      	movs	r1, #0
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f8fc 	bl	8002a6a <HAL_PCD_SetAddress>

    return;
 8002872:	e0f7      	b.n	8002a64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00c      	beq.n	8002898 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002886:	b29a      	uxth	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002890:	b292      	uxth	r2, r2
 8002892:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002896:	e0e5      	b.n	8002a64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00c      	beq.n	80028bc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028b4:	b292      	uxth	r2, r2
 80028b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80028ba:	e0d3      	b.n	8002a64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d034      	beq.n	8002930 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0204 	bic.w	r2, r2, #4
 80028d8:	b292      	uxth	r2, r2
 80028da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0208 	bic.w	r2, r2, #8
 80028f0:	b292      	uxth	r2, r2
 80028f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d107      	bne.n	8002910 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002908:	2100      	movs	r1, #0
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f007 fdb6 	bl	800a47c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f007 fbf9 	bl	800a108 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800291e:	b29a      	uxth	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002928:	b292      	uxth	r2, r2
 800292a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800292e:	e099      	b.n	8002a64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002936:	2b00      	cmp	r3, #0
 8002938:	d027      	beq.n	800298a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0208 	orr.w	r2, r2, #8
 800294c:	b292      	uxth	r2, r2
 800294e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800295a:	b29a      	uxth	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002964:	b292      	uxth	r2, r2
 8002966:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002972:	b29a      	uxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0204 	orr.w	r2, r2, #4
 800297c:	b292      	uxth	r2, r2
 800297e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f007 fba6 	bl	800a0d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002988:	e06c      	b.n	8002a64 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002990:	2b00      	cmp	r3, #0
 8002992:	d040      	beq.n	8002a16 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800299c:	b29a      	uxth	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029a6:	b292      	uxth	r2, r2
 80029a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d12b      	bne.n	8002a0e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80029be:	b29a      	uxth	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0204 	orr.w	r2, r2, #4
 80029c8:	b292      	uxth	r2, r2
 80029ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0208 	orr.w	r2, r2, #8
 80029e0:	b292      	uxth	r2, r2
 80029e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002a04:	2101      	movs	r1, #1
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f007 fd38 	bl	800a47c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002a0c:	e02a      	b.n	8002a64 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f007 fb60 	bl	800a0d4 <HAL_PCD_SuspendCallback>
    return;
 8002a14:	e026      	b.n	8002a64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00f      	beq.n	8002a40 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a32:	b292      	uxth	r2, r2
 8002a34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f007 fb1e 	bl	800a07a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002a3e:	e011      	b.n	8002a64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a5c:	b292      	uxth	r2, r2
 8002a5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002a62:	bf00      	nop
  }
}
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_PCD_SetAddress+0x1a>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e012      	b.n	8002aaa <HAL_PCD_SetAddress+0x40>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f005 fb58 	bl	8008150 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	4608      	mov	r0, r1
 8002abc:	4611      	mov	r1, r2
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	70fb      	strb	r3, [r7, #3]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	803b      	strh	r3, [r7, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	da0e      	bge.n	8002af6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	f003 0207 	and.w	r2, r3, #7
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	3310      	adds	r3, #16
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	705a      	strb	r2, [r3, #1]
 8002af4:	e00e      	b.n	8002b14 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	f003 0207 	and.w	r2, r3, #7
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002b20:	883b      	ldrh	r3, [r7, #0]
 8002b22:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	78ba      	ldrb	r2, [r7, #2]
 8002b2e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b30:	78bb      	ldrb	r3, [r7, #2]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d102      	bne.n	8002b3c <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_PCD_EP_Open+0x98>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e00e      	b.n	8002b68 <HAL_PCD_EP_Open+0xb6>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68f9      	ldr	r1, [r7, #12]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f003 fd7b 	bl	8006654 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002b66:	7afb      	ldrb	r3, [r7, #11]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	da0e      	bge.n	8002ba2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	f003 0207 	and.w	r2, r3, #7
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	3310      	adds	r3, #16
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	4413      	add	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	705a      	strb	r2, [r3, #1]
 8002ba0:	e00e      	b.n	8002bc0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	f003 0207 	and.w	r2, r3, #7
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_PCD_EP_Close+0x6a>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e00e      	b.n	8002bf8 <HAL_PCD_EP_Close+0x88>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68f9      	ldr	r1, [r7, #12]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f004 fa1b 	bl	8007024 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c10:	7afb      	ldrb	r3, [r7, #11]
 8002c12:	f003 0207 	and.w	r2, r3, #7
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4413      	add	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2200      	movs	r2, #0
 8002c38:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c40:	7afb      	ldrb	r3, [r7, #11]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6979      	ldr	r1, [r7, #20]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f004 fbd3 	bl	80073fe <USB_EPStartXfer>

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	f003 0207 	and.w	r2, r3, #7
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	440b      	add	r3, r1
 8002c80:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002c84:	681b      	ldr	r3, [r3, #0]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca2:	7afb      	ldrb	r3, [r7, #11]
 8002ca4:	f003 0207 	and.w	r2, r3, #7
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	3310      	adds	r3, #16
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cde:	7afb      	ldrb	r3, [r7, #11]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6979      	ldr	r1, [r7, #20]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f004 fb84 	bl	80073fe <USB_EPStartXfer>

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	7912      	ldrb	r2, [r2, #4]
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e03e      	b.n	8002d9c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	da0e      	bge.n	8002d44 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	f003 0207 	and.w	r2, r3, #7
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	3310      	adds	r3, #16
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	705a      	strb	r2, [r3, #1]
 8002d42:	e00c      	b.n	8002d5e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_PCD_EP_SetStall+0x7e>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e00e      	b.n	8002d9c <HAL_PCD_EP_SetStall+0x9c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68f9      	ldr	r1, [r7, #12]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f005 f8e5 	bl	8007f5c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	7912      	ldrb	r2, [r2, #4]
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e040      	b.n	8002e44 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	da0e      	bge.n	8002de8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	f003 0207 	and.w	r2, r3, #7
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	3310      	adds	r3, #16
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	705a      	strb	r2, [r3, #1]
 8002de6:	e00e      	b.n	8002e06 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	f003 0207 	and.w	r2, r3, #7
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_PCD_EP_ClrStall+0x82>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e00e      	b.n	8002e44 <HAL_PCD_EP_ClrStall+0xa0>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68f9      	ldr	r1, [r7, #12]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f005 f8e2 	bl	8007ffe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b092      	sub	sp, #72	@ 0x48
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e54:	e333      	b.n	80034be <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e5e:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002e60:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8002e6c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f040 8108 	bne.w	8003086 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002e76:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d14c      	bne.n	8002f1a <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e90:	813b      	strh	r3, [r7, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	893b      	ldrh	r3, [r7, #8]
 8002e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3310      	adds	r3, #16
 8002ea8:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ed0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ed2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	441a      	add	r2, r3
 8002edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ede:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f007 f8af 	bl	800a046 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	7b1b      	ldrb	r3, [r3, #12]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 82e5 	beq.w	80034be <PCD_EP_ISR_Handler+0x672>
 8002ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f040 82e0 	bne.w	80034be <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	7b1b      	ldrb	r3, [r3, #12]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	731a      	strb	r2, [r3, #12]
 8002f18:	e2d1      	b.n	80034be <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f20:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002f2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d032      	beq.n	8002f9a <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f5a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f68:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f6c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	f005 f96b 	bl	800824a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002f80:	4013      	ands	r3, r2
 8002f82:	817b      	strh	r3, [r7, #10]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	897a      	ldrh	r2, [r7, #10]
 8002f8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f8e:	b292      	uxth	r2, r2
 8002f90:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f007 f82a 	bl	8009fec <HAL_PCD_SetupStageCallback>
 8002f98:	e291      	b.n	80034be <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f9a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f280 828d 	bge.w	80034be <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	81fb      	strh	r3, [r7, #14]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	89fa      	ldrh	r2, [r7, #14]
 8002fba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002fbe:	b292      	uxth	r2, r2
 8002fc0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fe8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d019      	beq.n	8003026 <PCD_EP_ISR_Handler+0x1da>
 8002ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d015      	beq.n	8003026 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003000:	6959      	ldr	r1, [r3, #20]
 8003002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003004:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003008:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800300a:	b29b      	uxth	r3, r3
 800300c:	f005 f91d 	bl	800824a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	441a      	add	r2, r3
 800301a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800301c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800301e:	2100      	movs	r1, #0
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f006 fff5 	bl	800a010 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800302e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003034:	2b00      	cmp	r3, #0
 8003036:	f040 8242 	bne.w	80034be <PCD_EP_ISR_Handler+0x672>
 800303a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800303c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003040:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003044:	f000 823b 	beq.w	80034be <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003058:	81bb      	strh	r3, [r7, #12]
 800305a:	89bb      	ldrh	r3, [r7, #12]
 800305c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003060:	81bb      	strh	r3, [r7, #12]
 8003062:	89bb      	ldrh	r3, [r7, #12]
 8003064:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003068:	81bb      	strh	r3, [r7, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	89bb      	ldrh	r3, [r7, #12]
 8003070:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003074:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003078:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800307c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003080:	b29b      	uxth	r3, r3
 8003082:	8013      	strh	r3, [r2, #0]
 8003084:	e21b      	b.n	80034be <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003098:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800309c:	2b00      	cmp	r3, #0
 800309e:	f280 80f1 	bge.w	8003284 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80030b8:	4013      	ands	r3, r2
 80030ba:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80030cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80030d0:	b292      	uxth	r2, r2
 80030d2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80030d4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4413      	add	r3, r2
 80030e8:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80030ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030ec:	7b1b      	ldrb	r3, [r3, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d123      	bne.n	800313a <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	4413      	add	r3, r2
 800310c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003116:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800311a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 808b 	beq.w	800323a <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800312a:	6959      	ldr	r1, [r3, #20]
 800312c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800312e:	88da      	ldrh	r2, [r3, #6]
 8003130:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003134:	f005 f889 	bl	800824a <USB_ReadPMA>
 8003138:	e07f      	b.n	800323a <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800313a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800313c:	78db      	ldrb	r3, [r3, #3]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d109      	bne.n	8003156 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003142:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003144:	461a      	mov	r2, r3
 8003146:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f9c6 	bl	80034da <HAL_PCD_EP_DB_Receive>
 800314e:	4603      	mov	r3, r0
 8003150:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003154:	e071      	b.n	800323a <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800316c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003170:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	441a      	add	r2, r3
 8003180:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003182:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003186:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800318a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800318e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003192:	b29b      	uxth	r3, r3
 8003194:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d022      	beq.n	80031f6 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	4413      	add	r3, r2
 80031ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031d4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80031d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d02c      	beq.n	800323a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031e6:	6959      	ldr	r1, [r3, #20]
 80031e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ea:	891a      	ldrh	r2, [r3, #8]
 80031ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80031f0:	f005 f82b 	bl	800824a <USB_ReadPMA>
 80031f4:	e021      	b.n	800323a <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031fe:	b29b      	uxth	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	4413      	add	r3, r2
 8003210:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800321a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800321e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800322c:	6959      	ldr	r1, [r3, #20]
 800322e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003230:	895a      	ldrh	r2, [r3, #10]
 8003232:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003236:	f005 f808 	bl	800824a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800323a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800323c:	69da      	ldr	r2, [r3, #28]
 800323e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003242:	441a      	add	r2, r3
 8003244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003246:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003250:	441a      	add	r2, r3
 8003252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003254:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <PCD_EP_ISR_Handler+0x41e>
 800325e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	429a      	cmp	r2, r3
 8003268:	d206      	bcs.n	8003278 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800326a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	4619      	mov	r1, r3
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f006 fecd 	bl	800a010 <HAL_PCD_DataOutStageCallback>
 8003276:	e005      	b.n	8003284 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800327e:	4618      	mov	r0, r3
 8003280:	f004 f8bd 	bl	80073fe <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003284:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8117 	beq.w	80034be <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003290:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	3310      	adds	r3, #16
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80032ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	441a      	add	r2, r3
 80032ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80032d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032d8:	b29b      	uxth	r3, r3
 80032da:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80032dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032de:	78db      	ldrb	r3, [r3, #3]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	f040 80a1 	bne.w	8003428 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80032e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032e8:	2200      	movs	r2, #0
 80032ea:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80032ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ee:	7b1b      	ldrb	r3, [r3, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 8092 	beq.w	800341a <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80032f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d046      	beq.n	800338e <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003302:	785b      	ldrb	r3, [r3, #1]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d126      	bne.n	8003356 <PCD_EP_ISR_Handler+0x50a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003316:	b29b      	uxth	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	4413      	add	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	00da      	lsls	r2, r3, #3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	4413      	add	r3, r2
 800332a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800333a:	b29a      	uxth	r2, r3
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	801a      	strh	r2, [r3, #0]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	b29b      	uxth	r3, r3
 8003346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800334a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800334e:	b29a      	uxth	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	801a      	strh	r2, [r3, #0]
 8003354:	e061      	b.n	800341a <PCD_EP_ISR_Handler+0x5ce>
 8003356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003358:	785b      	ldrb	r3, [r3, #1]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d15d      	bne.n	800341a <PCD_EP_ISR_Handler+0x5ce>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800336c:	b29b      	uxth	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	4413      	add	r3, r2
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	00da      	lsls	r2, r3, #3
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	4413      	add	r3, r2
 8003380:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003384:	61bb      	str	r3, [r7, #24]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2200      	movs	r2, #0
 800338a:	801a      	strh	r2, [r3, #0]
 800338c:	e045      	b.n	800341a <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003396:	785b      	ldrb	r3, [r3, #1]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d126      	bne.n	80033ea <PCD_EP_ISR_Handler+0x59e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	4413      	add	r3, r2
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	00da      	lsls	r2, r3, #3
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	4413      	add	r3, r2
 80033be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80033c2:	623b      	str	r3, [r7, #32]
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	801a      	strh	r2, [r3, #0]
 80033e8:	e017      	b.n	800341a <PCD_EP_ISR_Handler+0x5ce>
 80033ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033ec:	785b      	ldrb	r3, [r3, #1]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d113      	bne.n	800341a <PCD_EP_ISR_Handler+0x5ce>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003400:	4413      	add	r3, r2
 8003402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	00da      	lsls	r2, r3, #3
 800340a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340c:	4413      	add	r3, r2
 800340e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003412:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003416:	2200      	movs	r2, #0
 8003418:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800341a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	4619      	mov	r1, r3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f006 fe10 	bl	800a046 <HAL_PCD_DataInStageCallback>
 8003426:	e04a      	b.n	80034be <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003428:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800342a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d13f      	bne.n	80034b2 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800343a:	b29b      	uxth	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	4413      	add	r3, r2
 800344c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003456:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800345a:	699a      	ldr	r2, [r3, #24]
 800345c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800345e:	429a      	cmp	r2, r3
 8003460:	d906      	bls.n	8003470 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003468:	1ad2      	subs	r2, r2, r3
 800346a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800346c:	619a      	str	r2, [r3, #24]
 800346e:	e002      	b.n	8003476 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003472:	2200      	movs	r2, #0
 8003474:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800347e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	4619      	mov	r1, r3
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f006 fdde 	bl	800a046 <HAL_PCD_DataInStageCallback>
 800348a:	e018      	b.n	80034be <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800348c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003492:	441a      	add	r2, r3
 8003494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003496:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800349a:	69da      	ldr	r2, [r3, #28]
 800349c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800349e:	441a      	add	r2, r3
 80034a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034a2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034aa:	4618      	mov	r0, r3
 80034ac:	f003 ffa7 	bl	80073fe <USB_EPStartXfer>
 80034b0:	e005      	b.n	80034be <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80034b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80034b4:	461a      	mov	r2, r3
 80034b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f917 	bl	80036ec <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	b21b      	sxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f6ff acc3 	blt.w	8002e56 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3748      	adds	r7, #72	@ 0x48
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b088      	sub	sp, #32
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	4613      	mov	r3, r2
 80034e6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d07c      	beq.n	80035ec <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	4413      	add	r3, r2
 800350c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003516:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	8b7b      	ldrh	r3, [r7, #26]
 800351e:	429a      	cmp	r2, r3
 8003520:	d306      	bcc.n	8003530 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	8b7b      	ldrh	r3, [r7, #26]
 8003528:	1ad2      	subs	r2, r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	619a      	str	r2, [r3, #24]
 800352e:	e002      	b.n	8003536 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2200      	movs	r2, #0
 8003534:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d123      	bne.n	8003586 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003558:	833b      	strh	r3, [r7, #24]
 800355a:	8b3b      	ldrh	r3, [r7, #24]
 800355c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003560:	833b      	strh	r3, [r7, #24]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	441a      	add	r2, r3
 8003570:	8b3b      	ldrh	r3, [r7, #24]
 8003572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800357a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800357e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003582:	b29b      	uxth	r3, r3
 8003584:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01f      	beq.n	80035d0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035aa:	82fb      	strh	r3, [r7, #22]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	441a      	add	r2, r3
 80035ba:	8afb      	ldrh	r3, [r7, #22]
 80035bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035d0:	8b7b      	ldrh	r3, [r7, #26]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 8085 	beq.w	80036e2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	6959      	ldr	r1, [r3, #20]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	891a      	ldrh	r2, [r3, #8]
 80035e4:	8b7b      	ldrh	r3, [r7, #26]
 80035e6:	f004 fe30 	bl	800824a <USB_ReadPMA>
 80035ea:	e07a      	b.n	80036e2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4413      	add	r3, r2
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	4413      	add	r3, r2
 8003606:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003610:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	8b7b      	ldrh	r3, [r7, #26]
 8003618:	429a      	cmp	r2, r3
 800361a:	d306      	bcc.n	800362a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	699a      	ldr	r2, [r3, #24]
 8003620:	8b7b      	ldrh	r3, [r7, #26]
 8003622:	1ad2      	subs	r2, r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	619a      	str	r2, [r3, #24]
 8003628:	e002      	b.n	8003630 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2200      	movs	r2, #0
 800362e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d123      	bne.n	8003680 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	b29b      	uxth	r3, r3
 800364a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800364e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003652:	83fb      	strh	r3, [r7, #30]
 8003654:	8bfb      	ldrh	r3, [r7, #30]
 8003656:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800365a:	83fb      	strh	r3, [r7, #30]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	441a      	add	r2, r3
 800366a:	8bfb      	ldrh	r3, [r7, #30]
 800366c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003670:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003674:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800367c:	b29b      	uxth	r3, r3
 800367e:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d11f      	bne.n	80036ca <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a4:	83bb      	strh	r3, [r7, #28]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	441a      	add	r2, r3
 80036b4:	8bbb      	ldrh	r3, [r7, #28]
 80036b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80036ca:	8b7b      	ldrh	r3, [r7, #26]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	6959      	ldr	r1, [r3, #20]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	895a      	ldrh	r2, [r3, #10]
 80036dc:	8b7b      	ldrh	r3, [r7, #26]
 80036de:	f004 fdb4 	bl	800824a <USB_ReadPMA>
    }
  }

  return count;
 80036e2:	8b7b      	ldrh	r3, [r7, #26]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3720      	adds	r7, #32
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b0a6      	sub	sp, #152	@ 0x98
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 81f7 	beq.w	8003af4 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800370e:	b29b      	uxth	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	4413      	add	r3, r2
 8003720:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800372a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003736:	429a      	cmp	r2, r3
 8003738:	d907      	bls.n	800374a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003742:	1ad2      	subs	r2, r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	619a      	str	r2, [r3, #24]
 8003748:	e002      	b.n	8003750 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2200      	movs	r2, #0
 800374e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f040 80e1 	bne.w	800391c <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d126      	bne.n	80037b0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	633b      	str	r3, [r7, #48]	@ 0x30
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003770:	b29b      	uxth	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003776:	4413      	add	r3, r2
 8003778:	633b      	str	r3, [r7, #48]	@ 0x30
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	00da      	lsls	r2, r3, #3
 8003780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003782:	4413      	add	r3, r2
 8003784:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003788:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800378a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003794:	b29a      	uxth	r2, r3
 8003796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003798:	801a      	strh	r2, [r3, #0]
 800379a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ac:	801a      	strh	r2, [r3, #0]
 80037ae:	e01a      	b.n	80037e6 <HAL_PCD_EP_DB_Transmit+0xfa>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	785b      	ldrb	r3, [r3, #1]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d116      	bne.n	80037e6 <HAL_PCD_EP_DB_Transmit+0xfa>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	461a      	mov	r2, r3
 80037ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037cc:	4413      	add	r3, r2
 80037ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	00da      	lsls	r2, r3, #3
 80037d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d8:	4413      	add	r3, r2
 80037da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80037de:	637b      	str	r3, [r7, #52]	@ 0x34
 80037e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037e2:	2200      	movs	r2, #0
 80037e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d126      	bne.n	8003842 <HAL_PCD_EP_DB_Transmit+0x156>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	623b      	str	r3, [r7, #32]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003802:	b29b      	uxth	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	4413      	add	r3, r2
 800380a:	623b      	str	r3, [r7, #32]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	00da      	lsls	r2, r3, #3
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	4413      	add	r3, r2
 8003816:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	b29b      	uxth	r3, r3
 8003822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003826:	b29a      	uxth	r2, r3
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	801a      	strh	r2, [r3, #0]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800383a:	b29a      	uxth	r2, r3
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	801a      	strh	r2, [r3, #0]
 8003840:	e017      	b.n	8003872 <HAL_PCD_EP_DB_Transmit+0x186>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	785b      	ldrb	r3, [r3, #1]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d113      	bne.n	8003872 <HAL_PCD_EP_DB_Transmit+0x186>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003852:	b29b      	uxth	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003858:	4413      	add	r3, r2
 800385a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	00da      	lsls	r2, r3, #3
 8003862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003864:	4413      	add	r3, r2
 8003866:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	2200      	movs	r2, #0
 8003870:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	78db      	ldrb	r3, [r3, #3]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d123      	bne.n	80038c2 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	b29b      	uxth	r3, r3
 800388c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003890:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003894:	837b      	strh	r3, [r7, #26]
 8003896:	8b7b      	ldrh	r3, [r7, #26]
 8003898:	f083 0320 	eor.w	r3, r3, #32
 800389c:	837b      	strh	r3, [r7, #26]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	441a      	add	r2, r3
 80038ac:	8b7b      	ldrh	r3, [r7, #26]
 80038ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038be:	b29b      	uxth	r3, r3
 80038c0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	4619      	mov	r1, r3
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f006 fbbc 	bl	800a046 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01f      	beq.n	8003918 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038f2:	833b      	strh	r3, [r7, #24]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	441a      	add	r2, r3
 8003902:	8b3b      	ldrh	r3, [r7, #24]
 8003904:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003908:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800390c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003914:	b29b      	uxth	r3, r3
 8003916:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e31f      	b.n	8003f5c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d021      	beq.n	800396a <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800393c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003940:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	441a      	add	r2, r3
 8003952:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003956:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800395a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800395e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003966:	b29b      	uxth	r3, r3
 8003968:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003970:	2b01      	cmp	r3, #1
 8003972:	f040 82ca 	bne.w	8003f0a <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800397e:	441a      	add	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	69da      	ldr	r2, [r3, #28]
 8003988:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800398c:	441a      	add	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	6a1a      	ldr	r2, [r3, #32]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	429a      	cmp	r2, r3
 800399c:	d309      	bcc.n	80039b2 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039aa:	1ad2      	subs	r2, r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	621a      	str	r2, [r3, #32]
 80039b0:	e015      	b.n	80039de <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d107      	bne.n	80039ca <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80039ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80039be:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80039c8:	e009      	b.n	80039de <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2200      	movs	r2, #0
 80039dc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	785b      	ldrb	r3, [r3, #1]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d15f      	bne.n	8003aa6 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039fa:	4413      	add	r3, r2
 80039fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	00da      	lsls	r2, r3, #3
 8003a04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a06:	4413      	add	r3, r2
 8003a08:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a1c:	801a      	strh	r2, [r3, #0]
 8003a1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <HAL_PCD_EP_DB_Transmit+0x34e>
 8003a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a36:	801a      	strh	r2, [r3, #0]
 8003a38:	e051      	b.n	8003ade <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003a3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a3e:	d816      	bhi.n	8003a6e <HAL_PCD_EP_DB_Transmit+0x382>
 8003a40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003a50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a52:	3301      	adds	r3, #1
 8003a54:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	029b      	lsls	r3, r3, #10
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	4313      	orrs	r3, r2
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a6a:	801a      	strh	r2, [r3, #0]
 8003a6c:	e037      	b.n	8003ade <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003a6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a76:	f003 031f 	and.w	r3, r3, #31
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <HAL_PCD_EP_DB_Transmit+0x398>
 8003a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a80:	3b01      	subs	r3, #1
 8003a82:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	029b      	lsls	r3, r3, #10
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	4313      	orrs	r3, r2
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa2:	801a      	strh	r2, [r3, #0]
 8003aa4:	e01b      	b.n	8003ade <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	785b      	ldrb	r3, [r3, #1]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d117      	bne.n	8003ade <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ac2:	4413      	add	r3, r2
 8003ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	00da      	lsls	r2, r3, #3
 8003acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ace:	4413      	add	r3, r2
 8003ad0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ad6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003adc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	6959      	ldr	r1, [r3, #20]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	891a      	ldrh	r2, [r3, #8]
 8003aea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	f004 fb6a 	bl	80081c6 <USB_WritePMA>
 8003af2:	e20a      	b.n	8003f0a <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b18:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d307      	bcc.n	8003b38 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003b30:	1ad2      	subs	r2, r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	619a      	str	r2, [r3, #24]
 8003b36:	e002      	b.n	8003b3e <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f040 80f6 	bne.w	8003d34 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	785b      	ldrb	r3, [r3, #1]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d126      	bne.n	8003b9e <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b64:	4413      	add	r3, r2
 8003b66:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	00da      	lsls	r2, r3, #3
 8003b6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b70:	4413      	add	r3, r2
 8003b72:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b76:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b86:	801a      	strh	r2, [r3, #0]
 8003b88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b9a:	801a      	strh	r2, [r3, #0]
 8003b9c:	e01a      	b.n	8003bd4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	785b      	ldrb	r3, [r3, #1]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d116      	bne.n	8003bd4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bba:	4413      	add	r3, r2
 8003bbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	00da      	lsls	r2, r3, #3
 8003bc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003bcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	785b      	ldrb	r3, [r3, #1]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d12f      	bne.n	8003c44 <HAL_PCD_EP_DB_Transmit+0x558>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	00da      	lsls	r2, r3, #3
 8003c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c28:	801a      	strh	r2, [r3, #0]
 8003c2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c40:	801a      	strh	r2, [r3, #0]
 8003c42:	e01c      	b.n	8003c7e <HAL_PCD_EP_DB_Transmit+0x592>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	785b      	ldrb	r3, [r3, #1]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d118      	bne.n	8003c7e <HAL_PCD_EP_DB_Transmit+0x592>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	00da      	lsls	r2, r3, #3
 8003c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	78db      	ldrb	r3, [r3, #3]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d127      	bne.n	8003cd6 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ca0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003ca4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003ca8:	f083 0320 	eor.w	r3, r3, #32
 8003cac:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	441a      	add	r2, r3
 8003cbe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003cc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f006 f9b2 	bl	800a046 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ce2:	88fb      	ldrh	r3, [r7, #6]
 8003ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d121      	bne.n	8003d30 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d06:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	441a      	add	r2, r3
 8003d18:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8003d1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e113      	b.n	8003f5c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d121      	bne.n	8003d82 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d58:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	441a      	add	r2, r3
 8003d6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003d6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	f040 80be 	bne.w	8003f0a <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003d96:	441a      	add	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003da4:	441a      	add	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	6a1a      	ldr	r2, [r3, #32]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d309      	bcc.n	8003dca <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6a1a      	ldr	r2, [r3, #32]
 8003dc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dc2:	1ad2      	subs	r2, r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	621a      	str	r2, [r3, #32]
 8003dc8:	e015      	b.n	8003df6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d107      	bne.n	8003de2 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8003dd2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003dd6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003de0:	e009      	b.n	8003df6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2200      	movs	r2, #0
 8003dec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d15f      	bne.n	8003ec4 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e18:	4413      	add	r3, r2
 8003e1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	00da      	lsls	r2, r3, #3
 8003e22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e24:	4413      	add	r3, r2
 8003e26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e3a:	801a      	strh	r2, [r3, #0]
 8003e3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <HAL_PCD_EP_DB_Transmit+0x76c>
 8003e42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e54:	801a      	strh	r2, [r3, #0]
 8003e56:	e04e      	b.n	8003ef6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003e58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e5c:	d816      	bhi.n	8003e8c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003e5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e60:	085b      	lsrs	r3, r3, #1
 8003e62:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_PCD_EP_DB_Transmit+0x788>
 8003e6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e70:	3301      	adds	r3, #1
 8003e72:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	029b      	lsls	r3, r3, #10
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	4313      	orrs	r3, r2
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e88:	801a      	strh	r2, [r3, #0]
 8003e8a:	e034      	b.n	8003ef6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003e8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003e9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ea2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	029b      	lsls	r3, r3, #10
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ec0:	801a      	strh	r2, [r3, #0]
 8003ec2:	e018      	b.n	8003ef6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	785b      	ldrb	r3, [r3, #1]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d114      	bne.n	8003ef6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003eda:	4413      	add	r3, r2
 8003edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	00da      	lsls	r2, r3, #3
 8003ee4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003eec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003eee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ef4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	6959      	ldr	r1, [r3, #20]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	895a      	ldrh	r2, [r3, #10]
 8003f02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f004 f95e 	bl	80081c6 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f24:	82fb      	strh	r3, [r7, #22]
 8003f26:	8afb      	ldrh	r3, [r7, #22]
 8003f28:	f083 0310 	eor.w	r3, r3, #16
 8003f2c:	82fb      	strh	r3, [r7, #22]
 8003f2e:	8afb      	ldrh	r3, [r7, #22]
 8003f30:	f083 0320 	eor.w	r3, r3, #32
 8003f34:	82fb      	strh	r3, [r7, #22]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	441a      	add	r2, r3
 8003f44:	8afb      	ldrh	r3, [r7, #22]
 8003f46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3798      	adds	r7, #152	@ 0x98
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	817b      	strh	r3, [r7, #10]
 8003f72:	4613      	mov	r3, r2
 8003f74:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003f76:	897b      	ldrh	r3, [r7, #10]
 8003f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00b      	beq.n	8003f9a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f82:	897b      	ldrh	r3, [r7, #10]
 8003f84:	f003 0207 	and.w	r2, r3, #7
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	3310      	adds	r3, #16
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4413      	add	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	e009      	b.n	8003fae <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f9a:	897a      	ldrh	r2, [r7, #10]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003fae:	893b      	ldrh	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d107      	bne.n	8003fc4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	80da      	strh	r2, [r3, #6]
 8003fc2:	e00b      	b.n	8003fdc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0c1b      	lsrs	r3, r3, #16
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b085      	sub	sp, #20
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800400e:	b29b      	uxth	r3, r3
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004022:	b29b      	uxth	r3, r3
 8004024:	f043 0302 	orr.w	r3, r3, #2
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d141      	bne.n	80040d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800404e:	4b4b      	ldr	r3, [pc, #300]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800405a:	d131      	bne.n	80040c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800405c:	4b47      	ldr	r3, [pc, #284]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004062:	4a46      	ldr	r2, [pc, #280]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004068:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800406c:	4b43      	ldr	r3, [pc, #268]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004074:	4a41      	ldr	r2, [pc, #260]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004076:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800407a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800407c:	4b40      	ldr	r3, [pc, #256]	@ (8004180 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2232      	movs	r2, #50	@ 0x32
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	4a3f      	ldr	r2, [pc, #252]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004088:	fba2 2303 	umull	r2, r3, r2, r3
 800408c:	0c9b      	lsrs	r3, r3, #18
 800408e:	3301      	adds	r3, #1
 8004090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004092:	e002      	b.n	800409a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3b01      	subs	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800409a:	4b38      	ldr	r3, [pc, #224]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a6:	d102      	bne.n	80040ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f2      	bne.n	8004094 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040ae:	4b33      	ldr	r3, [pc, #204]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ba:	d158      	bne.n	800416e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e057      	b.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040c0:	4b2e      	ldr	r3, [pc, #184]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040c6:	4a2d      	ldr	r2, [pc, #180]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80040d0:	e04d      	b.n	800416e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040d8:	d141      	bne.n	800415e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040da:	4b28      	ldr	r3, [pc, #160]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e6:	d131      	bne.n	800414c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040e8:	4b24      	ldr	r3, [pc, #144]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040ee:	4a23      	ldr	r2, [pc, #140]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040f8:	4b20      	ldr	r3, [pc, #128]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004100:	4a1e      	ldr	r2, [pc, #120]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004106:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004108:	4b1d      	ldr	r3, [pc, #116]	@ (8004180 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2232      	movs	r2, #50	@ 0x32
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	4a1c      	ldr	r2, [pc, #112]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	0c9b      	lsrs	r3, r3, #18
 800411a:	3301      	adds	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800411e:	e002      	b.n	8004126 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3b01      	subs	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004126:	4b15      	ldr	r3, [pc, #84]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800412e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004132:	d102      	bne.n	800413a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f2      	bne.n	8004120 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800413a:	4b10      	ldr	r3, [pc, #64]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004146:	d112      	bne.n	800416e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e011      	b.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800414c:	4b0b      	ldr	r3, [pc, #44]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004152:	4a0a      	ldr	r2, [pc, #40]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004158:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800415c:	e007      	b.n	800416e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800415e:	4b07      	ldr	r3, [pc, #28]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004166:	4a05      	ldr	r2, [pc, #20]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004168:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800416c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	40007000 	.word	0x40007000
 8004180:	20000080 	.word	0x20000080
 8004184:	431bde83 	.word	0x431bde83

08004188 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800418c:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a04      	ldr	r2, [pc, #16]	@ (80041a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004192:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004196:	6093      	str	r3, [r2, #8]
}
 8004198:	bf00      	nop
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40007000 	.word	0x40007000

080041a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e2fe      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d075      	beq.n	80042b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041c6:	4b97      	ldr	r3, [pc, #604]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041d0:	4b94      	ldr	r3, [pc, #592]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	2b0c      	cmp	r3, #12
 80041de:	d102      	bne.n	80041e6 <HAL_RCC_OscConfig+0x3e>
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d002      	beq.n	80041ec <HAL_RCC_OscConfig+0x44>
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d10b      	bne.n	8004204 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ec:	4b8d      	ldr	r3, [pc, #564]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d05b      	beq.n	80042b0 <HAL_RCC_OscConfig+0x108>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d157      	bne.n	80042b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e2d9      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800420c:	d106      	bne.n	800421c <HAL_RCC_OscConfig+0x74>
 800420e:	4b85      	ldr	r3, [pc, #532]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a84      	ldr	r2, [pc, #528]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e01d      	b.n	8004258 <HAL_RCC_OscConfig+0xb0>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0x98>
 8004226:	4b7f      	ldr	r3, [pc, #508]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a7e      	ldr	r2, [pc, #504]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 800422c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	4b7c      	ldr	r3, [pc, #496]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a7b      	ldr	r2, [pc, #492]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e00b      	b.n	8004258 <HAL_RCC_OscConfig+0xb0>
 8004240:	4b78      	ldr	r3, [pc, #480]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a77      	ldr	r2, [pc, #476]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 8004246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	4b75      	ldr	r3, [pc, #468]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a74      	ldr	r2, [pc, #464]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 8004252:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d013      	beq.n	8004288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fd fc26 	bl	8001ab0 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004268:	f7fd fc22 	bl	8001ab0 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	@ 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e29e      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800427a:	4b6a      	ldr	r3, [pc, #424]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0xc0>
 8004286:	e014      	b.n	80042b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fd fc12 	bl	8001ab0 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004290:	f7fd fc0e 	bl	8001ab0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	@ 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e28a      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042a2:	4b60      	ldr	r3, [pc, #384]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0xe8>
 80042ae:	e000      	b.n	80042b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d075      	beq.n	80043aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042be:	4b59      	ldr	r3, [pc, #356]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c8:	4b56      	ldr	r3, [pc, #344]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b0c      	cmp	r3, #12
 80042d6:	d102      	bne.n	80042de <HAL_RCC_OscConfig+0x136>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d002      	beq.n	80042e4 <HAL_RCC_OscConfig+0x13c>
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d11f      	bne.n	8004324 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_OscConfig+0x154>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e25d      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fc:	4b49      	ldr	r3, [pc, #292]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	061b      	lsls	r3, r3, #24
 800430a:	4946      	ldr	r1, [pc, #280]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 800430c:	4313      	orrs	r3, r2
 800430e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004310:	4b45      	ldr	r3, [pc, #276]	@ (8004428 <HAL_RCC_OscConfig+0x280>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7fd fb7f 	bl	8001a18 <HAL_InitTick>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d043      	beq.n	80043a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e249      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d023      	beq.n	8004374 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800432c:	4b3d      	ldr	r3, [pc, #244]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a3c      	ldr	r2, [pc, #240]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 8004332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7fd fbba 	bl	8001ab0 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004340:	f7fd fbb6 	bl	8001ab0 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e232      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004352:	4b34      	ldr	r3, [pc, #208]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435e:	4b31      	ldr	r3, [pc, #196]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	061b      	lsls	r3, r3, #24
 800436c:	492d      	ldr	r1, [pc, #180]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 800436e:	4313      	orrs	r3, r2
 8004370:	604b      	str	r3, [r1, #4]
 8004372:	e01a      	b.n	80043aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004374:	4b2b      	ldr	r3, [pc, #172]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a2a      	ldr	r2, [pc, #168]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 800437a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800437e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fd fb96 	bl	8001ab0 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004388:	f7fd fb92 	bl	8001ab0 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e20e      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800439a:	4b22      	ldr	r3, [pc, #136]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f0      	bne.n	8004388 <HAL_RCC_OscConfig+0x1e0>
 80043a6:	e000      	b.n	80043aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d041      	beq.n	800443a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01c      	beq.n	80043f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043be:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 80043c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043c4:	4a17      	ldr	r2, [pc, #92]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 80043c6:	f043 0301 	orr.w	r3, r3, #1
 80043ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ce:	f7fd fb6f 	bl	8001ab0 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d6:	f7fd fb6b 	bl	8001ab0 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e1e7      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 80043ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0ef      	beq.n	80043d6 <HAL_RCC_OscConfig+0x22e>
 80043f6:	e020      	b.n	800443a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 80043fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043fe:	4a09      	ldr	r2, [pc, #36]	@ (8004424 <HAL_RCC_OscConfig+0x27c>)
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004408:	f7fd fb52 	bl	8001ab0 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800440e:	e00d      	b.n	800442c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004410:	f7fd fb4e 	bl	8001ab0 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d906      	bls.n	800442c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e1ca      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
 8004422:	bf00      	nop
 8004424:	40021000 	.word	0x40021000
 8004428:	20000084 	.word	0x20000084
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800442c:	4b8c      	ldr	r3, [pc, #560]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 800442e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1ea      	bne.n	8004410 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 80a6 	beq.w	8004594 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004448:	2300      	movs	r3, #0
 800444a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800444c:	4b84      	ldr	r3, [pc, #528]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 800444e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_RCC_OscConfig+0x2b4>
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <HAL_RCC_OscConfig+0x2b6>
 800445c:	2300      	movs	r3, #0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00d      	beq.n	800447e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004462:	4b7f      	ldr	r3, [pc, #508]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 8004464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004466:	4a7e      	ldr	r2, [pc, #504]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 8004468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800446c:	6593      	str	r3, [r2, #88]	@ 0x58
 800446e:	4b7c      	ldr	r3, [pc, #496]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800447a:	2301      	movs	r3, #1
 800447c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800447e:	4b79      	ldr	r3, [pc, #484]	@ (8004664 <HAL_RCC_OscConfig+0x4bc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d118      	bne.n	80044bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800448a:	4b76      	ldr	r3, [pc, #472]	@ (8004664 <HAL_RCC_OscConfig+0x4bc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a75      	ldr	r2, [pc, #468]	@ (8004664 <HAL_RCC_OscConfig+0x4bc>)
 8004490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004496:	f7fd fb0b 	bl	8001ab0 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449e:	f7fd fb07 	bl	8001ab0 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e183      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004664 <HAL_RCC_OscConfig+0x4bc>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d108      	bne.n	80044d6 <HAL_RCC_OscConfig+0x32e>
 80044c4:	4b66      	ldr	r3, [pc, #408]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ca:	4a65      	ldr	r2, [pc, #404]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044d4:	e024      	b.n	8004520 <HAL_RCC_OscConfig+0x378>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b05      	cmp	r3, #5
 80044dc:	d110      	bne.n	8004500 <HAL_RCC_OscConfig+0x358>
 80044de:	4b60      	ldr	r3, [pc, #384]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e4:	4a5e      	ldr	r2, [pc, #376]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 80044e6:	f043 0304 	orr.w	r3, r3, #4
 80044ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f4:	4a5a      	ldr	r2, [pc, #360]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044fe:	e00f      	b.n	8004520 <HAL_RCC_OscConfig+0x378>
 8004500:	4b57      	ldr	r3, [pc, #348]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004506:	4a56      	ldr	r2, [pc, #344]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004510:	4b53      	ldr	r3, [pc, #332]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004516:	4a52      	ldr	r2, [pc, #328]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 8004518:	f023 0304 	bic.w	r3, r3, #4
 800451c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d016      	beq.n	8004556 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fd fac2 	bl	8001ab0 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800452e:	e00a      	b.n	8004546 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004530:	f7fd fabe 	bl	8001ab0 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e138      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004546:	4b46      	ldr	r3, [pc, #280]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0ed      	beq.n	8004530 <HAL_RCC_OscConfig+0x388>
 8004554:	e015      	b.n	8004582 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004556:	f7fd faab 	bl	8001ab0 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800455c:	e00a      	b.n	8004574 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455e:	f7fd faa7 	bl	8001ab0 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e121      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004574:	4b3a      	ldr	r3, [pc, #232]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1ed      	bne.n	800455e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004582:	7ffb      	ldrb	r3, [r7, #31]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d105      	bne.n	8004594 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004588:	4b35      	ldr	r3, [pc, #212]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 800458a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458c:	4a34      	ldr	r2, [pc, #208]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 800458e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004592:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d03c      	beq.n	800461a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01c      	beq.n	80045e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 80045aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b8:	f7fd fa7a 	bl	8001ab0 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c0:	f7fd fa76 	bl	8001ab0 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e0f2      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045d2:	4b23      	ldr	r3, [pc, #140]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 80045d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ef      	beq.n	80045c0 <HAL_RCC_OscConfig+0x418>
 80045e0:	e01b      	b.n	800461a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 80045e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 80045ea:	f023 0301 	bic.w	r3, r3, #1
 80045ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f2:	f7fd fa5d 	bl	8001ab0 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045fa:	f7fd fa59 	bl	8001ab0 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e0d5      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800460c:	4b14      	ldr	r3, [pc, #80]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 800460e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1ef      	bne.n	80045fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80c9 	beq.w	80047b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004624:	4b0e      	ldr	r3, [pc, #56]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b0c      	cmp	r3, #12
 800462e:	f000 8083 	beq.w	8004738 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d15e      	bne.n	80046f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463a:	4b09      	ldr	r3, [pc, #36]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a08      	ldr	r2, [pc, #32]	@ (8004660 <HAL_RCC_OscConfig+0x4b8>)
 8004640:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004646:	f7fd fa33 	bl	8001ab0 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800464c:	e00c      	b.n	8004668 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464e:	f7fd fa2f 	bl	8001ab0 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d905      	bls.n	8004668 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e0ab      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
 8004660:	40021000 	.word	0x40021000
 8004664:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004668:	4b55      	ldr	r3, [pc, #340]	@ (80047c0 <HAL_RCC_OscConfig+0x618>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1ec      	bne.n	800464e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004674:	4b52      	ldr	r3, [pc, #328]	@ (80047c0 <HAL_RCC_OscConfig+0x618>)
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	4b52      	ldr	r3, [pc, #328]	@ (80047c4 <HAL_RCC_OscConfig+0x61c>)
 800467a:	4013      	ands	r3, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6a11      	ldr	r1, [r2, #32]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004684:	3a01      	subs	r2, #1
 8004686:	0112      	lsls	r2, r2, #4
 8004688:	4311      	orrs	r1, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800468e:	0212      	lsls	r2, r2, #8
 8004690:	4311      	orrs	r1, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004696:	0852      	lsrs	r2, r2, #1
 8004698:	3a01      	subs	r2, #1
 800469a:	0552      	lsls	r2, r2, #21
 800469c:	4311      	orrs	r1, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046a2:	0852      	lsrs	r2, r2, #1
 80046a4:	3a01      	subs	r2, #1
 80046a6:	0652      	lsls	r2, r2, #25
 80046a8:	4311      	orrs	r1, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046ae:	06d2      	lsls	r2, r2, #27
 80046b0:	430a      	orrs	r2, r1
 80046b2:	4943      	ldr	r1, [pc, #268]	@ (80047c0 <HAL_RCC_OscConfig+0x618>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b8:	4b41      	ldr	r3, [pc, #260]	@ (80047c0 <HAL_RCC_OscConfig+0x618>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a40      	ldr	r2, [pc, #256]	@ (80047c0 <HAL_RCC_OscConfig+0x618>)
 80046be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046c4:	4b3e      	ldr	r3, [pc, #248]	@ (80047c0 <HAL_RCC_OscConfig+0x618>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a3d      	ldr	r2, [pc, #244]	@ (80047c0 <HAL_RCC_OscConfig+0x618>)
 80046ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d0:	f7fd f9ee 	bl	8001ab0 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d8:	f7fd f9ea 	bl	8001ab0 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e066      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ea:	4b35      	ldr	r3, [pc, #212]	@ (80047c0 <HAL_RCC_OscConfig+0x618>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCC_OscConfig+0x530>
 80046f6:	e05e      	b.n	80047b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f8:	4b31      	ldr	r3, [pc, #196]	@ (80047c0 <HAL_RCC_OscConfig+0x618>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a30      	ldr	r2, [pc, #192]	@ (80047c0 <HAL_RCC_OscConfig+0x618>)
 80046fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004704:	f7fd f9d4 	bl	8001ab0 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470c:	f7fd f9d0 	bl	8001ab0 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e04c      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800471e:	4b28      	ldr	r3, [pc, #160]	@ (80047c0 <HAL_RCC_OscConfig+0x618>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800472a:	4b25      	ldr	r3, [pc, #148]	@ (80047c0 <HAL_RCC_OscConfig+0x618>)
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	4924      	ldr	r1, [pc, #144]	@ (80047c0 <HAL_RCC_OscConfig+0x618>)
 8004730:	4b25      	ldr	r3, [pc, #148]	@ (80047c8 <HAL_RCC_OscConfig+0x620>)
 8004732:	4013      	ands	r3, r2
 8004734:	60cb      	str	r3, [r1, #12]
 8004736:	e03e      	b.n	80047b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e039      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004744:	4b1e      	ldr	r3, [pc, #120]	@ (80047c0 <HAL_RCC_OscConfig+0x618>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f003 0203 	and.w	r2, r3, #3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	429a      	cmp	r2, r3
 8004756:	d12c      	bne.n	80047b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	3b01      	subs	r3, #1
 8004764:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004766:	429a      	cmp	r2, r3
 8004768:	d123      	bne.n	80047b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004774:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004776:	429a      	cmp	r2, r3
 8004778:	d11b      	bne.n	80047b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004784:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004786:	429a      	cmp	r2, r3
 8004788:	d113      	bne.n	80047b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	3b01      	subs	r3, #1
 8004798:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800479a:	429a      	cmp	r2, r3
 800479c:	d109      	bne.n	80047b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047a8:	085b      	lsrs	r3, r3, #1
 80047aa:	3b01      	subs	r3, #1
 80047ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d001      	beq.n	80047b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3720      	adds	r7, #32
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40021000 	.word	0x40021000
 80047c4:	019f800c 	.word	0x019f800c
 80047c8:	feeefffc 	.word	0xfeeefffc

080047cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e11e      	b.n	8004a22 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047e4:	4b91      	ldr	r3, [pc, #580]	@ (8004a2c <HAL_RCC_ClockConfig+0x260>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 030f 	and.w	r3, r3, #15
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d910      	bls.n	8004814 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f2:	4b8e      	ldr	r3, [pc, #568]	@ (8004a2c <HAL_RCC_ClockConfig+0x260>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f023 020f 	bic.w	r2, r3, #15
 80047fa:	498c      	ldr	r1, [pc, #560]	@ (8004a2c <HAL_RCC_ClockConfig+0x260>)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	4313      	orrs	r3, r2
 8004800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004802:	4b8a      	ldr	r3, [pc, #552]	@ (8004a2c <HAL_RCC_ClockConfig+0x260>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d001      	beq.n	8004814 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e106      	b.n	8004a22 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d073      	beq.n	8004908 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b03      	cmp	r3, #3
 8004826:	d129      	bne.n	800487c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004828:	4b81      	ldr	r3, [pc, #516]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0f4      	b.n	8004a22 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004838:	f000 f99e 	bl	8004b78 <RCC_GetSysClockFreqFromPLLSource>
 800483c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	4a7c      	ldr	r2, [pc, #496]	@ (8004a34 <HAL_RCC_ClockConfig+0x268>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d93f      	bls.n	80048c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004846:	4b7a      	ldr	r3, [pc, #488]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800485a:	2b00      	cmp	r3, #0
 800485c:	d033      	beq.n	80048c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004862:	2b00      	cmp	r3, #0
 8004864:	d12f      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004866:	4b72      	ldr	r3, [pc, #456]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800486e:	4a70      	ldr	r2, [pc, #448]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 8004870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004874:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004876:	2380      	movs	r3, #128	@ 0x80
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	e024      	b.n	80048c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2b02      	cmp	r3, #2
 8004882:	d107      	bne.n	8004894 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004884:	4b6a      	ldr	r3, [pc, #424]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d109      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0c6      	b.n	8004a22 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004894:	4b66      	ldr	r3, [pc, #408]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0be      	b.n	8004a22 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048a4:	f000 f8ce 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 80048a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4a61      	ldr	r2, [pc, #388]	@ (8004a34 <HAL_RCC_ClockConfig+0x268>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d909      	bls.n	80048c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048ba:	4a5d      	ldr	r2, [pc, #372]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 80048bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048c2:	2380      	movs	r3, #128	@ 0x80
 80048c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048c6:	4b5a      	ldr	r3, [pc, #360]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f023 0203 	bic.w	r2, r3, #3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	4957      	ldr	r1, [pc, #348]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d8:	f7fd f8ea 	bl	8001ab0 <HAL_GetTick>
 80048dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048de:	e00a      	b.n	80048f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e0:	f7fd f8e6 	bl	8001ab0 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e095      	b.n	8004a22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f6:	4b4e      	ldr	r3, [pc, #312]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 020c 	and.w	r2, r3, #12
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	429a      	cmp	r2, r3
 8004906:	d1eb      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d023      	beq.n	800495c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004920:	4b43      	ldr	r3, [pc, #268]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	4a42      	ldr	r2, [pc, #264]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 8004926:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800492a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d007      	beq.n	8004948 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004938:	4b3d      	ldr	r3, [pc, #244]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004940:	4a3b      	ldr	r2, [pc, #236]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 8004942:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004946:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004948:	4b39      	ldr	r3, [pc, #228]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	4936      	ldr	r1, [pc, #216]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 8004956:	4313      	orrs	r3, r2
 8004958:	608b      	str	r3, [r1, #8]
 800495a:	e008      	b.n	800496e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2b80      	cmp	r3, #128	@ 0x80
 8004960:	d105      	bne.n	800496e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004962:	4b33      	ldr	r3, [pc, #204]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	4a32      	ldr	r2, [pc, #200]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 8004968:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800496c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800496e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a2c <HAL_RCC_ClockConfig+0x260>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d21d      	bcs.n	80049b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a2c <HAL_RCC_ClockConfig+0x260>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f023 020f 	bic.w	r2, r3, #15
 8004984:	4929      	ldr	r1, [pc, #164]	@ (8004a2c <HAL_RCC_ClockConfig+0x260>)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	4313      	orrs	r3, r2
 800498a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800498c:	f7fd f890 	bl	8001ab0 <HAL_GetTick>
 8004990:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004992:	e00a      	b.n	80049aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004994:	f7fd f88c 	bl	8001ab0 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e03b      	b.n	8004a22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049aa:	4b20      	ldr	r3, [pc, #128]	@ (8004a2c <HAL_RCC_ClockConfig+0x260>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d1ed      	bne.n	8004994 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4917      	ldr	r1, [pc, #92]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049e2:	4b13      	ldr	r3, [pc, #76]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	490f      	ldr	r1, [pc, #60]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049f6:	f000 f825 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 80049fa:	4602      	mov	r2, r0
 80049fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a30 <HAL_RCC_ClockConfig+0x264>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	091b      	lsrs	r3, r3, #4
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	490c      	ldr	r1, [pc, #48]	@ (8004a38 <HAL_RCC_ClockConfig+0x26c>)
 8004a08:	5ccb      	ldrb	r3, [r1, r3]
 8004a0a:	f003 031f 	and.w	r3, r3, #31
 8004a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a12:	4a0a      	ldr	r2, [pc, #40]	@ (8004a3c <HAL_RCC_ClockConfig+0x270>)
 8004a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a16:	4b0a      	ldr	r3, [pc, #40]	@ (8004a40 <HAL_RCC_ClockConfig+0x274>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fc fffc 	bl	8001a18 <HAL_InitTick>
 8004a20:	4603      	mov	r3, r0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40022000 	.word	0x40022000
 8004a30:	40021000 	.word	0x40021000
 8004a34:	04c4b400 	.word	0x04c4b400
 8004a38:	0800b328 	.word	0x0800b328
 8004a3c:	20000080 	.word	0x20000080
 8004a40:	20000084 	.word	0x20000084

08004a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8004afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d102      	bne.n	8004a5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a56:	4b2a      	ldr	r3, [pc, #168]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	e047      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a5c:	4b27      	ldr	r3, [pc, #156]	@ (8004afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 030c 	and.w	r3, r3, #12
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d102      	bne.n	8004a6e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a68:	4b26      	ldr	r3, [pc, #152]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	e03e      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a6e:	4b23      	ldr	r3, [pc, #140]	@ (8004afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b0c      	cmp	r3, #12
 8004a78:	d136      	bne.n	8004ae8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a7a:	4b20      	ldr	r3, [pc, #128]	@ (8004afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a84:	4b1d      	ldr	r3, [pc, #116]	@ (8004afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	091b      	lsrs	r3, r3, #4
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	3301      	adds	r3, #1
 8004a90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d10c      	bne.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a98:	4a1a      	ldr	r2, [pc, #104]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	4a16      	ldr	r2, [pc, #88]	@ (8004afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aa2:	68d2      	ldr	r2, [r2, #12]
 8004aa4:	0a12      	lsrs	r2, r2, #8
 8004aa6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	617b      	str	r3, [r7, #20]
      break;
 8004ab0:	e00c      	b.n	8004acc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ab2:	4a13      	ldr	r2, [pc, #76]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aba:	4a10      	ldr	r2, [pc, #64]	@ (8004afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004abc:	68d2      	ldr	r2, [r2, #12]
 8004abe:	0a12      	lsrs	r2, r2, #8
 8004ac0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ac4:	fb02 f303 	mul.w	r3, r2, r3
 8004ac8:	617b      	str	r3, [r7, #20]
      break;
 8004aca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004acc:	4b0b      	ldr	r3, [pc, #44]	@ (8004afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	0e5b      	lsrs	r3, r3, #25
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	e001      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004aec:	693b      	ldr	r3, [r7, #16]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000
 8004b00:	00f42400 	.word	0x00f42400
 8004b04:	007a1200 	.word	0x007a1200

08004b08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b0c:	4b03      	ldr	r3, [pc, #12]	@ (8004b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000080 	.word	0x20000080

08004b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b24:	f7ff fff0 	bl	8004b08 <HAL_RCC_GetHCLKFreq>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	4b06      	ldr	r3, [pc, #24]	@ (8004b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	0a1b      	lsrs	r3, r3, #8
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	4904      	ldr	r1, [pc, #16]	@ (8004b48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b36:	5ccb      	ldrb	r3, [r1, r3]
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40021000 	.word	0x40021000
 8004b48:	0800b338 	.word	0x0800b338

08004b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b50:	f7ff ffda 	bl	8004b08 <HAL_RCC_GetHCLKFreq>
 8004b54:	4602      	mov	r2, r0
 8004b56:	4b06      	ldr	r3, [pc, #24]	@ (8004b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	0adb      	lsrs	r3, r3, #11
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	4904      	ldr	r1, [pc, #16]	@ (8004b74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b62:	5ccb      	ldrb	r3, [r1, r3]
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40021000 	.word	0x40021000
 8004b74:	0800b338 	.word	0x0800b338

08004b78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b88:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	3301      	adds	r3, #1
 8004b94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d10c      	bne.n	8004bb6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b9c:	4a17      	ldr	r2, [pc, #92]	@ (8004bfc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba4:	4a14      	ldr	r2, [pc, #80]	@ (8004bf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ba6:	68d2      	ldr	r2, [r2, #12]
 8004ba8:	0a12      	lsrs	r2, r2, #8
 8004baa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	617b      	str	r3, [r7, #20]
    break;
 8004bb4:	e00c      	b.n	8004bd0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bb6:	4a12      	ldr	r2, [pc, #72]	@ (8004c00 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004bf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bc0:	68d2      	ldr	r2, [r2, #12]
 8004bc2:	0a12      	lsrs	r2, r2, #8
 8004bc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bc8:	fb02 f303 	mul.w	r3, r2, r3
 8004bcc:	617b      	str	r3, [r7, #20]
    break;
 8004bce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bd0:	4b09      	ldr	r3, [pc, #36]	@ (8004bf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	0e5b      	lsrs	r3, r3, #25
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	3301      	adds	r3, #1
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004bea:	687b      	ldr	r3, [r7, #4]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	371c      	adds	r7, #28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	007a1200 	.word	0x007a1200
 8004c00:	00f42400 	.word	0x00f42400

08004c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c10:	2300      	movs	r3, #0
 8004c12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8098 	beq.w	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c22:	2300      	movs	r3, #0
 8004c24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c26:	4b43      	ldr	r3, [pc, #268]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10d      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c32:	4b40      	ldr	r3, [pc, #256]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c36:	4a3f      	ldr	r2, [pc, #252]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a39      	ldr	r2, [pc, #228]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c5a:	f7fc ff29 	bl	8001ab0 <HAL_GetTick>
 8004c5e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c60:	e009      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c62:	f7fc ff25 	bl	8001ab0 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d902      	bls.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	74fb      	strb	r3, [r7, #19]
        break;
 8004c74:	e005      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c76:	4b30      	ldr	r3, [pc, #192]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0ef      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c82:	7cfb      	ldrb	r3, [r7, #19]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d159      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c88:	4b2a      	ldr	r3, [pc, #168]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c92:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d01e      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d019      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ca4:	4b23      	ldr	r3, [pc, #140]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004caa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cb0:	4b20      	ldr	r3, [pc, #128]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cd0:	4a18      	ldr	r2, [pc, #96]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d016      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce2:	f7fc fee5 	bl	8001ab0 <HAL_GetTick>
 8004ce6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ce8:	e00b      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cea:	f7fc fee1 	bl	8001ab0 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d902      	bls.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	74fb      	strb	r3, [r7, #19]
            break;
 8004d00:	e006      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d02:	4b0c      	ldr	r3, [pc, #48]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0ec      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d10:	7cfb      	ldrb	r3, [r7, #19]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10b      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d16:	4b07      	ldr	r3, [pc, #28]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d24:	4903      	ldr	r1, [pc, #12]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d2c:	e008      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d2e:	7cfb      	ldrb	r3, [r7, #19]
 8004d30:	74bb      	strb	r3, [r7, #18]
 8004d32:	e005      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d34:	40021000 	.word	0x40021000
 8004d38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3c:	7cfb      	ldrb	r3, [r7, #19]
 8004d3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d40:	7c7b      	ldrb	r3, [r7, #17]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d105      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d46:	4ba7      	ldr	r3, [pc, #668]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d4a:	4aa6      	ldr	r2, [pc, #664]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d5e:	4ba1      	ldr	r3, [pc, #644]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d64:	f023 0203 	bic.w	r2, r3, #3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	499d      	ldr	r1, [pc, #628]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d80:	4b98      	ldr	r3, [pc, #608]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d86:	f023 020c 	bic.w	r2, r3, #12
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	4995      	ldr	r1, [pc, #596]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004da2:	4b90      	ldr	r3, [pc, #576]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	498c      	ldr	r1, [pc, #560]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dc4:	4b87      	ldr	r3, [pc, #540]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	4984      	ldr	r1, [pc, #528]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004de6:	4b7f      	ldr	r3, [pc, #508]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	497b      	ldr	r1, [pc, #492]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0320 	and.w	r3, r3, #32
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e08:	4b76      	ldr	r3, [pc, #472]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	4973      	ldr	r1, [pc, #460]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e2a:	4b6e      	ldr	r3, [pc, #440]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e30:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	496a      	ldr	r1, [pc, #424]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e4c:	4b65      	ldr	r3, [pc, #404]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	4962      	ldr	r1, [pc, #392]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e6e:	4b5d      	ldr	r3, [pc, #372]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7c:	4959      	ldr	r1, [pc, #356]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e90:	4b54      	ldr	r3, [pc, #336]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e96:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9e:	4951      	ldr	r1, [pc, #324]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d015      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eb2:	4b4c      	ldr	r3, [pc, #304]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec0:	4948      	ldr	r1, [pc, #288]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ed0:	d105      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed2:	4b44      	ldr	r3, [pc, #272]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	4a43      	ldr	r2, [pc, #268]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004edc:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d015      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004eea:	4b3e      	ldr	r3, [pc, #248]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef8:	493a      	ldr	r1, [pc, #232]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f08:	d105      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f0a:	4b36      	ldr	r3, [pc, #216]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	4a35      	ldr	r2, [pc, #212]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f14:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d015      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f22:	4b30      	ldr	r3, [pc, #192]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f28:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f30:	492c      	ldr	r1, [pc, #176]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f40:	d105      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f42:	4b28      	ldr	r3, [pc, #160]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	4a27      	ldr	r2, [pc, #156]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f4c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d015      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f5a:	4b22      	ldr	r3, [pc, #136]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f60:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f68:	491e      	ldr	r1, [pc, #120]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f78:	d105      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	4a19      	ldr	r2, [pc, #100]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f84:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d015      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f92:	4b14      	ldr	r3, [pc, #80]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa0:	4910      	ldr	r1, [pc, #64]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fb0:	d105      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	4a0b      	ldr	r2, [pc, #44]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fbc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d018      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fca:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd8:	4902      	ldr	r1, [pc, #8]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	e001      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fee:	d105      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ff0:	4b21      	ldr	r3, [pc, #132]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	4a20      	ldr	r2, [pc, #128]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ffa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d015      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005008:	4b1b      	ldr	r3, [pc, #108]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005016:	4918      	ldr	r1, [pc, #96]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005026:	d105      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005028:	4b13      	ldr	r3, [pc, #76]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4a12      	ldr	r2, [pc, #72]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800502e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005032:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d015      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005040:	4b0d      	ldr	r3, [pc, #52]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005042:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005046:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800504e:	490a      	ldr	r1, [pc, #40]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800505a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800505e:	d105      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005060:	4b05      	ldr	r3, [pc, #20]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4a04      	ldr	r2, [pc, #16]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800506a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800506c:	7cbb      	ldrb	r3, [r7, #18]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40021000 	.word	0x40021000

0800507c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e09d      	b.n	80051ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005092:	2b00      	cmp	r3, #0
 8005094:	d108      	bne.n	80050a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800509e:	d009      	beq.n	80050b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	61da      	str	r2, [r3, #28]
 80050a6:	e005      	b.n	80050b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fc fb04 	bl	80016dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050f4:	d902      	bls.n	80050fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050f6:	2300      	movs	r3, #0
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	e002      	b.n	8005102 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005100:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800510a:	d007      	beq.n	800511c <HAL_SPI_Init+0xa0>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005114:	d002      	beq.n	800511c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515e:	ea42 0103 	orr.w	r1, r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005166:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	0c1b      	lsrs	r3, r3, #16
 8005178:	f003 0204 	and.w	r2, r3, #4
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	f003 0310 	and.w	r3, r3, #16
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005198:	ea42 0103 	orr.w	r1, r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b08a      	sub	sp, #40	@ 0x28
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	607a      	str	r2, [r7, #4]
 80051de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051e0:	2301      	movs	r3, #1
 80051e2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051e4:	f7fc fc64 	bl	8001ab0 <HAL_GetTick>
 80051e8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80051f0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80051f8:	887b      	ldrh	r3, [r7, #2]
 80051fa:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80051fc:	887b      	ldrh	r3, [r7, #2]
 80051fe:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005200:	7ffb      	ldrb	r3, [r7, #31]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d00c      	beq.n	8005220 <HAL_SPI_TransmitReceive+0x4e>
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800520c:	d106      	bne.n	800521c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d102      	bne.n	800521c <HAL_SPI_TransmitReceive+0x4a>
 8005216:	7ffb      	ldrb	r3, [r7, #31]
 8005218:	2b04      	cmp	r3, #4
 800521a:	d001      	beq.n	8005220 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800521c:	2302      	movs	r3, #2
 800521e:	e1f3      	b.n	8005608 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d005      	beq.n	8005232 <HAL_SPI_TransmitReceive+0x60>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <HAL_SPI_TransmitReceive+0x60>
 800522c:	887b      	ldrh	r3, [r7, #2]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e1e8      	b.n	8005608 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_SPI_TransmitReceive+0x72>
 8005240:	2302      	movs	r3, #2
 8005242:	e1e1      	b.n	8005608 <HAL_SPI_TransmitReceive+0x436>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b04      	cmp	r3, #4
 8005256:	d003      	beq.n	8005260 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2205      	movs	r2, #5
 800525c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	887a      	ldrh	r2, [r7, #2]
 8005270:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	887a      	ldrh	r2, [r7, #2]
 8005278:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	887a      	ldrh	r2, [r7, #2]
 8005286:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	887a      	ldrh	r2, [r7, #2]
 800528c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052a2:	d802      	bhi.n	80052aa <HAL_SPI_TransmitReceive+0xd8>
 80052a4:	8abb      	ldrh	r3, [r7, #20]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d908      	bls.n	80052bc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	e007      	b.n	80052cc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80052ca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d6:	2b40      	cmp	r3, #64	@ 0x40
 80052d8:	d007      	beq.n	80052ea <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052f2:	f240 8083 	bls.w	80053fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <HAL_SPI_TransmitReceive+0x132>
 80052fe:	8afb      	ldrh	r3, [r7, #22]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d16f      	bne.n	80053e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005308:	881a      	ldrh	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005314:	1c9a      	adds	r2, r3, #2
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005328:	e05c      	b.n	80053e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b02      	cmp	r3, #2
 8005336:	d11b      	bne.n	8005370 <HAL_SPI_TransmitReceive+0x19e>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d016      	beq.n	8005370 <HAL_SPI_TransmitReceive+0x19e>
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	2b01      	cmp	r3, #1
 8005346:	d113      	bne.n	8005370 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534c:	881a      	ldrh	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005358:	1c9a      	adds	r2, r3, #2
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b01      	cmp	r3, #1
 800537c:	d11c      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x1e6>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d016      	beq.n	80053b8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005394:	b292      	uxth	r2, r2
 8005396:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539c:	1c9a      	adds	r2, r3, #2
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053b4:	2301      	movs	r3, #1
 80053b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053b8:	f7fc fb7a 	bl	8001ab0 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d80d      	bhi.n	80053e4 <HAL_SPI_TransmitReceive+0x212>
 80053c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ce:	d009      	beq.n	80053e4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e111      	b.n	8005608 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d19d      	bne.n	800532a <HAL_SPI_TransmitReceive+0x158>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d197      	bne.n	800532a <HAL_SPI_TransmitReceive+0x158>
 80053fa:	e0e5      	b.n	80055c8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_SPI_TransmitReceive+0x23a>
 8005404:	8afb      	ldrh	r3, [r7, #22]
 8005406:	2b01      	cmp	r3, #1
 8005408:	f040 80d1 	bne.w	80055ae <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b01      	cmp	r3, #1
 8005414:	d912      	bls.n	800543c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541a:	881a      	ldrh	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005426:	1c9a      	adds	r2, r3, #2
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b02      	subs	r3, #2
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800543a:	e0b8      	b.n	80055ae <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	330c      	adds	r3, #12
 8005446:	7812      	ldrb	r2, [r2, #0]
 8005448:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005462:	e0a4      	b.n	80055ae <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b02      	cmp	r3, #2
 8005470:	d134      	bne.n	80054dc <HAL_SPI_TransmitReceive+0x30a>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d02f      	beq.n	80054dc <HAL_SPI_TransmitReceive+0x30a>
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	2b01      	cmp	r3, #1
 8005480:	d12c      	bne.n	80054dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b01      	cmp	r3, #1
 800548a:	d912      	bls.n	80054b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005490:	881a      	ldrh	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549c:	1c9a      	adds	r2, r3, #2
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b02      	subs	r3, #2
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054b0:	e012      	b.n	80054d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	330c      	adds	r3, #12
 80054bc:	7812      	ldrb	r2, [r2, #0]
 80054be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d148      	bne.n	800557c <HAL_SPI_TransmitReceive+0x3aa>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d042      	beq.n	800557c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d923      	bls.n	800554a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550c:	b292      	uxth	r2, r2
 800550e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005514:	1c9a      	adds	r2, r3, #2
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b02      	subs	r3, #2
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005532:	b29b      	uxth	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d81f      	bhi.n	8005578 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005546:	605a      	str	r2, [r3, #4]
 8005548:	e016      	b.n	8005578 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f103 020c 	add.w	r2, r3, #12
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	7812      	ldrb	r2, [r2, #0]
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005578:	2301      	movs	r3, #1
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800557c:	f7fc fa98 	bl	8001ab0 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005588:	429a      	cmp	r2, r3
 800558a:	d803      	bhi.n	8005594 <HAL_SPI_TransmitReceive+0x3c2>
 800558c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005592:	d102      	bne.n	800559a <HAL_SPI_TransmitReceive+0x3c8>
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005596:	2b00      	cmp	r3, #0
 8005598:	d109      	bne.n	80055ae <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e02c      	b.n	8005608 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f47f af55 	bne.w	8005464 <HAL_SPI_TransmitReceive+0x292>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f47f af4e 	bne.w	8005464 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055c8:	6a3a      	ldr	r2, [r7, #32]
 80055ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f93d 	bl	800584c <SPI_EndRxTxTransaction>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d008      	beq.n	80055ea <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e00e      	b.n	8005608 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005606:	2300      	movs	r3, #0
  }
}
 8005608:	4618      	mov	r0, r3
 800560a:	3728      	adds	r7, #40	@ 0x28
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005620:	f7fc fa46 	bl	8001ab0 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005628:	1a9b      	subs	r3, r3, r2
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	4413      	add	r3, r2
 800562e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005630:	f7fc fa3e 	bl	8001ab0 <HAL_GetTick>
 8005634:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005636:	4b39      	ldr	r3, [pc, #228]	@ (800571c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	015b      	lsls	r3, r3, #5
 800563c:	0d1b      	lsrs	r3, r3, #20
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	fb02 f303 	mul.w	r3, r2, r3
 8005644:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005646:	e054      	b.n	80056f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564e:	d050      	beq.n	80056f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005650:	f7fc fa2e 	bl	8001ab0 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	429a      	cmp	r2, r3
 800565e:	d902      	bls.n	8005666 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d13d      	bne.n	80056e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005674:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800567e:	d111      	bne.n	80056a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005688:	d004      	beq.n	8005694 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005692:	d107      	bne.n	80056a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ac:	d10f      	bne.n	80056ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e017      	b.n	8005712 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4013      	ands	r3, r2
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	429a      	cmp	r2, r3
 8005700:	bf0c      	ite	eq
 8005702:	2301      	moveq	r3, #1
 8005704:	2300      	movne	r3, #0
 8005706:	b2db      	uxtb	r3, r3
 8005708:	461a      	mov	r2, r3
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	429a      	cmp	r2, r3
 800570e:	d19b      	bne.n	8005648 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000080 	.word	0x20000080

08005720 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	@ 0x28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005732:	f7fc f9bd 	bl	8001ab0 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	4413      	add	r3, r2
 8005740:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005742:	f7fc f9b5 	bl	8001ab0 <HAL_GetTick>
 8005746:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005750:	4b3d      	ldr	r3, [pc, #244]	@ (8005848 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	00da      	lsls	r2, r3, #3
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	0d1b      	lsrs	r3, r3, #20
 8005760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005762:	fb02 f303 	mul.w	r3, r2, r3
 8005766:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005768:	e060      	b.n	800582c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005770:	d107      	bne.n	8005782 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d104      	bne.n	8005782 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005780:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d050      	beq.n	800582c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800578a:	f7fc f991 	bl	8001ab0 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005796:	429a      	cmp	r2, r3
 8005798:	d902      	bls.n	80057a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	2b00      	cmp	r3, #0
 800579e:	d13d      	bne.n	800581c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80057ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057b8:	d111      	bne.n	80057de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057c2:	d004      	beq.n	80057ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057cc:	d107      	bne.n	80057de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057e6:	d10f      	bne.n	8005808 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005806:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e010      	b.n	800583e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	3b01      	subs	r3, #1
 800582a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4013      	ands	r3, r2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	429a      	cmp	r2, r3
 800583a:	d196      	bne.n	800576a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3728      	adds	r7, #40	@ 0x28
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20000080 	.word	0x20000080

0800584c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2200      	movs	r2, #0
 8005860:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7ff ff5b 	bl	8005720 <SPI_WaitFifoStateUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d007      	beq.n	8005880 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005874:	f043 0220 	orr.w	r2, r3, #32
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e027      	b.n	80058d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2200      	movs	r2, #0
 8005888:	2180      	movs	r1, #128	@ 0x80
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f7ff fec0 	bl	8005610 <SPI_WaitFlagStateUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d007      	beq.n	80058a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800589a:	f043 0220 	orr.w	r2, r3, #32
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e014      	b.n	80058d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f7ff ff34 	bl	8005720 <SPI_WaitFifoStateUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d007      	beq.n	80058ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058c2:	f043 0220 	orr.w	r2, r3, #32
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e000      	b.n	80058d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e042      	b.n	8005970 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d106      	bne.n	8005902 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fb ff2f 	bl	8001760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2224      	movs	r2, #36	@ 0x24
 8005906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0201 	bic.w	r2, r2, #1
 8005918:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fb24 	bl	8005f70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f825 	bl	8005978 <UART_SetConfig>
 800592e:	4603      	mov	r3, r0
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e01b      	b.n	8005970 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005946:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005956:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fba3 	bl	80060b4 <UART_CheckIdleState>
 800596e:	4603      	mov	r3, r0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800597c:	b08c      	sub	sp, #48	@ 0x30
 800597e:	af00      	add	r7, sp, #0
 8005980:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	431a      	orrs	r2, r3
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	431a      	orrs	r2, r3
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	4313      	orrs	r3, r2
 800599e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4baa      	ldr	r3, [pc, #680]	@ (8005c50 <UART_SetConfig+0x2d8>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	6812      	ldr	r2, [r2, #0]
 80059ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059b0:	430b      	orrs	r3, r1
 80059b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a9f      	ldr	r2, [pc, #636]	@ (8005c54 <UART_SetConfig+0x2dc>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d004      	beq.n	80059e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059e0:	4313      	orrs	r3, r2
 80059e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80059ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	6812      	ldr	r2, [r2, #0]
 80059f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059f8:	430b      	orrs	r3, r1
 80059fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a02:	f023 010f 	bic.w	r1, r3, #15
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a90      	ldr	r2, [pc, #576]	@ (8005c58 <UART_SetConfig+0x2e0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d125      	bne.n	8005a68 <UART_SetConfig+0xf0>
 8005a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8005c5c <UART_SetConfig+0x2e4>)
 8005a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a22:	f003 0303 	and.w	r3, r3, #3
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d81a      	bhi.n	8005a60 <UART_SetConfig+0xe8>
 8005a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a30 <UART_SetConfig+0xb8>)
 8005a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a30:	08005a41 	.word	0x08005a41
 8005a34:	08005a51 	.word	0x08005a51
 8005a38:	08005a49 	.word	0x08005a49
 8005a3c:	08005a59 	.word	0x08005a59
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a46:	e116      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a4e:	e112      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005a50:	2304      	movs	r3, #4
 8005a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a56:	e10e      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005a58:	2308      	movs	r3, #8
 8005a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a5e:	e10a      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005a60:	2310      	movs	r3, #16
 8005a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a66:	e106      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a7c      	ldr	r2, [pc, #496]	@ (8005c60 <UART_SetConfig+0x2e8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d138      	bne.n	8005ae4 <UART_SetConfig+0x16c>
 8005a72:	4b7a      	ldr	r3, [pc, #488]	@ (8005c5c <UART_SetConfig+0x2e4>)
 8005a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a78:	f003 030c 	and.w	r3, r3, #12
 8005a7c:	2b0c      	cmp	r3, #12
 8005a7e:	d82d      	bhi.n	8005adc <UART_SetConfig+0x164>
 8005a80:	a201      	add	r2, pc, #4	@ (adr r2, 8005a88 <UART_SetConfig+0x110>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005abd 	.word	0x08005abd
 8005a8c:	08005add 	.word	0x08005add
 8005a90:	08005add 	.word	0x08005add
 8005a94:	08005add 	.word	0x08005add
 8005a98:	08005acd 	.word	0x08005acd
 8005a9c:	08005add 	.word	0x08005add
 8005aa0:	08005add 	.word	0x08005add
 8005aa4:	08005add 	.word	0x08005add
 8005aa8:	08005ac5 	.word	0x08005ac5
 8005aac:	08005add 	.word	0x08005add
 8005ab0:	08005add 	.word	0x08005add
 8005ab4:	08005add 	.word	0x08005add
 8005ab8:	08005ad5 	.word	0x08005ad5
 8005abc:	2300      	movs	r3, #0
 8005abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ac2:	e0d8      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aca:	e0d4      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005acc:	2304      	movs	r3, #4
 8005ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ad2:	e0d0      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005ad4:	2308      	movs	r3, #8
 8005ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ada:	e0cc      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005adc:	2310      	movs	r3, #16
 8005ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ae2:	e0c8      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a5e      	ldr	r2, [pc, #376]	@ (8005c64 <UART_SetConfig+0x2ec>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d125      	bne.n	8005b3a <UART_SetConfig+0x1c2>
 8005aee:	4b5b      	ldr	r3, [pc, #364]	@ (8005c5c <UART_SetConfig+0x2e4>)
 8005af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005af8:	2b30      	cmp	r3, #48	@ 0x30
 8005afa:	d016      	beq.n	8005b2a <UART_SetConfig+0x1b2>
 8005afc:	2b30      	cmp	r3, #48	@ 0x30
 8005afe:	d818      	bhi.n	8005b32 <UART_SetConfig+0x1ba>
 8005b00:	2b20      	cmp	r3, #32
 8005b02:	d00a      	beq.n	8005b1a <UART_SetConfig+0x1a2>
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d814      	bhi.n	8005b32 <UART_SetConfig+0x1ba>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <UART_SetConfig+0x19a>
 8005b0c:	2b10      	cmp	r3, #16
 8005b0e:	d008      	beq.n	8005b22 <UART_SetConfig+0x1aa>
 8005b10:	e00f      	b.n	8005b32 <UART_SetConfig+0x1ba>
 8005b12:	2300      	movs	r3, #0
 8005b14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b18:	e0ad      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b20:	e0a9      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005b22:	2304      	movs	r3, #4
 8005b24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b28:	e0a5      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005b2a:	2308      	movs	r3, #8
 8005b2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b30:	e0a1      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005b32:	2310      	movs	r3, #16
 8005b34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b38:	e09d      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a4a      	ldr	r2, [pc, #296]	@ (8005c68 <UART_SetConfig+0x2f0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d125      	bne.n	8005b90 <UART_SetConfig+0x218>
 8005b44:	4b45      	ldr	r3, [pc, #276]	@ (8005c5c <UART_SetConfig+0x2e4>)
 8005b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b50:	d016      	beq.n	8005b80 <UART_SetConfig+0x208>
 8005b52:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b54:	d818      	bhi.n	8005b88 <UART_SetConfig+0x210>
 8005b56:	2b80      	cmp	r3, #128	@ 0x80
 8005b58:	d00a      	beq.n	8005b70 <UART_SetConfig+0x1f8>
 8005b5a:	2b80      	cmp	r3, #128	@ 0x80
 8005b5c:	d814      	bhi.n	8005b88 <UART_SetConfig+0x210>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <UART_SetConfig+0x1f0>
 8005b62:	2b40      	cmp	r3, #64	@ 0x40
 8005b64:	d008      	beq.n	8005b78 <UART_SetConfig+0x200>
 8005b66:	e00f      	b.n	8005b88 <UART_SetConfig+0x210>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b6e:	e082      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005b70:	2302      	movs	r3, #2
 8005b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b76:	e07e      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005b78:	2304      	movs	r3, #4
 8005b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b7e:	e07a      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005b80:	2308      	movs	r3, #8
 8005b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b86:	e076      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b8e:	e072      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a35      	ldr	r2, [pc, #212]	@ (8005c6c <UART_SetConfig+0x2f4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d12a      	bne.n	8005bf0 <UART_SetConfig+0x278>
 8005b9a:	4b30      	ldr	r3, [pc, #192]	@ (8005c5c <UART_SetConfig+0x2e4>)
 8005b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ba4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ba8:	d01a      	beq.n	8005be0 <UART_SetConfig+0x268>
 8005baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bae:	d81b      	bhi.n	8005be8 <UART_SetConfig+0x270>
 8005bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb4:	d00c      	beq.n	8005bd0 <UART_SetConfig+0x258>
 8005bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bba:	d815      	bhi.n	8005be8 <UART_SetConfig+0x270>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <UART_SetConfig+0x250>
 8005bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bc4:	d008      	beq.n	8005bd8 <UART_SetConfig+0x260>
 8005bc6:	e00f      	b.n	8005be8 <UART_SetConfig+0x270>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bce:	e052      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bd6:	e04e      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bde:	e04a      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005be0:	2308      	movs	r3, #8
 8005be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005be6:	e046      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005be8:	2310      	movs	r3, #16
 8005bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bee:	e042      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a17      	ldr	r2, [pc, #92]	@ (8005c54 <UART_SetConfig+0x2dc>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d13a      	bne.n	8005c70 <UART_SetConfig+0x2f8>
 8005bfa:	4b18      	ldr	r3, [pc, #96]	@ (8005c5c <UART_SetConfig+0x2e4>)
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c08:	d01a      	beq.n	8005c40 <UART_SetConfig+0x2c8>
 8005c0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c0e:	d81b      	bhi.n	8005c48 <UART_SetConfig+0x2d0>
 8005c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c14:	d00c      	beq.n	8005c30 <UART_SetConfig+0x2b8>
 8005c16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c1a:	d815      	bhi.n	8005c48 <UART_SetConfig+0x2d0>
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <UART_SetConfig+0x2b0>
 8005c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c24:	d008      	beq.n	8005c38 <UART_SetConfig+0x2c0>
 8005c26:	e00f      	b.n	8005c48 <UART_SetConfig+0x2d0>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c2e:	e022      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005c30:	2302      	movs	r3, #2
 8005c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c36:	e01e      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c3e:	e01a      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005c40:	2308      	movs	r3, #8
 8005c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c46:	e016      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c4e:	e012      	b.n	8005c76 <UART_SetConfig+0x2fe>
 8005c50:	cfff69f3 	.word	0xcfff69f3
 8005c54:	40008000 	.word	0x40008000
 8005c58:	40013800 	.word	0x40013800
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	40004400 	.word	0x40004400
 8005c64:	40004800 	.word	0x40004800
 8005c68:	40004c00 	.word	0x40004c00
 8005c6c:	40005000 	.word	0x40005000
 8005c70:	2310      	movs	r3, #16
 8005c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4aae      	ldr	r2, [pc, #696]	@ (8005f34 <UART_SetConfig+0x5bc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	f040 8097 	bne.w	8005db0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d823      	bhi.n	8005cd2 <UART_SetConfig+0x35a>
 8005c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c90 <UART_SetConfig+0x318>)
 8005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c90:	08005cb5 	.word	0x08005cb5
 8005c94:	08005cd3 	.word	0x08005cd3
 8005c98:	08005cbd 	.word	0x08005cbd
 8005c9c:	08005cd3 	.word	0x08005cd3
 8005ca0:	08005cc3 	.word	0x08005cc3
 8005ca4:	08005cd3 	.word	0x08005cd3
 8005ca8:	08005cd3 	.word	0x08005cd3
 8005cac:	08005cd3 	.word	0x08005cd3
 8005cb0:	08005ccb 	.word	0x08005ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb4:	f7fe ff34 	bl	8004b20 <HAL_RCC_GetPCLK1Freq>
 8005cb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cba:	e010      	b.n	8005cde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cbc:	4b9e      	ldr	r3, [pc, #632]	@ (8005f38 <UART_SetConfig+0x5c0>)
 8005cbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cc0:	e00d      	b.n	8005cde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cc2:	f7fe febf 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 8005cc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cc8:	e009      	b.n	8005cde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cd0:	e005      	b.n	8005cde <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005cdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8130 	beq.w	8005f46 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cea:	4a94      	ldr	r2, [pc, #592]	@ (8005f3c <UART_SetConfig+0x5c4>)
 8005cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	4413      	add	r3, r2
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d305      	bcc.n	8005d16 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d903      	bls.n	8005d1e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d1c:	e113      	b.n	8005f46 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d20:	2200      	movs	r2, #0
 8005d22:	60bb      	str	r3, [r7, #8]
 8005d24:	60fa      	str	r2, [r7, #12]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2a:	4a84      	ldr	r2, [pc, #528]	@ (8005f3c <UART_SetConfig+0x5c4>)
 8005d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2200      	movs	r2, #0
 8005d34:	603b      	str	r3, [r7, #0]
 8005d36:	607a      	str	r2, [r7, #4]
 8005d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d40:	f7fa fc7a 	bl	8000638 <__aeabi_uldivmod>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4610      	mov	r0, r2
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	020b      	lsls	r3, r1, #8
 8005d56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d5a:	0202      	lsls	r2, r0, #8
 8005d5c:	6979      	ldr	r1, [r7, #20]
 8005d5e:	6849      	ldr	r1, [r1, #4]
 8005d60:	0849      	lsrs	r1, r1, #1
 8005d62:	2000      	movs	r0, #0
 8005d64:	460c      	mov	r4, r1
 8005d66:	4605      	mov	r5, r0
 8005d68:	eb12 0804 	adds.w	r8, r2, r4
 8005d6c:	eb43 0905 	adc.w	r9, r3, r5
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	469a      	mov	sl, r3
 8005d78:	4693      	mov	fp, r2
 8005d7a:	4652      	mov	r2, sl
 8005d7c:	465b      	mov	r3, fp
 8005d7e:	4640      	mov	r0, r8
 8005d80:	4649      	mov	r1, r9
 8005d82:	f7fa fc59 	bl	8000638 <__aeabi_uldivmod>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d94:	d308      	bcc.n	8005da8 <UART_SetConfig+0x430>
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d9c:	d204      	bcs.n	8005da8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6a3a      	ldr	r2, [r7, #32]
 8005da4:	60da      	str	r2, [r3, #12]
 8005da6:	e0ce      	b.n	8005f46 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005dae:	e0ca      	b.n	8005f46 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005db8:	d166      	bne.n	8005e88 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005dba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d827      	bhi.n	8005e12 <UART_SetConfig+0x49a>
 8005dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc8 <UART_SetConfig+0x450>)
 8005dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc8:	08005ded 	.word	0x08005ded
 8005dcc:	08005df5 	.word	0x08005df5
 8005dd0:	08005dfd 	.word	0x08005dfd
 8005dd4:	08005e13 	.word	0x08005e13
 8005dd8:	08005e03 	.word	0x08005e03
 8005ddc:	08005e13 	.word	0x08005e13
 8005de0:	08005e13 	.word	0x08005e13
 8005de4:	08005e13 	.word	0x08005e13
 8005de8:	08005e0b 	.word	0x08005e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dec:	f7fe fe98 	bl	8004b20 <HAL_RCC_GetPCLK1Freq>
 8005df0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005df2:	e014      	b.n	8005e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005df4:	f7fe feaa 	bl	8004b4c <HAL_RCC_GetPCLK2Freq>
 8005df8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dfa:	e010      	b.n	8005e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dfc:	4b4e      	ldr	r3, [pc, #312]	@ (8005f38 <UART_SetConfig+0x5c0>)
 8005dfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e00:	e00d      	b.n	8005e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e02:	f7fe fe1f 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 8005e06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e08:	e009      	b.n	8005e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e10:	e005      	b.n	8005e1e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 8090 	beq.w	8005f46 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2a:	4a44      	ldr	r2, [pc, #272]	@ (8005f3c <UART_SetConfig+0x5c4>)
 8005e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e30:	461a      	mov	r2, r3
 8005e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e38:	005a      	lsls	r2, r3, #1
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	085b      	lsrs	r3, r3, #1
 8005e40:	441a      	add	r2, r3
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	2b0f      	cmp	r3, #15
 8005e50:	d916      	bls.n	8005e80 <UART_SetConfig+0x508>
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e58:	d212      	bcs.n	8005e80 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f023 030f 	bic.w	r3, r3, #15
 8005e62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	8bfb      	ldrh	r3, [r7, #30]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	8bfa      	ldrh	r2, [r7, #30]
 8005e7c:	60da      	str	r2, [r3, #12]
 8005e7e:	e062      	b.n	8005f46 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e86:	e05e      	b.n	8005f46 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d828      	bhi.n	8005ee2 <UART_SetConfig+0x56a>
 8005e90:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <UART_SetConfig+0x520>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005ebd 	.word	0x08005ebd
 8005e9c:	08005ec5 	.word	0x08005ec5
 8005ea0:	08005ecd 	.word	0x08005ecd
 8005ea4:	08005ee3 	.word	0x08005ee3
 8005ea8:	08005ed3 	.word	0x08005ed3
 8005eac:	08005ee3 	.word	0x08005ee3
 8005eb0:	08005ee3 	.word	0x08005ee3
 8005eb4:	08005ee3 	.word	0x08005ee3
 8005eb8:	08005edb 	.word	0x08005edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ebc:	f7fe fe30 	bl	8004b20 <HAL_RCC_GetPCLK1Freq>
 8005ec0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ec2:	e014      	b.n	8005eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ec4:	f7fe fe42 	bl	8004b4c <HAL_RCC_GetPCLK2Freq>
 8005ec8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005eca:	e010      	b.n	8005eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8005f38 <UART_SetConfig+0x5c0>)
 8005ece:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ed0:	e00d      	b.n	8005eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ed2:	f7fe fdb7 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 8005ed6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ed8:	e009      	b.n	8005eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ee0:	e005      	b.n	8005eee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005eec:	bf00      	nop
    }

    if (pclk != 0U)
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d028      	beq.n	8005f46 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef8:	4a10      	ldr	r2, [pc, #64]	@ (8005f3c <UART_SetConfig+0x5c4>)
 8005efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005efe:	461a      	mov	r2, r3
 8005f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f02:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	085b      	lsrs	r3, r3, #1
 8005f0c:	441a      	add	r2, r3
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	2b0f      	cmp	r3, #15
 8005f1c:	d910      	bls.n	8005f40 <UART_SetConfig+0x5c8>
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f24:	d20c      	bcs.n	8005f40 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	60da      	str	r2, [r3, #12]
 8005f30:	e009      	b.n	8005f46 <UART_SetConfig+0x5ce>
 8005f32:	bf00      	nop
 8005f34:	40008000 	.word	0x40008000
 8005f38:	00f42400 	.word	0x00f42400
 8005f3c:	0800b340 	.word	0x0800b340
      }
      else
      {
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005f62:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3730      	adds	r7, #48	@ 0x30
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7c:	f003 0308 	and.w	r3, r3, #8
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00a      	beq.n	8005fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01a      	beq.n	8006086 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800606e:	d10a      	bne.n	8006086 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	605a      	str	r2, [r3, #4]
  }
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b098      	sub	sp, #96	@ 0x60
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060c4:	f7fb fcf4 	bl	8001ab0 <HAL_GetTick>
 80060c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0308 	and.w	r3, r3, #8
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d12f      	bne.n	8006138 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e0:	2200      	movs	r2, #0
 80060e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f88e 	bl	8006208 <UART_WaitOnFlagUntilTimeout>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d022      	beq.n	8006138 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fa:	e853 3f00 	ldrex	r3, [r3]
 80060fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006106:	653b      	str	r3, [r7, #80]	@ 0x50
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006110:	647b      	str	r3, [r7, #68]	@ 0x44
 8006112:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006114:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006118:	e841 2300 	strex	r3, r2, [r1]
 800611c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800611e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e6      	bne.n	80060f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e063      	b.n	8006200 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b04      	cmp	r3, #4
 8006144:	d149      	bne.n	80061da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006146:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800614e:	2200      	movs	r2, #0
 8006150:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f857 	bl	8006208 <UART_WaitOnFlagUntilTimeout>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d03c      	beq.n	80061da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	623b      	str	r3, [r7, #32]
   return(result);
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	461a      	mov	r2, r3
 800617c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800617e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006180:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800618c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e6      	bne.n	8006160 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3308      	adds	r3, #8
 8006198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f023 0301 	bic.w	r3, r3, #1
 80061a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3308      	adds	r3, #8
 80061b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061b2:	61fa      	str	r2, [r7, #28]
 80061b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	69b9      	ldr	r1, [r7, #24]
 80061b8:	69fa      	ldr	r2, [r7, #28]
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	617b      	str	r3, [r7, #20]
   return(result);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e5      	bne.n	8006192 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e012      	b.n	8006200 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3758      	adds	r7, #88	@ 0x58
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	4613      	mov	r3, r2
 8006216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006218:	e04f      	b.n	80062ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006220:	d04b      	beq.n	80062ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006222:	f7fb fc45 	bl	8001ab0 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	429a      	cmp	r2, r3
 8006230:	d302      	bcc.n	8006238 <UART_WaitOnFlagUntilTimeout+0x30>
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e04e      	b.n	80062da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b00      	cmp	r3, #0
 8006248:	d037      	beq.n	80062ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b80      	cmp	r3, #128	@ 0x80
 800624e:	d034      	beq.n	80062ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b40      	cmp	r3, #64	@ 0x40
 8006254:	d031      	beq.n	80062ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b08      	cmp	r3, #8
 8006262:	d110      	bne.n	8006286 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2208      	movs	r2, #8
 800626a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f838 	bl	80062e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2208      	movs	r2, #8
 8006276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e029      	b.n	80062da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006290:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006294:	d111      	bne.n	80062ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800629e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f81e 	bl	80062e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e00f      	b.n	80062da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4013      	ands	r3, r2
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	bf0c      	ite	eq
 80062ca:	2301      	moveq	r3, #1
 80062cc:	2300      	movne	r3, #0
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	79fb      	ldrb	r3, [r7, #7]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d0a0      	beq.n	800621a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b095      	sub	sp, #84	@ 0x54
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006308:	643b      	str	r3, [r7, #64]	@ 0x40
 800630a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800630e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e6      	bne.n	80062ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3308      	adds	r3, #8
 8006322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	61fb      	str	r3, [r7, #28]
   return(result);
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006332:	f023 0301 	bic.w	r3, r3, #1
 8006336:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3308      	adds	r3, #8
 800633e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006340:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006342:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e3      	bne.n	800631c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006358:	2b01      	cmp	r3, #1
 800635a:	d118      	bne.n	800638e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	60bb      	str	r3, [r7, #8]
   return(result);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f023 0310 	bic.w	r3, r3, #16
 8006370:	647b      	str	r3, [r7, #68]	@ 0x44
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800637a:	61bb      	str	r3, [r7, #24]
 800637c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	6979      	ldr	r1, [r7, #20]
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	613b      	str	r3, [r7, #16]
   return(result);
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1e6      	bne.n	800635c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2220      	movs	r2, #32
 8006392:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80063a2:	bf00      	nop
 80063a4:	3754      	adds	r7, #84	@ 0x54
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b085      	sub	sp, #20
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e027      	b.n	8006414 <HAL_UARTEx_DisableFifoMode+0x66>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2224      	movs	r2, #36	@ 0x24
 80063d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 0201 	bic.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80063f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2220      	movs	r2, #32
 8006406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006434:	2302      	movs	r3, #2
 8006436:	e02d      	b.n	8006494 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2224      	movs	r2, #36	@ 0x24
 8006444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0201 	bic.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f84f 	bl	8006518 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e02d      	b.n	8006510 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2224      	movs	r2, #36	@ 0x24
 80064c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0201 	bic.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f811 	bl	8006518 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006524:	2b00      	cmp	r3, #0
 8006526:	d108      	bne.n	800653a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006538:	e031      	b.n	800659e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800653a:	2308      	movs	r3, #8
 800653c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800653e:	2308      	movs	r3, #8
 8006540:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	0e5b      	lsrs	r3, r3, #25
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	0f5b      	lsrs	r3, r3, #29
 800655a:	b2db      	uxtb	r3, r3
 800655c:	f003 0307 	and.w	r3, r3, #7
 8006560:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006562:	7bbb      	ldrb	r3, [r7, #14]
 8006564:	7b3a      	ldrb	r2, [r7, #12]
 8006566:	4911      	ldr	r1, [pc, #68]	@ (80065ac <UARTEx_SetNbDataToProcess+0x94>)
 8006568:	5c8a      	ldrb	r2, [r1, r2]
 800656a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800656e:	7b3a      	ldrb	r2, [r7, #12]
 8006570:	490f      	ldr	r1, [pc, #60]	@ (80065b0 <UARTEx_SetNbDataToProcess+0x98>)
 8006572:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006574:	fb93 f3f2 	sdiv	r3, r3, r2
 8006578:	b29a      	uxth	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006580:	7bfb      	ldrb	r3, [r7, #15]
 8006582:	7b7a      	ldrb	r2, [r7, #13]
 8006584:	4909      	ldr	r1, [pc, #36]	@ (80065ac <UARTEx_SetNbDataToProcess+0x94>)
 8006586:	5c8a      	ldrb	r2, [r1, r2]
 8006588:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800658c:	7b7a      	ldrb	r2, [r7, #13]
 800658e:	4908      	ldr	r1, [pc, #32]	@ (80065b0 <UARTEx_SetNbDataToProcess+0x98>)
 8006590:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006592:	fb93 f3f2 	sdiv	r3, r3, r2
 8006596:	b29a      	uxth	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800659e:	bf00      	nop
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	0800b358 	.word	0x0800b358
 80065b0:	0800b360 	.word	0x0800b360

080065b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065c4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80065c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b085      	sub	sp, #20
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065ea:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80065ee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	43db      	mvns	r3, r3
 80065fe:	b29b      	uxth	r3, r3
 8006600:	4013      	ands	r3, r2
 8006602:	b29a      	uxth	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	1d3b      	adds	r3, r7, #4
 8006622:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2201      	movs	r2, #1
 800662a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006654:	b480      	push	{r7}
 8006656:	b0a7      	sub	sp, #156	@ 0x9c
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	b29b      	uxth	r3, r3
 8006672:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800667a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	78db      	ldrb	r3, [r3, #3]
 8006682:	2b03      	cmp	r3, #3
 8006684:	d81f      	bhi.n	80066c6 <USB_ActivateEndpoint+0x72>
 8006686:	a201      	add	r2, pc, #4	@ (adr r2, 800668c <USB_ActivateEndpoint+0x38>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	0800669d 	.word	0x0800669d
 8006690:	080066b9 	.word	0x080066b9
 8006694:	080066cf 	.word	0x080066cf
 8006698:	080066ab 	.word	0x080066ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800669c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80066a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066a4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80066a8:	e012      	b.n	80066d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80066aa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80066ae:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80066b2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80066b6:	e00b      	b.n	80066d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80066b8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80066bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80066c0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80066c4:	e004      	b.n	80066d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80066cc:	e000      	b.n	80066d0 <USB_ActivateEndpoint+0x7c>
      break;
 80066ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	441a      	add	r2, r3
 80066da:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80066de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	b21b      	sxth	r3, r3
 8006702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800670a:	b21a      	sxth	r2, r3
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	b21b      	sxth	r3, r3
 8006712:	4313      	orrs	r3, r2
 8006714:	b21b      	sxth	r3, r3
 8006716:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	441a      	add	r2, r3
 8006724:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006728:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800672c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006730:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006738:	b29b      	uxth	r3, r3
 800673a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	7b1b      	ldrb	r3, [r3, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f040 8180 	bne.w	8006a46 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	785b      	ldrb	r3, [r3, #1]
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 8084 	beq.w	8006858 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	61bb      	str	r3, [r7, #24]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800675a:	b29b      	uxth	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	4413      	add	r3, r2
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	00da      	lsls	r2, r3, #3
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	88db      	ldrh	r3, [r3, #6]
 8006778:	085b      	lsrs	r3, r3, #1
 800677a:	b29b      	uxth	r3, r3
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	b29a      	uxth	r2, r3
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	827b      	strh	r3, [r7, #18]
 8006792:	8a7b      	ldrh	r3, [r7, #18]
 8006794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01b      	beq.n	80067d4 <USB_ActivateEndpoint+0x180>
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067b2:	823b      	strh	r3, [r7, #16]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	441a      	add	r2, r3
 80067be:	8a3b      	ldrh	r3, [r7, #16]
 80067c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	78db      	ldrb	r3, [r3, #3]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d020      	beq.n	800681e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067f2:	81bb      	strh	r3, [r7, #12]
 80067f4:	89bb      	ldrh	r3, [r7, #12]
 80067f6:	f083 0320 	eor.w	r3, r3, #32
 80067fa:	81bb      	strh	r3, [r7, #12]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	441a      	add	r2, r3
 8006806:	89bb      	ldrh	r3, [r7, #12]
 8006808:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800680c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006810:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006818:	b29b      	uxth	r3, r3
 800681a:	8013      	strh	r3, [r2, #0]
 800681c:	e3f9      	b.n	8007012 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006834:	81fb      	strh	r3, [r7, #14]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	441a      	add	r2, r3
 8006840:	89fb      	ldrh	r3, [r7, #14]
 8006842:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006846:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800684a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800684e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006852:	b29b      	uxth	r3, r3
 8006854:	8013      	strh	r3, [r2, #0]
 8006856:	e3dc      	b.n	8007012 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	633b      	str	r3, [r7, #48]	@ 0x30
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006862:	b29b      	uxth	r3, r3
 8006864:	461a      	mov	r2, r3
 8006866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006868:	4413      	add	r3, r2
 800686a:	633b      	str	r3, [r7, #48]	@ 0x30
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	00da      	lsls	r2, r3, #3
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	4413      	add	r3, r2
 8006876:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800687a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	88db      	ldrh	r3, [r3, #6]
 8006880:	085b      	lsrs	r3, r3, #1
 8006882:	b29b      	uxth	r3, r3
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006896:	b29b      	uxth	r3, r3
 8006898:	461a      	mov	r2, r3
 800689a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689c:	4413      	add	r3, r2
 800689e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	00da      	lsls	r2, r3, #3
 80068a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a8:	4413      	add	r3, r2
 80068aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80068ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80068b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068be:	801a      	strh	r2, [r3, #0]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <USB_ActivateEndpoint+0x28a>
 80068c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068da:	801a      	strh	r2, [r3, #0]
 80068dc:	e041      	b.n	8006962 <USB_ActivateEndpoint+0x30e>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80068e4:	d81c      	bhi.n	8006920 <USB_ActivateEndpoint+0x2cc>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	085b      	lsrs	r3, r3, #1
 80068ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d004      	beq.n	8006906 <USB_ActivateEndpoint+0x2b2>
 80068fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006900:	3301      	adds	r3, #1
 8006902:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	b29a      	uxth	r2, r3
 800690c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006910:	b29b      	uxth	r3, r3
 8006912:	029b      	lsls	r3, r3, #10
 8006914:	b29b      	uxth	r3, r3
 8006916:	4313      	orrs	r3, r2
 8006918:	b29a      	uxth	r2, r3
 800691a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691c:	801a      	strh	r2, [r3, #0]
 800691e:	e020      	b.n	8006962 <USB_ActivateEndpoint+0x30e>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	095b      	lsrs	r3, r3, #5
 8006926:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 031f 	and.w	r3, r3, #31
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <USB_ActivateEndpoint+0x2ec>
 8006936:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800693a:	3b01      	subs	r3, #1
 800693c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	b29a      	uxth	r2, r3
 8006946:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800694a:	b29b      	uxth	r3, r3
 800694c:	029b      	lsls	r3, r3, #10
 800694e:	b29b      	uxth	r3, r3
 8006950:	4313      	orrs	r3, r2
 8006952:	b29b      	uxth	r3, r3
 8006954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800695c:	b29a      	uxth	r2, r3
 800695e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006960:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006970:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d01b      	beq.n	80069b2 <USB_ActivateEndpoint+0x35e>
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	b29b      	uxth	r3, r3
 8006988:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800698c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006990:	843b      	strh	r3, [r7, #32]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	441a      	add	r2, r3
 800699c:	8c3b      	ldrh	r3, [r7, #32]
 800699e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d124      	bne.n	8006a04 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d0:	83bb      	strh	r3, [r7, #28]
 80069d2:	8bbb      	ldrh	r3, [r7, #28]
 80069d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069d8:	83bb      	strh	r3, [r7, #28]
 80069da:	8bbb      	ldrh	r3, [r7, #28]
 80069dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069e0:	83bb      	strh	r3, [r7, #28]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	441a      	add	r2, r3
 80069ec:	8bbb      	ldrh	r3, [r7, #28]
 80069ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	8013      	strh	r3, [r2, #0]
 8006a02:	e306      	b.n	8007012 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a1a:	83fb      	strh	r3, [r7, #30]
 8006a1c:	8bfb      	ldrh	r3, [r7, #30]
 8006a1e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a22:	83fb      	strh	r3, [r7, #30]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	441a      	add	r2, r3
 8006a2e:	8bfb      	ldrh	r3, [r7, #30]
 8006a30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	8013      	strh	r3, [r2, #0]
 8006a44:	e2e5      	b.n	8007012 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	78db      	ldrb	r3, [r3, #3]
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d11e      	bne.n	8006a8c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a64:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	441a      	add	r2, r3
 8006a72:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8006a76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a7e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	8013      	strh	r3, [r2, #0]
 8006a8a:	e01d      	b.n	8006ac8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	441a      	add	r2, r3
 8006ab0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006ab4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ab8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006abc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ad8:	4413      	add	r3, r2
 8006ada:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	00da      	lsls	r2, r3, #3
 8006ae2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006aea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	891b      	ldrh	r3, [r3, #8]
 8006af0:	085b      	lsrs	r3, r3, #1
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006afa:	801a      	strh	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b0c:	4413      	add	r3, r2
 8006b0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	00da      	lsls	r2, r3, #3
 8006b16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b18:	4413      	add	r3, r2
 8006b1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	895b      	ldrh	r3, [r3, #10]
 8006b24:	085b      	lsrs	r3, r3, #1
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b2e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	785b      	ldrb	r3, [r3, #1]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f040 81af 	bne.w	8006e98 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006b4a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d01d      	beq.n	8006b92 <USB_ActivateEndpoint+0x53e>
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	441a      	add	r2, r3
 8006b7a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8006ba2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8006ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d01d      	beq.n	8006bea <USB_ActivateEndpoint+0x596>
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	441a      	add	r2, r3
 8006bd2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006bd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006be2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	785b      	ldrb	r3, [r3, #1]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d16b      	bne.n	8006cca <USB_ActivateEndpoint+0x676>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c02:	4413      	add	r3, r2
 8006c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	00da      	lsls	r2, r3, #3
 8006c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c0e:	4413      	add	r3, r2
 8006c10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c24:	801a      	strh	r2, [r3, #0]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <USB_ActivateEndpoint+0x5f0>
 8006c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c40:	801a      	strh	r2, [r3, #0]
 8006c42:	e05d      	b.n	8006d00 <USB_ActivateEndpoint+0x6ac>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c4a:	d81c      	bhi.n	8006c86 <USB_ActivateEndpoint+0x632>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	085b      	lsrs	r3, r3, #1
 8006c52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d004      	beq.n	8006c6c <USB_ActivateEndpoint+0x618>
 8006c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c66:	3301      	adds	r3, #1
 8006c68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	029b      	lsls	r3, r3, #10
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c82:	801a      	strh	r2, [r3, #0]
 8006c84:	e03c      	b.n	8006d00 <USB_ActivateEndpoint+0x6ac>
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	f003 031f 	and.w	r3, r3, #31
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d104      	bne.n	8006ca6 <USB_ActivateEndpoint+0x652>
 8006c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	029b      	lsls	r3, r3, #10
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cc6:	801a      	strh	r2, [r3, #0]
 8006cc8:	e01a      	b.n	8006d00 <USB_ActivateEndpoint+0x6ac>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	785b      	ldrb	r3, [r3, #1]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d116      	bne.n	8006d00 <USB_ActivateEndpoint+0x6ac>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	461a      	mov	r2, r3
 8006ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ce2:	4413      	add	r3, r2
 8006ce4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	00da      	lsls	r2, r3, #3
 8006cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cee:	4413      	add	r3, r2
 8006cf0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cf4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cfe:	801a      	strh	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	785b      	ldrb	r3, [r3, #1]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d16b      	bne.n	8006de4 <USB_ActivateEndpoint+0x790>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	461a      	mov	r2, r3
 8006d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d1c:	4413      	add	r3, r2
 8006d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	00da      	lsls	r2, r3, #3
 8006d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d28:	4413      	add	r3, r2
 8006d2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3e:	801a      	strh	r2, [r3, #0]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10a      	bne.n	8006d5e <USB_ActivateEndpoint+0x70a>
 8006d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5a:	801a      	strh	r2, [r3, #0]
 8006d5c:	e05b      	b.n	8006e16 <USB_ActivateEndpoint+0x7c2>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d64:	d81c      	bhi.n	8006da0 <USB_ActivateEndpoint+0x74c>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	085b      	lsrs	r3, r3, #1
 8006d6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d004      	beq.n	8006d86 <USB_ActivateEndpoint+0x732>
 8006d7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d80:	3301      	adds	r3, #1
 8006d82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	029b      	lsls	r3, r3, #10
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	4313      	orrs	r3, r2
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9c:	801a      	strh	r2, [r3, #0]
 8006d9e:	e03a      	b.n	8006e16 <USB_ActivateEndpoint+0x7c2>
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	095b      	lsrs	r3, r3, #5
 8006da6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 031f 	and.w	r3, r3, #31
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d104      	bne.n	8006dc0 <USB_ActivateEndpoint+0x76c>
 8006db6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	029b      	lsls	r3, r3, #10
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de0:	801a      	strh	r2, [r3, #0]
 8006de2:	e018      	b.n	8006e16 <USB_ActivateEndpoint+0x7c2>
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d114      	bne.n	8006e16 <USB_ActivateEndpoint+0x7c2>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	461a      	mov	r2, r3
 8006df6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006df8:	4413      	add	r3, r2
 8006dfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	00da      	lsls	r2, r3, #3
 8006e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e04:	4413      	add	r3, r2
 8006e06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e14:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006e2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e30:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e34:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006e36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	441a      	add	r2, r3
 8006e48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e74:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	441a      	add	r2, r3
 8006e80:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006e82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	8013      	strh	r3, [r2, #0]
 8006e96:	e0bc      	b.n	8007012 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8006ea8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006eac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d01d      	beq.n	8006ef0 <USB_ActivateEndpoint+0x89c>
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	441a      	add	r2, r3
 8006ed8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006edc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ee4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8006f00:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d01d      	beq.n	8006f48 <USB_ActivateEndpoint+0x8f4>
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f22:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	441a      	add	r2, r3
 8006f30:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006f34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f40:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	78db      	ldrb	r3, [r3, #3]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d024      	beq.n	8006f9a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f66:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006f6a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006f6e:	f083 0320 	eor.w	r3, r3, #32
 8006f72:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	441a      	add	r2, r3
 8006f80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006f84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	8013      	strh	r3, [r2, #0]
 8006f98:	e01d      	b.n	8006fd6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fb0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	441a      	add	r2, r3
 8006fbe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fec:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	441a      	add	r2, r3
 8006ffa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006ffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800700a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800700e:	b29b      	uxth	r3, r3
 8007010:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007012:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8007016:	4618      	mov	r0, r3
 8007018:	379c      	adds	r7, #156	@ 0x9c
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop

08007024 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007024:	b480      	push	{r7}
 8007026:	b08d      	sub	sp, #52	@ 0x34
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	7b1b      	ldrb	r3, [r3, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	f040 808e 	bne.w	8007154 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	785b      	ldrb	r3, [r3, #1]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d044      	beq.n	80070ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	81bb      	strh	r3, [r7, #12]
 800704e:	89bb      	ldrh	r3, [r7, #12]
 8007050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01b      	beq.n	8007090 <USB_DeactivateEndpoint+0x6c>
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	b29b      	uxth	r3, r3
 8007066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800706a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800706e:	817b      	strh	r3, [r7, #10]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	441a      	add	r2, r3
 800707a:	897b      	ldrh	r3, [r7, #10]
 800707c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007080:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007088:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800708c:	b29b      	uxth	r3, r3
 800708e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29b      	uxth	r3, r3
 800709e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070a6:	813b      	strh	r3, [r7, #8]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	441a      	add	r2, r3
 80070b2:	893b      	ldrh	r3, [r7, #8]
 80070b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	8013      	strh	r3, [r2, #0]
 80070c8:	e192      	b.n	80073f0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	827b      	strh	r3, [r7, #18]
 80070d8:	8a7b      	ldrh	r3, [r7, #18]
 80070da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01b      	beq.n	800711a <USB_DeactivateEndpoint+0xf6>
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070f8:	823b      	strh	r3, [r7, #16]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	441a      	add	r2, r3
 8007104:	8a3b      	ldrh	r3, [r7, #16]
 8007106:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800710a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800710e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007116:	b29b      	uxth	r3, r3
 8007118:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800712c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007130:	81fb      	strh	r3, [r7, #14]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	441a      	add	r2, r3
 800713c:	89fb      	ldrh	r3, [r7, #14]
 800713e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007142:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800714a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800714e:	b29b      	uxth	r3, r3
 8007150:	8013      	strh	r3, [r2, #0]
 8007152:	e14d      	b.n	80073f0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f040 80a5 	bne.w	80072a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	843b      	strh	r3, [r7, #32]
 800716c:	8c3b      	ldrh	r3, [r7, #32]
 800716e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d01b      	beq.n	80071ae <USB_DeactivateEndpoint+0x18a>
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800718c:	83fb      	strh	r3, [r7, #30]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	441a      	add	r2, r3
 8007198:	8bfb      	ldrh	r3, [r7, #30]
 800719a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800719e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	83bb      	strh	r3, [r7, #28]
 80071bc:	8bbb      	ldrh	r3, [r7, #28]
 80071be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d01b      	beq.n	80071fe <USB_DeactivateEndpoint+0x1da>
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071dc:	837b      	strh	r3, [r7, #26]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	441a      	add	r2, r3
 80071e8:	8b7b      	ldrh	r3, [r7, #26]
 80071ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	b29b      	uxth	r3, r3
 800720c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007214:	833b      	strh	r3, [r7, #24]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	441a      	add	r2, r3
 8007220:	8b3b      	ldrh	r3, [r7, #24]
 8007222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800722a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800722e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007232:	b29b      	uxth	r3, r3
 8007234:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b29b      	uxth	r3, r3
 8007244:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800724c:	82fb      	strh	r3, [r7, #22]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	441a      	add	r2, r3
 8007258:	8afb      	ldrh	r3, [r7, #22]
 800725a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800725e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007262:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800726a:	b29b      	uxth	r3, r3
 800726c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007280:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007284:	82bb      	strh	r3, [r7, #20]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	441a      	add	r2, r3
 8007290:	8abb      	ldrh	r3, [r7, #20]
 8007292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800729a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800729e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	8013      	strh	r3, [r2, #0]
 80072a6:	e0a3      	b.n	80073f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80072b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80072b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01b      	beq.n	80072f8 <USB_DeactivateEndpoint+0x2d4>
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072d6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	441a      	add	r2, r3
 80072e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80072e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007306:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800730c:	2b00      	cmp	r3, #0
 800730e:	d01b      	beq.n	8007348 <USB_DeactivateEndpoint+0x324>
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	b29b      	uxth	r3, r3
 800731e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007326:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	441a      	add	r2, r3
 8007332:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007334:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007338:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800733c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007340:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007344:	b29b      	uxth	r3, r3
 8007346:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29b      	uxth	r3, r3
 8007356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800735a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800735e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	441a      	add	r2, r3
 800736a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800736c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007370:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007374:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800737c:	b29b      	uxth	r3, r3
 800737e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007392:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007396:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	441a      	add	r2, r3
 80073a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80073a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ce:	847b      	strh	r3, [r7, #34]	@ 0x22
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	441a      	add	r2, r3
 80073da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80073dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3734      	adds	r7, #52	@ 0x34
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b0ac      	sub	sp, #176	@ 0xb0
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	785b      	ldrb	r3, [r3, #1]
 800740c:	2b01      	cmp	r3, #1
 800740e:	f040 84ca 	bne.w	8007da6 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	429a      	cmp	r2, r3
 800741c:	d904      	bls.n	8007428 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007426:	e003      	b.n	8007430 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	7b1b      	ldrb	r3, [r3, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d122      	bne.n	800747e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	6959      	ldr	r1, [r3, #20]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	88da      	ldrh	r2, [r3, #6]
 8007440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007444:	b29b      	uxth	r3, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 febd 	bl	80081c6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	613b      	str	r3, [r7, #16]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007456:	b29b      	uxth	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	4413      	add	r3, r2
 800745e:	613b      	str	r3, [r7, #16]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	00da      	lsls	r2, r3, #3
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	4413      	add	r3, r2
 800746a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007474:	b29a      	uxth	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	801a      	strh	r2, [r3, #0]
 800747a:	f000 bc6f 	b.w	8007d5c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	78db      	ldrb	r3, [r3, #3]
 8007482:	2b02      	cmp	r3, #2
 8007484:	f040 831e 	bne.w	8007ac4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	6a1a      	ldr	r2, [r3, #32]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	429a      	cmp	r2, r3
 8007492:	f240 82cf 	bls.w	8007a34 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ac:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	441a      	add	r2, r3
 80074ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80074be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074c6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80074ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6a1a      	ldr	r2, [r3, #32]
 80074d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074da:	1ad2      	subs	r2, r2, r3
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 814f 	beq.w	8007796 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	785b      	ldrb	r3, [r3, #1]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d16b      	bne.n	80075dc <USB_EPStartXfer+0x1de>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800750e:	b29b      	uxth	r3, r3
 8007510:	461a      	mov	r2, r3
 8007512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007514:	4413      	add	r3, r2
 8007516:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	00da      	lsls	r2, r3, #3
 800751e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007520:	4413      	add	r3, r2
 8007522:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007526:	627b      	str	r3, [r7, #36]	@ 0x24
 8007528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	b29b      	uxth	r3, r3
 800752e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007532:	b29a      	uxth	r2, r3
 8007534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007536:	801a      	strh	r2, [r3, #0]
 8007538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10a      	bne.n	8007556 <USB_EPStartXfer+0x158>
 8007540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	b29b      	uxth	r3, r3
 8007546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800754a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800754e:	b29a      	uxth	r2, r3
 8007550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007552:	801a      	strh	r2, [r3, #0]
 8007554:	e05b      	b.n	800760e <USB_EPStartXfer+0x210>
 8007556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800755a:	2b3e      	cmp	r3, #62	@ 0x3e
 800755c:	d81c      	bhi.n	8007598 <USB_EPStartXfer+0x19a>
 800755e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007562:	085b      	lsrs	r3, r3, #1
 8007564:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007568:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b00      	cmp	r3, #0
 8007572:	d004      	beq.n	800757e <USB_EPStartXfer+0x180>
 8007574:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007578:	3301      	adds	r3, #1
 800757a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800757e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	b29a      	uxth	r2, r3
 8007584:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007588:	b29b      	uxth	r3, r3
 800758a:	029b      	lsls	r3, r3, #10
 800758c:	b29b      	uxth	r3, r3
 800758e:	4313      	orrs	r3, r2
 8007590:	b29a      	uxth	r2, r3
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	801a      	strh	r2, [r3, #0]
 8007596:	e03a      	b.n	800760e <USB_EPStartXfer+0x210>
 8007598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800759c:	095b      	lsrs	r3, r3, #5
 800759e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075a6:	f003 031f 	and.w	r3, r3, #31
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d104      	bne.n	80075b8 <USB_EPStartXfer+0x1ba>
 80075ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075b2:	3b01      	subs	r3, #1
 80075b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	b29a      	uxth	r2, r3
 80075be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	029b      	lsls	r3, r3, #10
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	4313      	orrs	r3, r2
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	801a      	strh	r2, [r3, #0]
 80075da:	e018      	b.n	800760e <USB_EPStartXfer+0x210>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	785b      	ldrb	r3, [r3, #1]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d114      	bne.n	800760e <USB_EPStartXfer+0x210>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	461a      	mov	r2, r3
 80075ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f0:	4413      	add	r3, r2
 80075f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	00da      	lsls	r2, r3, #3
 80075fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fc:	4413      	add	r3, r2
 80075fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007604:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007608:	b29a      	uxth	r2, r3
 800760a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800760c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	895b      	ldrh	r3, [r3, #10]
 8007612:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	6959      	ldr	r1, [r3, #20]
 800761a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800761e:	b29b      	uxth	r3, r3
 8007620:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fdce 	bl	80081c6 <USB_WritePMA>
            ep->xfer_buff += len;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	695a      	ldr	r2, [r3, #20]
 800762e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007632:	441a      	add	r2, r3
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	6a1a      	ldr	r2, [r3, #32]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	429a      	cmp	r2, r3
 8007642:	d907      	bls.n	8007654 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	6a1a      	ldr	r2, [r3, #32]
 8007648:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800764c:	1ad2      	subs	r2, r2, r3
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	621a      	str	r2, [r3, #32]
 8007652:	e006      	b.n	8007662 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	2200      	movs	r2, #0
 8007660:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	785b      	ldrb	r3, [r3, #1]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d16b      	bne.n	8007742 <USB_EPStartXfer+0x344>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	61bb      	str	r3, [r7, #24]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007674:	b29b      	uxth	r3, r3
 8007676:	461a      	mov	r2, r3
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	4413      	add	r3, r2
 800767c:	61bb      	str	r3, [r7, #24]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	00da      	lsls	r2, r3, #3
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	4413      	add	r3, r2
 8007688:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800768c:	617b      	str	r3, [r7, #20]
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	881b      	ldrh	r3, [r3, #0]
 8007692:	b29b      	uxth	r3, r3
 8007694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007698:	b29a      	uxth	r2, r3
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10a      	bne.n	80076bc <USB_EPStartXfer+0x2be>
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	801a      	strh	r2, [r3, #0]
 80076ba:	e05d      	b.n	8007778 <USB_EPStartXfer+0x37a>
 80076bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80076c2:	d81c      	bhi.n	80076fe <USB_EPStartXfer+0x300>
 80076c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076c8:	085b      	lsrs	r3, r3, #1
 80076ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80076ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d004      	beq.n	80076e4 <USB_EPStartXfer+0x2e6>
 80076da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80076de:	3301      	adds	r3, #1
 80076e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	029b      	lsls	r3, r3, #10
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	4313      	orrs	r3, r2
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	801a      	strh	r2, [r3, #0]
 80076fc:	e03c      	b.n	8007778 <USB_EPStartXfer+0x37a>
 80076fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007702:	095b      	lsrs	r3, r3, #5
 8007704:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800770c:	f003 031f 	and.w	r3, r3, #31
 8007710:	2b00      	cmp	r3, #0
 8007712:	d104      	bne.n	800771e <USB_EPStartXfer+0x320>
 8007714:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007718:	3b01      	subs	r3, #1
 800771a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	b29a      	uxth	r2, r3
 8007724:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007728:	b29b      	uxth	r3, r3
 800772a:	029b      	lsls	r3, r3, #10
 800772c:	b29b      	uxth	r3, r3
 800772e:	4313      	orrs	r3, r2
 8007730:	b29b      	uxth	r3, r3
 8007732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800773a:	b29a      	uxth	r2, r3
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	801a      	strh	r2, [r3, #0]
 8007740:	e01a      	b.n	8007778 <USB_EPStartXfer+0x37a>
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	785b      	ldrb	r3, [r3, #1]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d116      	bne.n	8007778 <USB_EPStartXfer+0x37a>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	623b      	str	r3, [r7, #32]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007754:	b29b      	uxth	r3, r3
 8007756:	461a      	mov	r2, r3
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	4413      	add	r3, r2
 800775c:	623b      	str	r3, [r7, #32]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	00da      	lsls	r2, r3, #3
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	4413      	add	r3, r2
 8007768:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800776c:	61fb      	str	r3, [r7, #28]
 800776e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007772:	b29a      	uxth	r2, r3
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	891b      	ldrh	r3, [r3, #8]
 800777c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	6959      	ldr	r1, [r3, #20]
 8007784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007788:	b29b      	uxth	r3, r3
 800778a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fd19 	bl	80081c6 <USB_WritePMA>
 8007794:	e2e2      	b.n	8007d5c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	785b      	ldrb	r3, [r3, #1]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d16b      	bne.n	8007876 <USB_EPStartXfer+0x478>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	461a      	mov	r2, r3
 80077ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077ae:	4413      	add	r3, r2
 80077b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	00da      	lsls	r2, r3, #3
 80077b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077ba:	4413      	add	r3, r2
 80077bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80077c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80077c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077d0:	801a      	strh	r2, [r3, #0]
 80077d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10a      	bne.n	80077f0 <USB_EPStartXfer+0x3f2>
 80077da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ec:	801a      	strh	r2, [r3, #0]
 80077ee:	e05d      	b.n	80078ac <USB_EPStartXfer+0x4ae>
 80077f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80077f6:	d81c      	bhi.n	8007832 <USB_EPStartXfer+0x434>
 80077f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077fc:	085b      	lsrs	r3, r3, #1
 80077fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	d004      	beq.n	8007818 <USB_EPStartXfer+0x41a>
 800780e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007812:	3301      	adds	r3, #1
 8007814:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	b29a      	uxth	r2, r3
 800781e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007822:	b29b      	uxth	r3, r3
 8007824:	029b      	lsls	r3, r3, #10
 8007826:	b29b      	uxth	r3, r3
 8007828:	4313      	orrs	r3, r2
 800782a:	b29a      	uxth	r2, r3
 800782c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800782e:	801a      	strh	r2, [r3, #0]
 8007830:	e03c      	b.n	80078ac <USB_EPStartXfer+0x4ae>
 8007832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007836:	095b      	lsrs	r3, r3, #5
 8007838:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800783c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007840:	f003 031f 	and.w	r3, r3, #31
 8007844:	2b00      	cmp	r3, #0
 8007846:	d104      	bne.n	8007852 <USB_EPStartXfer+0x454>
 8007848:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800784c:	3b01      	subs	r3, #1
 800784e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29a      	uxth	r2, r3
 8007858:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800785c:	b29b      	uxth	r3, r3
 800785e:	029b      	lsls	r3, r3, #10
 8007860:	b29b      	uxth	r3, r3
 8007862:	4313      	orrs	r3, r2
 8007864:	b29b      	uxth	r3, r3
 8007866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800786a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786e:	b29a      	uxth	r2, r3
 8007870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007872:	801a      	strh	r2, [r3, #0]
 8007874:	e01a      	b.n	80078ac <USB_EPStartXfer+0x4ae>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	785b      	ldrb	r3, [r3, #1]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d116      	bne.n	80078ac <USB_EPStartXfer+0x4ae>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	653b      	str	r3, [r7, #80]	@ 0x50
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007888:	b29b      	uxth	r3, r3
 800788a:	461a      	mov	r2, r3
 800788c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800788e:	4413      	add	r3, r2
 8007890:	653b      	str	r3, [r7, #80]	@ 0x50
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	00da      	lsls	r2, r3, #3
 8007898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800789a:	4413      	add	r3, r2
 800789c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80078a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	891b      	ldrh	r3, [r3, #8]
 80078b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	6959      	ldr	r1, [r3, #20]
 80078b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078bc:	b29b      	uxth	r3, r3
 80078be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fc7f 	bl	80081c6 <USB_WritePMA>
            ep->xfer_buff += len;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	695a      	ldr	r2, [r3, #20]
 80078cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078d0:	441a      	add	r2, r3
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	6a1a      	ldr	r2, [r3, #32]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d907      	bls.n	80078f2 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	6a1a      	ldr	r2, [r3, #32]
 80078e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078ea:	1ad2      	subs	r2, r2, r3
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	621a      	str	r2, [r3, #32]
 80078f0:	e006      	b.n	8007900 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2200      	movs	r2, #0
 80078fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	643b      	str	r3, [r7, #64]	@ 0x40
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	785b      	ldrb	r3, [r3, #1]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d16b      	bne.n	80079e4 <USB_EPStartXfer+0x5e6>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007916:	b29b      	uxth	r3, r3
 8007918:	461a      	mov	r2, r3
 800791a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791c:	4413      	add	r3, r2
 800791e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	00da      	lsls	r2, r3, #3
 8007926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007928:	4413      	add	r3, r2
 800792a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800792e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	b29b      	uxth	r3, r3
 8007936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800793a:	b29a      	uxth	r2, r3
 800793c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800793e:	801a      	strh	r2, [r3, #0]
 8007940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10a      	bne.n	800795e <USB_EPStartXfer+0x560>
 8007948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007956:	b29a      	uxth	r2, r3
 8007958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800795a:	801a      	strh	r2, [r3, #0]
 800795c:	e05b      	b.n	8007a16 <USB_EPStartXfer+0x618>
 800795e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007962:	2b3e      	cmp	r3, #62	@ 0x3e
 8007964:	d81c      	bhi.n	80079a0 <USB_EPStartXfer+0x5a2>
 8007966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800796a:	085b      	lsrs	r3, r3, #1
 800796c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d004      	beq.n	8007986 <USB_EPStartXfer+0x588>
 800797c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007980:	3301      	adds	r3, #1
 8007982:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	b29a      	uxth	r2, r3
 800798c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007990:	b29b      	uxth	r3, r3
 8007992:	029b      	lsls	r3, r3, #10
 8007994:	b29b      	uxth	r3, r3
 8007996:	4313      	orrs	r3, r2
 8007998:	b29a      	uxth	r2, r3
 800799a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800799c:	801a      	strh	r2, [r3, #0]
 800799e:	e03a      	b.n	8007a16 <USB_EPStartXfer+0x618>
 80079a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079a4:	095b      	lsrs	r3, r3, #5
 80079a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80079aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079ae:	f003 031f 	and.w	r3, r3, #31
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d104      	bne.n	80079c0 <USB_EPStartXfer+0x5c2>
 80079b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079ba:	3b01      	subs	r3, #1
 80079bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80079c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	029b      	lsls	r3, r3, #10
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	4313      	orrs	r3, r2
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079dc:	b29a      	uxth	r2, r3
 80079de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e0:	801a      	strh	r2, [r3, #0]
 80079e2:	e018      	b.n	8007a16 <USB_EPStartXfer+0x618>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	785b      	ldrb	r3, [r3, #1]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d114      	bne.n	8007a16 <USB_EPStartXfer+0x618>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	461a      	mov	r2, r3
 80079f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079f8:	4413      	add	r3, r2
 80079fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	00da      	lsls	r2, r3, #3
 8007a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a04:	4413      	add	r3, r2
 8007a06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	895b      	ldrh	r3, [r3, #10]
 8007a1a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	6959      	ldr	r1, [r3, #20]
 8007a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fbca 	bl	80081c6 <USB_WritePMA>
 8007a32:	e193      	b.n	8007d5c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4413      	add	r3, r2
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a52:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	441a      	add	r2, r3
 8007a60:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007a64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	461a      	mov	r2, r3
 8007a86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a88:	4413      	add	r3, r2
 8007a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	00da      	lsls	r2, r3, #3
 8007a92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a94:	4413      	add	r3, r2
 8007a96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007aa4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	891b      	ldrh	r3, [r3, #8]
 8007aaa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	6959      	ldr	r1, [r3, #20]
 8007ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fb82 	bl	80081c6 <USB_WritePMA>
 8007ac2:	e14b      	b.n	8007d5c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	6a1a      	ldr	r2, [r3, #32]
 8007ac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007acc:	1ad2      	subs	r2, r2, r3
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 809a 	beq.w	8007c1e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	673b      	str	r3, [r7, #112]	@ 0x70
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	785b      	ldrb	r3, [r3, #1]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d16b      	bne.n	8007bce <USB_EPStartXfer+0x7d0>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	461a      	mov	r2, r3
 8007b04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b06:	4413      	add	r3, r2
 8007b08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	00da      	lsls	r2, r3, #3
 8007b10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b12:	4413      	add	r3, r2
 8007b14:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b18:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b28:	801a      	strh	r2, [r3, #0]
 8007b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10a      	bne.n	8007b48 <USB_EPStartXfer+0x74a>
 8007b32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	e05b      	b.n	8007c00 <USB_EPStartXfer+0x802>
 8007b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b4e:	d81c      	bhi.n	8007b8a <USB_EPStartXfer+0x78c>
 8007b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b54:	085b      	lsrs	r3, r3, #1
 8007b56:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d004      	beq.n	8007b70 <USB_EPStartXfer+0x772>
 8007b66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	029b      	lsls	r3, r3, #10
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	4313      	orrs	r3, r2
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b86:	801a      	strh	r2, [r3, #0]
 8007b88:	e03a      	b.n	8007c00 <USB_EPStartXfer+0x802>
 8007b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b8e:	095b      	lsrs	r3, r3, #5
 8007b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b98:	f003 031f 	and.w	r3, r3, #31
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d104      	bne.n	8007baa <USB_EPStartXfer+0x7ac>
 8007ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007baa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	029b      	lsls	r3, r3, #10
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bca:	801a      	strh	r2, [r3, #0]
 8007bcc:	e018      	b.n	8007c00 <USB_EPStartXfer+0x802>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	785b      	ldrb	r3, [r3, #1]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d114      	bne.n	8007c00 <USB_EPStartXfer+0x802>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	461a      	mov	r2, r3
 8007be0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007be2:	4413      	add	r3, r2
 8007be4:	673b      	str	r3, [r7, #112]	@ 0x70
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	00da      	lsls	r2, r3, #3
 8007bec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bee:	4413      	add	r3, r2
 8007bf0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007bf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bfe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	895b      	ldrh	r3, [r3, #10]
 8007c04:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	6959      	ldr	r1, [r3, #20]
 8007c0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fad5 	bl	80081c6 <USB_WritePMA>
 8007c1c:	e09e      	b.n	8007d5c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d16b      	bne.n	8007cfe <USB_EPStartXfer+0x900>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	461a      	mov	r2, r3
 8007c34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c36:	4413      	add	r3, r2
 8007c38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	00da      	lsls	r2, r3, #3
 8007c40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c42:	4413      	add	r3, r2
 8007c44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c58:	801a      	strh	r2, [r3, #0]
 8007c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10a      	bne.n	8007c78 <USB_EPStartXfer+0x87a>
 8007c62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c74:	801a      	strh	r2, [r3, #0]
 8007c76:	e063      	b.n	8007d40 <USB_EPStartXfer+0x942>
 8007c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c7e:	d81c      	bhi.n	8007cba <USB_EPStartXfer+0x8bc>
 8007c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c84:	085b      	lsrs	r3, r3, #1
 8007c86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d004      	beq.n	8007ca0 <USB_EPStartXfer+0x8a2>
 8007c96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ca0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	029b      	lsls	r3, r3, #10
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cb6:	801a      	strh	r2, [r3, #0]
 8007cb8:	e042      	b.n	8007d40 <USB_EPStartXfer+0x942>
 8007cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cbe:	095b      	lsrs	r3, r3, #5
 8007cc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cc8:	f003 031f 	and.w	r3, r3, #31
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d104      	bne.n	8007cda <USB_EPStartXfer+0x8dc>
 8007cd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007cda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cdc:	881b      	ldrh	r3, [r3, #0]
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	029b      	lsls	r3, r3, #10
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	4313      	orrs	r3, r2
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cfa:	801a      	strh	r2, [r3, #0]
 8007cfc:	e020      	b.n	8007d40 <USB_EPStartXfer+0x942>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	785b      	ldrb	r3, [r3, #1]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d11c      	bne.n	8007d40 <USB_EPStartXfer+0x942>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	461a      	mov	r2, r3
 8007d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	00da      	lsls	r2, r3, #3
 8007d26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007d3e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	891b      	ldrh	r3, [r3, #8]
 8007d44:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	6959      	ldr	r1, [r3, #20]
 8007d4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa35 	bl	80081c6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d72:	817b      	strh	r3, [r7, #10]
 8007d74:	897b      	ldrh	r3, [r7, #10]
 8007d76:	f083 0310 	eor.w	r3, r3, #16
 8007d7a:	817b      	strh	r3, [r7, #10]
 8007d7c:	897b      	ldrh	r3, [r7, #10]
 8007d7e:	f083 0320 	eor.w	r3, r3, #32
 8007d82:	817b      	strh	r3, [r7, #10]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	441a      	add	r2, r3
 8007d8e:	897b      	ldrh	r3, [r7, #10]
 8007d90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	8013      	strh	r3, [r2, #0]
 8007da4:	e0d5      	b.n	8007f52 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	7b1b      	ldrb	r3, [r3, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d156      	bne.n	8007e5c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d122      	bne.n	8007dfc <USB_EPStartXfer+0x9fe>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	78db      	ldrb	r3, [r3, #3]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d11e      	bne.n	8007dfc <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dd4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	441a      	add	r2, r3
 8007de2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007de6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007df2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	8013      	strh	r3, [r2, #0]
 8007dfa:	e01d      	b.n	8007e38 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e12:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	441a      	add	r2, r3
 8007e20:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8007e24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	699a      	ldr	r2, [r3, #24]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d907      	bls.n	8007e54 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	699a      	ldr	r2, [r3, #24]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	1ad2      	subs	r2, r2, r3
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	619a      	str	r2, [r3, #24]
 8007e52:	e054      	b.n	8007efe <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2200      	movs	r2, #0
 8007e58:	619a      	str	r2, [r3, #24]
 8007e5a:	e050      	b.n	8007efe <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	78db      	ldrb	r3, [r3, #3]
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d142      	bne.n	8007eea <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d048      	beq.n	8007efe <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e7c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d005      	beq.n	8007e94 <USB_EPStartXfer+0xa96>
 8007e88:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10b      	bne.n	8007eac <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e94:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007e98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d12e      	bne.n	8007efe <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ea0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d128      	bne.n	8007efe <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ec2:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	441a      	add	r2, r3
 8007ed0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007ed4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ed8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007edc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ee0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	8013      	strh	r3, [r2, #0]
 8007ee8:	e009      	b.n	8007efe <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	78db      	ldrb	r3, [r3, #3]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d103      	bne.n	8007efa <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	619a      	str	r2, [r3, #24]
 8007ef8:	e001      	b.n	8007efe <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e02a      	b.n	8007f54 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f14:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007f18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f1c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007f20:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007f24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f2c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	441a      	add	r2, r3
 8007f3a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	37b0      	adds	r7, #176	@ 0xb0
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	785b      	ldrb	r3, [r3, #1]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d020      	beq.n	8007fb0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f84:	81bb      	strh	r3, [r7, #12]
 8007f86:	89bb      	ldrh	r3, [r7, #12]
 8007f88:	f083 0310 	eor.w	r3, r3, #16
 8007f8c:	81bb      	strh	r3, [r7, #12]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	441a      	add	r2, r3
 8007f98:	89bb      	ldrh	r3, [r7, #12]
 8007f9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	8013      	strh	r3, [r2, #0]
 8007fae:	e01f      	b.n	8007ff0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fc6:	81fb      	strh	r3, [r7, #14]
 8007fc8:	89fb      	ldrh	r3, [r7, #14]
 8007fca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007fce:	81fb      	strh	r3, [r7, #14]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	441a      	add	r2, r3
 8007fda:	89fb      	ldrh	r3, [r7, #14]
 8007fdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fe0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fe4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b087      	sub	sp, #28
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	785b      	ldrb	r3, [r3, #1]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d04c      	beq.n	80080aa <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4413      	add	r3, r2
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	823b      	strh	r3, [r7, #16]
 800801e:	8a3b      	ldrh	r3, [r7, #16]
 8008020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008024:	2b00      	cmp	r3, #0
 8008026:	d01b      	beq.n	8008060 <USB_EPClearStall+0x62>
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	b29b      	uxth	r3, r3
 8008036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800803a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800803e:	81fb      	strh	r3, [r7, #14]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	441a      	add	r2, r3
 800804a:	89fb      	ldrh	r3, [r7, #14]
 800804c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008050:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008054:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008058:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800805c:	b29b      	uxth	r3, r3
 800805e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	78db      	ldrb	r3, [r3, #3]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d06c      	beq.n	8008142 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	b29b      	uxth	r3, r3
 8008076:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800807a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800807e:	81bb      	strh	r3, [r7, #12]
 8008080:	89bb      	ldrh	r3, [r7, #12]
 8008082:	f083 0320 	eor.w	r3, r3, #32
 8008086:	81bb      	strh	r3, [r7, #12]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	441a      	add	r2, r3
 8008092:	89bb      	ldrh	r3, [r7, #12]
 8008094:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008098:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800809c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	8013      	strh	r3, [r2, #0]
 80080a8:	e04b      	b.n	8008142 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	82fb      	strh	r3, [r7, #22]
 80080b8:	8afb      	ldrh	r3, [r7, #22]
 80080ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d01b      	beq.n	80080fa <USB_EPClearStall+0xfc>
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080d8:	82bb      	strh	r3, [r7, #20]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	441a      	add	r2, r3
 80080e4:	8abb      	ldrh	r3, [r7, #20]
 80080e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	b29b      	uxth	r3, r3
 8008108:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800810c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008110:	827b      	strh	r3, [r7, #18]
 8008112:	8a7b      	ldrh	r3, [r7, #18]
 8008114:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008118:	827b      	strh	r3, [r7, #18]
 800811a:	8a7b      	ldrh	r3, [r7, #18]
 800811c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008120:	827b      	strh	r3, [r7, #18]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	441a      	add	r2, r3
 800812c:	8a7b      	ldrh	r3, [r7, #18]
 800812e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008132:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800813a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800813e:	b29b      	uxth	r3, r3
 8008140:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	371c      	adds	r7, #28
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800815c:	78fb      	ldrb	r3, [r7, #3]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d103      	bne.n	800816a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2280      	movs	r2, #128	@ 0x80
 8008166:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008186:	b29b      	uxth	r3, r3
 8008188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800818c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008190:	b29a      	uxth	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b085      	sub	sp, #20
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80081b8:	68fb      	ldr	r3, [r7, #12]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b08b      	sub	sp, #44	@ 0x2c
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	60f8      	str	r0, [r7, #12]
 80081ce:	60b9      	str	r1, [r7, #8]
 80081d0:	4611      	mov	r1, r2
 80081d2:	461a      	mov	r2, r3
 80081d4:	460b      	mov	r3, r1
 80081d6:	80fb      	strh	r3, [r7, #6]
 80081d8:	4613      	mov	r3, r2
 80081da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80081dc:	88bb      	ldrh	r3, [r7, #4]
 80081de:	3301      	adds	r3, #1
 80081e0:	085b      	lsrs	r3, r3, #1
 80081e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081ec:	88fa      	ldrh	r2, [r7, #6]
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	4413      	add	r3, r2
 80081f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081f6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80081fc:	e01b      	b.n	8008236 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	3301      	adds	r3, #1
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	b21a      	sxth	r2, r3
 800820e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008212:	4313      	orrs	r3, r2
 8008214:	b21b      	sxth	r3, r3
 8008216:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008218:	6a3b      	ldr	r3, [r7, #32]
 800821a:	8a7a      	ldrh	r2, [r7, #18]
 800821c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	3302      	adds	r3, #2
 8008222:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	3301      	adds	r3, #1
 8008228:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	3301      	adds	r3, #1
 800822e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008232:	3b01      	subs	r3, #1
 8008234:	627b      	str	r3, [r7, #36]	@ 0x24
 8008236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1e0      	bne.n	80081fe <USB_WritePMA+0x38>
  }
}
 800823c:	bf00      	nop
 800823e:	bf00      	nop
 8008240:	372c      	adds	r7, #44	@ 0x2c
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800824a:	b480      	push	{r7}
 800824c:	b08b      	sub	sp, #44	@ 0x2c
 800824e:	af00      	add	r7, sp, #0
 8008250:	60f8      	str	r0, [r7, #12]
 8008252:	60b9      	str	r1, [r7, #8]
 8008254:	4611      	mov	r1, r2
 8008256:	461a      	mov	r2, r3
 8008258:	460b      	mov	r3, r1
 800825a:	80fb      	strh	r3, [r7, #6]
 800825c:	4613      	mov	r3, r2
 800825e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008260:	88bb      	ldrh	r3, [r7, #4]
 8008262:	085b      	lsrs	r3, r3, #1
 8008264:	b29b      	uxth	r3, r3
 8008266:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008270:	88fa      	ldrh	r2, [r7, #6]
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	4413      	add	r3, r2
 8008276:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800827a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008280:	e018      	b.n	80082b4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	b29b      	uxth	r3, r3
 8008288:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	3302      	adds	r3, #2
 800828e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	b2da      	uxtb	r2, r3
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	3301      	adds	r3, #1
 800829c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	0a1b      	lsrs	r3, r3, #8
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	3301      	adds	r3, #1
 80082ac:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80082ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b0:	3b01      	subs	r3, #1
 80082b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80082b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1e3      	bne.n	8008282 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80082ba:	88bb      	ldrh	r3, [r7, #4]
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d007      	beq.n	80082d6 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	701a      	strb	r2, [r3, #0]
  }
}
 80082d6:	bf00      	nop
 80082d8:	372c      	adds	r7, #44	@ 0x2c
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	460b      	mov	r3, r1
 80082ec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082ee:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80082f2:	f002 f8f9 	bl	800a4e8 <USBD_static_malloc>
 80082f6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d105      	bne.n	800830a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8008306:	2302      	movs	r3, #2
 8008308:	e066      	b.n	80083d8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	7c1b      	ldrb	r3, [r3, #16]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d119      	bne.n	800834e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800831a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800831e:	2202      	movs	r2, #2
 8008320:	2181      	movs	r1, #129	@ 0x81
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 ff87 	bl	800a236 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800832e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008332:	2202      	movs	r2, #2
 8008334:	2101      	movs	r1, #1
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 ff7d 	bl	800a236 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2210      	movs	r2, #16
 8008348:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800834c:	e016      	b.n	800837c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800834e:	2340      	movs	r3, #64	@ 0x40
 8008350:	2202      	movs	r2, #2
 8008352:	2181      	movs	r1, #129	@ 0x81
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 ff6e 	bl	800a236 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008360:	2340      	movs	r3, #64	@ 0x40
 8008362:	2202      	movs	r2, #2
 8008364:	2101      	movs	r1, #1
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f001 ff65 	bl	800a236 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2210      	movs	r2, #16
 8008378:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800837c:	2308      	movs	r3, #8
 800837e:	2203      	movs	r2, #3
 8008380:	2182      	movs	r1, #130	@ 0x82
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f001 ff57 	bl	800a236 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	7c1b      	ldrb	r3, [r3, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d109      	bne.n	80083c6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083bc:	2101      	movs	r1, #1
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f002 f828 	bl	800a414 <USBD_LL_PrepareReceive>
 80083c4:	e007      	b.n	80083d6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083cc:	2340      	movs	r3, #64	@ 0x40
 80083ce:	2101      	movs	r1, #1
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f002 f81f 	bl	800a414 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	460b      	mov	r3, r1
 80083ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80083ec:	2181      	movs	r1, #129	@ 0x81
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f001 ff47 	bl	800a282 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80083fa:	2101      	movs	r1, #1
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f001 ff40 	bl	800a282 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800840a:	2182      	movs	r1, #130	@ 0x82
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 ff38 	bl	800a282 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00e      	beq.n	800844a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800843c:	4618      	mov	r0, r3
 800843e:	f002 f861 	bl	800a504 <USBD_static_free>
    pdev->pClassData = NULL;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008464:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008478:	2303      	movs	r3, #3
 800847a:	e0af      	b.n	80085dc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008484:	2b00      	cmp	r3, #0
 8008486:	d03f      	beq.n	8008508 <USBD_CDC_Setup+0xb4>
 8008488:	2b20      	cmp	r3, #32
 800848a:	f040 809f 	bne.w	80085cc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	88db      	ldrh	r3, [r3, #6]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d02e      	beq.n	80084f4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	b25b      	sxtb	r3, r3
 800849c:	2b00      	cmp	r3, #0
 800849e:	da16      	bge.n	80084ce <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80084ac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	88d2      	ldrh	r2, [r2, #6]
 80084b2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	88db      	ldrh	r3, [r3, #6]
 80084b8:	2b07      	cmp	r3, #7
 80084ba:	bf28      	it	cs
 80084bc:	2307      	movcs	r3, #7
 80084be:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	89fa      	ldrh	r2, [r7, #14]
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 facd 	bl	8009a66 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80084cc:	e085      	b.n	80085da <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	785a      	ldrb	r2, [r3, #1]
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	88db      	ldrh	r3, [r3, #6]
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80084e4:	6939      	ldr	r1, [r7, #16]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	88db      	ldrh	r3, [r3, #6]
 80084ea:	461a      	mov	r2, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f001 fae6 	bl	8009abe <USBD_CtlPrepareRx>
      break;
 80084f2:	e072      	b.n	80085da <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	7850      	ldrb	r0, [r2, #1]
 8008500:	2200      	movs	r2, #0
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	4798      	blx	r3
      break;
 8008506:	e068      	b.n	80085da <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	2b0b      	cmp	r3, #11
 800850e:	d852      	bhi.n	80085b6 <USBD_CDC_Setup+0x162>
 8008510:	a201      	add	r2, pc, #4	@ (adr r2, 8008518 <USBD_CDC_Setup+0xc4>)
 8008512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008516:	bf00      	nop
 8008518:	08008549 	.word	0x08008549
 800851c:	080085c5 	.word	0x080085c5
 8008520:	080085b7 	.word	0x080085b7
 8008524:	080085b7 	.word	0x080085b7
 8008528:	080085b7 	.word	0x080085b7
 800852c:	080085b7 	.word	0x080085b7
 8008530:	080085b7 	.word	0x080085b7
 8008534:	080085b7 	.word	0x080085b7
 8008538:	080085b7 	.word	0x080085b7
 800853c:	080085b7 	.word	0x080085b7
 8008540:	08008573 	.word	0x08008573
 8008544:	0800859d 	.word	0x0800859d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b03      	cmp	r3, #3
 8008552:	d107      	bne.n	8008564 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008554:	f107 030a 	add.w	r3, r7, #10
 8008558:	2202      	movs	r2, #2
 800855a:	4619      	mov	r1, r3
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f001 fa82 	bl	8009a66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008562:	e032      	b.n	80085ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f001 fa0c 	bl	8009984 <USBD_CtlError>
            ret = USBD_FAIL;
 800856c:	2303      	movs	r3, #3
 800856e:	75fb      	strb	r3, [r7, #23]
          break;
 8008570:	e02b      	b.n	80085ca <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b03      	cmp	r3, #3
 800857c:	d107      	bne.n	800858e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800857e:	f107 030d 	add.w	r3, r7, #13
 8008582:	2201      	movs	r2, #1
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f001 fa6d 	bl	8009a66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800858c:	e01d      	b.n	80085ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f001 f9f7 	bl	8009984 <USBD_CtlError>
            ret = USBD_FAIL;
 8008596:	2303      	movs	r3, #3
 8008598:	75fb      	strb	r3, [r7, #23]
          break;
 800859a:	e016      	b.n	80085ca <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b03      	cmp	r3, #3
 80085a6:	d00f      	beq.n	80085c8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f001 f9ea 	bl	8009984 <USBD_CtlError>
            ret = USBD_FAIL;
 80085b0:	2303      	movs	r3, #3
 80085b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80085b4:	e008      	b.n	80085c8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f001 f9e3 	bl	8009984 <USBD_CtlError>
          ret = USBD_FAIL;
 80085be:	2303      	movs	r3, #3
 80085c0:	75fb      	strb	r3, [r7, #23]
          break;
 80085c2:	e002      	b.n	80085ca <USBD_CDC_Setup+0x176>
          break;
 80085c4:	bf00      	nop
 80085c6:	e008      	b.n	80085da <USBD_CDC_Setup+0x186>
          break;
 80085c8:	bf00      	nop
      }
      break;
 80085ca:	e006      	b.n	80085da <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f001 f9d8 	bl	8009984 <USBD_CtlError>
      ret = USBD_FAIL;
 80085d4:	2303      	movs	r3, #3
 80085d6:	75fb      	strb	r3, [r7, #23]
      break;
 80085d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80085da:	7dfb      	ldrb	r3, [r7, #23]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	460b      	mov	r3, r1
 80085ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80085f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d101      	bne.n	8008606 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008602:	2303      	movs	r3, #3
 8008604:	e04f      	b.n	80086a6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800860c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800860e:	78fa      	ldrb	r2, [r7, #3]
 8008610:	6879      	ldr	r1, [r7, #4]
 8008612:	4613      	mov	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	440b      	add	r3, r1
 800861c:	3318      	adds	r3, #24
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d029      	beq.n	8008678 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008624:	78fa      	ldrb	r2, [r7, #3]
 8008626:	6879      	ldr	r1, [r7, #4]
 8008628:	4613      	mov	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	440b      	add	r3, r1
 8008632:	3318      	adds	r3, #24
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	78f9      	ldrb	r1, [r7, #3]
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	460b      	mov	r3, r1
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	440b      	add	r3, r1
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	4403      	add	r3, r0
 8008644:	3320      	adds	r3, #32
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	fbb2 f1f3 	udiv	r1, r2, r3
 800864c:	fb01 f303 	mul.w	r3, r1, r3
 8008650:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008652:	2b00      	cmp	r3, #0
 8008654:	d110      	bne.n	8008678 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008656:	78fa      	ldrb	r2, [r7, #3]
 8008658:	6879      	ldr	r1, [r7, #4]
 800865a:	4613      	mov	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	440b      	add	r3, r1
 8008664:	3318      	adds	r3, #24
 8008666:	2200      	movs	r2, #0
 8008668:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800866a:	78f9      	ldrb	r1, [r7, #3]
 800866c:	2300      	movs	r3, #0
 800866e:	2200      	movs	r2, #0
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f001 feae 	bl	800a3d2 <USBD_LL_Transmit>
 8008676:	e015      	b.n	80086a4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2200      	movs	r2, #0
 800867c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00b      	beq.n	80086a4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80086a0:	78fa      	ldrb	r2, [r7, #3]
 80086a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e015      	b.n	80086fc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f001 febe 	bl	800a456 <USBD_LL_GetRxDataSize>
 80086da:	4602      	mov	r2, r0
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80086f6:	4611      	mov	r1, r2
 80086f8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008712:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d101      	bne.n	800871e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800871a:	2303      	movs	r3, #3
 800871c:	e01a      	b.n	8008754 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d014      	beq.n	8008752 <USBD_CDC_EP0_RxReady+0x4e>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800872e:	2bff      	cmp	r3, #255	@ 0xff
 8008730:	d00f      	beq.n	8008752 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8008740:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008748:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	22ff      	movs	r2, #255	@ 0xff
 800874e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2243      	movs	r2, #67	@ 0x43
 8008768:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800876a:	4b03      	ldr	r3, [pc, #12]	@ (8008778 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	20000114 	.word	0x20000114

0800877c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2243      	movs	r2, #67	@ 0x43
 8008788:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800878a:	4b03      	ldr	r3, [pc, #12]	@ (8008798 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800878c:	4618      	mov	r0, r3
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	200000d0 	.word	0x200000d0

0800879c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2243      	movs	r2, #67	@ 0x43
 80087a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80087aa:	4b03      	ldr	r3, [pc, #12]	@ (80087b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	20000158 	.word	0x20000158

080087bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	220a      	movs	r2, #10
 80087c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80087ca:	4b03      	ldr	r3, [pc, #12]	@ (80087d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr
 80087d8:	2000008c 	.word	0x2000008c

080087dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e004      	b.n	80087fa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008806:	b480      	push	{r7}
 8008808:	b087      	sub	sp, #28
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008818:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008820:	2303      	movs	r3, #3
 8008822:	e008      	b.n	8008836 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008842:	b480      	push	{r7}
 8008844:	b085      	sub	sp, #20
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008852:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d101      	bne.n	800885e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800885a:	2303      	movs	r3, #3
 800885c:	e004      	b.n	8008868 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008882:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008884:	2301      	movs	r3, #1
 8008886:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008892:	2303      	movs	r3, #3
 8008894:	e01a      	b.n	80088cc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800889c:	2b00      	cmp	r3, #0
 800889e:	d114      	bne.n	80088ca <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80088be:	2181      	movs	r1, #129	@ 0x81
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f001 fd86 	bl	800a3d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e016      	b.n	8008920 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	7c1b      	ldrb	r3, [r3, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d109      	bne.n	800890e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008900:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008904:	2101      	movs	r1, #1
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f001 fd84 	bl	800a414 <USBD_LL_PrepareReceive>
 800890c:	e007      	b.n	800891e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008914:	2340      	movs	r3, #64	@ 0x40
 8008916:	2101      	movs	r1, #1
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f001 fd7b 	bl	800a414 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	4613      	mov	r3, r2
 8008934:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d101      	bne.n	8008940 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800893c:	2303      	movs	r3, #3
 800893e:	e01f      	b.n	8008980 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	79fa      	ldrb	r2, [r7, #7]
 8008972:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f001 fbe3 	bl	800a140 <USBD_LL_Init>
 800897a:	4603      	mov	r3, r0
 800897c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800897e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3718      	adds	r7, #24
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800899c:	2303      	movs	r3, #3
 800899e:	e016      	b.n	80089ce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00b      	beq.n	80089cc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089bc:	f107 020e 	add.w	r2, r7, #14
 80089c0:	4610      	mov	r0, r2
 80089c2:	4798      	blx	r3
 80089c4:	4602      	mov	r2, r0
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b082      	sub	sp, #8
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f001 fc0e 	bl	800a200 <USBD_LL_Start>
 80089e4:	4603      	mov	r3, r0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008a10:	2303      	movs	r3, #3
 8008a12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d009      	beq.n	8008a32 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	78fa      	ldrb	r2, [r7, #3]
 8008a28:	4611      	mov	r1, r2
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	4798      	blx	r3
 8008a2e:	4603      	mov	r3, r0
 8008a30:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d007      	beq.n	8008a62 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	78fa      	ldrb	r2, [r7, #3]
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	4798      	blx	r3
  }

  return USBD_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 ff46 	bl	8009910 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008a92:	461a      	mov	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008aa0:	f003 031f 	and.w	r3, r3, #31
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d01a      	beq.n	8008ade <USBD_LL_SetupStage+0x72>
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d822      	bhi.n	8008af2 <USBD_LL_SetupStage+0x86>
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d002      	beq.n	8008ab6 <USBD_LL_SetupStage+0x4a>
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d00a      	beq.n	8008aca <USBD_LL_SetupStage+0x5e>
 8008ab4:	e01d      	b.n	8008af2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f9ee 	bl	8008ea0 <USBD_StdDevReq>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac8:	e020      	b.n	8008b0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fa52 	bl	8008f7c <USBD_StdItfReq>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]
      break;
 8008adc:	e016      	b.n	8008b0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fa91 	bl	800900e <USBD_StdEPReq>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73fb      	strb	r3, [r7, #15]
      break;
 8008af0:	e00c      	b.n	8008b0c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008af8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f001 fbdd 	bl	800a2c0 <USBD_LL_StallEP>
 8008b06:	4603      	mov	r3, r0
 8008b08:	73fb      	strb	r3, [r7, #15]
      break;
 8008b0a:	bf00      	nop
  }

  return ret;
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b086      	sub	sp, #24
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	60f8      	str	r0, [r7, #12]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	607a      	str	r2, [r7, #4]
 8008b22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008b24:	7afb      	ldrb	r3, [r7, #11]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d138      	bne.n	8008b9c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008b30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d14a      	bne.n	8008bd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	689a      	ldr	r2, [r3, #8]
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d913      	bls.n	8008b70 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	689a      	ldr	r2, [r3, #8]
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	1ad2      	subs	r2, r2, r3
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	68da      	ldr	r2, [r3, #12]
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	bf28      	it	cs
 8008b62:	4613      	movcs	r3, r2
 8008b64:	461a      	mov	r2, r3
 8008b66:	6879      	ldr	r1, [r7, #4]
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 ffc5 	bl	8009af8 <USBD_CtlContinueRx>
 8008b6e:	e030      	b.n	8008bd2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d10b      	bne.n	8008b94 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d005      	beq.n	8008b94 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f000 ffc0 	bl	8009b1a <USBD_CtlSendStatus>
 8008b9a:	e01a      	b.n	8008bd2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d114      	bne.n	8008bd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00e      	beq.n	8008bd2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	7afa      	ldrb	r2, [r7, #11]
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	4798      	blx	r3
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008bc8:	7dfb      	ldrb	r3, [r7, #23]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008bce:	7dfb      	ldrb	r3, [r7, #23]
 8008bd0:	e000      	b.n	8008bd4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3718      	adds	r7, #24
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	460b      	mov	r3, r1
 8008be6:	607a      	str	r2, [r7, #4]
 8008be8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008bea:	7afb      	ldrb	r3, [r7, #11]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d16b      	bne.n	8008cc8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3314      	adds	r3, #20
 8008bf4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d156      	bne.n	8008cae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d914      	bls.n	8008c36 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	689a      	ldr	r2, [r3, #8]
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	1ad2      	subs	r2, r2, r3
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 ff3a 	bl	8009a9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c28:	2300      	movs	r3, #0
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f001 fbf0 	bl	800a414 <USBD_LL_PrepareReceive>
 8008c34:	e03b      	b.n	8008cae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d11c      	bne.n	8008c7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d316      	bcc.n	8008c7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d20f      	bcs.n	8008c7c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	2100      	movs	r1, #0
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 ff1b 	bl	8009a9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c6e:	2300      	movs	r3, #0
 8008c70:	2200      	movs	r2, #0
 8008c72:	2100      	movs	r1, #0
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f001 fbcd 	bl	800a414 <USBD_LL_PrepareReceive>
 8008c7a:	e018      	b.n	8008cae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d10b      	bne.n	8008ca0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d005      	beq.n	8008ca0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ca0:	2180      	movs	r1, #128	@ 0x80
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f001 fb0c 	bl	800a2c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 ff49 	bl	8009b40 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d122      	bne.n	8008cfe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f7ff fe98 	bl	80089ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008cc6:	e01a      	b.n	8008cfe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d114      	bne.n	8008cfe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00e      	beq.n	8008cfe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	7afa      	ldrb	r2, [r7, #11]
 8008cea:	4611      	mov	r1, r2
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	4798      	blx	r3
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008cf4:	7dfb      	ldrb	r3, [r7, #23]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
 8008cfc:	e000      	b.n	8008d00 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d101      	bne.n	8008d3c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e02f      	b.n	8008d9c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00f      	beq.n	8008d66 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d009      	beq.n	8008d66 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	6852      	ldr	r2, [r2, #4]
 8008d5e:	b2d2      	uxtb	r2, r2
 8008d60:	4611      	mov	r1, r2
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d66:	2340      	movs	r3, #64	@ 0x40
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f001 fa62 	bl	800a236 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2240      	movs	r2, #64	@ 0x40
 8008d7e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d82:	2340      	movs	r3, #64	@ 0x40
 8008d84:	2200      	movs	r2, #0
 8008d86:	2180      	movs	r1, #128	@ 0x80
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f001 fa54 	bl	800a236 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2201      	movs	r2, #1
 8008d92:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2240      	movs	r2, #64	@ 0x40
 8008d98:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	78fa      	ldrb	r2, [r7, #3]
 8008db4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2204      	movs	r2, #4
 8008dde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	d106      	bne.n	8008e12 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e012      	b.n	8008e5c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b03      	cmp	r3, #3
 8008e40:	d10b      	bne.n	8008e5a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e48:	69db      	ldr	r3, [r3, #28]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d005      	beq.n	8008e5a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e82:	8a3b      	ldrh	r3, [r7, #16]
 8008e84:	021b      	lsls	r3, r3, #8
 8008e86:	b21a      	sxth	r2, r3
 8008e88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	b21b      	sxth	r3, r3
 8008e90:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008e92:	89fb      	ldrh	r3, [r7, #14]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	371c      	adds	r7, #28
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008eb6:	2b40      	cmp	r3, #64	@ 0x40
 8008eb8:	d005      	beq.n	8008ec6 <USBD_StdDevReq+0x26>
 8008eba:	2b40      	cmp	r3, #64	@ 0x40
 8008ebc:	d853      	bhi.n	8008f66 <USBD_StdDevReq+0xc6>
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00b      	beq.n	8008eda <USBD_StdDevReq+0x3a>
 8008ec2:	2b20      	cmp	r3, #32
 8008ec4:	d14f      	bne.n	8008f66 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	4798      	blx	r3
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ed8:	e04a      	b.n	8008f70 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	785b      	ldrb	r3, [r3, #1]
 8008ede:	2b09      	cmp	r3, #9
 8008ee0:	d83b      	bhi.n	8008f5a <USBD_StdDevReq+0xba>
 8008ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee8 <USBD_StdDevReq+0x48>)
 8008ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee8:	08008f3d 	.word	0x08008f3d
 8008eec:	08008f51 	.word	0x08008f51
 8008ef0:	08008f5b 	.word	0x08008f5b
 8008ef4:	08008f47 	.word	0x08008f47
 8008ef8:	08008f5b 	.word	0x08008f5b
 8008efc:	08008f1b 	.word	0x08008f1b
 8008f00:	08008f11 	.word	0x08008f11
 8008f04:	08008f5b 	.word	0x08008f5b
 8008f08:	08008f33 	.word	0x08008f33
 8008f0c:	08008f25 	.word	0x08008f25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f9de 	bl	80092d4 <USBD_GetDescriptor>
          break;
 8008f18:	e024      	b.n	8008f64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fb6d 	bl	80095fc <USBD_SetAddress>
          break;
 8008f22:	e01f      	b.n	8008f64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fbac 	bl	8009684 <USBD_SetConfig>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73fb      	strb	r3, [r7, #15]
          break;
 8008f30:	e018      	b.n	8008f64 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fc4b 	bl	80097d0 <USBD_GetConfig>
          break;
 8008f3a:	e013      	b.n	8008f64 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fc7c 	bl	800983c <USBD_GetStatus>
          break;
 8008f44:	e00e      	b.n	8008f64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fcab 	bl	80098a4 <USBD_SetFeature>
          break;
 8008f4e:	e009      	b.n	8008f64 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fcba 	bl	80098cc <USBD_ClrFeature>
          break;
 8008f58:	e004      	b.n	8008f64 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fd11 	bl	8009984 <USBD_CtlError>
          break;
 8008f62:	bf00      	nop
      }
      break;
 8008f64:	e004      	b.n	8008f70 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fd0b 	bl	8009984 <USBD_CtlError>
      break;
 8008f6e:	bf00      	nop
  }

  return ret;
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop

08008f7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f92:	2b40      	cmp	r3, #64	@ 0x40
 8008f94:	d005      	beq.n	8008fa2 <USBD_StdItfReq+0x26>
 8008f96:	2b40      	cmp	r3, #64	@ 0x40
 8008f98:	d82f      	bhi.n	8008ffa <USBD_StdItfReq+0x7e>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <USBD_StdItfReq+0x26>
 8008f9e:	2b20      	cmp	r3, #32
 8008fa0:	d12b      	bne.n	8008ffa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	3b01      	subs	r3, #1
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d81d      	bhi.n	8008fec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	889b      	ldrh	r3, [r3, #4]
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d813      	bhi.n	8008fe2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	6839      	ldr	r1, [r7, #0]
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	4798      	blx	r3
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	88db      	ldrh	r3, [r3, #6]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d110      	bne.n	8008ff6 <USBD_StdItfReq+0x7a>
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10d      	bne.n	8008ff6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fd9d 	bl	8009b1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008fe0:	e009      	b.n	8008ff6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fccd 	bl	8009984 <USBD_CtlError>
          break;
 8008fea:	e004      	b.n	8008ff6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fcc8 	bl	8009984 <USBD_CtlError>
          break;
 8008ff4:	e000      	b.n	8008ff8 <USBD_StdItfReq+0x7c>
          break;
 8008ff6:	bf00      	nop
      }
      break;
 8008ff8:	e004      	b.n	8009004 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 fcc1 	bl	8009984 <USBD_CtlError>
      break;
 8009002:	bf00      	nop
  }

  return ret;
 8009004:	7bfb      	ldrb	r3, [r7, #15]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	889b      	ldrh	r3, [r3, #4]
 8009020:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800902a:	2b40      	cmp	r3, #64	@ 0x40
 800902c:	d007      	beq.n	800903e <USBD_StdEPReq+0x30>
 800902e:	2b40      	cmp	r3, #64	@ 0x40
 8009030:	f200 8145 	bhi.w	80092be <USBD_StdEPReq+0x2b0>
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00c      	beq.n	8009052 <USBD_StdEPReq+0x44>
 8009038:	2b20      	cmp	r3, #32
 800903a:	f040 8140 	bne.w	80092be <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	4798      	blx	r3
 800904c:	4603      	mov	r3, r0
 800904e:	73fb      	strb	r3, [r7, #15]
      break;
 8009050:	e13a      	b.n	80092c8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	785b      	ldrb	r3, [r3, #1]
 8009056:	2b03      	cmp	r3, #3
 8009058:	d007      	beq.n	800906a <USBD_StdEPReq+0x5c>
 800905a:	2b03      	cmp	r3, #3
 800905c:	f300 8129 	bgt.w	80092b2 <USBD_StdEPReq+0x2a4>
 8009060:	2b00      	cmp	r3, #0
 8009062:	d07f      	beq.n	8009164 <USBD_StdEPReq+0x156>
 8009064:	2b01      	cmp	r3, #1
 8009066:	d03c      	beq.n	80090e2 <USBD_StdEPReq+0xd4>
 8009068:	e123      	b.n	80092b2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b02      	cmp	r3, #2
 8009074:	d002      	beq.n	800907c <USBD_StdEPReq+0x6e>
 8009076:	2b03      	cmp	r3, #3
 8009078:	d016      	beq.n	80090a8 <USBD_StdEPReq+0x9a>
 800907a:	e02c      	b.n	80090d6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800907c:	7bbb      	ldrb	r3, [r7, #14]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00d      	beq.n	800909e <USBD_StdEPReq+0x90>
 8009082:	7bbb      	ldrb	r3, [r7, #14]
 8009084:	2b80      	cmp	r3, #128	@ 0x80
 8009086:	d00a      	beq.n	800909e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009088:	7bbb      	ldrb	r3, [r7, #14]
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 f917 	bl	800a2c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009092:	2180      	movs	r1, #128	@ 0x80
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f001 f913 	bl	800a2c0 <USBD_LL_StallEP>
 800909a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800909c:	e020      	b.n	80090e0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fc6f 	bl	8009984 <USBD_CtlError>
              break;
 80090a6:	e01b      	b.n	80090e0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	885b      	ldrh	r3, [r3, #2]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10e      	bne.n	80090ce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80090b0:	7bbb      	ldrb	r3, [r7, #14]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00b      	beq.n	80090ce <USBD_StdEPReq+0xc0>
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	2b80      	cmp	r3, #128	@ 0x80
 80090ba:	d008      	beq.n	80090ce <USBD_StdEPReq+0xc0>
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	88db      	ldrh	r3, [r3, #6]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d104      	bne.n	80090ce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80090c4:	7bbb      	ldrb	r3, [r7, #14]
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f001 f8f9 	bl	800a2c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fd23 	bl	8009b1a <USBD_CtlSendStatus>

              break;
 80090d4:	e004      	b.n	80090e0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fc53 	bl	8009984 <USBD_CtlError>
              break;
 80090de:	bf00      	nop
          }
          break;
 80090e0:	e0ec      	b.n	80092bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d002      	beq.n	80090f4 <USBD_StdEPReq+0xe6>
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d016      	beq.n	8009120 <USBD_StdEPReq+0x112>
 80090f2:	e030      	b.n	8009156 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090f4:	7bbb      	ldrb	r3, [r7, #14]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00d      	beq.n	8009116 <USBD_StdEPReq+0x108>
 80090fa:	7bbb      	ldrb	r3, [r7, #14]
 80090fc:	2b80      	cmp	r3, #128	@ 0x80
 80090fe:	d00a      	beq.n	8009116 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009100:	7bbb      	ldrb	r3, [r7, #14]
 8009102:	4619      	mov	r1, r3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f001 f8db 	bl	800a2c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800910a:	2180      	movs	r1, #128	@ 0x80
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 f8d7 	bl	800a2c0 <USBD_LL_StallEP>
 8009112:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009114:	e025      	b.n	8009162 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fc33 	bl	8009984 <USBD_CtlError>
              break;
 800911e:	e020      	b.n	8009162 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	885b      	ldrh	r3, [r3, #2]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d11b      	bne.n	8009160 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009128:	7bbb      	ldrb	r3, [r7, #14]
 800912a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800912e:	2b00      	cmp	r3, #0
 8009130:	d004      	beq.n	800913c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 f8e1 	bl	800a2fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fcec 	bl	8009b1a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	4798      	blx	r3
 8009150:	4603      	mov	r3, r0
 8009152:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009154:	e004      	b.n	8009160 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fc13 	bl	8009984 <USBD_CtlError>
              break;
 800915e:	e000      	b.n	8009162 <USBD_StdEPReq+0x154>
              break;
 8009160:	bf00      	nop
          }
          break;
 8009162:	e0ab      	b.n	80092bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b02      	cmp	r3, #2
 800916e:	d002      	beq.n	8009176 <USBD_StdEPReq+0x168>
 8009170:	2b03      	cmp	r3, #3
 8009172:	d032      	beq.n	80091da <USBD_StdEPReq+0x1cc>
 8009174:	e097      	b.n	80092a6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009176:	7bbb      	ldrb	r3, [r7, #14]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d007      	beq.n	800918c <USBD_StdEPReq+0x17e>
 800917c:	7bbb      	ldrb	r3, [r7, #14]
 800917e:	2b80      	cmp	r3, #128	@ 0x80
 8009180:	d004      	beq.n	800918c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fbfd 	bl	8009984 <USBD_CtlError>
                break;
 800918a:	e091      	b.n	80092b0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800918c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009190:	2b00      	cmp	r3, #0
 8009192:	da0b      	bge.n	80091ac <USBD_StdEPReq+0x19e>
 8009194:	7bbb      	ldrb	r3, [r7, #14]
 8009196:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800919a:	4613      	mov	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	3310      	adds	r3, #16
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	4413      	add	r3, r2
 80091a8:	3304      	adds	r3, #4
 80091aa:	e00b      	b.n	80091c4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091ac:	7bbb      	ldrb	r3, [r7, #14]
 80091ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091b2:	4613      	mov	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4413      	add	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	4413      	add	r3, r2
 80091c2:	3304      	adds	r3, #4
 80091c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	2200      	movs	r2, #0
 80091ca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	2202      	movs	r2, #2
 80091d0:	4619      	mov	r1, r3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fc47 	bl	8009a66 <USBD_CtlSendData>
              break;
 80091d8:	e06a      	b.n	80092b0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80091da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	da11      	bge.n	8009206 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091e2:	7bbb      	ldrb	r3, [r7, #14]
 80091e4:	f003 020f 	and.w	r2, r3, #15
 80091e8:	6879      	ldr	r1, [r7, #4]
 80091ea:	4613      	mov	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	440b      	add	r3, r1
 80091f4:	3324      	adds	r3, #36	@ 0x24
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d117      	bne.n	800922c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fbc0 	bl	8009984 <USBD_CtlError>
                  break;
 8009204:	e054      	b.n	80092b0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009206:	7bbb      	ldrb	r3, [r7, #14]
 8009208:	f003 020f 	and.w	r2, r3, #15
 800920c:	6879      	ldr	r1, [r7, #4]
 800920e:	4613      	mov	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	440b      	add	r3, r1
 8009218:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800921c:	881b      	ldrh	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d104      	bne.n	800922c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fbad 	bl	8009984 <USBD_CtlError>
                  break;
 800922a:	e041      	b.n	80092b0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800922c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009230:	2b00      	cmp	r3, #0
 8009232:	da0b      	bge.n	800924c <USBD_StdEPReq+0x23e>
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800923a:	4613      	mov	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	3310      	adds	r3, #16
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	4413      	add	r3, r2
 8009248:	3304      	adds	r3, #4
 800924a:	e00b      	b.n	8009264 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800924c:	7bbb      	ldrb	r3, [r7, #14]
 800924e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009252:	4613      	mov	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4413      	add	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	4413      	add	r3, r2
 8009262:	3304      	adds	r3, #4
 8009264:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009266:	7bbb      	ldrb	r3, [r7, #14]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <USBD_StdEPReq+0x264>
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	2b80      	cmp	r3, #128	@ 0x80
 8009270:	d103      	bne.n	800927a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2200      	movs	r2, #0
 8009276:	601a      	str	r2, [r3, #0]
 8009278:	e00e      	b.n	8009298 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800927a:	7bbb      	ldrb	r3, [r7, #14]
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f001 f85c 	bl	800a33c <USBD_LL_IsStallEP>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d003      	beq.n	8009292 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2201      	movs	r2, #1
 800928e:	601a      	str	r2, [r3, #0]
 8009290:	e002      	b.n	8009298 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	2200      	movs	r2, #0
 8009296:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2202      	movs	r2, #2
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fbe1 	bl	8009a66 <USBD_CtlSendData>
              break;
 80092a4:	e004      	b.n	80092b0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fb6b 	bl	8009984 <USBD_CtlError>
              break;
 80092ae:	bf00      	nop
          }
          break;
 80092b0:	e004      	b.n	80092bc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fb65 	bl	8009984 <USBD_CtlError>
          break;
 80092ba:	bf00      	nop
      }
      break;
 80092bc:	e004      	b.n	80092c8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 fb5f 	bl	8009984 <USBD_CtlError>
      break;
 80092c6:	bf00      	nop
  }

  return ret;
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092de:	2300      	movs	r3, #0
 80092e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80092e6:	2300      	movs	r3, #0
 80092e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	885b      	ldrh	r3, [r3, #2]
 80092ee:	0a1b      	lsrs	r3, r3, #8
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	3b01      	subs	r3, #1
 80092f4:	2b0e      	cmp	r3, #14
 80092f6:	f200 8152 	bhi.w	800959e <USBD_GetDescriptor+0x2ca>
 80092fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009300 <USBD_GetDescriptor+0x2c>)
 80092fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009300:	08009371 	.word	0x08009371
 8009304:	08009389 	.word	0x08009389
 8009308:	080093c9 	.word	0x080093c9
 800930c:	0800959f 	.word	0x0800959f
 8009310:	0800959f 	.word	0x0800959f
 8009314:	0800953f 	.word	0x0800953f
 8009318:	0800956b 	.word	0x0800956b
 800931c:	0800959f 	.word	0x0800959f
 8009320:	0800959f 	.word	0x0800959f
 8009324:	0800959f 	.word	0x0800959f
 8009328:	0800959f 	.word	0x0800959f
 800932c:	0800959f 	.word	0x0800959f
 8009330:	0800959f 	.word	0x0800959f
 8009334:	0800959f 	.word	0x0800959f
 8009338:	0800933d 	.word	0x0800933d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009342:	69db      	ldr	r3, [r3, #28]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00b      	beq.n	8009360 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800934e:	69db      	ldr	r3, [r3, #28]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	7c12      	ldrb	r2, [r2, #16]
 8009354:	f107 0108 	add.w	r1, r7, #8
 8009358:	4610      	mov	r0, r2
 800935a:	4798      	blx	r3
 800935c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800935e:	e126      	b.n	80095ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fb0e 	bl	8009984 <USBD_CtlError>
        err++;
 8009368:	7afb      	ldrb	r3, [r7, #11]
 800936a:	3301      	adds	r3, #1
 800936c:	72fb      	strb	r3, [r7, #11]
      break;
 800936e:	e11e      	b.n	80095ae <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	7c12      	ldrb	r2, [r2, #16]
 800937c:	f107 0108 	add.w	r1, r7, #8
 8009380:	4610      	mov	r0, r2
 8009382:	4798      	blx	r3
 8009384:	60f8      	str	r0, [r7, #12]
      break;
 8009386:	e112      	b.n	80095ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	7c1b      	ldrb	r3, [r3, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10d      	bne.n	80093ac <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009398:	f107 0208 	add.w	r2, r7, #8
 800939c:	4610      	mov	r0, r2
 800939e:	4798      	blx	r3
 80093a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3301      	adds	r3, #1
 80093a6:	2202      	movs	r2, #2
 80093a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80093aa:	e100      	b.n	80095ae <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b4:	f107 0208 	add.w	r2, r7, #8
 80093b8:	4610      	mov	r0, r2
 80093ba:	4798      	blx	r3
 80093bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	3301      	adds	r3, #1
 80093c2:	2202      	movs	r2, #2
 80093c4:	701a      	strb	r2, [r3, #0]
      break;
 80093c6:	e0f2      	b.n	80095ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	885b      	ldrh	r3, [r3, #2]
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b05      	cmp	r3, #5
 80093d0:	f200 80ac 	bhi.w	800952c <USBD_GetDescriptor+0x258>
 80093d4:	a201      	add	r2, pc, #4	@ (adr r2, 80093dc <USBD_GetDescriptor+0x108>)
 80093d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093da:	bf00      	nop
 80093dc:	080093f5 	.word	0x080093f5
 80093e0:	08009429 	.word	0x08009429
 80093e4:	0800945d 	.word	0x0800945d
 80093e8:	08009491 	.word	0x08009491
 80093ec:	080094c5 	.word	0x080094c5
 80093f0:	080094f9 	.word	0x080094f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00b      	beq.n	8009418 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	7c12      	ldrb	r2, [r2, #16]
 800940c:	f107 0108 	add.w	r1, r7, #8
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
 8009414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009416:	e091      	b.n	800953c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fab2 	bl	8009984 <USBD_CtlError>
            err++;
 8009420:	7afb      	ldrb	r3, [r7, #11]
 8009422:	3301      	adds	r3, #1
 8009424:	72fb      	strb	r3, [r7, #11]
          break;
 8009426:	e089      	b.n	800953c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00b      	beq.n	800944c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	7c12      	ldrb	r2, [r2, #16]
 8009440:	f107 0108 	add.w	r1, r7, #8
 8009444:	4610      	mov	r0, r2
 8009446:	4798      	blx	r3
 8009448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800944a:	e077      	b.n	800953c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fa98 	bl	8009984 <USBD_CtlError>
            err++;
 8009454:	7afb      	ldrb	r3, [r7, #11]
 8009456:	3301      	adds	r3, #1
 8009458:	72fb      	strb	r3, [r7, #11]
          break;
 800945a:	e06f      	b.n	800953c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00b      	beq.n	8009480 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	7c12      	ldrb	r2, [r2, #16]
 8009474:	f107 0108 	add.w	r1, r7, #8
 8009478:	4610      	mov	r0, r2
 800947a:	4798      	blx	r3
 800947c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800947e:	e05d      	b.n	800953c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa7e 	bl	8009984 <USBD_CtlError>
            err++;
 8009488:	7afb      	ldrb	r3, [r7, #11]
 800948a:	3301      	adds	r3, #1
 800948c:	72fb      	strb	r3, [r7, #11]
          break;
 800948e:	e055      	b.n	800953c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00b      	beq.n	80094b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	7c12      	ldrb	r2, [r2, #16]
 80094a8:	f107 0108 	add.w	r1, r7, #8
 80094ac:	4610      	mov	r0, r2
 80094ae:	4798      	blx	r3
 80094b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094b2:	e043      	b.n	800953c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fa64 	bl	8009984 <USBD_CtlError>
            err++;
 80094bc:	7afb      	ldrb	r3, [r7, #11]
 80094be:	3301      	adds	r3, #1
 80094c0:	72fb      	strb	r3, [r7, #11]
          break;
 80094c2:	e03b      	b.n	800953c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00b      	beq.n	80094e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	7c12      	ldrb	r2, [r2, #16]
 80094dc:	f107 0108 	add.w	r1, r7, #8
 80094e0:	4610      	mov	r0, r2
 80094e2:	4798      	blx	r3
 80094e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094e6:	e029      	b.n	800953c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fa4a 	bl	8009984 <USBD_CtlError>
            err++;
 80094f0:	7afb      	ldrb	r3, [r7, #11]
 80094f2:	3301      	adds	r3, #1
 80094f4:	72fb      	strb	r3, [r7, #11]
          break;
 80094f6:	e021      	b.n	800953c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00b      	beq.n	800951c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	7c12      	ldrb	r2, [r2, #16]
 8009510:	f107 0108 	add.w	r1, r7, #8
 8009514:	4610      	mov	r0, r2
 8009516:	4798      	blx	r3
 8009518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800951a:	e00f      	b.n	800953c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fa30 	bl	8009984 <USBD_CtlError>
            err++;
 8009524:	7afb      	ldrb	r3, [r7, #11]
 8009526:	3301      	adds	r3, #1
 8009528:	72fb      	strb	r3, [r7, #11]
          break;
 800952a:	e007      	b.n	800953c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fa28 	bl	8009984 <USBD_CtlError>
          err++;
 8009534:	7afb      	ldrb	r3, [r7, #11]
 8009536:	3301      	adds	r3, #1
 8009538:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800953a:	bf00      	nop
      }
      break;
 800953c:	e037      	b.n	80095ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	7c1b      	ldrb	r3, [r3, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d109      	bne.n	800955a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800954c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800954e:	f107 0208 	add.w	r2, r7, #8
 8009552:	4610      	mov	r0, r2
 8009554:	4798      	blx	r3
 8009556:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009558:	e029      	b.n	80095ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800955a:	6839      	ldr	r1, [r7, #0]
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 fa11 	bl	8009984 <USBD_CtlError>
        err++;
 8009562:	7afb      	ldrb	r3, [r7, #11]
 8009564:	3301      	adds	r3, #1
 8009566:	72fb      	strb	r3, [r7, #11]
      break;
 8009568:	e021      	b.n	80095ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	7c1b      	ldrb	r3, [r3, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10d      	bne.n	800958e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800957a:	f107 0208 	add.w	r2, r7, #8
 800957e:	4610      	mov	r0, r2
 8009580:	4798      	blx	r3
 8009582:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	3301      	adds	r3, #1
 8009588:	2207      	movs	r2, #7
 800958a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800958c:	e00f      	b.n	80095ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f9f7 	bl	8009984 <USBD_CtlError>
        err++;
 8009596:	7afb      	ldrb	r3, [r7, #11]
 8009598:	3301      	adds	r3, #1
 800959a:	72fb      	strb	r3, [r7, #11]
      break;
 800959c:	e007      	b.n	80095ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f9ef 	bl	8009984 <USBD_CtlError>
      err++;
 80095a6:	7afb      	ldrb	r3, [r7, #11]
 80095a8:	3301      	adds	r3, #1
 80095aa:	72fb      	strb	r3, [r7, #11]
      break;
 80095ac:	bf00      	nop
  }

  if (err != 0U)
 80095ae:	7afb      	ldrb	r3, [r7, #11]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d11e      	bne.n	80095f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	88db      	ldrh	r3, [r3, #6]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d016      	beq.n	80095ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80095bc:	893b      	ldrh	r3, [r7, #8]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00e      	beq.n	80095e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	88da      	ldrh	r2, [r3, #6]
 80095c6:	893b      	ldrh	r3, [r7, #8]
 80095c8:	4293      	cmp	r3, r2
 80095ca:	bf28      	it	cs
 80095cc:	4613      	movcs	r3, r2
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80095d2:	893b      	ldrh	r3, [r7, #8]
 80095d4:	461a      	mov	r2, r3
 80095d6:	68f9      	ldr	r1, [r7, #12]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fa44 	bl	8009a66 <USBD_CtlSendData>
 80095de:	e009      	b.n	80095f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f9ce 	bl	8009984 <USBD_CtlError>
 80095e8:	e004      	b.n	80095f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fa95 	bl	8009b1a <USBD_CtlSendStatus>
 80095f0:	e000      	b.n	80095f4 <USBD_GetDescriptor+0x320>
    return;
 80095f2:	bf00      	nop
  }
}
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop

080095fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	889b      	ldrh	r3, [r3, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d131      	bne.n	8009672 <USBD_SetAddress+0x76>
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	88db      	ldrh	r3, [r3, #6]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d12d      	bne.n	8009672 <USBD_SetAddress+0x76>
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	885b      	ldrh	r3, [r3, #2]
 800961a:	2b7f      	cmp	r3, #127	@ 0x7f
 800961c:	d829      	bhi.n	8009672 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	885b      	ldrh	r3, [r3, #2]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009628:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b03      	cmp	r3, #3
 8009634:	d104      	bne.n	8009640 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f9a3 	bl	8009984 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963e:	e01d      	b.n	800967c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	7bfa      	ldrb	r2, [r7, #15]
 8009644:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fea1 	bl	800a394 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fa61 	bl	8009b1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009658:	7bfb      	ldrb	r3, [r7, #15]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d004      	beq.n	8009668 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2202      	movs	r2, #2
 8009662:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009666:	e009      	b.n	800967c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009670:	e004      	b.n	800967c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f985 	bl	8009984 <USBD_CtlError>
  }
}
 800967a:	bf00      	nop
 800967c:	bf00      	nop
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	885b      	ldrh	r3, [r3, #2]
 8009696:	b2da      	uxtb	r2, r3
 8009698:	4b4c      	ldr	r3, [pc, #304]	@ (80097cc <USBD_SetConfig+0x148>)
 800969a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800969c:	4b4b      	ldr	r3, [pc, #300]	@ (80097cc <USBD_SetConfig+0x148>)
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d905      	bls.n	80096b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f96c 	bl	8009984 <USBD_CtlError>
    return USBD_FAIL;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e088      	b.n	80097c2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d002      	beq.n	80096c2 <USBD_SetConfig+0x3e>
 80096bc:	2b03      	cmp	r3, #3
 80096be:	d025      	beq.n	800970c <USBD_SetConfig+0x88>
 80096c0:	e071      	b.n	80097a6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80096c2:	4b42      	ldr	r3, [pc, #264]	@ (80097cc <USBD_SetConfig+0x148>)
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d01c      	beq.n	8009704 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80096ca:	4b40      	ldr	r3, [pc, #256]	@ (80097cc <USBD_SetConfig+0x148>)
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	461a      	mov	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096d4:	4b3d      	ldr	r3, [pc, #244]	@ (80097cc <USBD_SetConfig+0x148>)
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	4619      	mov	r1, r3
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7ff f992 	bl	8008a04 <USBD_SetClassConfig>
 80096e0:	4603      	mov	r3, r0
 80096e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d004      	beq.n	80096f4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f949 	bl	8009984 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096f2:	e065      	b.n	80097c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fa10 	bl	8009b1a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2203      	movs	r2, #3
 80096fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009702:	e05d      	b.n	80097c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fa08 	bl	8009b1a <USBD_CtlSendStatus>
      break;
 800970a:	e059      	b.n	80097c0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800970c:	4b2f      	ldr	r3, [pc, #188]	@ (80097cc <USBD_SetConfig+0x148>)
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d112      	bne.n	800973a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2202      	movs	r2, #2
 8009718:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800971c:	4b2b      	ldr	r3, [pc, #172]	@ (80097cc <USBD_SetConfig+0x148>)
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	461a      	mov	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009726:	4b29      	ldr	r3, [pc, #164]	@ (80097cc <USBD_SetConfig+0x148>)
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	4619      	mov	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff f985 	bl	8008a3c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f9f1 	bl	8009b1a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009738:	e042      	b.n	80097c0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800973a:	4b24      	ldr	r3, [pc, #144]	@ (80097cc <USBD_SetConfig+0x148>)
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	461a      	mov	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	429a      	cmp	r2, r3
 8009746:	d02a      	beq.n	800979e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	b2db      	uxtb	r3, r3
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7ff f973 	bl	8008a3c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009756:	4b1d      	ldr	r3, [pc, #116]	@ (80097cc <USBD_SetConfig+0x148>)
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	461a      	mov	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009760:	4b1a      	ldr	r3, [pc, #104]	@ (80097cc <USBD_SetConfig+0x148>)
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7ff f94c 	bl	8008a04 <USBD_SetClassConfig>
 800976c:	4603      	mov	r3, r0
 800976e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009770:	7bfb      	ldrb	r3, [r7, #15]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00f      	beq.n	8009796 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 f903 	bl	8009984 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7ff f958 	bl	8008a3c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009794:	e014      	b.n	80097c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f9bf 	bl	8009b1a <USBD_CtlSendStatus>
      break;
 800979c:	e010      	b.n	80097c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f9bb 	bl	8009b1a <USBD_CtlSendStatus>
      break;
 80097a4:	e00c      	b.n	80097c0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f8eb 	bl	8009984 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80097ae:	4b07      	ldr	r3, [pc, #28]	@ (80097cc <USBD_SetConfig+0x148>)
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7ff f941 	bl	8008a3c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80097ba:	2303      	movs	r3, #3
 80097bc:	73fb      	strb	r3, [r7, #15]
      break;
 80097be:	bf00      	nop
  }

  return ret;
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	200004c4 	.word	0x200004c4

080097d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	88db      	ldrh	r3, [r3, #6]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d004      	beq.n	80097ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 f8cd 	bl	8009984 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80097ea:	e023      	b.n	8009834 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	dc02      	bgt.n	80097fe <USBD_GetConfig+0x2e>
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	dc03      	bgt.n	8009804 <USBD_GetConfig+0x34>
 80097fc:	e015      	b.n	800982a <USBD_GetConfig+0x5a>
 80097fe:	2b03      	cmp	r3, #3
 8009800:	d00b      	beq.n	800981a <USBD_GetConfig+0x4a>
 8009802:	e012      	b.n	800982a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	3308      	adds	r3, #8
 800980e:	2201      	movs	r2, #1
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f927 	bl	8009a66 <USBD_CtlSendData>
        break;
 8009818:	e00c      	b.n	8009834 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	3304      	adds	r3, #4
 800981e:	2201      	movs	r2, #1
 8009820:	4619      	mov	r1, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f91f 	bl	8009a66 <USBD_CtlSendData>
        break;
 8009828:	e004      	b.n	8009834 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f8a9 	bl	8009984 <USBD_CtlError>
        break;
 8009832:	bf00      	nop
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800984c:	b2db      	uxtb	r3, r3
 800984e:	3b01      	subs	r3, #1
 8009850:	2b02      	cmp	r3, #2
 8009852:	d81e      	bhi.n	8009892 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	88db      	ldrh	r3, [r3, #6]
 8009858:	2b02      	cmp	r3, #2
 800985a:	d004      	beq.n	8009866 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f890 	bl	8009984 <USBD_CtlError>
        break;
 8009864:	e01a      	b.n	800989c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009872:	2b00      	cmp	r3, #0
 8009874:	d005      	beq.n	8009882 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	f043 0202 	orr.w	r2, r3, #2
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	330c      	adds	r3, #12
 8009886:	2202      	movs	r2, #2
 8009888:	4619      	mov	r1, r3
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f8eb 	bl	8009a66 <USBD_CtlSendData>
      break;
 8009890:	e004      	b.n	800989c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009892:	6839      	ldr	r1, [r7, #0]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f875 	bl	8009984 <USBD_CtlError>
      break;
 800989a:	bf00      	nop
  }
}
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	885b      	ldrh	r3, [r3, #2]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d106      	bne.n	80098c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f92b 	bl	8009b1a <USBD_CtlSendStatus>
  }
}
 80098c4:	bf00      	nop
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	3b01      	subs	r3, #1
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	d80b      	bhi.n	80098fc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	885b      	ldrh	r3, [r3, #2]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d10c      	bne.n	8009906 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f910 	bl	8009b1a <USBD_CtlSendStatus>
      }
      break;
 80098fa:	e004      	b.n	8009906 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f840 	bl	8009984 <USBD_CtlError>
      break;
 8009904:	e000      	b.n	8009908 <USBD_ClrFeature+0x3c>
      break;
 8009906:	bf00      	nop
  }
}
 8009908:	bf00      	nop
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	781a      	ldrb	r2, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3301      	adds	r3, #1
 800992a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	781a      	ldrb	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	3301      	adds	r3, #1
 8009938:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f7ff fa92 	bl	8008e64 <SWAPBYTE>
 8009940:	4603      	mov	r3, r0
 8009942:	461a      	mov	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	3301      	adds	r3, #1
 800994c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3301      	adds	r3, #1
 8009952:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f7ff fa85 	bl	8008e64 <SWAPBYTE>
 800995a:	4603      	mov	r3, r0
 800995c:	461a      	mov	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3301      	adds	r3, #1
 8009966:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	3301      	adds	r3, #1
 800996c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f7ff fa78 	bl	8008e64 <SWAPBYTE>
 8009974:	4603      	mov	r3, r0
 8009976:	461a      	mov	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	80da      	strh	r2, [r3, #6]
}
 800997c:	bf00      	nop
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800998e:	2180      	movs	r1, #128	@ 0x80
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fc95 	bl	800a2c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009996:	2100      	movs	r1, #0
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fc91 	bl	800a2c0 <USBD_LL_StallEP>
}
 800999e:	bf00      	nop
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b086      	sub	sp, #24
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	60b9      	str	r1, [r7, #8]
 80099b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80099b2:	2300      	movs	r3, #0
 80099b4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d036      	beq.n	8009a2a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80099c0:	6938      	ldr	r0, [r7, #16]
 80099c2:	f000 f836 	bl	8009a32 <USBD_GetLen>
 80099c6:	4603      	mov	r3, r0
 80099c8:	3301      	adds	r3, #1
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	005b      	lsls	r3, r3, #1
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	4413      	add	r3, r2
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	7812      	ldrb	r2, [r2, #0]
 80099de:	701a      	strb	r2, [r3, #0]
  idx++;
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
 80099e2:	3301      	adds	r3, #1
 80099e4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80099e6:	7dfb      	ldrb	r3, [r7, #23]
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	4413      	add	r3, r2
 80099ec:	2203      	movs	r2, #3
 80099ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80099f0:	7dfb      	ldrb	r3, [r7, #23]
 80099f2:	3301      	adds	r3, #1
 80099f4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80099f6:	e013      	b.n	8009a20 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	4413      	add	r3, r2
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	7812      	ldrb	r2, [r2, #0]
 8009a02:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	3301      	adds	r3, #1
 8009a08:	613b      	str	r3, [r7, #16]
    idx++;
 8009a0a:	7dfb      	ldrb	r3, [r7, #23]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009a10:	7dfb      	ldrb	r3, [r7, #23]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	4413      	add	r3, r2
 8009a16:	2200      	movs	r2, #0
 8009a18:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a1a:	7dfb      	ldrb	r3, [r7, #23]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1e7      	bne.n	80099f8 <USBD_GetString+0x52>
 8009a28:	e000      	b.n	8009a2c <USBD_GetString+0x86>
    return;
 8009a2a:	bf00      	nop
  }
}
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b085      	sub	sp, #20
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a42:	e005      	b.n	8009a50 <USBD_GetLen+0x1e>
  {
    len++;
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	3301      	adds	r3, #1
 8009a48:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1f5      	bne.n	8009a44 <USBD_GetLen+0x12>
  }

  return len;
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b084      	sub	sp, #16
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	60f8      	str	r0, [r7, #12]
 8009a6e:	60b9      	str	r1, [r7, #8]
 8009a70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2202      	movs	r2, #2
 8009a76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f000 fca0 	bl	800a3d2 <USBD_LL_Transmit>

  return USBD_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	2100      	movs	r1, #0
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 fc8f 	bl	800a3d2 <USBD_LL_Transmit>

  return USBD_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b084      	sub	sp, #16
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	60f8      	str	r0, [r7, #12]
 8009ac6:	60b9      	str	r1, [r7, #8]
 8009ac8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2203      	movs	r2, #3
 8009ace:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f000 fc93 	bl	800a414 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	68ba      	ldr	r2, [r7, #8]
 8009b08:	2100      	movs	r1, #0
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f000 fc82 	bl	800a414 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2204      	movs	r2, #4
 8009b26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2100      	movs	r1, #0
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fc4e 	bl	800a3d2 <USBD_LL_Transmit>

  return USBD_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2205      	movs	r2, #5
 8009b4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b50:	2300      	movs	r3, #0
 8009b52:	2200      	movs	r2, #0
 8009b54:	2100      	movs	r1, #0
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fc5c 	bl	800a414 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
	...

08009b68 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	4912      	ldr	r1, [pc, #72]	@ (8009bb8 <MX_USB_Device_Init+0x50>)
 8009b70:	4812      	ldr	r0, [pc, #72]	@ (8009bbc <MX_USB_Device_Init+0x54>)
 8009b72:	f7fe fed9 	bl	8008928 <USBD_Init>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d001      	beq.n	8009b80 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009b7c:	f7f7 fcb0 	bl	80014e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009b80:	490f      	ldr	r1, [pc, #60]	@ (8009bc0 <MX_USB_Device_Init+0x58>)
 8009b82:	480e      	ldr	r0, [pc, #56]	@ (8009bbc <MX_USB_Device_Init+0x54>)
 8009b84:	f7fe ff00 	bl	8008988 <USBD_RegisterClass>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d001      	beq.n	8009b92 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009b8e:	f7f7 fca7 	bl	80014e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009b92:	490c      	ldr	r1, [pc, #48]	@ (8009bc4 <MX_USB_Device_Init+0x5c>)
 8009b94:	4809      	ldr	r0, [pc, #36]	@ (8009bbc <MX_USB_Device_Init+0x54>)
 8009b96:	f7fe fe21 	bl	80087dc <USBD_CDC_RegisterInterface>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d001      	beq.n	8009ba4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009ba0:	f7f7 fc9e 	bl	80014e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009ba4:	4805      	ldr	r0, [pc, #20]	@ (8009bbc <MX_USB_Device_Init+0x54>)
 8009ba6:	f7fe ff16 	bl	80089d6 <USBD_Start>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009bb0:	f7f7 fc96 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009bb4:	bf00      	nop
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	200001b0 	.word	0x200001b0
 8009bbc:	200004c8 	.word	0x200004c8
 8009bc0:	20000098 	.word	0x20000098
 8009bc4:	2000019c 	.word	0x2000019c

08009bc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009bcc:	2200      	movs	r2, #0
 8009bce:	4905      	ldr	r1, [pc, #20]	@ (8009be4 <CDC_Init_FS+0x1c>)
 8009bd0:	4805      	ldr	r0, [pc, #20]	@ (8009be8 <CDC_Init_FS+0x20>)
 8009bd2:	f7fe fe18 	bl	8008806 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009bd6:	4905      	ldr	r1, [pc, #20]	@ (8009bec <CDC_Init_FS+0x24>)
 8009bd8:	4803      	ldr	r0, [pc, #12]	@ (8009be8 <CDC_Init_FS+0x20>)
 8009bda:	f7fe fe32 	bl	8008842 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009bde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	20000f98 	.word	0x20000f98
 8009be8:	200004c8 	.word	0x200004c8
 8009bec:	20000798 	.word	0x20000798

08009bf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009bf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	4603      	mov	r3, r0
 8009c08:	6039      	str	r1, [r7, #0]
 8009c0a:	71fb      	strb	r3, [r7, #7]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009c10:	79fb      	ldrb	r3, [r7, #7]
 8009c12:	2b23      	cmp	r3, #35	@ 0x23
 8009c14:	d84a      	bhi.n	8009cac <CDC_Control_FS+0xac>
 8009c16:	a201      	add	r2, pc, #4	@ (adr r2, 8009c1c <CDC_Control_FS+0x1c>)
 8009c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1c:	08009cad 	.word	0x08009cad
 8009c20:	08009cad 	.word	0x08009cad
 8009c24:	08009cad 	.word	0x08009cad
 8009c28:	08009cad 	.word	0x08009cad
 8009c2c:	08009cad 	.word	0x08009cad
 8009c30:	08009cad 	.word	0x08009cad
 8009c34:	08009cad 	.word	0x08009cad
 8009c38:	08009cad 	.word	0x08009cad
 8009c3c:	08009cad 	.word	0x08009cad
 8009c40:	08009cad 	.word	0x08009cad
 8009c44:	08009cad 	.word	0x08009cad
 8009c48:	08009cad 	.word	0x08009cad
 8009c4c:	08009cad 	.word	0x08009cad
 8009c50:	08009cad 	.word	0x08009cad
 8009c54:	08009cad 	.word	0x08009cad
 8009c58:	08009cad 	.word	0x08009cad
 8009c5c:	08009cad 	.word	0x08009cad
 8009c60:	08009cad 	.word	0x08009cad
 8009c64:	08009cad 	.word	0x08009cad
 8009c68:	08009cad 	.word	0x08009cad
 8009c6c:	08009cad 	.word	0x08009cad
 8009c70:	08009cad 	.word	0x08009cad
 8009c74:	08009cad 	.word	0x08009cad
 8009c78:	08009cad 	.word	0x08009cad
 8009c7c:	08009cad 	.word	0x08009cad
 8009c80:	08009cad 	.word	0x08009cad
 8009c84:	08009cad 	.word	0x08009cad
 8009c88:	08009cad 	.word	0x08009cad
 8009c8c:	08009cad 	.word	0x08009cad
 8009c90:	08009cad 	.word	0x08009cad
 8009c94:	08009cad 	.word	0x08009cad
 8009c98:	08009cad 	.word	0x08009cad
 8009c9c:	08009cad 	.word	0x08009cad
 8009ca0:	08009cad 	.word	0x08009cad
 8009ca4:	08009cad 	.word	0x08009cad
 8009ca8:	08009cad 	.word	0x08009cad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009cac:	bf00      	nop
  }

  return (USBD_OK);
 8009cae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009cc6:	6879      	ldr	r1, [r7, #4]
 8009cc8:	4805      	ldr	r0, [pc, #20]	@ (8009ce0 <CDC_Receive_FS+0x24>)
 8009cca:	f7fe fdba 	bl	8008842 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009cce:	4804      	ldr	r0, [pc, #16]	@ (8009ce0 <CDC_Receive_FS+0x24>)
 8009cd0:	f7fe fe00 	bl	80088d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009cd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3708      	adds	r7, #8
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	200004c8 	.word	0x200004c8

08009ce4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8009d2c <CDC_Transmit_FS+0x48>)
 8009cf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009cfa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e00b      	b.n	8009d22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009d0a:	887b      	ldrh	r3, [r7, #2]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	6879      	ldr	r1, [r7, #4]
 8009d10:	4806      	ldr	r0, [pc, #24]	@ (8009d2c <CDC_Transmit_FS+0x48>)
 8009d12:	f7fe fd78 	bl	8008806 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d16:	4805      	ldr	r0, [pc, #20]	@ (8009d2c <CDC_Transmit_FS+0x48>)
 8009d18:	f7fe fdac 	bl	8008874 <USBD_CDC_TransmitPacket>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	200004c8 	.word	0x200004c8

08009d30 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b087      	sub	sp, #28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009d42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	371c      	adds	r7, #28
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
	...

08009d54 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	6039      	str	r1, [r7, #0]
 8009d5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	2212      	movs	r2, #18
 8009d64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009d66:	4b03      	ldr	r3, [pc, #12]	@ (8009d74 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr
 8009d74:	200001d0 	.word	0x200001d0

08009d78 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	4603      	mov	r3, r0
 8009d80:	6039      	str	r1, [r7, #0]
 8009d82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	2204      	movs	r2, #4
 8009d88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d8a:	4b03      	ldr	r3, [pc, #12]	@ (8009d98 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr
 8009d98:	200001e4 	.word	0x200001e4

08009d9c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	6039      	str	r1, [r7, #0]
 8009da6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009da8:	79fb      	ldrb	r3, [r7, #7]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d105      	bne.n	8009dba <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	4907      	ldr	r1, [pc, #28]	@ (8009dd0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009db2:	4808      	ldr	r0, [pc, #32]	@ (8009dd4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009db4:	f7ff fdf7 	bl	80099a6 <USBD_GetString>
 8009db8:	e004      	b.n	8009dc4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	4904      	ldr	r1, [pc, #16]	@ (8009dd0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009dbe:	4805      	ldr	r0, [pc, #20]	@ (8009dd4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009dc0:	f7ff fdf1 	bl	80099a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dc4:	4b02      	ldr	r3, [pc, #8]	@ (8009dd0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	20001798 	.word	0x20001798
 8009dd4:	0800b2e0 	.word	0x0800b2e0

08009dd8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	4603      	mov	r3, r0
 8009de0:	6039      	str	r1, [r7, #0]
 8009de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009de4:	683a      	ldr	r2, [r7, #0]
 8009de6:	4904      	ldr	r1, [pc, #16]	@ (8009df8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009de8:	4804      	ldr	r0, [pc, #16]	@ (8009dfc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009dea:	f7ff fddc 	bl	80099a6 <USBD_GetString>
  return USBD_StrDesc;
 8009dee:	4b02      	ldr	r3, [pc, #8]	@ (8009df8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	20001798 	.word	0x20001798
 8009dfc:	0800b2f8 	.word	0x0800b2f8

08009e00 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	4603      	mov	r3, r0
 8009e08:	6039      	str	r1, [r7, #0]
 8009e0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	221a      	movs	r2, #26
 8009e10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e12:	f000 f843 	bl	8009e9c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009e16:	4b02      	ldr	r3, [pc, #8]	@ (8009e20 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	200001e8 	.word	0x200001e8

08009e24 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	6039      	str	r1, [r7, #0]
 8009e2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e30:	79fb      	ldrb	r3, [r7, #7]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d105      	bne.n	8009e42 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	4907      	ldr	r1, [pc, #28]	@ (8009e58 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009e3a:	4808      	ldr	r0, [pc, #32]	@ (8009e5c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009e3c:	f7ff fdb3 	bl	80099a6 <USBD_GetString>
 8009e40:	e004      	b.n	8009e4c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009e42:	683a      	ldr	r2, [r7, #0]
 8009e44:	4904      	ldr	r1, [pc, #16]	@ (8009e58 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009e46:	4805      	ldr	r0, [pc, #20]	@ (8009e5c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009e48:	f7ff fdad 	bl	80099a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e4c:	4b02      	ldr	r3, [pc, #8]	@ (8009e58 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	20001798 	.word	0x20001798
 8009e5c:	0800b30c 	.word	0x0800b30c

08009e60 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	4603      	mov	r3, r0
 8009e68:	6039      	str	r1, [r7, #0]
 8009e6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e6c:	79fb      	ldrb	r3, [r7, #7]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d105      	bne.n	8009e7e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	4907      	ldr	r1, [pc, #28]	@ (8009e94 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e76:	4808      	ldr	r0, [pc, #32]	@ (8009e98 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009e78:	f7ff fd95 	bl	80099a6 <USBD_GetString>
 8009e7c:	e004      	b.n	8009e88 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	4904      	ldr	r1, [pc, #16]	@ (8009e94 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e82:	4805      	ldr	r0, [pc, #20]	@ (8009e98 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009e84:	f7ff fd8f 	bl	80099a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e88:	4b02      	ldr	r3, [pc, #8]	@ (8009e94 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	20001798 	.word	0x20001798
 8009e98:	0800b318 	.word	0x0800b318

08009e9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8009ee0 <Get_SerialNum+0x44>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8009ee4 <Get_SerialNum+0x48>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009eae:	4b0e      	ldr	r3, [pc, #56]	@ (8009ee8 <Get_SerialNum+0x4c>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4413      	add	r3, r2
 8009eba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d009      	beq.n	8009ed6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ec2:	2208      	movs	r2, #8
 8009ec4:	4909      	ldr	r1, [pc, #36]	@ (8009eec <Get_SerialNum+0x50>)
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f000 f814 	bl	8009ef4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ecc:	2204      	movs	r2, #4
 8009ece:	4908      	ldr	r1, [pc, #32]	@ (8009ef0 <Get_SerialNum+0x54>)
 8009ed0:	68b8      	ldr	r0, [r7, #8]
 8009ed2:	f000 f80f 	bl	8009ef4 <IntToUnicode>
  }
}
 8009ed6:	bf00      	nop
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	1fff7590 	.word	0x1fff7590
 8009ee4:	1fff7594 	.word	0x1fff7594
 8009ee8:	1fff7598 	.word	0x1fff7598
 8009eec:	200001ea 	.word	0x200001ea
 8009ef0:	200001fa 	.word	0x200001fa

08009ef4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b087      	sub	sp, #28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	4613      	mov	r3, r2
 8009f00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f02:	2300      	movs	r3, #0
 8009f04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f06:	2300      	movs	r3, #0
 8009f08:	75fb      	strb	r3, [r7, #23]
 8009f0a:	e027      	b.n	8009f5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	0f1b      	lsrs	r3, r3, #28
 8009f10:	2b09      	cmp	r3, #9
 8009f12:	d80b      	bhi.n	8009f2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	0f1b      	lsrs	r3, r3, #28
 8009f18:	b2da      	uxtb	r2, r3
 8009f1a:	7dfb      	ldrb	r3, [r7, #23]
 8009f1c:	005b      	lsls	r3, r3, #1
 8009f1e:	4619      	mov	r1, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	440b      	add	r3, r1
 8009f24:	3230      	adds	r2, #48	@ 0x30
 8009f26:	b2d2      	uxtb	r2, r2
 8009f28:	701a      	strb	r2, [r3, #0]
 8009f2a:	e00a      	b.n	8009f42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	0f1b      	lsrs	r3, r3, #28
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	005b      	lsls	r3, r3, #1
 8009f36:	4619      	mov	r1, r3
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	440b      	add	r3, r1
 8009f3c:	3237      	adds	r2, #55	@ 0x37
 8009f3e:	b2d2      	uxtb	r2, r2
 8009f40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	011b      	lsls	r3, r3, #4
 8009f46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f48:	7dfb      	ldrb	r3, [r7, #23]
 8009f4a:	005b      	lsls	r3, r3, #1
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	4413      	add	r3, r2
 8009f52:	2200      	movs	r2, #0
 8009f54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f56:	7dfb      	ldrb	r3, [r7, #23]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	75fb      	strb	r3, [r7, #23]
 8009f5c:	7dfa      	ldrb	r2, [r7, #23]
 8009f5e:	79fb      	ldrb	r3, [r7, #7]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d3d3      	bcc.n	8009f0c <IntToUnicode+0x18>
  }
}
 8009f64:	bf00      	nop
 8009f66:	bf00      	nop
 8009f68:	371c      	adds	r7, #28
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
	...

08009f74 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b098      	sub	sp, #96	@ 0x60
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009f7c:	f107 0310 	add.w	r3, r7, #16
 8009f80:	2250      	movs	r2, #80	@ 0x50
 8009f82:	2100      	movs	r1, #0
 8009f84:	4618      	mov	r0, r3
 8009f86:	f000 fb19 	bl	800a5bc <memset>
  if(pcdHandle->Instance==USB)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a15      	ldr	r2, [pc, #84]	@ (8009fe4 <HAL_PCD_MspInit+0x70>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d122      	bne.n	8009fda <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009f94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009f98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009f9e:	f107 0310 	add.w	r3, r7, #16
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fa fe2e 	bl	8004c04 <HAL_RCCEx_PeriphCLKConfig>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d001      	beq.n	8009fb2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009fae:	f7f7 fa97 	bl	80014e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe8 <HAL_PCD_MspInit+0x74>)
 8009fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fb6:	4a0c      	ldr	r2, [pc, #48]	@ (8009fe8 <HAL_PCD_MspInit+0x74>)
 8009fb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009fbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8009fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8009fe8 <HAL_PCD_MspInit+0x74>)
 8009fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fc6:	60fb      	str	r3, [r7, #12]
 8009fc8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009fca:	2200      	movs	r2, #0
 8009fcc:	2100      	movs	r1, #0
 8009fce:	2014      	movs	r0, #20
 8009fd0:	f7f7 fe77 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009fd4:	2014      	movs	r0, #20
 8009fd6:	f7f7 fe8e 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009fda:	bf00      	nop
 8009fdc:	3760      	adds	r7, #96	@ 0x60
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	40005c00 	.word	0x40005c00
 8009fe8:	40021000 	.word	0x40021000

08009fec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a000:	4619      	mov	r1, r3
 800a002:	4610      	mov	r0, r2
 800a004:	f7fe fd32 	bl	8008a6c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a008:	bf00      	nop
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	460b      	mov	r3, r1
 800a01a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a022:	78fa      	ldrb	r2, [r7, #3]
 800a024:	6879      	ldr	r1, [r7, #4]
 800a026:	4613      	mov	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4413      	add	r3, r2
 800a02c:	00db      	lsls	r3, r3, #3
 800a02e:	440b      	add	r3, r1
 800a030:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	78fb      	ldrb	r3, [r7, #3]
 800a038:	4619      	mov	r1, r3
 800a03a:	f7fe fd6c 	bl	8008b16 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a03e:	bf00      	nop
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b082      	sub	sp, #8
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
 800a04e:	460b      	mov	r3, r1
 800a050:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a058:	78fa      	ldrb	r2, [r7, #3]
 800a05a:	6879      	ldr	r1, [r7, #4]
 800a05c:	4613      	mov	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	440b      	add	r3, r1
 800a066:	3324      	adds	r3, #36	@ 0x24
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	78fb      	ldrb	r3, [r7, #3]
 800a06c:	4619      	mov	r1, r3
 800a06e:	f7fe fdb5 	bl	8008bdc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a072:	bf00      	nop
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b082      	sub	sp, #8
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fe fec9 	bl	8008e20 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a08e:	bf00      	nop
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b084      	sub	sp, #16
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	795b      	ldrb	r3, [r3, #5]
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d001      	beq.n	800a0ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a0aa:	f7f7 fa19 	bl	80014e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a0b4:	7bfa      	ldrb	r2, [r7, #15]
 800a0b6:	4611      	mov	r1, r2
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fe fe73 	bl	8008da4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fe fe1f 	bl	8008d08 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a0ca:	bf00      	nop
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
	...

0800a0d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fe fe6e 	bl	8008dc4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	7a5b      	ldrb	r3, [r3, #9]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d005      	beq.n	800a0fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0f0:	4b04      	ldr	r3, [pc, #16]	@ (800a104 <HAL_PCD_SuspendCallback+0x30>)
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	4a03      	ldr	r2, [pc, #12]	@ (800a104 <HAL_PCD_SuspendCallback+0x30>)
 800a0f6:	f043 0306 	orr.w	r3, r3, #6
 800a0fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a0fc:	bf00      	nop
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	e000ed00 	.word	0xe000ed00

0800a108 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	7a5b      	ldrb	r3, [r3, #9]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d007      	beq.n	800a128 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a118:	4b08      	ldr	r3, [pc, #32]	@ (800a13c <HAL_PCD_ResumeCallback+0x34>)
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	4a07      	ldr	r2, [pc, #28]	@ (800a13c <HAL_PCD_ResumeCallback+0x34>)
 800a11e:	f023 0306 	bic.w	r3, r3, #6
 800a122:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a124:	f000 f9f8 	bl	800a518 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fe fe5e 	bl	8008df0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a134:	bf00      	nop
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	e000ed00 	.word	0xe000ed00

0800a140 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a148:	4a2b      	ldr	r2, [pc, #172]	@ (800a1f8 <USBD_LL_Init+0xb8>)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a29      	ldr	r2, [pc, #164]	@ (800a1f8 <USBD_LL_Init+0xb8>)
 800a154:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a158:	4b27      	ldr	r3, [pc, #156]	@ (800a1f8 <USBD_LL_Init+0xb8>)
 800a15a:	4a28      	ldr	r2, [pc, #160]	@ (800a1fc <USBD_LL_Init+0xbc>)
 800a15c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a15e:	4b26      	ldr	r3, [pc, #152]	@ (800a1f8 <USBD_LL_Init+0xb8>)
 800a160:	2208      	movs	r2, #8
 800a162:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a164:	4b24      	ldr	r3, [pc, #144]	@ (800a1f8 <USBD_LL_Init+0xb8>)
 800a166:	2202      	movs	r2, #2
 800a168:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a16a:	4b23      	ldr	r3, [pc, #140]	@ (800a1f8 <USBD_LL_Init+0xb8>)
 800a16c:	2202      	movs	r2, #2
 800a16e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a170:	4b21      	ldr	r3, [pc, #132]	@ (800a1f8 <USBD_LL_Init+0xb8>)
 800a172:	2200      	movs	r2, #0
 800a174:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a176:	4b20      	ldr	r3, [pc, #128]	@ (800a1f8 <USBD_LL_Init+0xb8>)
 800a178:	2200      	movs	r2, #0
 800a17a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a17c:	4b1e      	ldr	r3, [pc, #120]	@ (800a1f8 <USBD_LL_Init+0xb8>)
 800a17e:	2200      	movs	r2, #0
 800a180:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a182:	4b1d      	ldr	r3, [pc, #116]	@ (800a1f8 <USBD_LL_Init+0xb8>)
 800a184:	2200      	movs	r2, #0
 800a186:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a188:	481b      	ldr	r0, [pc, #108]	@ (800a1f8 <USBD_LL_Init+0xb8>)
 800a18a:	f7f8 fa57 	bl	800263c <HAL_PCD_Init>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a194:	f7f7 f9a4 	bl	80014e0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a19e:	2318      	movs	r3, #24
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	f7f9 fede 	bl	8003f64 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a1ae:	2358      	movs	r3, #88	@ 0x58
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	2180      	movs	r1, #128	@ 0x80
 800a1b4:	f7f9 fed6 	bl	8003f64 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a1be:	23c0      	movs	r3, #192	@ 0xc0
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	2181      	movs	r1, #129	@ 0x81
 800a1c4:	f7f9 fece 	bl	8003f64 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a1ce:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	f7f9 fec5 	bl	8003f64 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a1e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2182      	movs	r1, #130	@ 0x82
 800a1e8:	f7f9 febc 	bl	8003f64 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3708      	adds	r7, #8
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	20001998 	.word	0x20001998
 800a1fc:	40005c00 	.word	0x40005c00

0800a200 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a216:	4618      	mov	r0, r3
 800a218:	f7f8 fade 	bl	80027d8 <HAL_PCD_Start>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	4618      	mov	r0, r3
 800a224:	f000 f97e 	bl	800a524 <USBD_Get_USB_Status>
 800a228:	4603      	mov	r3, r0
 800a22a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a22c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b084      	sub	sp, #16
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	4608      	mov	r0, r1
 800a240:	4611      	mov	r1, r2
 800a242:	461a      	mov	r2, r3
 800a244:	4603      	mov	r3, r0
 800a246:	70fb      	strb	r3, [r7, #3]
 800a248:	460b      	mov	r3, r1
 800a24a:	70bb      	strb	r3, [r7, #2]
 800a24c:	4613      	mov	r3, r2
 800a24e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a254:	2300      	movs	r3, #0
 800a256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a25e:	78bb      	ldrb	r3, [r7, #2]
 800a260:	883a      	ldrh	r2, [r7, #0]
 800a262:	78f9      	ldrb	r1, [r7, #3]
 800a264:	f7f8 fc25 	bl	8002ab2 <HAL_PCD_EP_Open>
 800a268:	4603      	mov	r3, r0
 800a26a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a26c:	7bfb      	ldrb	r3, [r7, #15]
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 f958 	bl	800a524 <USBD_Get_USB_Status>
 800a274:	4603      	mov	r3, r0
 800a276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a278:	7bbb      	ldrb	r3, [r7, #14]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b084      	sub	sp, #16
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
 800a28a:	460b      	mov	r3, r1
 800a28c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a29c:	78fa      	ldrb	r2, [r7, #3]
 800a29e:	4611      	mov	r1, r2
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7f8 fc65 	bl	8002b70 <HAL_PCD_EP_Close>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 f939 	bl	800a524 <USBD_Get_USB_Status>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a2da:	78fa      	ldrb	r2, [r7, #3]
 800a2dc:	4611      	mov	r1, r2
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7f8 fd0e 	bl	8002d00 <HAL_PCD_EP_SetStall>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f000 f91a 	bl	800a524 <USBD_Get_USB_Status>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	460b      	mov	r3, r1
 800a308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a30e:	2300      	movs	r3, #0
 800a310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a318:	78fa      	ldrb	r2, [r7, #3]
 800a31a:	4611      	mov	r1, r2
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7f8 fd41 	bl	8002da4 <HAL_PCD_EP_ClrStall>
 800a322:	4603      	mov	r3, r0
 800a324:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a326:	7bfb      	ldrb	r3, [r7, #15]
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 f8fb 	bl	800a524 <USBD_Get_USB_Status>
 800a32e:	4603      	mov	r3, r0
 800a330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a332:	7bbb      	ldrb	r3, [r7, #14]
}
 800a334:	4618      	mov	r0, r3
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	460b      	mov	r3, r1
 800a346:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a34e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a354:	2b00      	cmp	r3, #0
 800a356:	da0b      	bge.n	800a370 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a358:	78fb      	ldrb	r3, [r7, #3]
 800a35a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a35e:	68f9      	ldr	r1, [r7, #12]
 800a360:	4613      	mov	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	00db      	lsls	r3, r3, #3
 800a368:	440b      	add	r3, r1
 800a36a:	3312      	adds	r3, #18
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	e00b      	b.n	800a388 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a370:	78fb      	ldrb	r3, [r7, #3]
 800a372:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a376:	68f9      	ldr	r1, [r7, #12]
 800a378:	4613      	mov	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	00db      	lsls	r3, r3, #3
 800a380:	440b      	add	r3, r1
 800a382:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a386:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	460b      	mov	r3, r1
 800a39e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a3ae:	78fa      	ldrb	r2, [r7, #3]
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7f8 fb59 	bl	8002a6a <HAL_PCD_SetAddress>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 f8b0 	bl	800a524 <USBD_Get_USB_Status>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b086      	sub	sp, #24
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	60f8      	str	r0, [r7, #12]
 800a3da:	607a      	str	r2, [r7, #4]
 800a3dc:	603b      	str	r3, [r7, #0]
 800a3de:	460b      	mov	r3, r1
 800a3e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a3f0:	7af9      	ldrb	r1, [r7, #11]
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	f7f8 fc4c 	bl	8002c92 <HAL_PCD_EP_Transmit>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3fe:	7dfb      	ldrb	r3, [r7, #23]
 800a400:	4618      	mov	r0, r3
 800a402:	f000 f88f 	bl	800a524 <USBD_Get_USB_Status>
 800a406:	4603      	mov	r3, r0
 800a408:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a40a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3718      	adds	r7, #24
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	607a      	str	r2, [r7, #4]
 800a41e:	603b      	str	r3, [r7, #0]
 800a420:	460b      	mov	r3, r1
 800a422:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a432:	7af9      	ldrb	r1, [r7, #11]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	f7f8 fbe2 	bl	8002c00 <HAL_PCD_EP_Receive>
 800a43c:	4603      	mov	r3, r0
 800a43e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a440:	7dfb      	ldrb	r3, [r7, #23]
 800a442:	4618      	mov	r0, r3
 800a444:	f000 f86e 	bl	800a524 <USBD_Get_USB_Status>
 800a448:	4603      	mov	r3, r0
 800a44a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a44c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3718      	adds	r7, #24
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b082      	sub	sp, #8
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	460b      	mov	r3, r1
 800a460:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a468:	78fa      	ldrb	r2, [r7, #3]
 800a46a:	4611      	mov	r1, r2
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7f8 fbf8 	bl	8002c62 <HAL_PCD_EP_GetRxCount>
 800a472:	4603      	mov	r3, r0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a488:	78fb      	ldrb	r3, [r7, #3]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d002      	beq.n	800a494 <HAL_PCDEx_LPM_Callback+0x18>
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d013      	beq.n	800a4ba <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a492:	e023      	b.n	800a4dc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	7a5b      	ldrb	r3, [r3, #9]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d007      	beq.n	800a4ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a49c:	f000 f83c 	bl	800a518 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4a0:	4b10      	ldr	r3, [pc, #64]	@ (800a4e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	4a0f      	ldr	r2, [pc, #60]	@ (800a4e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a4a6:	f023 0306 	bic.w	r3, r3, #6
 800a4aa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe fc9c 	bl	8008df0 <USBD_LL_Resume>
    break;
 800a4b8:	e010      	b.n	800a4dc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fe fc7f 	bl	8008dc4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	7a5b      	ldrb	r3, [r3, #9]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d005      	beq.n	800a4da <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4ce:	4b05      	ldr	r3, [pc, #20]	@ (800a4e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	4a04      	ldr	r2, [pc, #16]	@ (800a4e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a4d4:	f043 0306 	orr.w	r3, r3, #6
 800a4d8:	6113      	str	r3, [r2, #16]
    break;
 800a4da:	bf00      	nop
}
 800a4dc:	bf00      	nop
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	e000ed00 	.word	0xe000ed00

0800a4e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a4f0:	4b03      	ldr	r3, [pc, #12]	@ (800a500 <USBD_static_malloc+0x18>)
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	20001c74 	.word	0x20001c74

0800a504 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]

}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a51c:	f7f6 fdea 	bl	80010f4 <SystemClock_Config>
}
 800a520:	bf00      	nop
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	4603      	mov	r3, r0
 800a52c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a532:	79fb      	ldrb	r3, [r7, #7]
 800a534:	2b03      	cmp	r3, #3
 800a536:	d817      	bhi.n	800a568 <USBD_Get_USB_Status+0x44>
 800a538:	a201      	add	r2, pc, #4	@ (adr r2, 800a540 <USBD_Get_USB_Status+0x1c>)
 800a53a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a53e:	bf00      	nop
 800a540:	0800a551 	.word	0x0800a551
 800a544:	0800a557 	.word	0x0800a557
 800a548:	0800a55d 	.word	0x0800a55d
 800a54c:	0800a563 	.word	0x0800a563
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a550:	2300      	movs	r3, #0
 800a552:	73fb      	strb	r3, [r7, #15]
    break;
 800a554:	e00b      	b.n	800a56e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a556:	2303      	movs	r3, #3
 800a558:	73fb      	strb	r3, [r7, #15]
    break;
 800a55a:	e008      	b.n	800a56e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a55c:	2301      	movs	r3, #1
 800a55e:	73fb      	strb	r3, [r7, #15]
    break;
 800a560:	e005      	b.n	800a56e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a562:	2303      	movs	r3, #3
 800a564:	73fb      	strb	r3, [r7, #15]
    break;
 800a566:	e002      	b.n	800a56e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a568:	2303      	movs	r3, #3
 800a56a:	73fb      	strb	r3, [r7, #15]
    break;
 800a56c:	bf00      	nop
  }
  return usb_status;
 800a56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <_vsiprintf_r>:
 800a57c:	b500      	push	{lr}
 800a57e:	b09b      	sub	sp, #108	@ 0x6c
 800a580:	9100      	str	r1, [sp, #0]
 800a582:	9104      	str	r1, [sp, #16]
 800a584:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a588:	9105      	str	r1, [sp, #20]
 800a58a:	9102      	str	r1, [sp, #8]
 800a58c:	4905      	ldr	r1, [pc, #20]	@ (800a5a4 <_vsiprintf_r+0x28>)
 800a58e:	9103      	str	r1, [sp, #12]
 800a590:	4669      	mov	r1, sp
 800a592:	f000 f9ad 	bl	800a8f0 <_svfiprintf_r>
 800a596:	9b00      	ldr	r3, [sp, #0]
 800a598:	2200      	movs	r2, #0
 800a59a:	701a      	strb	r2, [r3, #0]
 800a59c:	b01b      	add	sp, #108	@ 0x6c
 800a59e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5a2:	bf00      	nop
 800a5a4:	ffff0208 	.word	0xffff0208

0800a5a8 <vsiprintf>:
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	460a      	mov	r2, r1
 800a5ac:	4601      	mov	r1, r0
 800a5ae:	4802      	ldr	r0, [pc, #8]	@ (800a5b8 <vsiprintf+0x10>)
 800a5b0:	6800      	ldr	r0, [r0, #0]
 800a5b2:	f7ff bfe3 	b.w	800a57c <_vsiprintf_r>
 800a5b6:	bf00      	nop
 800a5b8:	20000204 	.word	0x20000204

0800a5bc <memset>:
 800a5bc:	4402      	add	r2, r0
 800a5be:	4603      	mov	r3, r0
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d100      	bne.n	800a5c6 <memset+0xa>
 800a5c4:	4770      	bx	lr
 800a5c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ca:	e7f9      	b.n	800a5c0 <memset+0x4>

0800a5cc <strncmp>:
 800a5cc:	b510      	push	{r4, lr}
 800a5ce:	b16a      	cbz	r2, 800a5ec <strncmp+0x20>
 800a5d0:	3901      	subs	r1, #1
 800a5d2:	1884      	adds	r4, r0, r2
 800a5d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d103      	bne.n	800a5e8 <strncmp+0x1c>
 800a5e0:	42a0      	cmp	r0, r4
 800a5e2:	d001      	beq.n	800a5e8 <strncmp+0x1c>
 800a5e4:	2a00      	cmp	r2, #0
 800a5e6:	d1f5      	bne.n	800a5d4 <strncmp+0x8>
 800a5e8:	1ad0      	subs	r0, r2, r3
 800a5ea:	bd10      	pop	{r4, pc}
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	e7fc      	b.n	800a5ea <strncmp+0x1e>

0800a5f0 <__errno>:
 800a5f0:	4b01      	ldr	r3, [pc, #4]	@ (800a5f8 <__errno+0x8>)
 800a5f2:	6818      	ldr	r0, [r3, #0]
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	20000204 	.word	0x20000204

0800a5fc <__libc_init_array>:
 800a5fc:	b570      	push	{r4, r5, r6, lr}
 800a5fe:	4d0d      	ldr	r5, [pc, #52]	@ (800a634 <__libc_init_array+0x38>)
 800a600:	4c0d      	ldr	r4, [pc, #52]	@ (800a638 <__libc_init_array+0x3c>)
 800a602:	1b64      	subs	r4, r4, r5
 800a604:	10a4      	asrs	r4, r4, #2
 800a606:	2600      	movs	r6, #0
 800a608:	42a6      	cmp	r6, r4
 800a60a:	d109      	bne.n	800a620 <__libc_init_array+0x24>
 800a60c:	4d0b      	ldr	r5, [pc, #44]	@ (800a63c <__libc_init_array+0x40>)
 800a60e:	4c0c      	ldr	r4, [pc, #48]	@ (800a640 <__libc_init_array+0x44>)
 800a610:	f000 fc66 	bl	800aee0 <_init>
 800a614:	1b64      	subs	r4, r4, r5
 800a616:	10a4      	asrs	r4, r4, #2
 800a618:	2600      	movs	r6, #0
 800a61a:	42a6      	cmp	r6, r4
 800a61c:	d105      	bne.n	800a62a <__libc_init_array+0x2e>
 800a61e:	bd70      	pop	{r4, r5, r6, pc}
 800a620:	f855 3b04 	ldr.w	r3, [r5], #4
 800a624:	4798      	blx	r3
 800a626:	3601      	adds	r6, #1
 800a628:	e7ee      	b.n	800a608 <__libc_init_array+0xc>
 800a62a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a62e:	4798      	blx	r3
 800a630:	3601      	adds	r6, #1
 800a632:	e7f2      	b.n	800a61a <__libc_init_array+0x1e>
 800a634:	0800b3a4 	.word	0x0800b3a4
 800a638:	0800b3a4 	.word	0x0800b3a4
 800a63c:	0800b3a4 	.word	0x0800b3a4
 800a640:	0800b3a8 	.word	0x0800b3a8

0800a644 <__retarget_lock_acquire_recursive>:
 800a644:	4770      	bx	lr

0800a646 <__retarget_lock_release_recursive>:
 800a646:	4770      	bx	lr

0800a648 <_free_r>:
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	4605      	mov	r5, r0
 800a64c:	2900      	cmp	r1, #0
 800a64e:	d041      	beq.n	800a6d4 <_free_r+0x8c>
 800a650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a654:	1f0c      	subs	r4, r1, #4
 800a656:	2b00      	cmp	r3, #0
 800a658:	bfb8      	it	lt
 800a65a:	18e4      	addlt	r4, r4, r3
 800a65c:	f000 f8e0 	bl	800a820 <__malloc_lock>
 800a660:	4a1d      	ldr	r2, [pc, #116]	@ (800a6d8 <_free_r+0x90>)
 800a662:	6813      	ldr	r3, [r2, #0]
 800a664:	b933      	cbnz	r3, 800a674 <_free_r+0x2c>
 800a666:	6063      	str	r3, [r4, #4]
 800a668:	6014      	str	r4, [r2, #0]
 800a66a:	4628      	mov	r0, r5
 800a66c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a670:	f000 b8dc 	b.w	800a82c <__malloc_unlock>
 800a674:	42a3      	cmp	r3, r4
 800a676:	d908      	bls.n	800a68a <_free_r+0x42>
 800a678:	6820      	ldr	r0, [r4, #0]
 800a67a:	1821      	adds	r1, r4, r0
 800a67c:	428b      	cmp	r3, r1
 800a67e:	bf01      	itttt	eq
 800a680:	6819      	ldreq	r1, [r3, #0]
 800a682:	685b      	ldreq	r3, [r3, #4]
 800a684:	1809      	addeq	r1, r1, r0
 800a686:	6021      	streq	r1, [r4, #0]
 800a688:	e7ed      	b.n	800a666 <_free_r+0x1e>
 800a68a:	461a      	mov	r2, r3
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	b10b      	cbz	r3, 800a694 <_free_r+0x4c>
 800a690:	42a3      	cmp	r3, r4
 800a692:	d9fa      	bls.n	800a68a <_free_r+0x42>
 800a694:	6811      	ldr	r1, [r2, #0]
 800a696:	1850      	adds	r0, r2, r1
 800a698:	42a0      	cmp	r0, r4
 800a69a:	d10b      	bne.n	800a6b4 <_free_r+0x6c>
 800a69c:	6820      	ldr	r0, [r4, #0]
 800a69e:	4401      	add	r1, r0
 800a6a0:	1850      	adds	r0, r2, r1
 800a6a2:	4283      	cmp	r3, r0
 800a6a4:	6011      	str	r1, [r2, #0]
 800a6a6:	d1e0      	bne.n	800a66a <_free_r+0x22>
 800a6a8:	6818      	ldr	r0, [r3, #0]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	6053      	str	r3, [r2, #4]
 800a6ae:	4408      	add	r0, r1
 800a6b0:	6010      	str	r0, [r2, #0]
 800a6b2:	e7da      	b.n	800a66a <_free_r+0x22>
 800a6b4:	d902      	bls.n	800a6bc <_free_r+0x74>
 800a6b6:	230c      	movs	r3, #12
 800a6b8:	602b      	str	r3, [r5, #0]
 800a6ba:	e7d6      	b.n	800a66a <_free_r+0x22>
 800a6bc:	6820      	ldr	r0, [r4, #0]
 800a6be:	1821      	adds	r1, r4, r0
 800a6c0:	428b      	cmp	r3, r1
 800a6c2:	bf04      	itt	eq
 800a6c4:	6819      	ldreq	r1, [r3, #0]
 800a6c6:	685b      	ldreq	r3, [r3, #4]
 800a6c8:	6063      	str	r3, [r4, #4]
 800a6ca:	bf04      	itt	eq
 800a6cc:	1809      	addeq	r1, r1, r0
 800a6ce:	6021      	streq	r1, [r4, #0]
 800a6d0:	6054      	str	r4, [r2, #4]
 800a6d2:	e7ca      	b.n	800a66a <_free_r+0x22>
 800a6d4:	bd38      	pop	{r3, r4, r5, pc}
 800a6d6:	bf00      	nop
 800a6d8:	20001fd8 	.word	0x20001fd8

0800a6dc <sbrk_aligned>:
 800a6dc:	b570      	push	{r4, r5, r6, lr}
 800a6de:	4e0f      	ldr	r6, [pc, #60]	@ (800a71c <sbrk_aligned+0x40>)
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	6831      	ldr	r1, [r6, #0]
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	b911      	cbnz	r1, 800a6ee <sbrk_aligned+0x12>
 800a6e8:	f000 fba6 	bl	800ae38 <_sbrk_r>
 800a6ec:	6030      	str	r0, [r6, #0]
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	f000 fba1 	bl	800ae38 <_sbrk_r>
 800a6f6:	1c43      	adds	r3, r0, #1
 800a6f8:	d103      	bne.n	800a702 <sbrk_aligned+0x26>
 800a6fa:	f04f 34ff 	mov.w	r4, #4294967295
 800a6fe:	4620      	mov	r0, r4
 800a700:	bd70      	pop	{r4, r5, r6, pc}
 800a702:	1cc4      	adds	r4, r0, #3
 800a704:	f024 0403 	bic.w	r4, r4, #3
 800a708:	42a0      	cmp	r0, r4
 800a70a:	d0f8      	beq.n	800a6fe <sbrk_aligned+0x22>
 800a70c:	1a21      	subs	r1, r4, r0
 800a70e:	4628      	mov	r0, r5
 800a710:	f000 fb92 	bl	800ae38 <_sbrk_r>
 800a714:	3001      	adds	r0, #1
 800a716:	d1f2      	bne.n	800a6fe <sbrk_aligned+0x22>
 800a718:	e7ef      	b.n	800a6fa <sbrk_aligned+0x1e>
 800a71a:	bf00      	nop
 800a71c:	20001fd4 	.word	0x20001fd4

0800a720 <_malloc_r>:
 800a720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a724:	1ccd      	adds	r5, r1, #3
 800a726:	f025 0503 	bic.w	r5, r5, #3
 800a72a:	3508      	adds	r5, #8
 800a72c:	2d0c      	cmp	r5, #12
 800a72e:	bf38      	it	cc
 800a730:	250c      	movcc	r5, #12
 800a732:	2d00      	cmp	r5, #0
 800a734:	4606      	mov	r6, r0
 800a736:	db01      	blt.n	800a73c <_malloc_r+0x1c>
 800a738:	42a9      	cmp	r1, r5
 800a73a:	d904      	bls.n	800a746 <_malloc_r+0x26>
 800a73c:	230c      	movs	r3, #12
 800a73e:	6033      	str	r3, [r6, #0]
 800a740:	2000      	movs	r0, #0
 800a742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a81c <_malloc_r+0xfc>
 800a74a:	f000 f869 	bl	800a820 <__malloc_lock>
 800a74e:	f8d8 3000 	ldr.w	r3, [r8]
 800a752:	461c      	mov	r4, r3
 800a754:	bb44      	cbnz	r4, 800a7a8 <_malloc_r+0x88>
 800a756:	4629      	mov	r1, r5
 800a758:	4630      	mov	r0, r6
 800a75a:	f7ff ffbf 	bl	800a6dc <sbrk_aligned>
 800a75e:	1c43      	adds	r3, r0, #1
 800a760:	4604      	mov	r4, r0
 800a762:	d158      	bne.n	800a816 <_malloc_r+0xf6>
 800a764:	f8d8 4000 	ldr.w	r4, [r8]
 800a768:	4627      	mov	r7, r4
 800a76a:	2f00      	cmp	r7, #0
 800a76c:	d143      	bne.n	800a7f6 <_malloc_r+0xd6>
 800a76e:	2c00      	cmp	r4, #0
 800a770:	d04b      	beq.n	800a80a <_malloc_r+0xea>
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	4639      	mov	r1, r7
 800a776:	4630      	mov	r0, r6
 800a778:	eb04 0903 	add.w	r9, r4, r3
 800a77c:	f000 fb5c 	bl	800ae38 <_sbrk_r>
 800a780:	4581      	cmp	r9, r0
 800a782:	d142      	bne.n	800a80a <_malloc_r+0xea>
 800a784:	6821      	ldr	r1, [r4, #0]
 800a786:	1a6d      	subs	r5, r5, r1
 800a788:	4629      	mov	r1, r5
 800a78a:	4630      	mov	r0, r6
 800a78c:	f7ff ffa6 	bl	800a6dc <sbrk_aligned>
 800a790:	3001      	adds	r0, #1
 800a792:	d03a      	beq.n	800a80a <_malloc_r+0xea>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	442b      	add	r3, r5
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	f8d8 3000 	ldr.w	r3, [r8]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	bb62      	cbnz	r2, 800a7fc <_malloc_r+0xdc>
 800a7a2:	f8c8 7000 	str.w	r7, [r8]
 800a7a6:	e00f      	b.n	800a7c8 <_malloc_r+0xa8>
 800a7a8:	6822      	ldr	r2, [r4, #0]
 800a7aa:	1b52      	subs	r2, r2, r5
 800a7ac:	d420      	bmi.n	800a7f0 <_malloc_r+0xd0>
 800a7ae:	2a0b      	cmp	r2, #11
 800a7b0:	d917      	bls.n	800a7e2 <_malloc_r+0xc2>
 800a7b2:	1961      	adds	r1, r4, r5
 800a7b4:	42a3      	cmp	r3, r4
 800a7b6:	6025      	str	r5, [r4, #0]
 800a7b8:	bf18      	it	ne
 800a7ba:	6059      	strne	r1, [r3, #4]
 800a7bc:	6863      	ldr	r3, [r4, #4]
 800a7be:	bf08      	it	eq
 800a7c0:	f8c8 1000 	streq.w	r1, [r8]
 800a7c4:	5162      	str	r2, [r4, r5]
 800a7c6:	604b      	str	r3, [r1, #4]
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	f000 f82f 	bl	800a82c <__malloc_unlock>
 800a7ce:	f104 000b 	add.w	r0, r4, #11
 800a7d2:	1d23      	adds	r3, r4, #4
 800a7d4:	f020 0007 	bic.w	r0, r0, #7
 800a7d8:	1ac2      	subs	r2, r0, r3
 800a7da:	bf1c      	itt	ne
 800a7dc:	1a1b      	subne	r3, r3, r0
 800a7de:	50a3      	strne	r3, [r4, r2]
 800a7e0:	e7af      	b.n	800a742 <_malloc_r+0x22>
 800a7e2:	6862      	ldr	r2, [r4, #4]
 800a7e4:	42a3      	cmp	r3, r4
 800a7e6:	bf0c      	ite	eq
 800a7e8:	f8c8 2000 	streq.w	r2, [r8]
 800a7ec:	605a      	strne	r2, [r3, #4]
 800a7ee:	e7eb      	b.n	800a7c8 <_malloc_r+0xa8>
 800a7f0:	4623      	mov	r3, r4
 800a7f2:	6864      	ldr	r4, [r4, #4]
 800a7f4:	e7ae      	b.n	800a754 <_malloc_r+0x34>
 800a7f6:	463c      	mov	r4, r7
 800a7f8:	687f      	ldr	r7, [r7, #4]
 800a7fa:	e7b6      	b.n	800a76a <_malloc_r+0x4a>
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	42a3      	cmp	r3, r4
 800a802:	d1fb      	bne.n	800a7fc <_malloc_r+0xdc>
 800a804:	2300      	movs	r3, #0
 800a806:	6053      	str	r3, [r2, #4]
 800a808:	e7de      	b.n	800a7c8 <_malloc_r+0xa8>
 800a80a:	230c      	movs	r3, #12
 800a80c:	6033      	str	r3, [r6, #0]
 800a80e:	4630      	mov	r0, r6
 800a810:	f000 f80c 	bl	800a82c <__malloc_unlock>
 800a814:	e794      	b.n	800a740 <_malloc_r+0x20>
 800a816:	6005      	str	r5, [r0, #0]
 800a818:	e7d6      	b.n	800a7c8 <_malloc_r+0xa8>
 800a81a:	bf00      	nop
 800a81c:	20001fd8 	.word	0x20001fd8

0800a820 <__malloc_lock>:
 800a820:	4801      	ldr	r0, [pc, #4]	@ (800a828 <__malloc_lock+0x8>)
 800a822:	f7ff bf0f 	b.w	800a644 <__retarget_lock_acquire_recursive>
 800a826:	bf00      	nop
 800a828:	20001fd0 	.word	0x20001fd0

0800a82c <__malloc_unlock>:
 800a82c:	4801      	ldr	r0, [pc, #4]	@ (800a834 <__malloc_unlock+0x8>)
 800a82e:	f7ff bf0a 	b.w	800a646 <__retarget_lock_release_recursive>
 800a832:	bf00      	nop
 800a834:	20001fd0 	.word	0x20001fd0

0800a838 <__ssputs_r>:
 800a838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a83c:	688e      	ldr	r6, [r1, #8]
 800a83e:	461f      	mov	r7, r3
 800a840:	42be      	cmp	r6, r7
 800a842:	680b      	ldr	r3, [r1, #0]
 800a844:	4682      	mov	sl, r0
 800a846:	460c      	mov	r4, r1
 800a848:	4690      	mov	r8, r2
 800a84a:	d82d      	bhi.n	800a8a8 <__ssputs_r+0x70>
 800a84c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a850:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a854:	d026      	beq.n	800a8a4 <__ssputs_r+0x6c>
 800a856:	6965      	ldr	r5, [r4, #20]
 800a858:	6909      	ldr	r1, [r1, #16]
 800a85a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a85e:	eba3 0901 	sub.w	r9, r3, r1
 800a862:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a866:	1c7b      	adds	r3, r7, #1
 800a868:	444b      	add	r3, r9
 800a86a:	106d      	asrs	r5, r5, #1
 800a86c:	429d      	cmp	r5, r3
 800a86e:	bf38      	it	cc
 800a870:	461d      	movcc	r5, r3
 800a872:	0553      	lsls	r3, r2, #21
 800a874:	d527      	bpl.n	800a8c6 <__ssputs_r+0x8e>
 800a876:	4629      	mov	r1, r5
 800a878:	f7ff ff52 	bl	800a720 <_malloc_r>
 800a87c:	4606      	mov	r6, r0
 800a87e:	b360      	cbz	r0, 800a8da <__ssputs_r+0xa2>
 800a880:	6921      	ldr	r1, [r4, #16]
 800a882:	464a      	mov	r2, r9
 800a884:	f000 fae8 	bl	800ae58 <memcpy>
 800a888:	89a3      	ldrh	r3, [r4, #12]
 800a88a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a88e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a892:	81a3      	strh	r3, [r4, #12]
 800a894:	6126      	str	r6, [r4, #16]
 800a896:	6165      	str	r5, [r4, #20]
 800a898:	444e      	add	r6, r9
 800a89a:	eba5 0509 	sub.w	r5, r5, r9
 800a89e:	6026      	str	r6, [r4, #0]
 800a8a0:	60a5      	str	r5, [r4, #8]
 800a8a2:	463e      	mov	r6, r7
 800a8a4:	42be      	cmp	r6, r7
 800a8a6:	d900      	bls.n	800a8aa <__ssputs_r+0x72>
 800a8a8:	463e      	mov	r6, r7
 800a8aa:	6820      	ldr	r0, [r4, #0]
 800a8ac:	4632      	mov	r2, r6
 800a8ae:	4641      	mov	r1, r8
 800a8b0:	f000 faa8 	bl	800ae04 <memmove>
 800a8b4:	68a3      	ldr	r3, [r4, #8]
 800a8b6:	1b9b      	subs	r3, r3, r6
 800a8b8:	60a3      	str	r3, [r4, #8]
 800a8ba:	6823      	ldr	r3, [r4, #0]
 800a8bc:	4433      	add	r3, r6
 800a8be:	6023      	str	r3, [r4, #0]
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c6:	462a      	mov	r2, r5
 800a8c8:	f000 fad4 	bl	800ae74 <_realloc_r>
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d1e0      	bne.n	800a894 <__ssputs_r+0x5c>
 800a8d2:	6921      	ldr	r1, [r4, #16]
 800a8d4:	4650      	mov	r0, sl
 800a8d6:	f7ff feb7 	bl	800a648 <_free_r>
 800a8da:	230c      	movs	r3, #12
 800a8dc:	f8ca 3000 	str.w	r3, [sl]
 800a8e0:	89a3      	ldrh	r3, [r4, #12]
 800a8e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8e6:	81a3      	strh	r3, [r4, #12]
 800a8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ec:	e7e9      	b.n	800a8c2 <__ssputs_r+0x8a>
	...

0800a8f0 <_svfiprintf_r>:
 800a8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f4:	4698      	mov	r8, r3
 800a8f6:	898b      	ldrh	r3, [r1, #12]
 800a8f8:	061b      	lsls	r3, r3, #24
 800a8fa:	b09d      	sub	sp, #116	@ 0x74
 800a8fc:	4607      	mov	r7, r0
 800a8fe:	460d      	mov	r5, r1
 800a900:	4614      	mov	r4, r2
 800a902:	d510      	bpl.n	800a926 <_svfiprintf_r+0x36>
 800a904:	690b      	ldr	r3, [r1, #16]
 800a906:	b973      	cbnz	r3, 800a926 <_svfiprintf_r+0x36>
 800a908:	2140      	movs	r1, #64	@ 0x40
 800a90a:	f7ff ff09 	bl	800a720 <_malloc_r>
 800a90e:	6028      	str	r0, [r5, #0]
 800a910:	6128      	str	r0, [r5, #16]
 800a912:	b930      	cbnz	r0, 800a922 <_svfiprintf_r+0x32>
 800a914:	230c      	movs	r3, #12
 800a916:	603b      	str	r3, [r7, #0]
 800a918:	f04f 30ff 	mov.w	r0, #4294967295
 800a91c:	b01d      	add	sp, #116	@ 0x74
 800a91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a922:	2340      	movs	r3, #64	@ 0x40
 800a924:	616b      	str	r3, [r5, #20]
 800a926:	2300      	movs	r3, #0
 800a928:	9309      	str	r3, [sp, #36]	@ 0x24
 800a92a:	2320      	movs	r3, #32
 800a92c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a930:	f8cd 800c 	str.w	r8, [sp, #12]
 800a934:	2330      	movs	r3, #48	@ 0x30
 800a936:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aad4 <_svfiprintf_r+0x1e4>
 800a93a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a93e:	f04f 0901 	mov.w	r9, #1
 800a942:	4623      	mov	r3, r4
 800a944:	469a      	mov	sl, r3
 800a946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a94a:	b10a      	cbz	r2, 800a950 <_svfiprintf_r+0x60>
 800a94c:	2a25      	cmp	r2, #37	@ 0x25
 800a94e:	d1f9      	bne.n	800a944 <_svfiprintf_r+0x54>
 800a950:	ebba 0b04 	subs.w	fp, sl, r4
 800a954:	d00b      	beq.n	800a96e <_svfiprintf_r+0x7e>
 800a956:	465b      	mov	r3, fp
 800a958:	4622      	mov	r2, r4
 800a95a:	4629      	mov	r1, r5
 800a95c:	4638      	mov	r0, r7
 800a95e:	f7ff ff6b 	bl	800a838 <__ssputs_r>
 800a962:	3001      	adds	r0, #1
 800a964:	f000 80a7 	beq.w	800aab6 <_svfiprintf_r+0x1c6>
 800a968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a96a:	445a      	add	r2, fp
 800a96c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a96e:	f89a 3000 	ldrb.w	r3, [sl]
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 809f 	beq.w	800aab6 <_svfiprintf_r+0x1c6>
 800a978:	2300      	movs	r3, #0
 800a97a:	f04f 32ff 	mov.w	r2, #4294967295
 800a97e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a982:	f10a 0a01 	add.w	sl, sl, #1
 800a986:	9304      	str	r3, [sp, #16]
 800a988:	9307      	str	r3, [sp, #28]
 800a98a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a98e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a990:	4654      	mov	r4, sl
 800a992:	2205      	movs	r2, #5
 800a994:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a998:	484e      	ldr	r0, [pc, #312]	@ (800aad4 <_svfiprintf_r+0x1e4>)
 800a99a:	f7f5 fc41 	bl	8000220 <memchr>
 800a99e:	9a04      	ldr	r2, [sp, #16]
 800a9a0:	b9d8      	cbnz	r0, 800a9da <_svfiprintf_r+0xea>
 800a9a2:	06d0      	lsls	r0, r2, #27
 800a9a4:	bf44      	itt	mi
 800a9a6:	2320      	movmi	r3, #32
 800a9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9ac:	0711      	lsls	r1, r2, #28
 800a9ae:	bf44      	itt	mi
 800a9b0:	232b      	movmi	r3, #43	@ 0x2b
 800a9b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9bc:	d015      	beq.n	800a9ea <_svfiprintf_r+0xfa>
 800a9be:	9a07      	ldr	r2, [sp, #28]
 800a9c0:	4654      	mov	r4, sl
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	f04f 0c0a 	mov.w	ip, #10
 800a9c8:	4621      	mov	r1, r4
 800a9ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9ce:	3b30      	subs	r3, #48	@ 0x30
 800a9d0:	2b09      	cmp	r3, #9
 800a9d2:	d94b      	bls.n	800aa6c <_svfiprintf_r+0x17c>
 800a9d4:	b1b0      	cbz	r0, 800aa04 <_svfiprintf_r+0x114>
 800a9d6:	9207      	str	r2, [sp, #28]
 800a9d8:	e014      	b.n	800aa04 <_svfiprintf_r+0x114>
 800a9da:	eba0 0308 	sub.w	r3, r0, r8
 800a9de:	fa09 f303 	lsl.w	r3, r9, r3
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	9304      	str	r3, [sp, #16]
 800a9e6:	46a2      	mov	sl, r4
 800a9e8:	e7d2      	b.n	800a990 <_svfiprintf_r+0xa0>
 800a9ea:	9b03      	ldr	r3, [sp, #12]
 800a9ec:	1d19      	adds	r1, r3, #4
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	9103      	str	r1, [sp, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	bfbb      	ittet	lt
 800a9f6:	425b      	neglt	r3, r3
 800a9f8:	f042 0202 	orrlt.w	r2, r2, #2
 800a9fc:	9307      	strge	r3, [sp, #28]
 800a9fe:	9307      	strlt	r3, [sp, #28]
 800aa00:	bfb8      	it	lt
 800aa02:	9204      	strlt	r2, [sp, #16]
 800aa04:	7823      	ldrb	r3, [r4, #0]
 800aa06:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa08:	d10a      	bne.n	800aa20 <_svfiprintf_r+0x130>
 800aa0a:	7863      	ldrb	r3, [r4, #1]
 800aa0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa0e:	d132      	bne.n	800aa76 <_svfiprintf_r+0x186>
 800aa10:	9b03      	ldr	r3, [sp, #12]
 800aa12:	1d1a      	adds	r2, r3, #4
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	9203      	str	r2, [sp, #12]
 800aa18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa1c:	3402      	adds	r4, #2
 800aa1e:	9305      	str	r3, [sp, #20]
 800aa20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aae4 <_svfiprintf_r+0x1f4>
 800aa24:	7821      	ldrb	r1, [r4, #0]
 800aa26:	2203      	movs	r2, #3
 800aa28:	4650      	mov	r0, sl
 800aa2a:	f7f5 fbf9 	bl	8000220 <memchr>
 800aa2e:	b138      	cbz	r0, 800aa40 <_svfiprintf_r+0x150>
 800aa30:	9b04      	ldr	r3, [sp, #16]
 800aa32:	eba0 000a 	sub.w	r0, r0, sl
 800aa36:	2240      	movs	r2, #64	@ 0x40
 800aa38:	4082      	lsls	r2, r0
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	3401      	adds	r4, #1
 800aa3e:	9304      	str	r3, [sp, #16]
 800aa40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa44:	4824      	ldr	r0, [pc, #144]	@ (800aad8 <_svfiprintf_r+0x1e8>)
 800aa46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa4a:	2206      	movs	r2, #6
 800aa4c:	f7f5 fbe8 	bl	8000220 <memchr>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d036      	beq.n	800aac2 <_svfiprintf_r+0x1d2>
 800aa54:	4b21      	ldr	r3, [pc, #132]	@ (800aadc <_svfiprintf_r+0x1ec>)
 800aa56:	bb1b      	cbnz	r3, 800aaa0 <_svfiprintf_r+0x1b0>
 800aa58:	9b03      	ldr	r3, [sp, #12]
 800aa5a:	3307      	adds	r3, #7
 800aa5c:	f023 0307 	bic.w	r3, r3, #7
 800aa60:	3308      	adds	r3, #8
 800aa62:	9303      	str	r3, [sp, #12]
 800aa64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa66:	4433      	add	r3, r6
 800aa68:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa6a:	e76a      	b.n	800a942 <_svfiprintf_r+0x52>
 800aa6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa70:	460c      	mov	r4, r1
 800aa72:	2001      	movs	r0, #1
 800aa74:	e7a8      	b.n	800a9c8 <_svfiprintf_r+0xd8>
 800aa76:	2300      	movs	r3, #0
 800aa78:	3401      	adds	r4, #1
 800aa7a:	9305      	str	r3, [sp, #20]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	f04f 0c0a 	mov.w	ip, #10
 800aa82:	4620      	mov	r0, r4
 800aa84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa88:	3a30      	subs	r2, #48	@ 0x30
 800aa8a:	2a09      	cmp	r2, #9
 800aa8c:	d903      	bls.n	800aa96 <_svfiprintf_r+0x1a6>
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d0c6      	beq.n	800aa20 <_svfiprintf_r+0x130>
 800aa92:	9105      	str	r1, [sp, #20]
 800aa94:	e7c4      	b.n	800aa20 <_svfiprintf_r+0x130>
 800aa96:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e7f0      	b.n	800aa82 <_svfiprintf_r+0x192>
 800aaa0:	ab03      	add	r3, sp, #12
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	462a      	mov	r2, r5
 800aaa6:	4b0e      	ldr	r3, [pc, #56]	@ (800aae0 <_svfiprintf_r+0x1f0>)
 800aaa8:	a904      	add	r1, sp, #16
 800aaaa:	4638      	mov	r0, r7
 800aaac:	f3af 8000 	nop.w
 800aab0:	1c42      	adds	r2, r0, #1
 800aab2:	4606      	mov	r6, r0
 800aab4:	d1d6      	bne.n	800aa64 <_svfiprintf_r+0x174>
 800aab6:	89ab      	ldrh	r3, [r5, #12]
 800aab8:	065b      	lsls	r3, r3, #25
 800aaba:	f53f af2d 	bmi.w	800a918 <_svfiprintf_r+0x28>
 800aabe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aac0:	e72c      	b.n	800a91c <_svfiprintf_r+0x2c>
 800aac2:	ab03      	add	r3, sp, #12
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	462a      	mov	r2, r5
 800aac8:	4b05      	ldr	r3, [pc, #20]	@ (800aae0 <_svfiprintf_r+0x1f0>)
 800aaca:	a904      	add	r1, sp, #16
 800aacc:	4638      	mov	r0, r7
 800aace:	f000 f879 	bl	800abc4 <_printf_i>
 800aad2:	e7ed      	b.n	800aab0 <_svfiprintf_r+0x1c0>
 800aad4:	0800b368 	.word	0x0800b368
 800aad8:	0800b372 	.word	0x0800b372
 800aadc:	00000000 	.word	0x00000000
 800aae0:	0800a839 	.word	0x0800a839
 800aae4:	0800b36e 	.word	0x0800b36e

0800aae8 <_printf_common>:
 800aae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaec:	4616      	mov	r6, r2
 800aaee:	4698      	mov	r8, r3
 800aaf0:	688a      	ldr	r2, [r1, #8]
 800aaf2:	690b      	ldr	r3, [r1, #16]
 800aaf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	bfb8      	it	lt
 800aafc:	4613      	movlt	r3, r2
 800aafe:	6033      	str	r3, [r6, #0]
 800ab00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab04:	4607      	mov	r7, r0
 800ab06:	460c      	mov	r4, r1
 800ab08:	b10a      	cbz	r2, 800ab0e <_printf_common+0x26>
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	6033      	str	r3, [r6, #0]
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	0699      	lsls	r1, r3, #26
 800ab12:	bf42      	ittt	mi
 800ab14:	6833      	ldrmi	r3, [r6, #0]
 800ab16:	3302      	addmi	r3, #2
 800ab18:	6033      	strmi	r3, [r6, #0]
 800ab1a:	6825      	ldr	r5, [r4, #0]
 800ab1c:	f015 0506 	ands.w	r5, r5, #6
 800ab20:	d106      	bne.n	800ab30 <_printf_common+0x48>
 800ab22:	f104 0a19 	add.w	sl, r4, #25
 800ab26:	68e3      	ldr	r3, [r4, #12]
 800ab28:	6832      	ldr	r2, [r6, #0]
 800ab2a:	1a9b      	subs	r3, r3, r2
 800ab2c:	42ab      	cmp	r3, r5
 800ab2e:	dc26      	bgt.n	800ab7e <_printf_common+0x96>
 800ab30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab34:	6822      	ldr	r2, [r4, #0]
 800ab36:	3b00      	subs	r3, #0
 800ab38:	bf18      	it	ne
 800ab3a:	2301      	movne	r3, #1
 800ab3c:	0692      	lsls	r2, r2, #26
 800ab3e:	d42b      	bmi.n	800ab98 <_printf_common+0xb0>
 800ab40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab44:	4641      	mov	r1, r8
 800ab46:	4638      	mov	r0, r7
 800ab48:	47c8      	blx	r9
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	d01e      	beq.n	800ab8c <_printf_common+0xa4>
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	6922      	ldr	r2, [r4, #16]
 800ab52:	f003 0306 	and.w	r3, r3, #6
 800ab56:	2b04      	cmp	r3, #4
 800ab58:	bf02      	ittt	eq
 800ab5a:	68e5      	ldreq	r5, [r4, #12]
 800ab5c:	6833      	ldreq	r3, [r6, #0]
 800ab5e:	1aed      	subeq	r5, r5, r3
 800ab60:	68a3      	ldr	r3, [r4, #8]
 800ab62:	bf0c      	ite	eq
 800ab64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab68:	2500      	movne	r5, #0
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	bfc4      	itt	gt
 800ab6e:	1a9b      	subgt	r3, r3, r2
 800ab70:	18ed      	addgt	r5, r5, r3
 800ab72:	2600      	movs	r6, #0
 800ab74:	341a      	adds	r4, #26
 800ab76:	42b5      	cmp	r5, r6
 800ab78:	d11a      	bne.n	800abb0 <_printf_common+0xc8>
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	e008      	b.n	800ab90 <_printf_common+0xa8>
 800ab7e:	2301      	movs	r3, #1
 800ab80:	4652      	mov	r2, sl
 800ab82:	4641      	mov	r1, r8
 800ab84:	4638      	mov	r0, r7
 800ab86:	47c8      	blx	r9
 800ab88:	3001      	adds	r0, #1
 800ab8a:	d103      	bne.n	800ab94 <_printf_common+0xac>
 800ab8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab94:	3501      	adds	r5, #1
 800ab96:	e7c6      	b.n	800ab26 <_printf_common+0x3e>
 800ab98:	18e1      	adds	r1, r4, r3
 800ab9a:	1c5a      	adds	r2, r3, #1
 800ab9c:	2030      	movs	r0, #48	@ 0x30
 800ab9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aba2:	4422      	add	r2, r4
 800aba4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aba8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800abac:	3302      	adds	r3, #2
 800abae:	e7c7      	b.n	800ab40 <_printf_common+0x58>
 800abb0:	2301      	movs	r3, #1
 800abb2:	4622      	mov	r2, r4
 800abb4:	4641      	mov	r1, r8
 800abb6:	4638      	mov	r0, r7
 800abb8:	47c8      	blx	r9
 800abba:	3001      	adds	r0, #1
 800abbc:	d0e6      	beq.n	800ab8c <_printf_common+0xa4>
 800abbe:	3601      	adds	r6, #1
 800abc0:	e7d9      	b.n	800ab76 <_printf_common+0x8e>
	...

0800abc4 <_printf_i>:
 800abc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abc8:	7e0f      	ldrb	r7, [r1, #24]
 800abca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800abcc:	2f78      	cmp	r7, #120	@ 0x78
 800abce:	4691      	mov	r9, r2
 800abd0:	4680      	mov	r8, r0
 800abd2:	460c      	mov	r4, r1
 800abd4:	469a      	mov	sl, r3
 800abd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800abda:	d807      	bhi.n	800abec <_printf_i+0x28>
 800abdc:	2f62      	cmp	r7, #98	@ 0x62
 800abde:	d80a      	bhi.n	800abf6 <_printf_i+0x32>
 800abe0:	2f00      	cmp	r7, #0
 800abe2:	f000 80d2 	beq.w	800ad8a <_printf_i+0x1c6>
 800abe6:	2f58      	cmp	r7, #88	@ 0x58
 800abe8:	f000 80b9 	beq.w	800ad5e <_printf_i+0x19a>
 800abec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800abf4:	e03a      	b.n	800ac6c <_printf_i+0xa8>
 800abf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800abfa:	2b15      	cmp	r3, #21
 800abfc:	d8f6      	bhi.n	800abec <_printf_i+0x28>
 800abfe:	a101      	add	r1, pc, #4	@ (adr r1, 800ac04 <_printf_i+0x40>)
 800ac00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac04:	0800ac5d 	.word	0x0800ac5d
 800ac08:	0800ac71 	.word	0x0800ac71
 800ac0c:	0800abed 	.word	0x0800abed
 800ac10:	0800abed 	.word	0x0800abed
 800ac14:	0800abed 	.word	0x0800abed
 800ac18:	0800abed 	.word	0x0800abed
 800ac1c:	0800ac71 	.word	0x0800ac71
 800ac20:	0800abed 	.word	0x0800abed
 800ac24:	0800abed 	.word	0x0800abed
 800ac28:	0800abed 	.word	0x0800abed
 800ac2c:	0800abed 	.word	0x0800abed
 800ac30:	0800ad71 	.word	0x0800ad71
 800ac34:	0800ac9b 	.word	0x0800ac9b
 800ac38:	0800ad2b 	.word	0x0800ad2b
 800ac3c:	0800abed 	.word	0x0800abed
 800ac40:	0800abed 	.word	0x0800abed
 800ac44:	0800ad93 	.word	0x0800ad93
 800ac48:	0800abed 	.word	0x0800abed
 800ac4c:	0800ac9b 	.word	0x0800ac9b
 800ac50:	0800abed 	.word	0x0800abed
 800ac54:	0800abed 	.word	0x0800abed
 800ac58:	0800ad33 	.word	0x0800ad33
 800ac5c:	6833      	ldr	r3, [r6, #0]
 800ac5e:	1d1a      	adds	r2, r3, #4
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	6032      	str	r2, [r6, #0]
 800ac64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e09d      	b.n	800adac <_printf_i+0x1e8>
 800ac70:	6833      	ldr	r3, [r6, #0]
 800ac72:	6820      	ldr	r0, [r4, #0]
 800ac74:	1d19      	adds	r1, r3, #4
 800ac76:	6031      	str	r1, [r6, #0]
 800ac78:	0606      	lsls	r6, r0, #24
 800ac7a:	d501      	bpl.n	800ac80 <_printf_i+0xbc>
 800ac7c:	681d      	ldr	r5, [r3, #0]
 800ac7e:	e003      	b.n	800ac88 <_printf_i+0xc4>
 800ac80:	0645      	lsls	r5, r0, #25
 800ac82:	d5fb      	bpl.n	800ac7c <_printf_i+0xb8>
 800ac84:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac88:	2d00      	cmp	r5, #0
 800ac8a:	da03      	bge.n	800ac94 <_printf_i+0xd0>
 800ac8c:	232d      	movs	r3, #45	@ 0x2d
 800ac8e:	426d      	negs	r5, r5
 800ac90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac94:	4859      	ldr	r0, [pc, #356]	@ (800adfc <_printf_i+0x238>)
 800ac96:	230a      	movs	r3, #10
 800ac98:	e011      	b.n	800acbe <_printf_i+0xfa>
 800ac9a:	6821      	ldr	r1, [r4, #0]
 800ac9c:	6833      	ldr	r3, [r6, #0]
 800ac9e:	0608      	lsls	r0, r1, #24
 800aca0:	f853 5b04 	ldr.w	r5, [r3], #4
 800aca4:	d402      	bmi.n	800acac <_printf_i+0xe8>
 800aca6:	0649      	lsls	r1, r1, #25
 800aca8:	bf48      	it	mi
 800acaa:	b2ad      	uxthmi	r5, r5
 800acac:	2f6f      	cmp	r7, #111	@ 0x6f
 800acae:	4853      	ldr	r0, [pc, #332]	@ (800adfc <_printf_i+0x238>)
 800acb0:	6033      	str	r3, [r6, #0]
 800acb2:	bf14      	ite	ne
 800acb4:	230a      	movne	r3, #10
 800acb6:	2308      	moveq	r3, #8
 800acb8:	2100      	movs	r1, #0
 800acba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800acbe:	6866      	ldr	r6, [r4, #4]
 800acc0:	60a6      	str	r6, [r4, #8]
 800acc2:	2e00      	cmp	r6, #0
 800acc4:	bfa2      	ittt	ge
 800acc6:	6821      	ldrge	r1, [r4, #0]
 800acc8:	f021 0104 	bicge.w	r1, r1, #4
 800accc:	6021      	strge	r1, [r4, #0]
 800acce:	b90d      	cbnz	r5, 800acd4 <_printf_i+0x110>
 800acd0:	2e00      	cmp	r6, #0
 800acd2:	d04b      	beq.n	800ad6c <_printf_i+0x1a8>
 800acd4:	4616      	mov	r6, r2
 800acd6:	fbb5 f1f3 	udiv	r1, r5, r3
 800acda:	fb03 5711 	mls	r7, r3, r1, r5
 800acde:	5dc7      	ldrb	r7, [r0, r7]
 800ace0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ace4:	462f      	mov	r7, r5
 800ace6:	42bb      	cmp	r3, r7
 800ace8:	460d      	mov	r5, r1
 800acea:	d9f4      	bls.n	800acd6 <_printf_i+0x112>
 800acec:	2b08      	cmp	r3, #8
 800acee:	d10b      	bne.n	800ad08 <_printf_i+0x144>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	07df      	lsls	r7, r3, #31
 800acf4:	d508      	bpl.n	800ad08 <_printf_i+0x144>
 800acf6:	6923      	ldr	r3, [r4, #16]
 800acf8:	6861      	ldr	r1, [r4, #4]
 800acfa:	4299      	cmp	r1, r3
 800acfc:	bfde      	ittt	le
 800acfe:	2330      	movle	r3, #48	@ 0x30
 800ad00:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad04:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad08:	1b92      	subs	r2, r2, r6
 800ad0a:	6122      	str	r2, [r4, #16]
 800ad0c:	f8cd a000 	str.w	sl, [sp]
 800ad10:	464b      	mov	r3, r9
 800ad12:	aa03      	add	r2, sp, #12
 800ad14:	4621      	mov	r1, r4
 800ad16:	4640      	mov	r0, r8
 800ad18:	f7ff fee6 	bl	800aae8 <_printf_common>
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	d14a      	bne.n	800adb6 <_printf_i+0x1f2>
 800ad20:	f04f 30ff 	mov.w	r0, #4294967295
 800ad24:	b004      	add	sp, #16
 800ad26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad2a:	6823      	ldr	r3, [r4, #0]
 800ad2c:	f043 0320 	orr.w	r3, r3, #32
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	4833      	ldr	r0, [pc, #204]	@ (800ae00 <_printf_i+0x23c>)
 800ad34:	2778      	movs	r7, #120	@ 0x78
 800ad36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	6831      	ldr	r1, [r6, #0]
 800ad3e:	061f      	lsls	r7, r3, #24
 800ad40:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad44:	d402      	bmi.n	800ad4c <_printf_i+0x188>
 800ad46:	065f      	lsls	r7, r3, #25
 800ad48:	bf48      	it	mi
 800ad4a:	b2ad      	uxthmi	r5, r5
 800ad4c:	6031      	str	r1, [r6, #0]
 800ad4e:	07d9      	lsls	r1, r3, #31
 800ad50:	bf44      	itt	mi
 800ad52:	f043 0320 	orrmi.w	r3, r3, #32
 800ad56:	6023      	strmi	r3, [r4, #0]
 800ad58:	b11d      	cbz	r5, 800ad62 <_printf_i+0x19e>
 800ad5a:	2310      	movs	r3, #16
 800ad5c:	e7ac      	b.n	800acb8 <_printf_i+0xf4>
 800ad5e:	4827      	ldr	r0, [pc, #156]	@ (800adfc <_printf_i+0x238>)
 800ad60:	e7e9      	b.n	800ad36 <_printf_i+0x172>
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	f023 0320 	bic.w	r3, r3, #32
 800ad68:	6023      	str	r3, [r4, #0]
 800ad6a:	e7f6      	b.n	800ad5a <_printf_i+0x196>
 800ad6c:	4616      	mov	r6, r2
 800ad6e:	e7bd      	b.n	800acec <_printf_i+0x128>
 800ad70:	6833      	ldr	r3, [r6, #0]
 800ad72:	6825      	ldr	r5, [r4, #0]
 800ad74:	6961      	ldr	r1, [r4, #20]
 800ad76:	1d18      	adds	r0, r3, #4
 800ad78:	6030      	str	r0, [r6, #0]
 800ad7a:	062e      	lsls	r6, r5, #24
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	d501      	bpl.n	800ad84 <_printf_i+0x1c0>
 800ad80:	6019      	str	r1, [r3, #0]
 800ad82:	e002      	b.n	800ad8a <_printf_i+0x1c6>
 800ad84:	0668      	lsls	r0, r5, #25
 800ad86:	d5fb      	bpl.n	800ad80 <_printf_i+0x1bc>
 800ad88:	8019      	strh	r1, [r3, #0]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	6123      	str	r3, [r4, #16]
 800ad8e:	4616      	mov	r6, r2
 800ad90:	e7bc      	b.n	800ad0c <_printf_i+0x148>
 800ad92:	6833      	ldr	r3, [r6, #0]
 800ad94:	1d1a      	adds	r2, r3, #4
 800ad96:	6032      	str	r2, [r6, #0]
 800ad98:	681e      	ldr	r6, [r3, #0]
 800ad9a:	6862      	ldr	r2, [r4, #4]
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f7f5 fa3e 	bl	8000220 <memchr>
 800ada4:	b108      	cbz	r0, 800adaa <_printf_i+0x1e6>
 800ada6:	1b80      	subs	r0, r0, r6
 800ada8:	6060      	str	r0, [r4, #4]
 800adaa:	6863      	ldr	r3, [r4, #4]
 800adac:	6123      	str	r3, [r4, #16]
 800adae:	2300      	movs	r3, #0
 800adb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adb4:	e7aa      	b.n	800ad0c <_printf_i+0x148>
 800adb6:	6923      	ldr	r3, [r4, #16]
 800adb8:	4632      	mov	r2, r6
 800adba:	4649      	mov	r1, r9
 800adbc:	4640      	mov	r0, r8
 800adbe:	47d0      	blx	sl
 800adc0:	3001      	adds	r0, #1
 800adc2:	d0ad      	beq.n	800ad20 <_printf_i+0x15c>
 800adc4:	6823      	ldr	r3, [r4, #0]
 800adc6:	079b      	lsls	r3, r3, #30
 800adc8:	d413      	bmi.n	800adf2 <_printf_i+0x22e>
 800adca:	68e0      	ldr	r0, [r4, #12]
 800adcc:	9b03      	ldr	r3, [sp, #12]
 800adce:	4298      	cmp	r0, r3
 800add0:	bfb8      	it	lt
 800add2:	4618      	movlt	r0, r3
 800add4:	e7a6      	b.n	800ad24 <_printf_i+0x160>
 800add6:	2301      	movs	r3, #1
 800add8:	4632      	mov	r2, r6
 800adda:	4649      	mov	r1, r9
 800addc:	4640      	mov	r0, r8
 800adde:	47d0      	blx	sl
 800ade0:	3001      	adds	r0, #1
 800ade2:	d09d      	beq.n	800ad20 <_printf_i+0x15c>
 800ade4:	3501      	adds	r5, #1
 800ade6:	68e3      	ldr	r3, [r4, #12]
 800ade8:	9903      	ldr	r1, [sp, #12]
 800adea:	1a5b      	subs	r3, r3, r1
 800adec:	42ab      	cmp	r3, r5
 800adee:	dcf2      	bgt.n	800add6 <_printf_i+0x212>
 800adf0:	e7eb      	b.n	800adca <_printf_i+0x206>
 800adf2:	2500      	movs	r5, #0
 800adf4:	f104 0619 	add.w	r6, r4, #25
 800adf8:	e7f5      	b.n	800ade6 <_printf_i+0x222>
 800adfa:	bf00      	nop
 800adfc:	0800b379 	.word	0x0800b379
 800ae00:	0800b38a 	.word	0x0800b38a

0800ae04 <memmove>:
 800ae04:	4288      	cmp	r0, r1
 800ae06:	b510      	push	{r4, lr}
 800ae08:	eb01 0402 	add.w	r4, r1, r2
 800ae0c:	d902      	bls.n	800ae14 <memmove+0x10>
 800ae0e:	4284      	cmp	r4, r0
 800ae10:	4623      	mov	r3, r4
 800ae12:	d807      	bhi.n	800ae24 <memmove+0x20>
 800ae14:	1e43      	subs	r3, r0, #1
 800ae16:	42a1      	cmp	r1, r4
 800ae18:	d008      	beq.n	800ae2c <memmove+0x28>
 800ae1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae22:	e7f8      	b.n	800ae16 <memmove+0x12>
 800ae24:	4402      	add	r2, r0
 800ae26:	4601      	mov	r1, r0
 800ae28:	428a      	cmp	r2, r1
 800ae2a:	d100      	bne.n	800ae2e <memmove+0x2a>
 800ae2c:	bd10      	pop	{r4, pc}
 800ae2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae36:	e7f7      	b.n	800ae28 <memmove+0x24>

0800ae38 <_sbrk_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4d06      	ldr	r5, [pc, #24]	@ (800ae54 <_sbrk_r+0x1c>)
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4604      	mov	r4, r0
 800ae40:	4608      	mov	r0, r1
 800ae42:	602b      	str	r3, [r5, #0]
 800ae44:	f7f6 fd5e 	bl	8001904 <_sbrk>
 800ae48:	1c43      	adds	r3, r0, #1
 800ae4a:	d102      	bne.n	800ae52 <_sbrk_r+0x1a>
 800ae4c:	682b      	ldr	r3, [r5, #0]
 800ae4e:	b103      	cbz	r3, 800ae52 <_sbrk_r+0x1a>
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	20001fcc 	.word	0x20001fcc

0800ae58 <memcpy>:
 800ae58:	440a      	add	r2, r1
 800ae5a:	4291      	cmp	r1, r2
 800ae5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae60:	d100      	bne.n	800ae64 <memcpy+0xc>
 800ae62:	4770      	bx	lr
 800ae64:	b510      	push	{r4, lr}
 800ae66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae6e:	4291      	cmp	r1, r2
 800ae70:	d1f9      	bne.n	800ae66 <memcpy+0xe>
 800ae72:	bd10      	pop	{r4, pc}

0800ae74 <_realloc_r>:
 800ae74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae78:	4680      	mov	r8, r0
 800ae7a:	4615      	mov	r5, r2
 800ae7c:	460c      	mov	r4, r1
 800ae7e:	b921      	cbnz	r1, 800ae8a <_realloc_r+0x16>
 800ae80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae84:	4611      	mov	r1, r2
 800ae86:	f7ff bc4b 	b.w	800a720 <_malloc_r>
 800ae8a:	b92a      	cbnz	r2, 800ae98 <_realloc_r+0x24>
 800ae8c:	f7ff fbdc 	bl	800a648 <_free_r>
 800ae90:	2400      	movs	r4, #0
 800ae92:	4620      	mov	r0, r4
 800ae94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae98:	f000 f81a 	bl	800aed0 <_malloc_usable_size_r>
 800ae9c:	4285      	cmp	r5, r0
 800ae9e:	4606      	mov	r6, r0
 800aea0:	d802      	bhi.n	800aea8 <_realloc_r+0x34>
 800aea2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aea6:	d8f4      	bhi.n	800ae92 <_realloc_r+0x1e>
 800aea8:	4629      	mov	r1, r5
 800aeaa:	4640      	mov	r0, r8
 800aeac:	f7ff fc38 	bl	800a720 <_malloc_r>
 800aeb0:	4607      	mov	r7, r0
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	d0ec      	beq.n	800ae90 <_realloc_r+0x1c>
 800aeb6:	42b5      	cmp	r5, r6
 800aeb8:	462a      	mov	r2, r5
 800aeba:	4621      	mov	r1, r4
 800aebc:	bf28      	it	cs
 800aebe:	4632      	movcs	r2, r6
 800aec0:	f7ff ffca 	bl	800ae58 <memcpy>
 800aec4:	4621      	mov	r1, r4
 800aec6:	4640      	mov	r0, r8
 800aec8:	f7ff fbbe 	bl	800a648 <_free_r>
 800aecc:	463c      	mov	r4, r7
 800aece:	e7e0      	b.n	800ae92 <_realloc_r+0x1e>

0800aed0 <_malloc_usable_size_r>:
 800aed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aed4:	1f18      	subs	r0, r3, #4
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	bfbc      	itt	lt
 800aeda:	580b      	ldrlt	r3, [r1, r0]
 800aedc:	18c0      	addlt	r0, r0, r3
 800aede:	4770      	bx	lr

0800aee0 <_init>:
 800aee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee2:	bf00      	nop
 800aee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aee6:	bc08      	pop	{r3}
 800aee8:	469e      	mov	lr, r3
 800aeea:	4770      	bx	lr

0800aeec <_fini>:
 800aeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeee:	bf00      	nop
 800aef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aef2:	bc08      	pop	{r3}
 800aef4:	469e      	mov	lr, r3
 800aef6:	4770      	bx	lr
