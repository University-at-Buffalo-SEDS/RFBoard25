
RFBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa14  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800abf4  0800abf4  0000bbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b044  0800b044  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b044  0800b044  0000c044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b04c  0800b04c  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b04c  0800b04c  0000c04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b050  0800b050  0000c050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b054  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d80  200001d4  0800b228  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f54  0800b228  0000df54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d820  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ab  00000000  00000000  0002aa24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  0002ecd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001209  00000000  00000000  00030458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229c1  00000000  00000000  00031661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f1ee  00000000  00000000  00054022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd06a  00000000  00000000  00073210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014027a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000678c  00000000  00000000  001402c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00146a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800abdc 	.word	0x0800abdc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800abdc 	.word	0x0800abdc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <cs_low>:

ublox_status_e sendSPICommand(NeoGPSConfig_t *config, UBX_Packet_t *outgoing, uint32_t max_wait);

#define SPI_RX_BUFFER_SIZE 64//128

static void cs_low(NeoGPSConfig_t *config) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(config->cs_pin_port, config->cs_pin, GPIO_PIN_RESET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6858      	ldr	r0, [r3, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	891b      	ldrh	r3, [r3, #8]
 80005c0:	2200      	movs	r2, #0
 80005c2:	4619      	mov	r1, r3
 80005c4:	f001 fd80 	bl	80020c8 <HAL_GPIO_WritePin>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <cs_high>:

static void cs_high(NeoGPSConfig_t *config) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(config->cs_pin_port, config->cs_pin, GPIO_PIN_SET);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6858      	ldr	r0, [r3, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	891b      	ldrh	r3, [r3, #8]
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	f001 fd70 	bl	80020c8 <HAL_GPIO_WritePin>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <calculateChecksum>:

void calculateChecksum(UBX_Packet_t *packet, uint8_t *tx, uint16_t tx_size) {
 80005f0:	b480      	push	{r7}
 80005f2:	b087      	sub	sp, #28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	4613      	mov	r3, r2
 80005fc:	80fb      	strh	r3, [r7, #6]
	packet->checksumA = 0;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2200      	movs	r2, #0
 8000602:	731a      	strb	r2, [r3, #12]
	packet->checksumB = 0;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2200      	movs	r2, #0
 8000608:	735a      	strb	r2, [r3, #13]

	for (int i = 0; i < tx_size; i++) {
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	e014      	b.n	800063a <calculateChecksum+0x4a>
		packet->checksumA += tx[i];
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	7b1a      	ldrb	r2, [r3, #12]
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	68b9      	ldr	r1, [r7, #8]
 8000618:	440b      	add	r3, r1
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4413      	add	r3, r2
 800061e:	b2da      	uxtb	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	731a      	strb	r2, [r3, #12]
		packet->checksumB += packet->checksumA;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	7b5a      	ldrb	r2, [r3, #13]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	7b1b      	ldrb	r3, [r3, #12]
 800062c:	4413      	add	r3, r2
 800062e:	b2da      	uxtb	r2, r3
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	735a      	strb	r2, [r3, #13]
	for (int i = 0; i < tx_size; i++) {
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	3301      	adds	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	429a      	cmp	r2, r3
 8000640:	dbe6      	blt.n	8000610 <calculateChecksum+0x20>
	}
}
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	371c      	adds	r7, #28
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <processSpiByte>:
 *
 * FRAME FORMAT FOR UBX:
 * HEADER | Class | ID | Length | Payload | CK_A | CK_B |
 * 0    1   2       3    4    5   6         6+n    7+n
 */
bool processSpiByte(uint8_t incoming, UBX_Packet_t *incoming_packet) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
	uint16_t frame_count = incoming_packet->recv_counter;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	889b      	ldrh	r3, [r3, #4]
 8000660:	81fb      	strh	r3, [r7, #14]
	if (frame_count == 0) {
 8000662:	89fb      	ldrh	r3, [r7, #14]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d116      	bne.n	8000696 <processSpiByte+0x46>
		if (incoming == UBX_PSYNC_1) { //psync_1 (b5) is the beginning of a ubx message
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	2bb5      	cmp	r3, #181	@ 0xb5
 800066c:	d103      	bne.n	8000676 <processSpiByte+0x26>
			debug_print("PSYNC_1 | ");
 800066e:	483e      	ldr	r0, [pc, #248]	@ (8000768 <processSpiByte+0x118>)
 8000670:	f000 fb7c 	bl	8000d6c <debug_print>
 8000674:	e073      	b.n	800075e <processSpiByte+0x10e>
		} else if (incoming == '$') { //$ is the beginning of a nmea message (see interface document page 21)
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b24      	cmp	r3, #36	@ 0x24
 800067a:	d104      	bne.n	8000686 <processSpiByte+0x36>
			//cur_incoming_type = INCOMING_TYPE_NMEA;
			debug_print("== WARNING: DRIVER DOES NOT SUPPORT NMEA ==\r\n");
 800067c:	483b      	ldr	r0, [pc, #236]	@ (800076c <processSpiByte+0x11c>)
 800067e:	f000 fb75 	bl	8000d6c <debug_print>
			return false;
 8000682:	2300      	movs	r3, #0
 8000684:	e06c      	b.n	8000760 <processSpiByte+0x110>
		} else if (incoming == 0xD3) { //0xd3 is the beginning of a rtcm message
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2bd3      	cmp	r3, #211	@ 0xd3
 800068a:	d168      	bne.n	800075e <processSpiByte+0x10e>
			debug_print("== WARNING: DRIVER DOES NOT SUPPORT RTCM ==\r\n");
 800068c:	4838      	ldr	r0, [pc, #224]	@ (8000770 <processSpiByte+0x120>)
 800068e:	f000 fb6d 	bl	8000d6c <debug_print>
			return false;
 8000692:	2300      	movs	r3, #0
 8000694:	e064      	b.n	8000760 <processSpiByte+0x110>
		}
	} else if (frame_count == 1) {
 8000696:	89fb      	ldrh	r3, [r7, #14]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d108      	bne.n	80006ae <processSpiByte+0x5e>
		if (incoming == UBX_PSYNC_2) {
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b62      	cmp	r3, #98	@ 0x62
 80006a0:	d103      	bne.n	80006aa <processSpiByte+0x5a>
			//psync_2 is the second header byte of a ubx message
			debug_print("PSYNC_2 | ");
 80006a2:	4834      	ldr	r0, [pc, #208]	@ (8000774 <processSpiByte+0x124>)
 80006a4:	f000 fb62 	bl	8000d6c <debug_print>
 80006a8:	e059      	b.n	800075e <processSpiByte+0x10e>
		} else {
			return false;
 80006aa:	2300      	movs	r3, #0
 80006ac:	e058      	b.n	8000760 <processSpiByte+0x110>
		}
	} else if (frame_count == 2) { //should be the class, store it in the given struct
 80006ae:	89fb      	ldrh	r3, [r7, #14]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d108      	bne.n	80006c6 <processSpiByte+0x76>
		incoming_packet->class = incoming;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	79fa      	ldrb	r2, [r7, #7]
 80006b8:	701a      	strb	r2, [r3, #0]
		debug_print("CLS %02x | ", incoming);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4619      	mov	r1, r3
 80006be:	482e      	ldr	r0, [pc, #184]	@ (8000778 <processSpiByte+0x128>)
 80006c0:	f000 fb54 	bl	8000d6c <debug_print>
 80006c4:	e04b      	b.n	800075e <processSpiByte+0x10e>
	} else if (frame_count == 3) { //should be the id
 80006c6:	89fb      	ldrh	r3, [r7, #14]
 80006c8:	2b03      	cmp	r3, #3
 80006ca:	d108      	bne.n	80006de <processSpiByte+0x8e>
		debug_print("ID %02x | ", incoming);
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4619      	mov	r1, r3
 80006d0:	482a      	ldr	r0, [pc, #168]	@ (800077c <processSpiByte+0x12c>)
 80006d2:	f000 fb4b 	bl	8000d6c <debug_print>
		incoming_packet->id = incoming;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	79fa      	ldrb	r2, [r7, #7]
 80006da:	705a      	strb	r2, [r3, #1]
 80006dc:	e03f      	b.n	800075e <processSpiByte+0x10e>
	} else if (frame_count == 4) { //length LSB
 80006de:	89fb      	ldrh	r3, [r7, #14]
 80006e0:	2b04      	cmp	r3, #4
 80006e2:	d104      	bne.n	80006ee <processSpiByte+0x9e>
		//do this in reverse
		incoming_packet->length = incoming;
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	805a      	strh	r2, [r3, #2]
 80006ec:	e037      	b.n	800075e <processSpiByte+0x10e>
	} else if (frame_count == 5) { //length msb
 80006ee:	89fb      	ldrh	r3, [r7, #14]
 80006f0:	2b05      	cmp	r3, #5
 80006f2:	d10b      	bne.n	800070c <processSpiByte+0xbc>
		incoming_packet->length |= incoming << 8;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	885b      	ldrh	r3, [r3, #2]
 80006f8:	b21a      	sxth	r2, r3
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	021b      	lsls	r3, r3, #8
 80006fe:	b21b      	sxth	r3, r3
 8000700:	4313      	orrs	r3, r2
 8000702:	b21b      	sxth	r3, r3
 8000704:	b29a      	uxth	r2, r3
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	805a      	strh	r2, [r3, #2]
 800070a:	e028      	b.n	800075e <processSpiByte+0x10e>
	} else if (frame_count > 5) { //this is either the payload of the checksum
 800070c:	89fb      	ldrh	r3, [r7, #14]
 800070e:	2b05      	cmp	r3, #5
 8000710:	d923      	bls.n	800075a <processSpiByte+0x10a>
		if (frame_count < 6+incoming_packet->length) { //this is part of the payload
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	885b      	ldrh	r3, [r3, #2]
 8000716:	1d5a      	adds	r2, r3, #5
 8000718:	89fb      	ldrh	r3, [r7, #14]
 800071a:	429a      	cmp	r2, r3
 800071c:	db07      	blt.n	800072e <processSpiByte+0xde>
			incoming_packet->payload[frame_count-6] = incoming;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	689a      	ldr	r2, [r3, #8]
 8000722:	89fb      	ldrh	r3, [r7, #14]
 8000724:	3b06      	subs	r3, #6
 8000726:	4413      	add	r3, r2
 8000728:	79fa      	ldrb	r2, [r7, #7]
 800072a:	701a      	strb	r2, [r3, #0]
 800072c:	e017      	b.n	800075e <processSpiByte+0x10e>
		} else { //these are the checksum
			if (frame_count == 6 + incoming_packet->length) {
 800072e:	89fa      	ldrh	r2, [r7, #14]
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	885b      	ldrh	r3, [r3, #2]
 8000734:	3306      	adds	r3, #6
 8000736:	429a      	cmp	r2, r3
 8000738:	d103      	bne.n	8000742 <processSpiByte+0xf2>
				incoming_packet->checksumA = incoming;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	79fa      	ldrb	r2, [r7, #7]
 800073e:	731a      	strb	r2, [r3, #12]
 8000740:	e00d      	b.n	800075e <processSpiByte+0x10e>
			} else if (frame_count == 7 + incoming_packet->length){
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	885b      	ldrh	r3, [r3, #2]
 8000748:	3307      	adds	r3, #7
 800074a:	429a      	cmp	r2, r3
 800074c:	d103      	bne.n	8000756 <processSpiByte+0x106>
				incoming_packet->checksumB = incoming;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	735a      	strb	r2, [r3, #13]
 8000754:	e003      	b.n	800075e <processSpiByte+0x10e>
			} else {
				return false;
 8000756:	2300      	movs	r3, #0
 8000758:	e002      	b.n	8000760 <processSpiByte+0x110>
			}
		}
	} else {
		return false; //invalid frame_count (not sure why this would happen)
 800075a:	2300      	movs	r3, #0
 800075c:	e000      	b.n	8000760 <processSpiByte+0x110>
	}
	return true;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	0800abf4 	.word	0x0800abf4
 800076c:	0800ac00 	.word	0x0800ac00
 8000770:	0800ac30 	.word	0x0800ac30
 8000774:	0800ac60 	.word	0x0800ac60
 8000778:	0800ac6c 	.word	0x0800ac6c
 800077c:	0800ac78 	.word	0x0800ac78

08000780 <checkAndProcessSPIBuffer>:
 * Go through the SPI buffer and process incoming bytes
 * into the given incoming_packet struct, comparing the
 * incoming to the outgoing (id and class of incoming
 * should match the outgoing)
 */
void checkAndProcessSPIBuffer(UBX_Packet_t *outgoing, uint8_t *rx_buf, uint16_t rx_size, UBX_Packet_t *incoming_packet) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	4613      	mov	r3, r2
 800078e:	80fb      	strh	r3, [r7, #6]
	//overhead for processspibyte
	for(int i = 0; i < rx_size; i++) {
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e022      	b.n	80007dc <checkAndProcessSPIBuffer+0x5c>
		debug_print("(%02x)", rx_buf[i]);
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	68ba      	ldr	r2, [r7, #8]
 800079a:	4413      	add	r3, r2
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	4619      	mov	r1, r3
 80007a0:	4813      	ldr	r0, [pc, #76]	@ (80007f0 <checkAndProcessSPIBuffer+0x70>)
 80007a2:	f000 fae3 	bl	8000d6c <debug_print>
		if (processSpiByte(rx_buf[i], incoming_packet) == true) {
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	6839      	ldr	r1, [r7, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff4d 	bl	8000650 <processSpiByte>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d006      	beq.n	80007ca <checkAndProcessSPIBuffer+0x4a>
			incoming_packet->recv_counter ++;;
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	889b      	ldrh	r3, [r3, #4]
 80007c0:	3301      	adds	r3, #1
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	809a      	strh	r2, [r3, #4]
 80007c8:	e002      	b.n	80007d0 <checkAndProcessSPIBuffer+0x50>
		} else {
			debug_print("processing spi byte failed.\n");
 80007ca:	480a      	ldr	r0, [pc, #40]	@ (80007f4 <checkAndProcessSPIBuffer+0x74>)
 80007cc:	f000 face 	bl	8000d6c <debug_print>
		}
		HAL_Delay(100);
 80007d0:	2064      	movs	r0, #100	@ 0x64
 80007d2:	f001 f809 	bl	80017e8 <HAL_Delay>
	for(int i = 0; i < rx_size; i++) {
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	3301      	adds	r3, #1
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	dbd8      	blt.n	8000796 <checkAndProcessSPIBuffer+0x16>
	}
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	0800ac84 	.word	0x0800ac84
 80007f4:	0800ac8c 	.word	0x0800ac8c

080007f8 <waitForAck>:

//ACK MESSAGE IS IN THE FORMAT HEADER | CLASS (0X05) | ID (0X01 FOR ACK 0X00 FOR NOT ACK) | len | payload | checksum
bool waitForAck(UBX_Packet_t  *outgoing, uint8_t *rx_buf, uint16_t rx_size, uint32_t max_wait) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	4613      	mov	r3, r2
 8000806:	80fb      	strh	r3, [r7, #6]
	//we don't actually need to wait like in the arduino driver, because the stm32 hal functions are all blocking
	//with a given timeout.
	UBX_Packet_t incoming_packet;
	incoming_packet.recv_counter = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	82bb      	strh	r3, [r7, #20]
	HAL_Delay(1000);
 800080c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000810:	f000 ffea 	bl	80017e8 <HAL_Delay>
	debug_print("doing wait for ack...\r\n");
 8000814:	4816      	ldr	r0, [pc, #88]	@ (8000870 <waitForAck+0x78>)
 8000816:	f000 faa9 	bl	8000d6c <debug_print>
	HAL_Delay(1000);
 800081a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800081e:	f000 ffe3 	bl	80017e8 <HAL_Delay>
	checkAndProcessSPIBuffer(outgoing, rx_buf, rx_size, &incoming_packet); // See if new data is available. Process bytes as they come in.
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	88fa      	ldrh	r2, [r7, #6]
 8000828:	68b9      	ldr	r1, [r7, #8]
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f7ff ffa8 	bl	8000780 <checkAndProcessSPIBuffer>

	//now we should check if the stuff in incoming_packet is valid.

	if (incoming_packet.class == outgoing->class) {
 8000830:	7c3a      	ldrb	r2, [r7, #16]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	d108      	bne.n	800084c <waitForAck+0x54>
		debug_print("Classes match!\n");
 800083a:	480e      	ldr	r0, [pc, #56]	@ (8000874 <waitForAck+0x7c>)
 800083c:	f000 fa96 	bl	8000d6c <debug_print>
	} else {
		debug_print("Classes don't match.\n");
		return false;
	}

	if (incoming_packet.id == outgoing->id) {
 8000840:	7c7a      	ldrb	r2, [r7, #17]
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	785b      	ldrb	r3, [r3, #1]
 8000846:	429a      	cmp	r2, r3
 8000848:	d10a      	bne.n	8000860 <waitForAck+0x68>
 800084a:	e004      	b.n	8000856 <waitForAck+0x5e>
		debug_print("Classes don't match.\n");
 800084c:	480a      	ldr	r0, [pc, #40]	@ (8000878 <waitForAck+0x80>)
 800084e:	f000 fa8d 	bl	8000d6c <debug_print>
		return false;
 8000852:	2300      	movs	r3, #0
 8000854:	e008      	b.n	8000868 <waitForAck+0x70>
		debug_print("Ids match!\n");
 8000856:	4809      	ldr	r0, [pc, #36]	@ (800087c <waitForAck+0x84>)
 8000858:	f000 fa88 	bl	8000d6c <debug_print>
	} else {
		debug_print("Ids don't match.\n");
		return false;
	}

	return true;
 800085c:	2301      	movs	r3, #1
 800085e:	e003      	b.n	8000868 <waitForAck+0x70>
		debug_print("Ids don't match.\n");
 8000860:	4807      	ldr	r0, [pc, #28]	@ (8000880 <waitForAck+0x88>)
 8000862:	f000 fa83 	bl	8000d6c <debug_print>
		return false;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	0800acac 	.word	0x0800acac
 8000874:	0800acc4 	.word	0x0800acc4
 8000878:	0800acd4 	.word	0x0800acd4
 800087c:	0800acec 	.word	0x0800acec
 8000880:	0800acf8 	.word	0x0800acf8

08000884 <sendSPICommand>:

ublox_status_e sendSPICommand(NeoGPSConfig_t *config, UBX_Packet_t *outgoing, uint32_t max_wait) {
 8000884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000888:	b095      	sub	sp, #84	@ 0x54
 800088a:	af02      	add	r7, sp, #8
 800088c:	6178      	str	r0, [r7, #20]
 800088e:	6139      	str	r1, [r7, #16]
 8000890:	60fa      	str	r2, [r7, #12]
 8000892:	466b      	mov	r3, sp
 8000894:	461e      	mov	r6, r3
	//start with header bytes
	//determine size of
	debug_print("Running sendspicommand...\r\n");
 8000896:	48a7      	ldr	r0, [pc, #668]	@ (8000b34 <sendSPICommand+0x2b0>)
 8000898:	f000 fa68 	bl	8000d6c <debug_print>
	uint16_t tx_size = UBX_PACKET_HEADER_SIZE +
			   outgoing->length +
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	885b      	ldrh	r3, [r3, #2]
	uint16_t tx_size = UBX_PACKET_HEADER_SIZE +
 80008a0:	3308      	adds	r3, #8
 80008a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
			   UBX_PACKET_FOOTER_SIZE;

	uint8_t tx[tx_size*2];
 80008a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80008a6:	0059      	lsls	r1, r3, #1
 80008a8:	1e4b      	subs	r3, r1, #1
 80008aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80008ac:	460a      	mov	r2, r1
 80008ae:	2300      	movs	r3, #0
 80008b0:	603a      	str	r2, [r7, #0]
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	f04f 0200 	mov.w	r2, #0
 80008b8:	f04f 0300 	mov.w	r3, #0
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	00c3      	lsls	r3, r0, #3
 80008c0:	6838      	ldr	r0, [r7, #0]
 80008c2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008c6:	6838      	ldr	r0, [r7, #0]
 80008c8:	00c2      	lsls	r2, r0, #3
 80008ca:	460a      	mov	r2, r1
 80008cc:	2300      	movs	r3, #0
 80008ce:	4692      	mov	sl, r2
 80008d0:	469b      	mov	fp, r3
 80008d2:	f04f 0200 	mov.w	r2, #0
 80008d6:	f04f 0300 	mov.w	r3, #0
 80008da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80008de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80008e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80008e6:	460b      	mov	r3, r1
 80008e8:	3307      	adds	r3, #7
 80008ea:	08db      	lsrs	r3, r3, #3
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	ebad 0d03 	sub.w	sp, sp, r3
 80008f2:	ab02      	add	r3, sp, #8
 80008f4:	3300      	adds	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	tx[0] = UBX_PSYNC_1;
 80008f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008fa:	22b5      	movs	r2, #181	@ 0xb5
 80008fc:	701a      	strb	r2, [r3, #0]
	tx[1] = UBX_PSYNC_2;
 80008fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000900:	2262      	movs	r2, #98	@ 0x62
 8000902:	705a      	strb	r2, [r3, #1]

	tx[2] = outgoing->class;
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800090a:	709a      	strb	r2, [r3, #2]
	tx[3] = outgoing->id;
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	785a      	ldrb	r2, [r3, #1]
 8000910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000912:	70da      	strb	r2, [r3, #3]
	tx[4] = outgoing->length & 0xFF; //LSB OF LENGTH,
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	885b      	ldrh	r3, [r3, #2]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800091c:	711a      	strb	r2, [r3, #4]
	tx[5] = outgoing->length >> 8;   //MSB OF LENGTH. LENGTH IS LSB FIRST PER DATASHEET
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	885b      	ldrh	r3, [r3, #2]
 8000922:	0a1b      	lsrs	r3, r3, #8
 8000924:	b29b      	uxth	r3, r3
 8000926:	b2da      	uxtb	r2, r3
 8000928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800092a:	715a      	strb	r2, [r3, #5]

	HAL_Delay(1000);
 800092c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000930:	f000 ff5a 	bl	80017e8 <HAL_Delay>
	debug_print("Set headers, setting payload of length %d...\r\n", outgoing->length);
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	885b      	ldrh	r3, [r3, #2]
 8000938:	4619      	mov	r1, r3
 800093a:	487f      	ldr	r0, [pc, #508]	@ (8000b38 <sendSPICommand+0x2b4>)
 800093c:	f000 fa16 	bl	8000d6c <debug_print>
	HAL_Delay(1000);
 8000940:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000944:	f000 ff50 	bl	80017e8 <HAL_Delay>
	for (int i = 0; i < outgoing->length; i++) {
 8000948:	2300      	movs	r3, #0
 800094a:	647b      	str	r3, [r7, #68]	@ 0x44
 800094c:	e00b      	b.n	8000966 <sendSPICommand+0xe2>
		tx[UBX_PACKET_HEADER_SIZE + i] = outgoing->payload[i];
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000954:	441a      	add	r2, r3
 8000956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000958:	3306      	adds	r3, #6
 800095a:	7811      	ldrb	r1, [r2, #0]
 800095c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800095e:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < outgoing->length; i++) {
 8000960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000962:	3301      	adds	r3, #1
 8000964:	647b      	str	r3, [r7, #68]	@ 0x44
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	885b      	ldrh	r3, [r3, #2]
 800096a:	461a      	mov	r2, r3
 800096c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800096e:	4293      	cmp	r3, r2
 8000970:	dbed      	blt.n	800094e <sendSPICommand+0xca>
	}
	HAL_Delay(1000);
 8000972:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000976:	f000 ff37 	bl	80017e8 <HAL_Delay>
	debug_print("Set payload.\r\n");
 800097a:	4870      	ldr	r0, [pc, #448]	@ (8000b3c <sendSPICommand+0x2b8>)
 800097c:	f000 f9f6 	bl	8000d6c <debug_print>

	HAL_Delay(1000);
 8000980:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000984:	f000 ff30 	bl	80017e8 <HAL_Delay>
	debug_print("Created tx buffer, calculating checksum:\r\n");
 8000988:	486d      	ldr	r0, [pc, #436]	@ (8000b40 <sendSPICommand+0x2bc>)
 800098a:	f000 f9ef 	bl	8000d6c <debug_print>
	//calculate the checksum
	calculateChecksum(outgoing, tx, tx_size-UBX_PACKET_FOOTER_SIZE); //subtract footer because we do not include checksums in calculation
 800098e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000990:	3b02      	subs	r3, #2
 8000992:	b29b      	uxth	r3, r3
 8000994:	461a      	mov	r2, r3
 8000996:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000998:	6938      	ldr	r0, [r7, #16]
 800099a:	f7ff fe29 	bl	80005f0 <calculateChecksum>
	int footer_start = UBX_PACKET_HEADER_SIZE + outgoing->length;
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	885b      	ldrh	r3, [r3, #2]
 80009a2:	3306      	adds	r3, #6
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28

	tx[footer_start] = outgoing->checksumA;
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	7b19      	ldrb	r1, [r3, #12]
 80009aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ae:	4413      	add	r3, r2
 80009b0:	460a      	mov	r2, r1
 80009b2:	701a      	strb	r2, [r3, #0]
	tx[footer_start + 1] = outgoing->checksumB;
 80009b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009b6:	3301      	adds	r3, #1
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	7b51      	ldrb	r1, [r2, #13]
 80009bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009be:	54d1      	strb	r1, [r2, r3]


	HAL_Delay(1000);
 80009c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009c4:	f000 ff10 	bl	80017e8 <HAL_Delay>
	debug_print("Calculated checksum, filling end of tx and beginning of rx...\r\n");
 80009c8:	485e      	ldr	r0, [pc, #376]	@ (8000b44 <sendSPICommand+0x2c0>)
 80009ca:	f000 f9cf 	bl	8000d6c <debug_print>
	HAL_Delay(500);
 80009ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009d2:	f000 ff09 	bl	80017e8 <HAL_Delay>

	uint8_t rx_buf[tx_size*2];
 80009d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80009d8:	0059      	lsls	r1, r3, #1
 80009da:	1e4b      	subs	r3, r1, #1
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80009de:	460a      	mov	r2, r1
 80009e0:	2300      	movs	r3, #0
 80009e2:	4690      	mov	r8, r2
 80009e4:	4699      	mov	r9, r3
 80009e6:	f04f 0200 	mov.w	r2, #0
 80009ea:	f04f 0300 	mov.w	r3, #0
 80009ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009fa:	460a      	mov	r2, r1
 80009fc:	2300      	movs	r3, #0
 80009fe:	4614      	mov	r4, r2
 8000a00:	461d      	mov	r5, r3
 8000a02:	f04f 0200 	mov.w	r2, #0
 8000a06:	f04f 0300 	mov.w	r3, #0
 8000a0a:	00eb      	lsls	r3, r5, #3
 8000a0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a10:	00e2      	lsls	r2, r4, #3
 8000a12:	460b      	mov	r3, r1
 8000a14:	3307      	adds	r3, #7
 8000a16:	08db      	lsrs	r3, r3, #3
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a1e:	ab02      	add	r3, sp, #8
 8000a20:	3300      	adds	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]

	for(int i = 0; i < tx_size; i++) {
 8000a24:	2300      	movs	r3, #0
 8000a26:	643b      	str	r3, [r7, #64]	@ 0x40
 8000a28:	e008      	b.n	8000a3c <sendSPICommand+0x1b8>
		tx[tx_size+i] = 0xFF;
 8000a2a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8000a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a2e:	4413      	add	r3, r2
 8000a30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a32:	21ff      	movs	r1, #255	@ 0xff
 8000a34:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < tx_size; i++) {
 8000a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a38:	3301      	adds	r3, #1
 8000a3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8000a3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000a3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dbf2      	blt.n	8000a2a <sendSPICommand+0x1a6>
		//rx_buf[i] = 0xFF;
	}

	HAL_Delay(500);
 8000a44:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a48:	f000 fece 	bl	80017e8 <HAL_Delay>
	debug_print("Done filling. Begin transaction...\r\n");
 8000a4c:	483e      	ldr	r0, [pc, #248]	@ (8000b48 <sendSPICommand+0x2c4>)
 8000a4e:	f000 f98d 	bl	8000d6c <debug_print>

	cs_low(config); //begin the transmission
 8000a52:	6978      	ldr	r0, [r7, #20]
 8000a54:	f7ff fdac 	bl	80005b0 <cs_low>
	HAL_StatusTypeDef res = HAL_SPI_TransmitReceive(config->spi_port, tx, rx_buf, tx_size*2, max_wait);
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	4613      	mov	r3, r2
 8000a68:	6a3a      	ldr	r2, [r7, #32]
 8000a6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000a6c:	f004 fa41 	bl	8004ef2 <HAL_SPI_TransmitReceive>
 8000a70:	4603      	mov	r3, r0
 8000a72:	77fb      	strb	r3, [r7, #31]
	cs_high(config); //end the transaction
 8000a74:	6978      	ldr	r0, [r7, #20]
 8000a76:	f7ff fdab 	bl	80005d0 <cs_high>
	HAL_Delay(1000);
 8000a7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a7e:	f000 feb3 	bl	80017e8 <HAL_Delay>
	debug_print("Spi transaction over (%02x). Parsing results...\r\n", res);
 8000a82:	7ffb      	ldrb	r3, [r7, #31]
 8000a84:	4619      	mov	r1, r3
 8000a86:	4831      	ldr	r0, [pc, #196]	@ (8000b4c <sendSPICommand+0x2c8>)
 8000a88:	f000 f970 	bl	8000d6c <debug_print>
	HAL_Delay(1000);
 8000a8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a90:	f000 feaa 	bl	80017e8 <HAL_Delay>
	debug_print("Debug printing rx and tx buffers:\r\n");
 8000a94:	482e      	ldr	r0, [pc, #184]	@ (8000b50 <sendSPICommand+0x2cc>)
 8000a96:	f000 f969 	bl	8000d6c <debug_print>
	HAL_Delay(500);
 8000a9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a9e:	f000 fea3 	bl	80017e8 <HAL_Delay>
	debug_print("TX: ");
 8000aa2:	482c      	ldr	r0, [pc, #176]	@ (8000b54 <sendSPICommand+0x2d0>)
 8000aa4:	f000 f962 	bl	8000d6c <debug_print>
	for(int i = 0; i < tx_size*2; i++) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000aac:	e00d      	b.n	8000aca <sendSPICommand+0x246>
		HAL_Delay(100);
 8000aae:	2064      	movs	r0, #100	@ 0x64
 8000ab0:	f000 fe9a 	bl	80017e8 <HAL_Delay>
		debug_print(" |%02x| ", tx[i]);
 8000ab4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ab8:	4413      	add	r3, r2
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	4826      	ldr	r0, [pc, #152]	@ (8000b58 <sendSPICommand+0x2d4>)
 8000ac0:	f000 f954 	bl	8000d6c <debug_print>
	for(int i = 0; i < tx_size*2; i++) {
 8000ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000aca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	dbec      	blt.n	8000aae <sendSPICommand+0x22a>
	}
	HAL_Delay(500);
 8000ad4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ad8:	f000 fe86 	bl	80017e8 <HAL_Delay>
	debug_print("\r\nRX: ");
 8000adc:	481f      	ldr	r0, [pc, #124]	@ (8000b5c <sendSPICommand+0x2d8>)
 8000ade:	f000 f945 	bl	8000d6c <debug_print>
	for(int i = 0; i < tx_size*2; i++) {
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000ae6:	e00d      	b.n	8000b04 <sendSPICommand+0x280>
		HAL_Delay(100);
 8000ae8:	2064      	movs	r0, #100	@ 0x64
 8000aea:	f000 fe7d 	bl	80017e8 <HAL_Delay>
		debug_print(" |%02x| ", rx_buf[i]);
 8000aee:	6a3a      	ldr	r2, [r7, #32]
 8000af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000af2:	4413      	add	r3, r2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4619      	mov	r1, r3
 8000af8:	4817      	ldr	r0, [pc, #92]	@ (8000b58 <sendSPICommand+0x2d4>)
 8000afa:	f000 f937 	bl	8000d6c <debug_print>
	for(int i = 0; i < tx_size*2; i++) {
 8000afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b00:	3301      	adds	r3, #1
 8000b02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000b04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	dbec      	blt.n	8000ae8 <sendSPICommand+0x264>
	//print_HAL_Status(result);

	//sfe_ublox_status_e ret = UBLOX_STATUS_SUCCESS;
	//bool ret = false;
	//we may need to look for ACK depnding on type of command
	if (outgoing->class == UBX_CLASS_CFG) {
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b06      	cmp	r3, #6
 8000b14:	d107      	bne.n	8000b26 <sendSPICommand+0x2a2>
		//call waitforack here which should return some sort of status
		waitForAck(outgoing, rx_buf, tx_size*2, max_wait);
 8000b16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	6a39      	ldr	r1, [r7, #32]
 8000b20:	6938      	ldr	r0, [r7, #16]
 8000b22:	f7ff fe69 	bl	80007f8 <waitForAck>
	} else {
		//waitForNoAck(outgoing, max_wait);
	}

	return UBLOX_STATUS_DATA_RECEIVED;
 8000b26:	230b      	movs	r3, #11
 8000b28:	46b5      	mov	sp, r6
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	374c      	adds	r7, #76	@ 0x4c
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b34:	0800ad0c 	.word	0x0800ad0c
 8000b38:	0800ad28 	.word	0x0800ad28
 8000b3c:	0800ad58 	.word	0x0800ad58
 8000b40:	0800ad68 	.word	0x0800ad68
 8000b44:	0800ad94 	.word	0x0800ad94
 8000b48:	0800add4 	.word	0x0800add4
 8000b4c:	0800adfc 	.word	0x0800adfc
 8000b50:	0800ae30 	.word	0x0800ae30
 8000b54:	0800ae54 	.word	0x0800ae54
 8000b58:	0800ae5c 	.word	0x0800ae5c
 8000b5c:	0800ae68 	.word	0x0800ae68

08000b60 <getSPIPortSettings>:

bool getSPIPortSettings(NeoGPSConfig_t *config, uint32_t max_wait)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	UBX_Packet_t packet;
	packet.class = UBX_CLASS_CFG;
 8000b6a:	2306      	movs	r3, #6
 8000b6c:	743b      	strb	r3, [r7, #16]
	packet.id = UBX_CFG_PRT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	747b      	strb	r3, [r7, #17]
	packet.length = 1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	827b      	strh	r3, [r7, #18]

	uint8_t payload = PORT_ID_SPI;
 8000b76:	2304      	movs	r3, #4
 8000b78:	73fb      	strb	r3, [r7, #15]

	packet.payload = &payload;
 8000b7a:	f107 030f 	add.w	r3, r7, #15
 8000b7e:	61bb      	str	r3, [r7, #24]

	debug_print("Set up port settings poll packet, sending command:\r\n");
 8000b80:	480b      	ldr	r0, [pc, #44]	@ (8000bb0 <getSPIPortSettings+0x50>)
 8000b82:	f000 f8f3 	bl	8000d6c <debug_print>
	HAL_Delay(1000);
 8000b86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b8a:	f000 fe2d 	bl	80017e8 <HAL_Delay>
	return ((sendSPICommand(config, &packet, max_wait)) == UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff fe74 	bl	8000884 <sendSPICommand>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b0b      	cmp	r3, #11
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2301      	moveq	r3, #1
 8000ba4:	2300      	movne	r3, #0
 8000ba6:	b2db      	uxtb	r3, r3
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3720      	adds	r7, #32
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	0800ae70 	.word	0x0800ae70

08000bb4 <isConnected>:
/*
 * To check if the device is connected,
 * we check the SPI port settings of some
 * port to see if we get a valid result.
 */
bool isConnected(NeoGPSConfig_t *config, uint32_t max_wait) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	debug_print("Checking connection...\r\n");
 8000bbe:	4806      	ldr	r0, [pc, #24]	@ (8000bd8 <isConnected+0x24>)
 8000bc0:	f000 f8d4 	bl	8000d6c <debug_print>
	return getSPIPortSettings(config, max_wait);
 8000bc4:	6839      	ldr	r1, [r7, #0]
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ffca 	bl	8000b60 <getSPIPortSettings>
 8000bcc:	4603      	mov	r3, r0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	0800aea8 	.word	0x0800aea8

08000bdc <test_poll>:
	//if (getPortSettings(PORT_ID_SPI, max_wait) == false)
	//    return (false); // Something went wrong. Bail.
	return false;
}

void test_poll(NeoGPSConfig_t *config, uint32_t max_wait) {
 8000bdc:	b5b0      	push	{r4, r5, r7, lr}
 8000bde:	b0a6      	sub	sp, #152	@ 0x98
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
	HAL_Delay(500);
 8000be6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bea:	f000 fdfd 	bl	80017e8 <HAL_Delay>
	debug_print("Starting test polling...");
 8000bee:	4846      	ldr	r0, [pc, #280]	@ (8000d08 <test_poll+0x12c>)
 8000bf0:	f000 f8bc 	bl	8000d6c <debug_print>
	HAL_Delay(500);
 8000bf4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bf8:	f000 fdf6 	bl	80017e8 <HAL_Delay>

	uint8_t tx[SPI_RX_BUFFER_SIZE] = {[0 ... SPI_RX_BUFFER_SIZE-1] = 0xFF};
 8000bfc:	4b43      	ldr	r3, [pc, #268]	@ (8000d0c <test_poll+0x130>)
 8000bfe:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8000c02:	461d      	mov	r5, r3
 8000c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	//tx[footer_start] = outgoing.checksumA;
	//tx[footer_start + 1] = outgoing.checksumB;

	uint8_t rx[SPI_RX_BUFFER_SIZE] = {[0 ... SPI_RX_BUFFER_SIZE-1] = 0xFF};
 8000c18:	4b3c      	ldr	r3, [pc, #240]	@ (8000d0c <test_poll+0x130>)
 8000c1a:	f107 0408 	add.w	r4, r7, #8
 8000c1e:	461d      	mov	r5, r3
 8000c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	while(1) {
		debug_print("POLLING...");
 8000c34:	4836      	ldr	r0, [pc, #216]	@ (8000d10 <test_poll+0x134>)
 8000c36:	f000 f899 	bl	8000d6c <debug_print>
		cs_low(config);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff fcb8 	bl	80005b0 <cs_low>
		HAL_SPI_TransmitReceive(config->spi_port, tx, rx, SPI_RX_BUFFER_SIZE, max_wait);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	f107 0208 	add.w	r2, r7, #8
 8000c48:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2340      	movs	r3, #64	@ 0x40
 8000c52:	f004 f94e 	bl	8004ef2 <HAL_SPI_TransmitReceive>
		cs_high(config);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fcba 	bl	80005d0 <cs_high>
		HAL_Delay(10);
 8000c5c:	200a      	movs	r0, #10
 8000c5e:	f000 fdc3 	bl	80017e8 <HAL_Delay>
		debug_print("Transaction done.\r\n");
 8000c62:	482c      	ldr	r0, [pc, #176]	@ (8000d14 <test_poll+0x138>)
 8000c64:	f000 f882 	bl	8000d6c <debug_print>
		HAL_Delay(10);
 8000c68:	200a      	movs	r0, #10
 8000c6a:	f000 fdbd 	bl	80017e8 <HAL_Delay>
		debug_print("Debug printing rx and tx buffers:\r\n");
 8000c6e:	482a      	ldr	r0, [pc, #168]	@ (8000d18 <test_poll+0x13c>)
 8000c70:	f000 f87c 	bl	8000d6c <debug_print>
		HAL_Delay(10);
 8000c74:	200a      	movs	r0, #10
 8000c76:	f000 fdb7 	bl	80017e8 <HAL_Delay>
		debug_print("TX: ");
 8000c7a:	4828      	ldr	r0, [pc, #160]	@ (8000d1c <test_poll+0x140>)
 8000c7c:	f000 f876 	bl	8000d6c <debug_print>
		for(int i = 0; i < SPI_RX_BUFFER_SIZE; i++) {
 8000c80:	2300      	movs	r3, #0
 8000c82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000c86:	e011      	b.n	8000cac <test_poll+0xd0>
			HAL_Delay(10);
 8000c88:	200a      	movs	r0, #10
 8000c8a:	f000 fdad 	bl	80017e8 <HAL_Delay>
			debug_print(" |%02x| ", tx[i]);
 8000c8e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8000c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c96:	4413      	add	r3, r2
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4820      	ldr	r0, [pc, #128]	@ (8000d20 <test_poll+0x144>)
 8000c9e:	f000 f865 	bl	8000d6c <debug_print>
		for(int i = 0; i < SPI_RX_BUFFER_SIZE; i++) {
 8000ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cb0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cb2:	dde9      	ble.n	8000c88 <test_poll+0xac>
		}
		HAL_Delay(10);
 8000cb4:	200a      	movs	r0, #10
 8000cb6:	f000 fd97 	bl	80017e8 <HAL_Delay>
		debug_print("\r\nRX: ");
 8000cba:	481a      	ldr	r0, [pc, #104]	@ (8000d24 <test_poll+0x148>)
 8000cbc:	f000 f856 	bl	8000d6c <debug_print>
		for(int i = 0; i < SPI_RX_BUFFER_SIZE; i++) {
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000cc6:	e011      	b.n	8000cec <test_poll+0x110>
			HAL_Delay(10);
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f000 fd8d 	bl	80017e8 <HAL_Delay>
			debug_print(" |%02x| ", rx[i]);
 8000cce:	f107 0208 	add.w	r2, r7, #8
 8000cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4810      	ldr	r0, [pc, #64]	@ (8000d20 <test_poll+0x144>)
 8000cde:	f000 f845 	bl	8000d6c <debug_print>
		for(int i = 0; i < SPI_RX_BUFFER_SIZE; i++) {
 8000ce2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000cf0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cf2:	dde9      	ble.n	8000cc8 <test_poll+0xec>
		}
		HAL_Delay(10);
 8000cf4:	200a      	movs	r0, #10
 8000cf6:	f000 fd77 	bl	80017e8 <HAL_Delay>
		debug_print("\r\nDone. Waiting 1 0 ms...\r\n");
 8000cfa:	480b      	ldr	r0, [pc, #44]	@ (8000d28 <test_poll+0x14c>)
 8000cfc:	f000 f836 	bl	8000d6c <debug_print>
		HAL_Delay(10);
 8000d00:	200a      	movs	r0, #10
 8000d02:	f000 fd71 	bl	80017e8 <HAL_Delay>
		debug_print("POLLING...");
 8000d06:	e795      	b.n	8000c34 <test_poll+0x58>
 8000d08:	0800aec4 	.word	0x0800aec4
 8000d0c:	0800af1c 	.word	0x0800af1c
 8000d10:	0800aee0 	.word	0x0800aee0
 8000d14:	0800aeec 	.word	0x0800aeec
 8000d18:	0800ae30 	.word	0x0800ae30
 8000d1c:	0800ae54 	.word	0x0800ae54
 8000d20:	0800ae5c 	.word	0x0800ae5c
 8000d24:	0800ae68 	.word	0x0800ae68
 8000d28:	0800af00 	.word	0x0800af00

08000d2c <neom9n_begin>:
	}
}

bool neom9n_begin(NeoGPSConfig_t *config, uint32_t max_wait) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
	debug_print("Beginning...\r\n");
 8000d36:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <neom9n_begin+0x3c>)
 8000d38:	f000 f818 	bl	8000d6c <debug_print>
	HAL_Delay(2000);
 8000d3c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d40:	f000 fd52 	bl	80017e8 <HAL_Delay>
	cs_high(config);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fc43 	bl	80005d0 <cs_high>

	bool connected = isConnected(config, max_wait);
 8000d4a:	6839      	ldr	r1, [r7, #0]
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff31 	bl	8000bb4 <isConnected>
 8000d52:	4603      	mov	r3, r0
 8000d54:	73fb      	strb	r3, [r7, #15]
	test_poll(config, max_wait);
 8000d56:	6839      	ldr	r1, [r7, #0]
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff3f 	bl	8000bdc <test_poll>
	//we should ideally attempt to connect a few times
	return connected;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	0800af5c 	.word	0x0800af5c

08000d6c <debug_print>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void debug_print(const char *format, ...) {
 8000d6c:	b40f      	push	{r0, r1, r2, r3}
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b0c2      	sub	sp, #264	@ 0x108
 8000d72:	af00      	add	r7, sp, #0
	char buf[PRINT_BUFFER_SIZE];
	va_list args;
	va_start(args, format);
 8000d74:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000d80:	601a      	str	r2, [r3, #0]
	int n = vsprintf(buf, format, args);
 8000d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000d86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000d8a:	1d38      	adds	r0, r7, #4
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8000d92:	f009 fa99 	bl	800a2c8 <vsiprintf>
 8000d96:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	CDC_Transmit_FS(buf, n);
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8000da0:	4618      	mov	r0, r3
 8000da2:	f008 fe2f 	bl	8009a04 <CDC_Transmit_FS>
	va_end(args);
}
 8000da6:	bf00      	nop
 8000da8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000dac:	46bd      	mov	sp, r7
 8000dae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000db2:	b004      	add	sp, #16
 8000db4:	4770      	bx	lr
	...

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbe:	f000 fca2 	bl	8001706 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc2:	f000 f827 	bl	8000e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc6:	f000 f9c3 	bl	8001150 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000dca:	f000 f8eb 	bl	8000fa4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000dce:	f000 f927 	bl	8001020 <MX_USART1_UART_Init>
  MX_FDCAN2_Init();
 8000dd2:	f000 f861 	bl	8000e98 <MX_FDCAN2_Init>
  MX_I2C3_Init();
 8000dd6:	f000 f8a5 	bl	8000f24 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8000dda:	f000 f96d 	bl	80010b8 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8000dde:	f008 fd53 	bl	8009888 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  NeoGPSConfig_t neo_config = {
 8000de2:	4a09      	ldr	r2, [pc, #36]	@ (8000e08 <main+0x50>)
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000de8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  		&hspi1,
		CS_NeoGPS_GPIO_Port,
		CS_NeoGPS_Pin
  };
  neom9n_begin(&neo_config, 10000000);
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	4907      	ldr	r1, [pc, #28]	@ (8000e0c <main+0x54>)
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff9b 	bl	8000d2c <neom9n_begin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  debug_print("bruh mooment\n\r");
 8000df6:	4806      	ldr	r0, [pc, #24]	@ (8000e10 <main+0x58>)
 8000df8:	f7ff ffb8 	bl	8000d6c <debug_print>
	  HAL_Delay(1000);
 8000dfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e00:	f000 fcf2 	bl	80017e8 <HAL_Delay>
	  debug_print("bruh mooment\n\r");
 8000e04:	bf00      	nop
 8000e06:	e7f6      	b.n	8000df6 <main+0x3e>
 8000e08:	0800af7c 	.word	0x0800af7c
 8000e0c:	00989680 	.word	0x00989680
 8000e10:	0800af6c 	.word	0x0800af6c

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b094      	sub	sp, #80	@ 0x50
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 0318 	add.w	r3, r7, #24
 8000e1e:	2238      	movs	r2, #56	@ 0x38
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f009 fa5a 	bl	800a2dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e36:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e3a:	f002 ff91 	bl	8003d60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000e3e:	2322      	movs	r3, #34	@ 0x22
 8000e40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e48:	2340      	movs	r3, #64	@ 0x40
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f003 f835 	bl	8003ec8 <HAL_RCC_OscConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000e64:	f000 f9cc 	bl	8001200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e68:	230f      	movs	r3, #15
 8000e6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 fb33 	bl	80044ec <HAL_RCC_ClockConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000e8c:	f000 f9b8 	bl	8001200 <Error_Handler>
  }
}
 8000e90:	bf00      	nop
 8000e92:	3750      	adds	r7, #80	@ 0x50
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000e9e:	4a20      	ldr	r2, [pc, #128]	@ (8000f20 <MX_FDCAN2_Init+0x88>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000eae:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000eb4:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000eba:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000ec0:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000ec8:	2210      	movs	r2, #16
 8000eca:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000ecc:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 8000ed2:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8000ed8:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000ede:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000eea:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000efc:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000f08:	4804      	ldr	r0, [pc, #16]	@ (8000f1c <MX_FDCAN2_Init+0x84>)
 8000f0a:	f000 fd9f 	bl	8001a4c <HAL_FDCAN_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000f14:	f000 f974 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200001f0 	.word	0x200001f0
 8000f20:	40006800 	.word	0x40006800

08000f24 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <MX_I2C3_Init+0x74>)
 8000f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f9c <MX_I2C3_Init+0x78>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f98 <MX_I2C3_Init+0x74>)
 8000f30:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa0 <MX_I2C3_Init+0x7c>)
 8000f32:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f34:	4b18      	ldr	r3, [pc, #96]	@ (8000f98 <MX_I2C3_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	@ (8000f98 <MX_I2C3_Init+0x74>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f40:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <MX_I2C3_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f46:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <MX_I2C3_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <MX_I2C3_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <MX_I2C3_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <MX_I2C3_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f5e:	480e      	ldr	r0, [pc, #56]	@ (8000f98 <MX_I2C3_Init+0x74>)
 8000f60:	f001 f8ca 	bl	80020f8 <HAL_I2C_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f6a:	f000 f949 	bl	8001200 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <MX_I2C3_Init+0x74>)
 8000f72:	f001 f95c 	bl	800222e <HAL_I2CEx_ConfigAnalogFilter>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f7c:	f000 f940 	bl	8001200 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f80:	2100      	movs	r1, #0
 8000f82:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <MX_I2C3_Init+0x74>)
 8000f84:	f001 f99e 	bl	80022c4 <HAL_I2CEx_ConfigDigitalFilter>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f8e:	f000 f937 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000254 	.word	0x20000254
 8000f9c:	40007800 	.word	0x40007800
 8000fa0:	00503d58 	.word	0x00503d58

08000fa4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001018 <MX_SPI1_Init+0x74>)
 8000faa:	4a1c      	ldr	r2, [pc, #112]	@ (800101c <MX_SPI1_Init+0x78>)
 8000fac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fae:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <MX_SPI1_Init+0x74>)
 8000fb0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	@ (8001018 <MX_SPI1_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	@ (8001018 <MX_SPI1_Init+0x74>)
 8000fbe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000fc2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <MX_SPI1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fca:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <MX_SPI1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <MX_SPI1_Init+0x74>)
 8000fd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <MX_SPI1_Init+0x74>)
 8000fda:	2238      	movs	r2, #56	@ 0x38
 8000fdc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <MX_SPI1_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <MX_SPI1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <MX_SPI1_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <MX_SPI1_Init+0x74>)
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <MX_SPI1_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <MX_SPI1_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	@ (8001018 <MX_SPI1_Init+0x74>)
 8001004:	f003 feca 	bl	8004d9c <HAL_SPI_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800100e:	f000 f8f7 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200002a8 	.word	0x200002a8
 800101c:	40013000 	.word	0x40013000

08001020 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001024:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <MX_USART1_UART_Init+0x90>)
 8001026:	4a23      	ldr	r2, [pc, #140]	@ (80010b4 <MX_USART1_UART_Init+0x94>)
 8001028:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800102a:	4b21      	ldr	r3, [pc, #132]	@ (80010b0 <MX_USART1_UART_Init+0x90>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b1f      	ldr	r3, [pc, #124]	@ (80010b0 <MX_USART1_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b1d      	ldr	r3, [pc, #116]	@ (80010b0 <MX_USART1_UART_Init+0x90>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800103e:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <MX_USART1_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b1a      	ldr	r3, [pc, #104]	@ (80010b0 <MX_USART1_UART_Init+0x90>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <MX_USART1_UART_Init+0x90>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <MX_USART1_UART_Init+0x90>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001056:	4b16      	ldr	r3, [pc, #88]	@ (80010b0 <MX_USART1_UART_Init+0x90>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <MX_USART1_UART_Init+0x90>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001062:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <MX_USART1_UART_Init+0x90>)
 8001064:	2200      	movs	r2, #0
 8001066:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001068:	4811      	ldr	r0, [pc, #68]	@ (80010b0 <MX_USART1_UART_Init+0x90>)
 800106a:	f004 fac5 	bl	80055f8 <HAL_UART_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001074:	f000 f8c4 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001078:	2100      	movs	r1, #0
 800107a:	480d      	ldr	r0, [pc, #52]	@ (80010b0 <MX_USART1_UART_Init+0x90>)
 800107c:	f005 f860 	bl	8006140 <HAL_UARTEx_SetTxFifoThreshold>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001086:	f000 f8bb 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800108a:	2100      	movs	r1, #0
 800108c:	4808      	ldr	r0, [pc, #32]	@ (80010b0 <MX_USART1_UART_Init+0x90>)
 800108e:	f005 f895 	bl	80061bc <HAL_UARTEx_SetRxFifoThreshold>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001098:	f000 f8b2 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800109c:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <MX_USART1_UART_Init+0x90>)
 800109e:	f005 f816 	bl	80060ce <HAL_UARTEx_DisableFifoMode>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010a8:	f000 f8aa 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000030c 	.word	0x2000030c
 80010b4:	40013800 	.word	0x40013800

080010b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010bc:	4b22      	ldr	r3, [pc, #136]	@ (8001148 <MX_USART2_UART_Init+0x90>)
 80010be:	4a23      	ldr	r2, [pc, #140]	@ (800114c <MX_USART2_UART_Init+0x94>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010c2:	4b21      	ldr	r3, [pc, #132]	@ (8001148 <MX_USART2_UART_Init+0x90>)
 80010c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001148 <MX_USART2_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001148 <MX_USART2_UART_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001148 <MX_USART2_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <MX_USART2_UART_Init+0x90>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b19      	ldr	r3, [pc, #100]	@ (8001148 <MX_USART2_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <MX_USART2_UART_Init+0x90>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ee:	4b16      	ldr	r3, [pc, #88]	@ (8001148 <MX_USART2_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <MX_USART2_UART_Init+0x90>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010fa:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <MX_USART2_UART_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001100:	4811      	ldr	r0, [pc, #68]	@ (8001148 <MX_USART2_UART_Init+0x90>)
 8001102:	f004 fa79 	bl	80055f8 <HAL_UART_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800110c:	f000 f878 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001110:	2100      	movs	r1, #0
 8001112:	480d      	ldr	r0, [pc, #52]	@ (8001148 <MX_USART2_UART_Init+0x90>)
 8001114:	f005 f814 	bl	8006140 <HAL_UARTEx_SetTxFifoThreshold>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800111e:	f000 f86f 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001122:	2100      	movs	r1, #0
 8001124:	4808      	ldr	r0, [pc, #32]	@ (8001148 <MX_USART2_UART_Init+0x90>)
 8001126:	f005 f849 	bl	80061bc <HAL_UARTEx_SetRxFifoThreshold>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001130:	f000 f866 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	@ (8001148 <MX_USART2_UART_Init+0x90>)
 8001136:	f004 ffca 	bl	80060ce <HAL_UARTEx_DisableFifoMode>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001140:	f000 f85e 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200003a0 	.word	0x200003a0
 800114c:	40004400 	.word	0x40004400

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	4b24      	ldr	r3, [pc, #144]	@ (80011f8 <MX_GPIO_Init+0xa8>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	4a23      	ldr	r2, [pc, #140]	@ (80011f8 <MX_GPIO_Init+0xa8>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001172:	4b21      	ldr	r3, [pc, #132]	@ (80011f8 <MX_GPIO_Init+0xa8>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800117e:	4b1e      	ldr	r3, [pc, #120]	@ (80011f8 <MX_GPIO_Init+0xa8>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	4a1d      	ldr	r2, [pc, #116]	@ (80011f8 <MX_GPIO_Init+0xa8>)
 8001184:	f043 0320 	orr.w	r3, r3, #32
 8001188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118a:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <MX_GPIO_Init+0xa8>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	f003 0320 	and.w	r3, r3, #32
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <MX_GPIO_Init+0xa8>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	4a17      	ldr	r2, [pc, #92]	@ (80011f8 <MX_GPIO_Init+0xa8>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <MX_GPIO_Init+0xa8>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <MX_GPIO_Init+0xa8>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	4a11      	ldr	r2, [pc, #68]	@ (80011f8 <MX_GPIO_Init+0xa8>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <MX_GPIO_Init+0xa8>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_NeoGPS_Pin|LED_D2_Pin|Patrick_Pin|LED_POWER_Pin
 80011c6:	2200      	movs	r2, #0
 80011c8:	f64c 0142 	movw	r1, #51266	@ 0xc842
 80011cc:	480b      	ldr	r0, [pc, #44]	@ (80011fc <MX_GPIO_Init+0xac>)
 80011ce:	f000 ff7b 	bl	80020c8 <HAL_GPIO_WritePin>
                          |Squidward_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_NeoGPS_Pin LED_D2_Pin Patrick_Pin LED_POWER_Pin
                           Squidward_Pin */
  GPIO_InitStruct.Pin = CS_NeoGPS_Pin|LED_D2_Pin|Patrick_Pin|LED_POWER_Pin
 80011d2:	f64c 0342 	movw	r3, #51266	@ 0xc842
 80011d6:	617b      	str	r3, [r7, #20]
                          |Squidward_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	4804      	ldr	r0, [pc, #16]	@ (80011fc <MX_GPIO_Init+0xac>)
 80011ec:	f000 fdea 	bl	8001dc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	@ 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48000400 	.word	0x48000400

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <Error_Handler+0x8>

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <HAL_MspInit+0x44>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001216:	4a0e      	ldr	r2, [pc, #56]	@ (8001250 <HAL_MspInit+0x44>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6613      	str	r3, [r2, #96]	@ 0x60
 800121e:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <HAL_MspInit+0x44>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <HAL_MspInit+0x44>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122e:	4a08      	ldr	r2, [pc, #32]	@ (8001250 <HAL_MspInit+0x44>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001234:	6593      	str	r3, [r2, #88]	@ 0x58
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_MspInit+0x44>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001242:	f002 fe31 	bl	8003ea8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000

08001254 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b09e      	sub	sp, #120	@ 0x78
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2250      	movs	r2, #80	@ 0x50
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f009 f831 	bl	800a2dc <memset>
  if(hfdcan->Instance==FDCAN2)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a20      	ldr	r2, [pc, #128]	@ (8001300 <HAL_FDCAN_MspInit+0xac>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d138      	bne.n	80012f6 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001288:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800128a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800128e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4618      	mov	r0, r3
 8001296:	f003 fb45 	bl	8004924 <HAL_RCCEx_PeriphCLKConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80012a0:	f7ff ffae 	bl	8001200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80012a4:	4b17      	ldr	r3, [pc, #92]	@ (8001304 <HAL_FDCAN_MspInit+0xb0>)
 80012a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a8:	4a16      	ldr	r2, [pc, #88]	@ (8001304 <HAL_FDCAN_MspInit+0xb0>)
 80012aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <HAL_FDCAN_MspInit+0xb0>)
 80012b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <HAL_FDCAN_MspInit+0xb0>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c0:	4a10      	ldr	r2, [pc, #64]	@ (8001304 <HAL_FDCAN_MspInit+0xb0>)
 80012c2:	f043 0302 	orr.w	r3, r3, #2
 80012c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <HAL_FDCAN_MspInit+0xb0>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80012d4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80012d8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80012e6:	2309      	movs	r3, #9
 80012e8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	@ (8001308 <HAL_FDCAN_MspInit+0xb4>)
 80012f2:	f000 fd67 	bl	8001dc4 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 80012f6:	bf00      	nop
 80012f8:	3778      	adds	r7, #120	@ 0x78
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40006800 	.word	0x40006800
 8001304:	40021000 	.word	0x40021000
 8001308:	48000400 	.word	0x48000400

0800130c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b09e      	sub	sp, #120	@ 0x78
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2250      	movs	r2, #80	@ 0x50
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f008 ffd5 	bl	800a2dc <memset>
  if(hi2c->Instance==I2C3)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a2e      	ldr	r2, [pc, #184]	@ (80013f0 <HAL_I2C_MspInit+0xe4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d154      	bne.n	80013e6 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800133c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001340:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001342:	2300      	movs	r3, #0
 8001344:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4618      	mov	r0, r3
 800134c:	f003 faea 	bl	8004924 <HAL_RCCEx_PeriphCLKConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001356:	f7ff ff53 	bl	8001200 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <HAL_I2C_MspInit+0xe8>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	4a25      	ldr	r2, [pc, #148]	@ (80013f4 <HAL_I2C_MspInit+0xe8>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001366:	4b23      	ldr	r3, [pc, #140]	@ (80013f4 <HAL_I2C_MspInit+0xe8>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	4b20      	ldr	r3, [pc, #128]	@ (80013f4 <HAL_I2C_MspInit+0xe8>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	4a1f      	ldr	r2, [pc, #124]	@ (80013f4 <HAL_I2C_MspInit+0xe8>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137e:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <HAL_I2C_MspInit+0xe8>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800138a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800138e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001390:	2312      	movs	r3, #18
 8001392:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 800139c:	2302      	movs	r3, #2
 800139e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013aa:	f000 fd0b 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013ae:	2320      	movs	r3, #32
 80013b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b2:	2312      	movs	r3, #18
 80013b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80013be:	2308      	movs	r3, #8
 80013c0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013c6:	4619      	mov	r1, r3
 80013c8:	480b      	ldr	r0, [pc, #44]	@ (80013f8 <HAL_I2C_MspInit+0xec>)
 80013ca:	f000 fcfb 	bl	8001dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <HAL_I2C_MspInit+0xe8>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d2:	4a08      	ldr	r2, [pc, #32]	@ (80013f4 <HAL_I2C_MspInit+0xe8>)
 80013d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80013d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_I2C_MspInit+0xe8>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80013e6:	bf00      	nop
 80013e8:	3778      	adds	r7, #120	@ 0x78
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40007800 	.word	0x40007800
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000400 	.word	0x48000400

080013fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	@ 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a17      	ldr	r2, [pc, #92]	@ (8001478 <HAL_SPI_MspInit+0x7c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d128      	bne.n	8001470 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800141e:	4b17      	ldr	r3, [pc, #92]	@ (800147c <HAL_SPI_MspInit+0x80>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001422:	4a16      	ldr	r2, [pc, #88]	@ (800147c <HAL_SPI_MspInit+0x80>)
 8001424:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001428:	6613      	str	r3, [r2, #96]	@ 0x60
 800142a:	4b14      	ldr	r3, [pc, #80]	@ (800147c <HAL_SPI_MspInit+0x80>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <HAL_SPI_MspInit+0x80>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	4a10      	ldr	r2, [pc, #64]	@ (800147c <HAL_SPI_MspInit+0x80>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <HAL_SPI_MspInit+0x80>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800144e:	23e0      	movs	r3, #224	@ 0xe0
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800145e:	2305      	movs	r3, #5
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800146c:	f000 fcaa 	bl	8001dc4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	@ 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40013000 	.word	0x40013000
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b0a0      	sub	sp, #128	@ 0x80
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	2250      	movs	r2, #80	@ 0x50
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f008 ff1b 	bl	800a2dc <memset>
  if(huart->Instance==USART1)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a3e      	ldr	r2, [pc, #248]	@ (80015a4 <HAL_UART_MspInit+0x124>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d138      	bne.n	8001522 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014b0:	2301      	movs	r3, #1
 80014b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 fa31 	bl	8004924 <HAL_RCCEx_PeriphCLKConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014c8:	f7ff fe9a 	bl	8001200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014cc:	4b36      	ldr	r3, [pc, #216]	@ (80015a8 <HAL_UART_MspInit+0x128>)
 80014ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d0:	4a35      	ldr	r2, [pc, #212]	@ (80015a8 <HAL_UART_MspInit+0x128>)
 80014d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80014d8:	4b33      	ldr	r3, [pc, #204]	@ (80015a8 <HAL_UART_MspInit+0x128>)
 80014da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014e0:	61bb      	str	r3, [r7, #24]
 80014e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	4b30      	ldr	r3, [pc, #192]	@ (80015a8 <HAL_UART_MspInit+0x128>)
 80014e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e8:	4a2f      	ldr	r2, [pc, #188]	@ (80015a8 <HAL_UART_MspInit+0x128>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f0:	4b2d      	ldr	r3, [pc, #180]	@ (80015a8 <HAL_UART_MspInit+0x128>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014fc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001500:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800150e:	2307      	movs	r3, #7
 8001510:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151c:	f000 fc52 	bl	8001dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001520:	e03b      	b.n	800159a <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a21      	ldr	r2, [pc, #132]	@ (80015ac <HAL_UART_MspInit+0x12c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d136      	bne.n	800159a <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800152c:	2302      	movs	r3, #2
 800152e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4618      	mov	r0, r3
 800153a:	f003 f9f3 	bl	8004924 <HAL_RCCEx_PeriphCLKConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001544:	f7ff fe5c 	bl	8001200 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001548:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <HAL_UART_MspInit+0x128>)
 800154a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154c:	4a16      	ldr	r2, [pc, #88]	@ (80015a8 <HAL_UART_MspInit+0x128>)
 800154e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001552:	6593      	str	r3, [r2, #88]	@ 0x58
 8001554:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <HAL_UART_MspInit+0x128>)
 8001556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <HAL_UART_MspInit+0x128>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001564:	4a10      	ldr	r2, [pc, #64]	@ (80015a8 <HAL_UART_MspInit+0x128>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156c:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <HAL_UART_MspInit+0x128>)
 800156e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001578:	230c      	movs	r3, #12
 800157a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001588:	2307      	movs	r3, #7
 800158a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001590:	4619      	mov	r1, r3
 8001592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001596:	f000 fc15 	bl	8001dc4 <HAL_GPIO_Init>
}
 800159a:	bf00      	nop
 800159c:	3780      	adds	r7, #128	@ 0x80
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40013800 	.word	0x40013800
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40004400 	.word	0x40004400

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <NMI_Handler+0x4>

080015b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <MemManage_Handler+0x4>

080015c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001606:	f000 f8d1 	bl	80017ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <USB_LP_IRQHandler+0x10>)
 8001616:	f000 ff91 	bl	800253c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20001910 	.word	0x20001910

08001624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800162c:	4a14      	ldr	r2, [pc, #80]	@ (8001680 <_sbrk+0x5c>)
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <_sbrk+0x60>)
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001638:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001640:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <_sbrk+0x64>)
 8001642:	4a12      	ldr	r2, [pc, #72]	@ (800168c <_sbrk+0x68>)
 8001644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	429a      	cmp	r2, r3
 8001652:	d207      	bcs.n	8001664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001654:	f008 fe4a 	bl	800a2ec <__errno>
 8001658:	4603      	mov	r3, r0
 800165a:	220c      	movs	r2, #12
 800165c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	e009      	b.n	8001678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001664:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166a:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	4a05      	ldr	r2, [pc, #20]	@ (8001688 <_sbrk+0x64>)
 8001674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	2001c000 	.word	0x2001c000
 8001684:	00000400 	.word	0x00000400
 8001688:	20000434 	.word	0x20000434
 800168c:	20001f58 	.word	0x20001f58

08001690 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <SystemInit+0x20>)
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800169a:	4a05      	ldr	r2, [pc, #20]	@ (80016b0 <SystemInit+0x20>)
 800169c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016b4:	480d      	ldr	r0, [pc, #52]	@ (80016ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80016b8:	f7ff ffea 	bl	8001690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016bc:	480c      	ldr	r0, [pc, #48]	@ (80016f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80016be:	490d      	ldr	r1, [pc, #52]	@ (80016f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c0:	4a0d      	ldr	r2, [pc, #52]	@ (80016f8 <LoopForever+0xe>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001700 <LoopForever+0x16>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016e2:	f008 fe09 	bl	800a2f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016e6:	f7ff fb67 	bl	8000db8 <main>

080016ea <LoopForever>:

LoopForever:
    b LoopForever
 80016ea:	e7fe      	b.n	80016ea <LoopForever>
  ldr   r0, =_estack
 80016ec:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80016f8:	0800b054 	.word	0x0800b054
  ldr r2, =_sbss
 80016fc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001700:	20001f54 	.word	0x20001f54

08001704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC1_2_IRQHandler>

08001706 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001710:	2003      	movs	r0, #3
 8001712:	f000 f95b 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001716:	200f      	movs	r0, #15
 8001718:	f000 f80e 	bl	8001738 <HAL_InitTick>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	e001      	b.n	800172c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001728:	f7ff fd70 	bl	800120c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800172c:	79fb      	ldrb	r3, [r7, #7]

}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001744:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <HAL_InitTick+0x68>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d022      	beq.n	8001792 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800174c:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <HAL_InitTick+0x6c>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <HAL_InitTick+0x68>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001758:	fbb1 f3f3 	udiv	r3, r1, r3
 800175c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001760:	4618      	mov	r0, r3
 8001762:	f000 f966 	bl	8001a32 <HAL_SYSTICK_Config>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10f      	bne.n	800178c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b0f      	cmp	r3, #15
 8001770:	d809      	bhi.n	8001786 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001772:	2200      	movs	r2, #0
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	f04f 30ff 	mov.w	r0, #4294967295
 800177a:	f000 f932 	bl	80019e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800177e:	4a0a      	ldr	r2, [pc, #40]	@ (80017a8 <HAL_InitTick+0x70>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	e007      	b.n	8001796 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
 800178a:	e004      	b.n	8001796 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e001      	b.n	8001796 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000008 	.word	0x20000008
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b0:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <HAL_IncTick+0x1c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <HAL_IncTick+0x20>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4413      	add	r3, r2
 80017ba:	4a03      	ldr	r2, [pc, #12]	@ (80017c8 <HAL_IncTick+0x1c>)
 80017bc:	6013      	str	r3, [r2, #0]
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	20000438 	.word	0x20000438
 80017cc:	20000008 	.word	0x20000008

080017d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <HAL_GetTick+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000438 	.word	0x20000438

080017e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff ffee 	bl	80017d0 <HAL_GetTick>
 80017f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001800:	d004      	beq.n	800180c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <HAL_Delay+0x40>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4413      	add	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800180c:	bf00      	nop
 800180e:	f7ff ffdf 	bl	80017d0 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	429a      	cmp	r2, r3
 800181c:	d8f7      	bhi.n	800180e <HAL_Delay+0x26>
  {
  }
}
 800181e:	bf00      	nop
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000008 	.word	0x20000008

0800182c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001854:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	@ (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001878:	4b04      	ldr	r3, [pc, #16]	@ (800188c <__NVIC_GetPriorityGrouping+0x18>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	f003 0307 	and.w	r3, r3, #7
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db0b      	blt.n	80018ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f003 021f 	and.w	r2, r3, #31
 80018a8:	4907      	ldr	r1, [pc, #28]	@ (80018c8 <__NVIC_EnableIRQ+0x38>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	2001      	movs	r0, #1
 80018b2:	fa00 f202 	lsl.w	r2, r0, r2
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000e100 	.word	0xe000e100

080018cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0a      	blt.n	80018f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	@ (8001918 <__NVIC_SetPriority+0x4c>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f4:	e00a      	b.n	800190c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4908      	ldr	r1, [pc, #32]	@ (800191c <__NVIC_SetPriority+0x50>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3b04      	subs	r3, #4
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	440b      	add	r3, r1
 800190a:	761a      	strb	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	@ 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f1c3 0307 	rsb	r3, r3, #7
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf28      	it	cs
 800193e:	2304      	movcs	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	2b06      	cmp	r3, #6
 8001948:	d902      	bls.n	8001950 <NVIC_EncodePriority+0x30>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3b03      	subs	r3, #3
 800194e:	e000      	b.n	8001952 <NVIC_EncodePriority+0x32>
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001968:	f04f 31ff 	mov.w	r1, #4294967295
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43d9      	mvns	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	4313      	orrs	r3, r2
         );
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	@ 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001998:	d301      	bcc.n	800199e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199a:	2301      	movs	r3, #1
 800199c:	e00f      	b.n	80019be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199e:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <SysTick_Config+0x40>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a6:	210f      	movs	r1, #15
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f7ff ff8e 	bl	80018cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <SysTick_Config+0x40>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <SysTick_Config+0x40>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff29 	bl	800182c <__NVIC_SetPriorityGrouping>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019f0:	f7ff ff40 	bl	8001874 <__NVIC_GetPriorityGrouping>
 80019f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	6978      	ldr	r0, [r7, #20]
 80019fc:	f7ff ff90 	bl	8001920 <NVIC_EncodePriority>
 8001a00:	4602      	mov	r2, r0
 8001a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff5f 	bl	80018cc <__NVIC_SetPriority>
}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff33 	bl	8001890 <__NVIC_EnableIRQ>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ffa4 	bl	8001988 <SysTick_Config>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e147      	b.n	8001cee <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fbee 	bl	8001254 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	699a      	ldr	r2, [r3, #24]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0210 	bic.w	r2, r2, #16
 8001a86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a88:	f7ff fea2 	bl	80017d0 <HAL_GetTick>
 8001a8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001a8e:	e012      	b.n	8001ab6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a90:	f7ff fe9e 	bl	80017d0 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b0a      	cmp	r3, #10
 8001a9c:	d90b      	bls.n	8001ab6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2203      	movs	r2, #3
 8001aae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e11b      	b.n	8001cee <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d0e5      	beq.n	8001a90 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699a      	ldr	r2, [r3, #24]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0201 	orr.w	r2, r2, #1
 8001ad2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ad4:	f7ff fe7c 	bl	80017d0 <HAL_GetTick>
 8001ad8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ada:	e012      	b.n	8001b02 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001adc:	f7ff fe78 	bl	80017d0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b0a      	cmp	r3, #10
 8001ae8:	d90b      	bls.n	8001b02 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aee:	f043 0201 	orr.w	r2, r3, #1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2203      	movs	r2, #3
 8001afa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0f5      	b.n	8001cee <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0e5      	beq.n	8001adc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699a      	ldr	r2, [r3, #24]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0202 	orr.w	r2, r2, #2
 8001b1e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a74      	ldr	r2, [pc, #464]	@ (8001cf8 <HAL_FDCAN_Init+0x2ac>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d103      	bne.n	8001b32 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001b2a:	4a74      	ldr	r2, [pc, #464]	@ (8001cfc <HAL_FDCAN_Init+0x2b0>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7c1b      	ldrb	r3, [r3, #16]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d108      	bne.n	8001b4c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699a      	ldr	r2, [r3, #24]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b48:	619a      	str	r2, [r3, #24]
 8001b4a:	e007      	b.n	8001b5c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b5a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7c5b      	ldrb	r3, [r3, #17]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d108      	bne.n	8001b76 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699a      	ldr	r2, [r3, #24]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b72:	619a      	str	r2, [r3, #24]
 8001b74:	e007      	b.n	8001b86 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699a      	ldr	r2, [r3, #24]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001b84:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7c9b      	ldrb	r3, [r3, #18]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d108      	bne.n	8001ba0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699a      	ldr	r2, [r3, #24]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b9c:	619a      	str	r2, [r3, #24]
 8001b9e:	e007      	b.n	8001bb0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001bae:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699a      	ldr	r2, [r3, #24]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001bd4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0210 	bic.w	r2, r2, #16
 8001be4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d108      	bne.n	8001c00 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	699a      	ldr	r2, [r3, #24]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0204 	orr.w	r2, r2, #4
 8001bfc:	619a      	str	r2, [r3, #24]
 8001bfe:	e02c      	b.n	8001c5a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d028      	beq.n	8001c5a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d01c      	beq.n	8001c4a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c1e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0210 	orr.w	r2, r2, #16
 8001c2e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d110      	bne.n	8001c5a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699a      	ldr	r2, [r3, #24]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0220 	orr.w	r2, r2, #32
 8001c46:	619a      	str	r2, [r3, #24]
 8001c48:	e007      	b.n	8001c5a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699a      	ldr	r2, [r3, #24]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0220 	orr.w	r2, r2, #32
 8001c58:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c6a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001c72:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001c82:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c84:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001c8e:	d115      	bne.n	8001cbc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c94:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c9e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001ca8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001cb8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001cba:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f814 	bl	8001d00 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40006400 	.word	0x40006400
 8001cfc:	40006500 	.word	0x40006500

08001d00 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001d08:	4b2c      	ldr	r3, [pc, #176]	@ (8001dbc <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001d0a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a2b      	ldr	r2, [pc, #172]	@ (8001dc0 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d103      	bne.n	8001d1e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001d1c:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d2c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d34:	041a      	lsls	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d52:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5a:	061a      	lsls	r2, r3, #24
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	e005      	b.n	8001da0 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d3f3      	bcc.n	8001d94 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	4000a400 	.word	0x4000a400
 8001dc0:	40006800 	.word	0x40006800

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dd2:	e15a      	b.n	800208a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 814c 	beq.w	8002084 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d005      	beq.n	8001e04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d130      	bne.n	8001e66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	f003 0201 	and.w	r2, r3, #1
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d017      	beq.n	8001ea2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d123      	bne.n	8001ef6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	08da      	lsrs	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3208      	adds	r2, #8
 8001eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	08da      	lsrs	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3208      	adds	r2, #8
 8001ef0:	6939      	ldr	r1, [r7, #16]
 8001ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	2203      	movs	r2, #3
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0203 	and.w	r2, r3, #3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80a6 	beq.w	8002084 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f38:	4b5b      	ldr	r3, [pc, #364]	@ (80020a8 <HAL_GPIO_Init+0x2e4>)
 8001f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3c:	4a5a      	ldr	r2, [pc, #360]	@ (80020a8 <HAL_GPIO_Init+0x2e4>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f44:	4b58      	ldr	r3, [pc, #352]	@ (80020a8 <HAL_GPIO_Init+0x2e4>)
 8001f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f50:	4a56      	ldr	r2, [pc, #344]	@ (80020ac <HAL_GPIO_Init+0x2e8>)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	3302      	adds	r3, #2
 8001f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	220f      	movs	r2, #15
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f7a:	d01f      	beq.n	8001fbc <HAL_GPIO_Init+0x1f8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a4c      	ldr	r2, [pc, #304]	@ (80020b0 <HAL_GPIO_Init+0x2ec>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d019      	beq.n	8001fb8 <HAL_GPIO_Init+0x1f4>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a4b      	ldr	r2, [pc, #300]	@ (80020b4 <HAL_GPIO_Init+0x2f0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d013      	beq.n	8001fb4 <HAL_GPIO_Init+0x1f0>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a4a      	ldr	r2, [pc, #296]	@ (80020b8 <HAL_GPIO_Init+0x2f4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00d      	beq.n	8001fb0 <HAL_GPIO_Init+0x1ec>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a49      	ldr	r2, [pc, #292]	@ (80020bc <HAL_GPIO_Init+0x2f8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d007      	beq.n	8001fac <HAL_GPIO_Init+0x1e8>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a48      	ldr	r2, [pc, #288]	@ (80020c0 <HAL_GPIO_Init+0x2fc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_GPIO_Init+0x1e4>
 8001fa4:	2305      	movs	r3, #5
 8001fa6:	e00a      	b.n	8001fbe <HAL_GPIO_Init+0x1fa>
 8001fa8:	2306      	movs	r3, #6
 8001faa:	e008      	b.n	8001fbe <HAL_GPIO_Init+0x1fa>
 8001fac:	2304      	movs	r3, #4
 8001fae:	e006      	b.n	8001fbe <HAL_GPIO_Init+0x1fa>
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e004      	b.n	8001fbe <HAL_GPIO_Init+0x1fa>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e002      	b.n	8001fbe <HAL_GPIO_Init+0x1fa>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <HAL_GPIO_Init+0x1fa>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	f002 0203 	and.w	r2, r2, #3
 8001fc4:	0092      	lsls	r2, r2, #2
 8001fc6:	4093      	lsls	r3, r2
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fce:	4937      	ldr	r1, [pc, #220]	@ (80020ac <HAL_GPIO_Init+0x2e8>)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fdc:	4b39      	ldr	r3, [pc, #228]	@ (80020c4 <HAL_GPIO_Init+0x300>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002000:	4a30      	ldr	r2, [pc, #192]	@ (80020c4 <HAL_GPIO_Init+0x300>)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002006:	4b2f      	ldr	r3, [pc, #188]	@ (80020c4 <HAL_GPIO_Init+0x300>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800202a:	4a26      	ldr	r2, [pc, #152]	@ (80020c4 <HAL_GPIO_Init+0x300>)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002030:	4b24      	ldr	r3, [pc, #144]	@ (80020c4 <HAL_GPIO_Init+0x300>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	43db      	mvns	r3, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002054:	4a1b      	ldr	r2, [pc, #108]	@ (80020c4 <HAL_GPIO_Init+0x300>)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800205a:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <HAL_GPIO_Init+0x300>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800207e:	4a11      	ldr	r2, [pc, #68]	@ (80020c4 <HAL_GPIO_Init+0x300>)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	3301      	adds	r3, #1
 8002088:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	f47f ae9d 	bne.w	8001dd4 <HAL_GPIO_Init+0x10>
  }
}
 800209a:	bf00      	nop
 800209c:	bf00      	nop
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010000 	.word	0x40010000
 80020b0:	48000400 	.word	0x48000400
 80020b4:	48000800 	.word	0x48000800
 80020b8:	48000c00 	.word	0x48000c00
 80020bc:	48001000 	.word	0x48001000
 80020c0:	48001400 	.word	0x48001400
 80020c4:	40010400 	.word	0x40010400

080020c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	807b      	strh	r3, [r7, #2]
 80020d4:	4613      	mov	r3, r2
 80020d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d8:	787b      	ldrb	r3, [r7, #1]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020de:	887a      	ldrh	r2, [r7, #2]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020e4:	e002      	b.n	80020ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e08d      	b.n	8002226 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff f8f4 	bl	800130c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2224      	movs	r2, #36	@ 0x24
 8002128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0201 	bic.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002148:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002158:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d107      	bne.n	8002172 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	e006      	b.n	8002180 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800217e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d108      	bne.n	800219a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	e007      	b.n	80021aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69d9      	ldr	r1, [r3, #28]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1a      	ldr	r2, [r3, #32]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b20      	cmp	r3, #32
 8002242:	d138      	bne.n	80022b6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800224e:	2302      	movs	r3, #2
 8002250:	e032      	b.n	80022b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2224      	movs	r2, #36	@ 0x24
 800225e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002280:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6819      	ldr	r1, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2220      	movs	r2, #32
 80022a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022b6:	2302      	movs	r3, #2
  }
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d139      	bne.n	800234e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e033      	b.n	8002350 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2224      	movs	r2, #36	@ 0x24
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002316:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0201 	orr.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e000      	b.n	8002350 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800234e:	2302      	movs	r3, #2
  }
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0c0      	b.n	80024f0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f007 fc86 	bl	8009c94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2203      	movs	r2, #3
 800238c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f003 ffb4 	bl	8006302 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	e03e      	b.n	800241e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	440b      	add	r3, r1
 80023ae:	3311      	adds	r3, #17
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	440b      	add	r3, r1
 80023c2:	3310      	adds	r3, #16
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023c8:	7bfa      	ldrb	r2, [r7, #15]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	3313      	adds	r3, #19
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	3320      	adds	r3, #32
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	3324      	adds	r3, #36	@ 0x24
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	440b      	add	r3, r1
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	3301      	adds	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	791b      	ldrb	r3, [r3, #4]
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	429a      	cmp	r2, r3
 8002426:	d3bb      	bcc.n	80023a0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]
 800242c:	e044      	b.n	80024b8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	440b      	add	r3, r1
 8002468:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002470:	7bfa      	ldrb	r2, [r7, #15]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002486:	7bfa      	ldrb	r2, [r7, #15]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	440b      	add	r3, r1
 8002494:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	440b      	add	r3, r1
 80024aa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	3301      	adds	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	791b      	ldrb	r3, [r3, #4]
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d3b5      	bcc.n	800242e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3304      	adds	r3, #4
 80024ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80024ce:	f003 ff33 	bl	8006338 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7a9b      	ldrb	r3, [r3, #10]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d102      	bne.n	80024ee <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f001 fc0e 	bl	8003d0a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_PCD_Start+0x16>
 800250a:	2302      	movs	r3, #2
 800250c:	e012      	b.n	8002534 <HAL_PCD_Start+0x3c>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f003 feda 	bl	80062d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f005 fcb7 	bl	8007e98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f005 fcbc 	bl	8007ec6 <USB_ReadInterrupts>
 800254e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fb06 	bl	8002b6c <PCD_EP_ISR_Handler>

    return;
 8002560:	e110      	b.n	8002784 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002574:	b29a      	uxth	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800257e:	b292      	uxth	r2, r2
 8002580:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f007 fc16 	bl	8009db6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800258a:	2100      	movs	r1, #0
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f8fc 	bl	800278a <HAL_PCD_SetAddress>

    return;
 8002592:	e0f7      	b.n	8002784 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00c      	beq.n	80025b8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80025b0:	b292      	uxth	r2, r2
 80025b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80025b6:	e0e5      	b.n	8002784 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00c      	beq.n	80025dc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025d4:	b292      	uxth	r2, r2
 80025d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80025da:	e0d3      	b.n	8002784 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d034      	beq.n	8002650 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0204 	bic.w	r2, r2, #4
 80025f8:	b292      	uxth	r2, r2
 80025fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002606:	b29a      	uxth	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0208 	bic.w	r2, r2, #8
 8002610:	b292      	uxth	r2, r2
 8002612:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800261c:	2b01      	cmp	r3, #1
 800261e:	d107      	bne.n	8002630 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002628:	2100      	movs	r1, #0
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f007 fdb6 	bl	800a19c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f007 fbf9 	bl	8009e28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800263e:	b29a      	uxth	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002648:	b292      	uxth	r2, r2
 800264a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800264e:	e099      	b.n	8002784 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002656:	2b00      	cmp	r3, #0
 8002658:	d027      	beq.n	80026aa <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002662:	b29a      	uxth	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0208 	orr.w	r2, r2, #8
 800266c:	b292      	uxth	r2, r2
 800266e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800267a:	b29a      	uxth	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002684:	b292      	uxth	r2, r2
 8002686:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002692:	b29a      	uxth	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0204 	orr.w	r2, r2, #4
 800269c:	b292      	uxth	r2, r2
 800269e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f007 fba6 	bl	8009df4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80026a8:	e06c      	b.n	8002784 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d040      	beq.n	8002736 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026bc:	b29a      	uxth	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026c6:	b292      	uxth	r2, r2
 80026c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d12b      	bne.n	800272e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026de:	b29a      	uxth	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0204 	orr.w	r2, r2, #4
 80026e8:	b292      	uxth	r2, r2
 80026ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0208 	orr.w	r2, r2, #8
 8002700:	b292      	uxth	r2, r2
 8002702:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002716:	b29b      	uxth	r3, r3
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002724:	2101      	movs	r1, #1
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f007 fd38 	bl	800a19c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800272c:	e02a      	b.n	8002784 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f007 fb60 	bl	8009df4 <HAL_PCD_SuspendCallback>
    return;
 8002734:	e026      	b.n	8002784 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00f      	beq.n	8002760 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002748:	b29a      	uxth	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002752:	b292      	uxth	r2, r2
 8002754:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f007 fb1e 	bl	8009d9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800275e:	e011      	b.n	8002784 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00c      	beq.n	8002784 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002772:	b29a      	uxth	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800277c:	b292      	uxth	r2, r2
 800277e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002782:	bf00      	nop
  }
}
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_PCD_SetAddress+0x1a>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e012      	b.n	80027ca <HAL_PCD_SetAddress+0x40>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	78fa      	ldrb	r2, [r7, #3]
 80027b0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f005 fb58 	bl	8007e70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	4608      	mov	r0, r1
 80027dc:	4611      	mov	r1, r2
 80027de:	461a      	mov	r2, r3
 80027e0:	4603      	mov	r3, r0
 80027e2:	70fb      	strb	r3, [r7, #3]
 80027e4:	460b      	mov	r3, r1
 80027e6:	803b      	strh	r3, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	da0e      	bge.n	8002816 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	f003 0207 	and.w	r2, r3, #7
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	3310      	adds	r3, #16
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	4413      	add	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2201      	movs	r2, #1
 8002812:	705a      	strb	r2, [r3, #1]
 8002814:	e00e      	b.n	8002834 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	f003 0207 	and.w	r2, r3, #7
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	4413      	add	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	b2da      	uxtb	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002840:	883b      	ldrh	r3, [r7, #0]
 8002842:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	78ba      	ldrb	r2, [r7, #2]
 800284e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002850:	78bb      	ldrb	r3, [r7, #2]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d102      	bne.n	800285c <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_PCD_EP_Open+0x98>
 8002866:	2302      	movs	r3, #2
 8002868:	e00e      	b.n	8002888 <HAL_PCD_EP_Open+0xb6>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68f9      	ldr	r1, [r7, #12]
 8002878:	4618      	mov	r0, r3
 800287a:	f003 fd7b 	bl	8006374 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002886:	7afb      	ldrb	r3, [r7, #11]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800289c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	da0e      	bge.n	80028c2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	f003 0207 	and.w	r2, r3, #7
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	3310      	adds	r3, #16
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	705a      	strb	r2, [r3, #1]
 80028c0:	e00e      	b.n	80028e0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	f003 0207 	and.w	r2, r3, #7
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_PCD_EP_Close+0x6a>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e00e      	b.n	8002918 <HAL_PCD_EP_Close+0x88>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68f9      	ldr	r1, [r7, #12]
 8002908:	4618      	mov	r0, r3
 800290a:	f004 fa1b 	bl	8006d44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	460b      	mov	r3, r1
 800292e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002930:	7afb      	ldrb	r3, [r7, #11]
 8002932:	f003 0207 	and.w	r2, r3, #7
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4413      	add	r3, r2
 8002946:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2200      	movs	r2, #0
 800295e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002960:	7afb      	ldrb	r3, [r7, #11]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	b2da      	uxtb	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6979      	ldr	r1, [r7, #20]
 8002972:	4618      	mov	r0, r3
 8002974:	f004 fbd3 	bl	800711e <USB_EPStartXfer>

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	f003 0207 	and.w	r2, r3, #7
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	440b      	add	r3, r1
 80029a0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80029a4:	681b      	ldr	r3, [r3, #0]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b086      	sub	sp, #24
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	460b      	mov	r3, r1
 80029c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c2:	7afb      	ldrb	r3, [r7, #11]
 80029c4:	f003 0207 	and.w	r2, r3, #7
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	3310      	adds	r3, #16
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4413      	add	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2200      	movs	r2, #0
 80029f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2201      	movs	r2, #1
 80029fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029fe:	7afb      	ldrb	r3, [r7, #11]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6979      	ldr	r1, [r7, #20]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f004 fb84 	bl	800711e <USB_EPStartXfer>

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	7912      	ldrb	r2, [r2, #4]
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e03e      	b.n	8002abc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	da0e      	bge.n	8002a64 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	f003 0207 	and.w	r2, r3, #7
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	3310      	adds	r3, #16
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	705a      	strb	r2, [r3, #1]
 8002a62:	e00c      	b.n	8002a7e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_PCD_EP_SetStall+0x7e>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e00e      	b.n	8002abc <HAL_PCD_EP_SetStall+0x9c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68f9      	ldr	r1, [r7, #12]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f005 f8e5 	bl	8007c7c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	7912      	ldrb	r2, [r2, #4]
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e040      	b.n	8002b64 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ae2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	da0e      	bge.n	8002b08 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	f003 0207 	and.w	r2, r3, #7
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	3310      	adds	r3, #16
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2201      	movs	r2, #1
 8002b04:	705a      	strb	r2, [r3, #1]
 8002b06:	e00e      	b.n	8002b26 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	f003 0207 	and.w	r2, r3, #7
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_PCD_EP_ClrStall+0x82>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e00e      	b.n	8002b64 <HAL_PCD_EP_ClrStall+0xa0>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68f9      	ldr	r1, [r7, #12]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f005 f8e2 	bl	8007d1e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b092      	sub	sp, #72	@ 0x48
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b74:	e333      	b.n	80031de <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b7e:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b80:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8002b8c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f040 8108 	bne.w	8002da6 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b96:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d14c      	bne.n	8002c3a <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bb0:	813b      	strh	r3, [r7, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	893b      	ldrh	r3, [r7, #8]
 8002bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3310      	adds	r3, #16
 8002bc8:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bf0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	441a      	add	r2, r3
 8002bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bfe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c00:	2100      	movs	r1, #0
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f007 f8af 	bl	8009d66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7b1b      	ldrb	r3, [r3, #12]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 82e5 	beq.w	80031de <PCD_EP_ISR_Handler+0x672>
 8002c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f040 82e0 	bne.w	80031de <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7b1b      	ldrb	r3, [r3, #12]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	731a      	strb	r2, [r3, #12]
 8002c38:	e2d1      	b.n	80031de <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c40:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c4a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d032      	beq.n	8002cba <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c7a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c88:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c8c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f005 f96b 	bl	8007f6a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	817b      	strh	r3, [r7, #10]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	897a      	ldrh	r2, [r7, #10]
 8002caa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cae:	b292      	uxth	r2, r2
 8002cb0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f007 f82a 	bl	8009d0c <HAL_PCD_SetupStageCallback>
 8002cb8:	e291      	b.n	80031de <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002cba:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f280 828d 	bge.w	80031de <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	81fb      	strh	r3, [r7, #14]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	89fa      	ldrh	r2, [r7, #14]
 8002cda:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cde:	b292      	uxth	r2, r2
 8002ce0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d08:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d019      	beq.n	8002d46 <PCD_EP_ISR_Handler+0x1da>
 8002d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d015      	beq.n	8002d46 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d20:	6959      	ldr	r1, [r3, #20]
 8002d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d24:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d28:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	f005 f91d 	bl	8007f6a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	441a      	add	r2, r3
 8002d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d3c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d3e:	2100      	movs	r1, #0
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f006 fff5 	bl	8009d30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002d4e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002d50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 8242 	bne.w	80031de <PCD_EP_ISR_Handler+0x672>
 8002d5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002d5c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002d60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d64:	f000 823b 	beq.w	80031de <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d78:	81bb      	strh	r3, [r7, #12]
 8002d7a:	89bb      	ldrh	r3, [r7, #12]
 8002d7c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002d80:	81bb      	strh	r3, [r7, #12]
 8002d82:	89bb      	ldrh	r3, [r7, #12]
 8002d84:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002d88:	81bb      	strh	r3, [r7, #12]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	89bb      	ldrh	r3, [r7, #12]
 8002d90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	8013      	strh	r3, [r2, #0]
 8002da4:	e21b      	b.n	80031de <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002db8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f280 80f1 	bge.w	8002fa4 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002dd8:	4013      	ands	r3, r2
 8002dda:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002dec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002df0:	b292      	uxth	r2, r2
 8002df2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002df4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	4413      	add	r3, r2
 8002e08:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e0c:	7b1b      	ldrb	r3, [r3, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d123      	bne.n	8002e5a <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e36:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8002e3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 808b 	beq.w	8002f5a <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e4a:	6959      	ldr	r1, [r3, #20]
 8002e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e4e:	88da      	ldrh	r2, [r3, #6]
 8002e50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e54:	f005 f889 	bl	8007f6a <USB_ReadPMA>
 8002e58:	e07f      	b.n	8002f5a <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e5c:	78db      	ldrb	r3, [r3, #3]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d109      	bne.n	8002e76 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002e64:	461a      	mov	r2, r3
 8002e66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f9c6 	bl	80031fa <HAL_PCD_EP_DB_Receive>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002e74:	e071      	b.n	8002f5a <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e90:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	441a      	add	r2, r3
 8002ea0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002ea2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ea6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d022      	beq.n	8002f16 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002ef8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d02c      	beq.n	8002f5a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f06:	6959      	ldr	r1, [r3, #20]
 8002f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f0a:	891a      	ldrh	r2, [r3, #8]
 8002f0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f10:	f005 f82b 	bl	8007f6a <USB_ReadPMA>
 8002f14:	e021      	b.n	8002f5a <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f3a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002f3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f4c:	6959      	ldr	r1, [r3, #20]
 8002f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f50:	895a      	ldrh	r2, [r3, #10]
 8002f52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f56:	f005 f808 	bl	8007f6a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f5c:	69da      	ldr	r2, [r3, #28]
 8002f5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f62:	441a      	add	r2, r3
 8002f64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f70:	441a      	add	r2, r3
 8002f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f74:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <PCD_EP_ISR_Handler+0x41e>
 8002f7e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d206      	bcs.n	8002f98 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f006 fecd 	bl	8009d30 <HAL_PCD_DataOutStageCallback>
 8002f96:	e005      	b.n	8002fa4 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f004 f8bd 	bl	800711e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002fa4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8117 	beq.w	80031de <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8002fb0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	3310      	adds	r3, #16
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fde:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	441a      	add	r2, r3
 8002fee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ffe:	78db      	ldrb	r3, [r3, #3]
 8003000:	2b01      	cmp	r3, #1
 8003002:	f040 80a1 	bne.w	8003148 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8003006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800300c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800300e:	7b1b      	ldrb	r3, [r3, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 8092 	beq.w	800313a <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003016:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800301c:	2b00      	cmp	r3, #0
 800301e:	d046      	beq.n	80030ae <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003022:	785b      	ldrb	r3, [r3, #1]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d126      	bne.n	8003076 <PCD_EP_ISR_Handler+0x50a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003036:	b29b      	uxth	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	4413      	add	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	00da      	lsls	r2, r3, #3
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	4413      	add	r3, r2
 800304a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	b29b      	uxth	r3, r3
 8003056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800305a:	b29a      	uxth	r2, r3
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	801a      	strh	r2, [r3, #0]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	b29b      	uxth	r3, r3
 8003066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800306a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800306e:	b29a      	uxth	r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	801a      	strh	r2, [r3, #0]
 8003074:	e061      	b.n	800313a <PCD_EP_ISR_Handler+0x5ce>
 8003076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d15d      	bne.n	800313a <PCD_EP_ISR_Handler+0x5ce>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800308c:	b29b      	uxth	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	4413      	add	r3, r2
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	00da      	lsls	r2, r3, #3
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	4413      	add	r3, r2
 80030a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2200      	movs	r2, #0
 80030aa:	801a      	strh	r2, [r3, #0]
 80030ac:	e045      	b.n	800313a <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030b6:	785b      	ldrb	r3, [r3, #1]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d126      	bne.n	800310a <PCD_EP_ISR_Handler+0x59e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	4413      	add	r3, r2
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	00da      	lsls	r2, r3, #3
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	4413      	add	r3, r2
 80030de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80030e2:	623b      	str	r3, [r7, #32]
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	801a      	strh	r2, [r3, #0]
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003102:	b29a      	uxth	r2, r3
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	801a      	strh	r2, [r3, #0]
 8003108:	e017      	b.n	800313a <PCD_EP_ISR_Handler+0x5ce>
 800310a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800310c:	785b      	ldrb	r3, [r3, #1]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d113      	bne.n	800313a <PCD_EP_ISR_Handler+0x5ce>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800311a:	b29b      	uxth	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003120:	4413      	add	r3, r2
 8003122:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	00da      	lsls	r2, r3, #3
 800312a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800312c:	4413      	add	r3, r2
 800312e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003132:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003136:	2200      	movs	r2, #0
 8003138:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800313a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	4619      	mov	r1, r3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f006 fe10 	bl	8009d66 <HAL_PCD_DataInStageCallback>
 8003146:	e04a      	b.n	80031de <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003148:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800314a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d13f      	bne.n	80031d2 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800315a:	b29b      	uxth	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4413      	add	r3, r2
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	4413      	add	r3, r2
 800316c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003176:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800317a:	699a      	ldr	r2, [r3, #24]
 800317c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800317e:	429a      	cmp	r2, r3
 8003180:	d906      	bls.n	8003190 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003188:	1ad2      	subs	r2, r2, r3
 800318a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800318c:	619a      	str	r2, [r3, #24]
 800318e:	e002      	b.n	8003196 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003192:	2200      	movs	r2, #0
 8003194:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800319e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f006 fdde 	bl	8009d66 <HAL_PCD_DataInStageCallback>
 80031aa:	e018      	b.n	80031de <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80031ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80031b2:	441a      	add	r2, r3
 80031b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031b6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80031b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ba:	69da      	ldr	r2, [r3, #28]
 80031bc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80031be:	441a      	add	r2, r3
 80031c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031c2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031ca:	4618      	mov	r0, r3
 80031cc:	f003 ffa7 	bl	800711e <USB_EPStartXfer>
 80031d0:	e005      	b.n	80031de <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80031d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80031d4:	461a      	mov	r2, r3
 80031d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f917 	bl	800340c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	b21b      	sxth	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f6ff acc3 	blt.w	8002b76 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3748      	adds	r7, #72	@ 0x48
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b088      	sub	sp, #32
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	4613      	mov	r3, r2
 8003206:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d07c      	beq.n	800330c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800321a:	b29b      	uxth	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4413      	add	r3, r2
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	4413      	add	r3, r2
 800322c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003236:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	699a      	ldr	r2, [r3, #24]
 800323c:	8b7b      	ldrh	r3, [r7, #26]
 800323e:	429a      	cmp	r2, r3
 8003240:	d306      	bcc.n	8003250 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	8b7b      	ldrh	r3, [r7, #26]
 8003248:	1ad2      	subs	r2, r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	619a      	str	r2, [r3, #24]
 800324e:	e002      	b.n	8003256 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2200      	movs	r2, #0
 8003254:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d123      	bne.n	80032a6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003278:	833b      	strh	r3, [r7, #24]
 800327a:	8b3b      	ldrh	r3, [r7, #24]
 800327c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003280:	833b      	strh	r3, [r7, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	441a      	add	r2, r3
 8003290:	8b3b      	ldrh	r3, [r7, #24]
 8003292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800329a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800329e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01f      	beq.n	80032f0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ca:	82fb      	strh	r3, [r7, #22]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	441a      	add	r2, r3
 80032da:	8afb      	ldrh	r3, [r7, #22]
 80032dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032f0:	8b7b      	ldrh	r3, [r7, #26]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8085 	beq.w	8003402 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	6959      	ldr	r1, [r3, #20]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	891a      	ldrh	r2, [r3, #8]
 8003304:	8b7b      	ldrh	r3, [r7, #26]
 8003306:	f004 fe30 	bl	8007f6a <USB_ReadPMA>
 800330a:	e07a      	b.n	8003402 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003314:	b29b      	uxth	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	4413      	add	r3, r2
 8003326:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003330:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	8b7b      	ldrh	r3, [r7, #26]
 8003338:	429a      	cmp	r2, r3
 800333a:	d306      	bcc.n	800334a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	699a      	ldr	r2, [r3, #24]
 8003340:	8b7b      	ldrh	r3, [r7, #26]
 8003342:	1ad2      	subs	r2, r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	619a      	str	r2, [r3, #24]
 8003348:	e002      	b.n	8003350 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2200      	movs	r2, #0
 800334e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d123      	bne.n	80033a0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	b29b      	uxth	r3, r3
 800336a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800336e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003372:	83fb      	strh	r3, [r7, #30]
 8003374:	8bfb      	ldrh	r3, [r7, #30]
 8003376:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800337a:	83fb      	strh	r3, [r7, #30]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	441a      	add	r2, r3
 800338a:	8bfb      	ldrh	r3, [r7, #30]
 800338c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003390:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003394:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800339c:	b29b      	uxth	r3, r3
 800339e:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d11f      	bne.n	80033ea <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033c4:	83bb      	strh	r3, [r7, #28]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	441a      	add	r2, r3
 80033d4:	8bbb      	ldrh	r3, [r7, #28]
 80033d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033ea:	8b7b      	ldrh	r3, [r7, #26]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	6959      	ldr	r1, [r3, #20]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	895a      	ldrh	r2, [r3, #10]
 80033fc:	8b7b      	ldrh	r3, [r7, #26]
 80033fe:	f004 fdb4 	bl	8007f6a <USB_ReadPMA>
    }
  }

  return count;
 8003402:	8b7b      	ldrh	r3, [r7, #26]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3720      	adds	r7, #32
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b0a6      	sub	sp, #152	@ 0x98
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	4613      	mov	r3, r2
 8003418:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 81f7 	beq.w	8003814 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800342e:	b29b      	uxth	r3, r3
 8003430:	461a      	mov	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	4413      	add	r3, r2
 8003440:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800344a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003456:	429a      	cmp	r2, r3
 8003458:	d907      	bls.n	800346a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	699a      	ldr	r2, [r3, #24]
 800345e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003462:	1ad2      	subs	r2, r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	619a      	str	r2, [r3, #24]
 8003468:	e002      	b.n	8003470 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2200      	movs	r2, #0
 800346e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f040 80e1 	bne.w	800363c <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	785b      	ldrb	r3, [r3, #1]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d126      	bne.n	80034d0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	633b      	str	r3, [r7, #48]	@ 0x30
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003490:	b29b      	uxth	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003496:	4413      	add	r3, r2
 8003498:	633b      	str	r3, [r7, #48]	@ 0x30
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	00da      	lsls	r2, r3, #3
 80034a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a2:	4413      	add	r3, r2
 80034a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b8:	801a      	strh	r2, [r3, #0]
 80034ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034cc:	801a      	strh	r2, [r3, #0]
 80034ce:	e01a      	b.n	8003506 <HAL_PCD_EP_DB_Transmit+0xfa>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	785b      	ldrb	r3, [r3, #1]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d116      	bne.n	8003506 <HAL_PCD_EP_DB_Transmit+0xfa>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ec:	4413      	add	r3, r2
 80034ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	00da      	lsls	r2, r3, #3
 80034f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f8:	4413      	add	r3, r2
 80034fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003502:	2200      	movs	r2, #0
 8003504:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	785b      	ldrb	r3, [r3, #1]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d126      	bne.n	8003562 <HAL_PCD_EP_DB_Transmit+0x156>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	623b      	str	r3, [r7, #32]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003522:	b29b      	uxth	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	4413      	add	r3, r2
 800352a:	623b      	str	r3, [r7, #32]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	00da      	lsls	r2, r3, #3
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	4413      	add	r3, r2
 8003536:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003546:	b29a      	uxth	r2, r3
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	801a      	strh	r2, [r3, #0]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800355a:	b29a      	uxth	r2, r3
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	801a      	strh	r2, [r3, #0]
 8003560:	e017      	b.n	8003592 <HAL_PCD_EP_DB_Transmit+0x186>
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	785b      	ldrb	r3, [r3, #1]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d113      	bne.n	8003592 <HAL_PCD_EP_DB_Transmit+0x186>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003572:	b29b      	uxth	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003578:	4413      	add	r3, r2
 800357a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	00da      	lsls	r2, r3, #3
 8003582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003584:	4413      	add	r3, r2
 8003586:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800358a:	627b      	str	r3, [r7, #36]	@ 0x24
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	2200      	movs	r2, #0
 8003590:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	78db      	ldrb	r3, [r3, #3]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d123      	bne.n	80035e2 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035b4:	837b      	strh	r3, [r7, #26]
 80035b6:	8b7b      	ldrh	r3, [r7, #26]
 80035b8:	f083 0320 	eor.w	r3, r3, #32
 80035bc:	837b      	strh	r3, [r7, #26]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	441a      	add	r2, r3
 80035cc:	8b7b      	ldrh	r3, [r7, #26]
 80035ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035de:	b29b      	uxth	r3, r3
 80035e0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	4619      	mov	r1, r3
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f006 fbbc 	bl	8009d66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01f      	beq.n	8003638 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	b29b      	uxth	r3, r3
 800360a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800360e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003612:	833b      	strh	r3, [r7, #24]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	441a      	add	r2, r3
 8003622:	8b3b      	ldrh	r3, [r7, #24]
 8003624:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003628:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800362c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003634:	b29b      	uxth	r3, r3
 8003636:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	e31f      	b.n	8003c7c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d021      	beq.n	800368a <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800365c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003660:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	441a      	add	r2, r3
 8003672:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003676:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800367a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800367e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003686:	b29b      	uxth	r3, r3
 8003688:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003690:	2b01      	cmp	r3, #1
 8003692:	f040 82ca 	bne.w	8003c2a <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800369e:	441a      	add	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80036ac:	441a      	add	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	6a1a      	ldr	r2, [r3, #32]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d309      	bcc.n	80036d2 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	6a1a      	ldr	r2, [r3, #32]
 80036c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036ca:	1ad2      	subs	r2, r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	621a      	str	r2, [r3, #32]
 80036d0:	e015      	b.n	80036fe <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d107      	bne.n	80036ea <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80036da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80036de:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80036e8:	e009      	b.n	80036fe <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2200      	movs	r2, #0
 80036fc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	785b      	ldrb	r3, [r3, #1]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d15f      	bne.n	80037c6 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	643b      	str	r3, [r7, #64]	@ 0x40
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003714:	b29b      	uxth	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371a:	4413      	add	r3, r2
 800371c:	643b      	str	r3, [r7, #64]	@ 0x40
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	00da      	lsls	r2, r3, #3
 8003724:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003726:	4413      	add	r3, r2
 8003728:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800372c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800372e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003738:	b29a      	uxth	r2, r3
 800373a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800373c:	801a      	strh	r2, [r3, #0]
 800373e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <HAL_PCD_EP_DB_Transmit+0x34e>
 8003744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800374e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003752:	b29a      	uxth	r2, r3
 8003754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003756:	801a      	strh	r2, [r3, #0]
 8003758:	e051      	b.n	80037fe <HAL_PCD_EP_DB_Transmit+0x3f2>
 800375a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800375c:	2b3e      	cmp	r3, #62	@ 0x3e
 800375e:	d816      	bhi.n	800378e <HAL_PCD_EP_DB_Transmit+0x382>
 8003760:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	653b      	str	r3, [r7, #80]	@ 0x50
 8003766:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003772:	3301      	adds	r3, #1
 8003774:	653b      	str	r3, [r7, #80]	@ 0x50
 8003776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	b29a      	uxth	r2, r3
 800377c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800377e:	b29b      	uxth	r3, r3
 8003780:	029b      	lsls	r3, r3, #10
 8003782:	b29b      	uxth	r3, r3
 8003784:	4313      	orrs	r3, r2
 8003786:	b29a      	uxth	r2, r3
 8003788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800378a:	801a      	strh	r2, [r3, #0]
 800378c:	e037      	b.n	80037fe <HAL_PCD_EP_DB_Transmit+0x3f2>
 800378e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	653b      	str	r3, [r7, #80]	@ 0x50
 8003794:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	2b00      	cmp	r3, #0
 800379c:	d102      	bne.n	80037a4 <HAL_PCD_EP_DB_Transmit+0x398>
 800379e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037a0:	3b01      	subs	r3, #1
 80037a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80037a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	029b      	lsls	r3, r3, #10
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	4313      	orrs	r3, r2
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037be:	b29a      	uxth	r2, r3
 80037c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037c2:	801a      	strh	r2, [r3, #0]
 80037c4:	e01b      	b.n	80037fe <HAL_PCD_EP_DB_Transmit+0x3f2>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	785b      	ldrb	r3, [r3, #1]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d117      	bne.n	80037fe <HAL_PCD_EP_DB_Transmit+0x3f2>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037dc:	b29b      	uxth	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037e2:	4413      	add	r3, r2
 80037e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	00da      	lsls	r2, r3, #3
 80037ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037ee:	4413      	add	r3, r2
 80037f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80037f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037fc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	6959      	ldr	r1, [r3, #20]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	891a      	ldrh	r2, [r3, #8]
 800380a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800380c:	b29b      	uxth	r3, r3
 800380e:	f004 fb6a 	bl	8007ee6 <USB_WritePMA>
 8003812:	e20a      	b.n	8003c2a <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800381c:	b29b      	uxth	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	4413      	add	r3, r2
 800382e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003838:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003844:	429a      	cmp	r2, r3
 8003846:	d307      	bcc.n	8003858 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003850:	1ad2      	subs	r2, r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	619a      	str	r2, [r3, #24]
 8003856:	e002      	b.n	800385e <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2200      	movs	r2, #0
 800385c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f040 80f6 	bne.w	8003a54 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	785b      	ldrb	r3, [r3, #1]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d126      	bne.n	80038be <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	677b      	str	r3, [r7, #116]	@ 0x74
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800387e:	b29b      	uxth	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003884:	4413      	add	r3, r2
 8003886:	677b      	str	r3, [r7, #116]	@ 0x74
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	00da      	lsls	r2, r3, #3
 800388e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003890:	4413      	add	r3, r2
 8003892:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003896:	673b      	str	r3, [r7, #112]	@ 0x70
 8003898:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	b29b      	uxth	r3, r3
 800389e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038a6:	801a      	strh	r2, [r3, #0]
 80038a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038ba:	801a      	strh	r2, [r3, #0]
 80038bc:	e01a      	b.n	80038f4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	785b      	ldrb	r3, [r3, #1]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d116      	bne.n	80038f4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038da:	4413      	add	r3, r2
 80038dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	00da      	lsls	r2, r3, #3
 80038e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038e6:	4413      	add	r3, r2
 80038e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80038ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038f0:	2200      	movs	r2, #0
 80038f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	785b      	ldrb	r3, [r3, #1]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d12f      	bne.n	8003964 <HAL_PCD_EP_DB_Transmit+0x558>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003914:	b29b      	uxth	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800391c:	4413      	add	r3, r2
 800391e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	00da      	lsls	r2, r3, #3
 8003928:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800392c:	4413      	add	r3, r2
 800392e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003932:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003936:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003942:	b29a      	uxth	r2, r3
 8003944:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003948:	801a      	strh	r2, [r3, #0]
 800394a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	b29b      	uxth	r3, r3
 8003952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800395a:	b29a      	uxth	r2, r3
 800395c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003960:	801a      	strh	r2, [r3, #0]
 8003962:	e01c      	b.n	800399e <HAL_PCD_EP_DB_Transmit+0x592>
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	785b      	ldrb	r3, [r3, #1]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d118      	bne.n	800399e <HAL_PCD_EP_DB_Transmit+0x592>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003974:	b29b      	uxth	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800397c:	4413      	add	r3, r2
 800397e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	00da      	lsls	r2, r3, #3
 8003988:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800398c:	4413      	add	r3, r2
 800398e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003992:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003996:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800399a:	2200      	movs	r2, #0
 800399c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	78db      	ldrb	r3, [r3, #3]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d127      	bne.n	80039f6 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039c0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80039c4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80039c8:	f083 0320 	eor.w	r3, r3, #32
 80039cc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80039e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	4619      	mov	r1, r3
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f006 f9b2 	bl	8009d66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d121      	bne.n	8003a50 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a26:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	441a      	add	r2, r3
 8003a38:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8003a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	e113      	b.n	8003c7c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d121      	bne.n	8003aa2 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a78:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	441a      	add	r2, r3
 8003a8a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003a8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	f040 80be 	bne.w	8003c2a <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ab6:	441a      	add	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ac4:	441a      	add	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	6a1a      	ldr	r2, [r3, #32]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d309      	bcc.n	8003aea <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	6a1a      	ldr	r2, [r3, #32]
 8003ae0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ae2:	1ad2      	subs	r2, r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	621a      	str	r2, [r3, #32]
 8003ae8:	e015      	b.n	8003b16 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d107      	bne.n	8003b02 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8003af2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003af6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003b00:	e009      	b.n	8003b16 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	785b      	ldrb	r3, [r3, #1]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d15f      	bne.n	8003be4 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b38:	4413      	add	r3, r2
 8003b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	00da      	lsls	r2, r3, #3
 8003b42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b44:	4413      	add	r3, r2
 8003b46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b5a:	801a      	strh	r2, [r3, #0]
 8003b5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10a      	bne.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x76c>
 8003b62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b74:	801a      	strh	r2, [r3, #0]
 8003b76:	e04e      	b.n	8003c16 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003b78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b7c:	d816      	bhi.n	8003bac <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_PCD_EP_DB_Transmit+0x788>
 8003b8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b90:	3301      	adds	r3, #1
 8003b92:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	029b      	lsls	r3, r3, #10
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	e034      	b.n	8003c16 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003bac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bb4:	f003 031f 	and.w	r3, r3, #31
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d102      	bne.n	8003bc2 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003bbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	029b      	lsls	r3, r3, #10
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003be0:	801a      	strh	r2, [r3, #0]
 8003be2:	e018      	b.n	8003c16 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d114      	bne.n	8003c16 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bfa:	4413      	add	r3, r2
 8003bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	00da      	lsls	r2, r3, #3
 8003c04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c06:	4413      	add	r3, r2
 8003c08:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c14:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	6959      	ldr	r1, [r3, #20]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	895a      	ldrh	r2, [r3, #10]
 8003c22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f004 f95e 	bl	8007ee6 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c44:	82fb      	strh	r3, [r7, #22]
 8003c46:	8afb      	ldrh	r3, [r7, #22]
 8003c48:	f083 0310 	eor.w	r3, r3, #16
 8003c4c:	82fb      	strh	r3, [r7, #22]
 8003c4e:	8afb      	ldrh	r3, [r7, #22]
 8003c50:	f083 0320 	eor.w	r3, r3, #32
 8003c54:	82fb      	strh	r3, [r7, #22]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	441a      	add	r2, r3
 8003c64:	8afb      	ldrh	r3, [r7, #22]
 8003c66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3798      	adds	r7, #152	@ 0x98
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	817b      	strh	r3, [r7, #10]
 8003c92:	4613      	mov	r3, r2
 8003c94:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c96:	897b      	ldrh	r3, [r7, #10]
 8003c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00b      	beq.n	8003cba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ca2:	897b      	ldrh	r3, [r7, #10]
 8003ca4:	f003 0207 	and.w	r2, r3, #7
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	3310      	adds	r3, #16
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	e009      	b.n	8003cce <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cba:	897a      	ldrh	r2, [r7, #10]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003cce:	893b      	ldrh	r3, [r7, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d107      	bne.n	8003ce4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	80da      	strh	r2, [r3, #6]
 8003ce2:	e00b      	b.n	8003cfc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	0c1b      	lsrs	r3, r3, #16
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	f043 0302 	orr.w	r3, r3, #2
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d141      	bne.n	8003df2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d7a:	d131      	bne.n	8003de0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d7c:	4b47      	ldr	r3, [pc, #284]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d82:	4a46      	ldr	r2, [pc, #280]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d8c:	4b43      	ldr	r3, [pc, #268]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d94:	4a41      	ldr	r2, [pc, #260]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d9c:	4b40      	ldr	r3, [pc, #256]	@ (8003ea0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2232      	movs	r2, #50	@ 0x32
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ea4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	0c9b      	lsrs	r3, r3, #18
 8003dae:	3301      	adds	r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003db2:	e002      	b.n	8003dba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dba:	4b38      	ldr	r3, [pc, #224]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dc6:	d102      	bne.n	8003dce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f2      	bne.n	8003db4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dce:	4b33      	ldr	r3, [pc, #204]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dda:	d158      	bne.n	8003e8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e057      	b.n	8003e90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003de0:	4b2e      	ldr	r3, [pc, #184]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003de6:	4a2d      	ldr	r2, [pc, #180]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003df0:	e04d      	b.n	8003e8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003df8:	d141      	bne.n	8003e7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dfa:	4b28      	ldr	r3, [pc, #160]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e06:	d131      	bne.n	8003e6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e08:	4b24      	ldr	r3, [pc, #144]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e0e:	4a23      	ldr	r2, [pc, #140]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e18:	4b20      	ldr	r3, [pc, #128]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e20:	4a1e      	ldr	r2, [pc, #120]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e28:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2232      	movs	r2, #50	@ 0x32
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	4a1c      	ldr	r2, [pc, #112]	@ (8003ea4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e34:	fba2 2303 	umull	r2, r3, r2, r3
 8003e38:	0c9b      	lsrs	r3, r3, #18
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e3e:	e002      	b.n	8003e46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e46:	4b15      	ldr	r3, [pc, #84]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e52:	d102      	bne.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f2      	bne.n	8003e40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e5a:	4b10      	ldr	r3, [pc, #64]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e66:	d112      	bne.n	8003e8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e011      	b.n	8003e90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e72:	4a0a      	ldr	r2, [pc, #40]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e7c:	e007      	b.n	8003e8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e7e:	4b07      	ldr	r3, [pc, #28]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e86:	4a05      	ldr	r2, [pc, #20]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	40007000 	.word	0x40007000
 8003ea0:	20000000 	.word	0x20000000
 8003ea4:	431bde83 	.word	0x431bde83

08003ea8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003eac:	4b05      	ldr	r3, [pc, #20]	@ (8003ec4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4a04      	ldr	r2, [pc, #16]	@ (8003ec4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003eb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003eb6:	6093      	str	r3, [r2, #8]
}
 8003eb8:	bf00      	nop
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40007000 	.word	0x40007000

08003ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e2fe      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d075      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ee6:	4b97      	ldr	r3, [pc, #604]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ef0:	4b94      	ldr	r3, [pc, #592]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b0c      	cmp	r3, #12
 8003efe:	d102      	bne.n	8003f06 <HAL_RCC_OscConfig+0x3e>
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d002      	beq.n	8003f0c <HAL_RCC_OscConfig+0x44>
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d10b      	bne.n	8003f24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0c:	4b8d      	ldr	r3, [pc, #564]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d05b      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x108>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d157      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e2d9      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f2c:	d106      	bne.n	8003f3c <HAL_RCC_OscConfig+0x74>
 8003f2e:	4b85      	ldr	r3, [pc, #532]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a84      	ldr	r2, [pc, #528]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e01d      	b.n	8003f78 <HAL_RCC_OscConfig+0xb0>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCC_OscConfig+0x98>
 8003f46:	4b7f      	ldr	r3, [pc, #508]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a7e      	ldr	r2, [pc, #504]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4b7c      	ldr	r3, [pc, #496]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a7b      	ldr	r2, [pc, #492]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e00b      	b.n	8003f78 <HAL_RCC_OscConfig+0xb0>
 8003f60:	4b78      	ldr	r3, [pc, #480]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a77      	ldr	r2, [pc, #476]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	4b75      	ldr	r3, [pc, #468]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a74      	ldr	r2, [pc, #464]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d013      	beq.n	8003fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fd fc26 	bl	80017d0 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f88:	f7fd fc22 	bl	80017d0 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	@ 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e29e      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0xc0>
 8003fa6:	e014      	b.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fd fc12 	bl	80017d0 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fd fc0e 	bl	80017d0 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	@ 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e28a      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fc2:	4b60      	ldr	r3, [pc, #384]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0xe8>
 8003fce:	e000      	b.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d075      	beq.n	80040ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fde:	4b59      	ldr	r3, [pc, #356]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fe8:	4b56      	ldr	r3, [pc, #344]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b0c      	cmp	r3, #12
 8003ff6:	d102      	bne.n	8003ffe <HAL_RCC_OscConfig+0x136>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d002      	beq.n	8004004 <HAL_RCC_OscConfig+0x13c>
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2b04      	cmp	r3, #4
 8004002:	d11f      	bne.n	8004044 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004004:	4b4f      	ldr	r3, [pc, #316]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_OscConfig+0x154>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e25d      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401c:	4b49      	ldr	r3, [pc, #292]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	061b      	lsls	r3, r3, #24
 800402a:	4946      	ldr	r1, [pc, #280]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 800402c:	4313      	orrs	r3, r2
 800402e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004030:	4b45      	ldr	r3, [pc, #276]	@ (8004148 <HAL_RCC_OscConfig+0x280>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f7fd fb7f 	bl	8001738 <HAL_InitTick>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d043      	beq.n	80040c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e249      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d023      	beq.n	8004094 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800404c:	4b3d      	ldr	r3, [pc, #244]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a3c      	ldr	r2, [pc, #240]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8004052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7fd fbba 	bl	80017d0 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004060:	f7fd fbb6 	bl	80017d0 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e232      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004072:	4b34      	ldr	r3, [pc, #208]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407e:	4b31      	ldr	r3, [pc, #196]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	061b      	lsls	r3, r3, #24
 800408c:	492d      	ldr	r1, [pc, #180]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 800408e:	4313      	orrs	r3, r2
 8004090:	604b      	str	r3, [r1, #4]
 8004092:	e01a      	b.n	80040ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004094:	4b2b      	ldr	r3, [pc, #172]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a2a      	ldr	r2, [pc, #168]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 800409a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800409e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7fd fb96 	bl	80017d0 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040a8:	f7fd fb92 	bl	80017d0 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e20e      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040ba:	4b22      	ldr	r3, [pc, #136]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0x1e0>
 80040c6:	e000      	b.n	80040ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d041      	beq.n	800415a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01c      	beq.n	8004118 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040de:	4b19      	ldr	r3, [pc, #100]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 80040e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040e4:	4a17      	ldr	r2, [pc, #92]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ee:	f7fd fb6f 	bl	80017d0 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f6:	f7fd fb6b 	bl	80017d0 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e1e7      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004108:	4b0e      	ldr	r3, [pc, #56]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 800410a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0ef      	beq.n	80040f6 <HAL_RCC_OscConfig+0x22e>
 8004116:	e020      	b.n	800415a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004118:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 800411a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800411e:	4a09      	ldr	r2, [pc, #36]	@ (8004144 <HAL_RCC_OscConfig+0x27c>)
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004128:	f7fd fb52 	bl	80017d0 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800412e:	e00d      	b.n	800414c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004130:	f7fd fb4e 	bl	80017d0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d906      	bls.n	800414c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e1ca      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000
 8004148:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800414c:	4b8c      	ldr	r3, [pc, #560]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 800414e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1ea      	bne.n	8004130 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 80a6 	beq.w	80042b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004168:	2300      	movs	r3, #0
 800416a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800416c:	4b84      	ldr	r3, [pc, #528]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 800416e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_RCC_OscConfig+0x2b4>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <HAL_RCC_OscConfig+0x2b6>
 800417c:	2300      	movs	r3, #0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004182:	4b7f      	ldr	r3, [pc, #508]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 8004184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004186:	4a7e      	ldr	r2, [pc, #504]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 8004188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800418c:	6593      	str	r3, [r2, #88]	@ 0x58
 800418e:	4b7c      	ldr	r3, [pc, #496]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 8004190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800419a:	2301      	movs	r3, #1
 800419c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800419e:	4b79      	ldr	r3, [pc, #484]	@ (8004384 <HAL_RCC_OscConfig+0x4bc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d118      	bne.n	80041dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041aa:	4b76      	ldr	r3, [pc, #472]	@ (8004384 <HAL_RCC_OscConfig+0x4bc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a75      	ldr	r2, [pc, #468]	@ (8004384 <HAL_RCC_OscConfig+0x4bc>)
 80041b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b6:	f7fd fb0b 	bl	80017d0 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041be:	f7fd fb07 	bl	80017d0 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e183      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d0:	4b6c      	ldr	r3, [pc, #432]	@ (8004384 <HAL_RCC_OscConfig+0x4bc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d108      	bne.n	80041f6 <HAL_RCC_OscConfig+0x32e>
 80041e4:	4b66      	ldr	r3, [pc, #408]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ea:	4a65      	ldr	r2, [pc, #404]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041f4:	e024      	b.n	8004240 <HAL_RCC_OscConfig+0x378>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b05      	cmp	r3, #5
 80041fc:	d110      	bne.n	8004220 <HAL_RCC_OscConfig+0x358>
 80041fe:	4b60      	ldr	r3, [pc, #384]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004204:	4a5e      	ldr	r2, [pc, #376]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 8004206:	f043 0304 	orr.w	r3, r3, #4
 800420a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800420e:	4b5c      	ldr	r3, [pc, #368]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004214:	4a5a      	ldr	r2, [pc, #360]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800421e:	e00f      	b.n	8004240 <HAL_RCC_OscConfig+0x378>
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004226:	4a56      	ldr	r2, [pc, #344]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004230:	4b53      	ldr	r3, [pc, #332]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004236:	4a52      	ldr	r2, [pc, #328]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 8004238:	f023 0304 	bic.w	r3, r3, #4
 800423c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d016      	beq.n	8004276 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004248:	f7fd fac2 	bl	80017d0 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800424e:	e00a      	b.n	8004266 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004250:	f7fd fabe 	bl	80017d0 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e138      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004266:	4b46      	ldr	r3, [pc, #280]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0ed      	beq.n	8004250 <HAL_RCC_OscConfig+0x388>
 8004274:	e015      	b.n	80042a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004276:	f7fd faab 	bl	80017d0 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800427c:	e00a      	b.n	8004294 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427e:	f7fd faa7 	bl	80017d0 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428c:	4293      	cmp	r3, r2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e121      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004294:	4b3a      	ldr	r3, [pc, #232]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1ed      	bne.n	800427e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042a2:	7ffb      	ldrb	r3, [r7, #31]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d105      	bne.n	80042b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a8:	4b35      	ldr	r3, [pc, #212]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 80042aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ac:	4a34      	ldr	r2, [pc, #208]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 80042ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d03c      	beq.n	800433a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01c      	beq.n	8004302 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 80042ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d8:	f7fd fa7a 	bl	80017d0 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042e0:	f7fd fa76 	bl	80017d0 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e0f2      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042f2:	4b23      	ldr	r3, [pc, #140]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 80042f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0ef      	beq.n	80042e0 <HAL_RCC_OscConfig+0x418>
 8004300:	e01b      	b.n	800433a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004302:	4b1f      	ldr	r3, [pc, #124]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 8004304:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004308:	4a1d      	ldr	r2, [pc, #116]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004312:	f7fd fa5d 	bl	80017d0 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800431a:	f7fd fa59 	bl	80017d0 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e0d5      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800432c:	4b14      	ldr	r3, [pc, #80]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 800432e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1ef      	bne.n	800431a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 80c9 	beq.w	80044d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004344:	4b0e      	ldr	r3, [pc, #56]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 030c 	and.w	r3, r3, #12
 800434c:	2b0c      	cmp	r3, #12
 800434e:	f000 8083 	beq.w	8004458 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d15e      	bne.n	8004418 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b09      	ldr	r3, [pc, #36]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a08      	ldr	r2, [pc, #32]	@ (8004380 <HAL_RCC_OscConfig+0x4b8>)
 8004360:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7fd fa33 	bl	80017d0 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800436c:	e00c      	b.n	8004388 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800436e:	f7fd fa2f 	bl	80017d0 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d905      	bls.n	8004388 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e0ab      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
 8004380:	40021000 	.word	0x40021000
 8004384:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004388:	4b55      	ldr	r3, [pc, #340]	@ (80044e0 <HAL_RCC_OscConfig+0x618>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1ec      	bne.n	800436e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004394:	4b52      	ldr	r3, [pc, #328]	@ (80044e0 <HAL_RCC_OscConfig+0x618>)
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	4b52      	ldr	r3, [pc, #328]	@ (80044e4 <HAL_RCC_OscConfig+0x61c>)
 800439a:	4013      	ands	r3, r2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6a11      	ldr	r1, [r2, #32]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043a4:	3a01      	subs	r2, #1
 80043a6:	0112      	lsls	r2, r2, #4
 80043a8:	4311      	orrs	r1, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80043ae:	0212      	lsls	r2, r2, #8
 80043b0:	4311      	orrs	r1, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80043b6:	0852      	lsrs	r2, r2, #1
 80043b8:	3a01      	subs	r2, #1
 80043ba:	0552      	lsls	r2, r2, #21
 80043bc:	4311      	orrs	r1, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80043c2:	0852      	lsrs	r2, r2, #1
 80043c4:	3a01      	subs	r2, #1
 80043c6:	0652      	lsls	r2, r2, #25
 80043c8:	4311      	orrs	r1, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80043ce:	06d2      	lsls	r2, r2, #27
 80043d0:	430a      	orrs	r2, r1
 80043d2:	4943      	ldr	r1, [pc, #268]	@ (80044e0 <HAL_RCC_OscConfig+0x618>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d8:	4b41      	ldr	r3, [pc, #260]	@ (80044e0 <HAL_RCC_OscConfig+0x618>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a40      	ldr	r2, [pc, #256]	@ (80044e0 <HAL_RCC_OscConfig+0x618>)
 80043de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043e4:	4b3e      	ldr	r3, [pc, #248]	@ (80044e0 <HAL_RCC_OscConfig+0x618>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	4a3d      	ldr	r2, [pc, #244]	@ (80044e0 <HAL_RCC_OscConfig+0x618>)
 80043ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fd f9ee 	bl	80017d0 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fd f9ea 	bl	80017d0 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e066      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800440a:	4b35      	ldr	r3, [pc, #212]	@ (80044e0 <HAL_RCC_OscConfig+0x618>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0x530>
 8004416:	e05e      	b.n	80044d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004418:	4b31      	ldr	r3, [pc, #196]	@ (80044e0 <HAL_RCC_OscConfig+0x618>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a30      	ldr	r2, [pc, #192]	@ (80044e0 <HAL_RCC_OscConfig+0x618>)
 800441e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004424:	f7fd f9d4 	bl	80017d0 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442c:	f7fd f9d0 	bl	80017d0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e04c      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800443e:	4b28      	ldr	r3, [pc, #160]	@ (80044e0 <HAL_RCC_OscConfig+0x618>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f0      	bne.n	800442c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800444a:	4b25      	ldr	r3, [pc, #148]	@ (80044e0 <HAL_RCC_OscConfig+0x618>)
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	4924      	ldr	r1, [pc, #144]	@ (80044e0 <HAL_RCC_OscConfig+0x618>)
 8004450:	4b25      	ldr	r3, [pc, #148]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004452:	4013      	ands	r3, r2
 8004454:	60cb      	str	r3, [r1, #12]
 8004456:	e03e      	b.n	80044d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e039      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004464:	4b1e      	ldr	r3, [pc, #120]	@ (80044e0 <HAL_RCC_OscConfig+0x618>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f003 0203 	and.w	r2, r3, #3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	429a      	cmp	r2, r3
 8004476:	d12c      	bne.n	80044d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004482:	3b01      	subs	r3, #1
 8004484:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d123      	bne.n	80044d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004494:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004496:	429a      	cmp	r2, r3
 8004498:	d11b      	bne.n	80044d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d113      	bne.n	80044d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	3b01      	subs	r3, #1
 80044b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d109      	bne.n	80044d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c8:	085b      	lsrs	r3, r3, #1
 80044ca:	3b01      	subs	r3, #1
 80044cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d001      	beq.n	80044d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3720      	adds	r7, #32
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40021000 	.word	0x40021000
 80044e4:	019f800c 	.word	0x019f800c
 80044e8:	feeefffc 	.word	0xfeeefffc

080044ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e11e      	b.n	8004742 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004504:	4b91      	ldr	r3, [pc, #580]	@ (800474c <HAL_RCC_ClockConfig+0x260>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 030f 	and.w	r3, r3, #15
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d910      	bls.n	8004534 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b8e      	ldr	r3, [pc, #568]	@ (800474c <HAL_RCC_ClockConfig+0x260>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 020f 	bic.w	r2, r3, #15
 800451a:	498c      	ldr	r1, [pc, #560]	@ (800474c <HAL_RCC_ClockConfig+0x260>)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	4313      	orrs	r3, r2
 8004520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004522:	4b8a      	ldr	r3, [pc, #552]	@ (800474c <HAL_RCC_ClockConfig+0x260>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d001      	beq.n	8004534 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e106      	b.n	8004742 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d073      	beq.n	8004628 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b03      	cmp	r3, #3
 8004546:	d129      	bne.n	800459c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004548:	4b81      	ldr	r3, [pc, #516]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0f4      	b.n	8004742 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004558:	f000 f99e 	bl	8004898 <RCC_GetSysClockFreqFromPLLSource>
 800455c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4a7c      	ldr	r2, [pc, #496]	@ (8004754 <HAL_RCC_ClockConfig+0x268>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d93f      	bls.n	80045e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004566:	4b7a      	ldr	r3, [pc, #488]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800457a:	2b00      	cmp	r3, #0
 800457c:	d033      	beq.n	80045e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004582:	2b00      	cmp	r3, #0
 8004584:	d12f      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004586:	4b72      	ldr	r3, [pc, #456]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800458e:	4a70      	ldr	r2, [pc, #448]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 8004590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004594:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004596:	2380      	movs	r3, #128	@ 0x80
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	e024      	b.n	80045e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d107      	bne.n	80045b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0c6      	b.n	8004742 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b4:	4b66      	ldr	r3, [pc, #408]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0be      	b.n	8004742 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80045c4:	f000 f8ce 	bl	8004764 <HAL_RCC_GetSysClockFreq>
 80045c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4a61      	ldr	r2, [pc, #388]	@ (8004754 <HAL_RCC_ClockConfig+0x268>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d909      	bls.n	80045e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045da:	4a5d      	ldr	r2, [pc, #372]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 80045dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80045e2:	2380      	movs	r3, #128	@ 0x80
 80045e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045e6:	4b5a      	ldr	r3, [pc, #360]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f023 0203 	bic.w	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	4957      	ldr	r1, [pc, #348]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f8:	f7fd f8ea 	bl	80017d0 <HAL_GetTick>
 80045fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004600:	f7fd f8e6 	bl	80017d0 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e095      	b.n	8004742 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004616:	4b4e      	ldr	r3, [pc, #312]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 020c 	and.w	r2, r3, #12
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	429a      	cmp	r2, r3
 8004626:	d1eb      	bne.n	8004600 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d023      	beq.n	800467c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004640:	4b43      	ldr	r3, [pc, #268]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	4a42      	ldr	r2, [pc, #264]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 8004646:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800464a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004658:	4b3d      	ldr	r3, [pc, #244]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004660:	4a3b      	ldr	r2, [pc, #236]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 8004662:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004666:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004668:	4b39      	ldr	r3, [pc, #228]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4936      	ldr	r1, [pc, #216]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 8004676:	4313      	orrs	r3, r2
 8004678:	608b      	str	r3, [r1, #8]
 800467a:	e008      	b.n	800468e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2b80      	cmp	r3, #128	@ 0x80
 8004680:	d105      	bne.n	800468e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004682:	4b33      	ldr	r3, [pc, #204]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	4a32      	ldr	r2, [pc, #200]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 8004688:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800468c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800468e:	4b2f      	ldr	r3, [pc, #188]	@ (800474c <HAL_RCC_ClockConfig+0x260>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d21d      	bcs.n	80046d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469c:	4b2b      	ldr	r3, [pc, #172]	@ (800474c <HAL_RCC_ClockConfig+0x260>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f023 020f 	bic.w	r2, r3, #15
 80046a4:	4929      	ldr	r1, [pc, #164]	@ (800474c <HAL_RCC_ClockConfig+0x260>)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046ac:	f7fd f890 	bl	80017d0 <HAL_GetTick>
 80046b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b4:	f7fd f88c 	bl	80017d0 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e03b      	b.n	8004742 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ca:	4b20      	ldr	r3, [pc, #128]	@ (800474c <HAL_RCC_ClockConfig+0x260>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d1ed      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4917      	ldr	r1, [pc, #92]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004702:	4b13      	ldr	r3, [pc, #76]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	490f      	ldr	r1, [pc, #60]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004716:	f000 f825 	bl	8004764 <HAL_RCC_GetSysClockFreq>
 800471a:	4602      	mov	r2, r0
 800471c:	4b0c      	ldr	r3, [pc, #48]	@ (8004750 <HAL_RCC_ClockConfig+0x264>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	490c      	ldr	r1, [pc, #48]	@ (8004758 <HAL_RCC_ClockConfig+0x26c>)
 8004728:	5ccb      	ldrb	r3, [r1, r3]
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	fa22 f303 	lsr.w	r3, r2, r3
 8004732:	4a0a      	ldr	r2, [pc, #40]	@ (800475c <HAL_RCC_ClockConfig+0x270>)
 8004734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004736:	4b0a      	ldr	r3, [pc, #40]	@ (8004760 <HAL_RCC_ClockConfig+0x274>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7fc fffc 	bl	8001738 <HAL_InitTick>
 8004740:	4603      	mov	r3, r0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40022000 	.word	0x40022000
 8004750:	40021000 	.word	0x40021000
 8004754:	04c4b400 	.word	0x04c4b400
 8004758:	0800afd0 	.word	0x0800afd0
 800475c:	20000000 	.word	0x20000000
 8004760:	20000004 	.word	0x20000004

08004764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800476a:	4b2c      	ldr	r3, [pc, #176]	@ (800481c <HAL_RCC_GetSysClockFreq+0xb8>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	2b04      	cmp	r3, #4
 8004774:	d102      	bne.n	800477c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004776:	4b2a      	ldr	r3, [pc, #168]	@ (8004820 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	e047      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800477c:	4b27      	ldr	r3, [pc, #156]	@ (800481c <HAL_RCC_GetSysClockFreq+0xb8>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 030c 	and.w	r3, r3, #12
 8004784:	2b08      	cmp	r3, #8
 8004786:	d102      	bne.n	800478e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004788:	4b26      	ldr	r3, [pc, #152]	@ (8004824 <HAL_RCC_GetSysClockFreq+0xc0>)
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	e03e      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800478e:	4b23      	ldr	r3, [pc, #140]	@ (800481c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	2b0c      	cmp	r3, #12
 8004798:	d136      	bne.n	8004808 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800479a:	4b20      	ldr	r3, [pc, #128]	@ (800481c <HAL_RCC_GetSysClockFreq+0xb8>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047a4:	4b1d      	ldr	r3, [pc, #116]	@ (800481c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	3301      	adds	r3, #1
 80047b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d10c      	bne.n	80047d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004824 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	4a16      	ldr	r2, [pc, #88]	@ (800481c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047c2:	68d2      	ldr	r2, [r2, #12]
 80047c4:	0a12      	lsrs	r2, r2, #8
 80047c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	617b      	str	r3, [r7, #20]
      break;
 80047d0:	e00c      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047d2:	4a13      	ldr	r2, [pc, #76]	@ (8004820 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047da:	4a10      	ldr	r2, [pc, #64]	@ (800481c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047dc:	68d2      	ldr	r2, [r2, #12]
 80047de:	0a12      	lsrs	r2, r2, #8
 80047e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047e4:	fb02 f303 	mul.w	r3, r2, r3
 80047e8:	617b      	str	r3, [r7, #20]
      break;
 80047ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047ec:	4b0b      	ldr	r3, [pc, #44]	@ (800481c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	0e5b      	lsrs	r3, r3, #25
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	3301      	adds	r3, #1
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	fbb2 f3f3 	udiv	r3, r2, r3
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	e001      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800480c:	693b      	ldr	r3, [r7, #16]
}
 800480e:	4618      	mov	r0, r3
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40021000 	.word	0x40021000
 8004820:	00f42400 	.word	0x00f42400
 8004824:	007a1200 	.word	0x007a1200

08004828 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800482c:	4b03      	ldr	r3, [pc, #12]	@ (800483c <HAL_RCC_GetHCLKFreq+0x14>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000000 	.word	0x20000000

08004840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004844:	f7ff fff0 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b06      	ldr	r3, [pc, #24]	@ (8004864 <HAL_RCC_GetPCLK1Freq+0x24>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	0a1b      	lsrs	r3, r3, #8
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4904      	ldr	r1, [pc, #16]	@ (8004868 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40021000 	.word	0x40021000
 8004868:	0800afe0 	.word	0x0800afe0

0800486c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004870:	f7ff ffda 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b06      	ldr	r3, [pc, #24]	@ (8004890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	0adb      	lsrs	r3, r3, #11
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	4904      	ldr	r1, [pc, #16]	@ (8004894 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800488c:	4618      	mov	r0, r3
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000
 8004894:	0800afe0 	.word	0x0800afe0

08004898 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800489e:	4b1e      	ldr	r3, [pc, #120]	@ (8004918 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004918 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	3301      	adds	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d10c      	bne.n	80048d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048bc:	4a17      	ldr	r2, [pc, #92]	@ (800491c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c4:	4a14      	ldr	r2, [pc, #80]	@ (8004918 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048c6:	68d2      	ldr	r2, [r2, #12]
 80048c8:	0a12      	lsrs	r2, r2, #8
 80048ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	617b      	str	r3, [r7, #20]
    break;
 80048d4:	e00c      	b.n	80048f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048d6:	4a12      	ldr	r2, [pc, #72]	@ (8004920 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	fbb2 f3f3 	udiv	r3, r2, r3
 80048de:	4a0e      	ldr	r2, [pc, #56]	@ (8004918 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048e0:	68d2      	ldr	r2, [r2, #12]
 80048e2:	0a12      	lsrs	r2, r2, #8
 80048e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80048e8:	fb02 f303 	mul.w	r3, r2, r3
 80048ec:	617b      	str	r3, [r7, #20]
    break;
 80048ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048f0:	4b09      	ldr	r3, [pc, #36]	@ (8004918 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	0e5b      	lsrs	r3, r3, #25
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	3301      	adds	r3, #1
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	fbb2 f3f3 	udiv	r3, r2, r3
 8004908:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800490a:	687b      	ldr	r3, [r7, #4]
}
 800490c:	4618      	mov	r0, r3
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40021000 	.word	0x40021000
 800491c:	007a1200 	.word	0x007a1200
 8004920:	00f42400 	.word	0x00f42400

08004924 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800492c:	2300      	movs	r3, #0
 800492e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004930:	2300      	movs	r3, #0
 8004932:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8098 	beq.w	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004942:	2300      	movs	r3, #0
 8004944:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004946:	4b43      	ldr	r3, [pc, #268]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10d      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004952:	4b40      	ldr	r3, [pc, #256]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004956:	4a3f      	ldr	r2, [pc, #252]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800495c:	6593      	str	r3, [r2, #88]	@ 0x58
 800495e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004966:	60bb      	str	r3, [r7, #8]
 8004968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496a:	2301      	movs	r3, #1
 800496c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800496e:	4b3a      	ldr	r3, [pc, #232]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a39      	ldr	r2, [pc, #228]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004978:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800497a:	f7fc ff29 	bl	80017d0 <HAL_GetTick>
 800497e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004980:	e009      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004982:	f7fc ff25 	bl	80017d0 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d902      	bls.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	74fb      	strb	r3, [r7, #19]
        break;
 8004994:	e005      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004996:	4b30      	ldr	r3, [pc, #192]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0ef      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80049a2:	7cfb      	ldrb	r3, [r7, #19]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d159      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01e      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d019      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049c4:	4b23      	ldr	r3, [pc, #140]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049d0:	4b20      	ldr	r3, [pc, #128]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049f0:	4a18      	ldr	r2, [pc, #96]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d016      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a02:	f7fc fee5 	bl	80017d0 <HAL_GetTick>
 8004a06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a08:	e00b      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0a:	f7fc fee1 	bl	80017d0 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d902      	bls.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	74fb      	strb	r3, [r7, #19]
            break;
 8004a20:	e006      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a22:	4b0c      	ldr	r3, [pc, #48]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0ec      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a30:	7cfb      	ldrb	r3, [r7, #19]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10b      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a36:	4b07      	ldr	r3, [pc, #28]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a44:	4903      	ldr	r1, [pc, #12]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a4c:	e008      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a4e:	7cfb      	ldrb	r3, [r7, #19]
 8004a50:	74bb      	strb	r3, [r7, #18]
 8004a52:	e005      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5c:	7cfb      	ldrb	r3, [r7, #19]
 8004a5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a60:	7c7b      	ldrb	r3, [r7, #17]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d105      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a66:	4ba7      	ldr	r3, [pc, #668]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6a:	4aa6      	ldr	r2, [pc, #664]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a7e:	4ba1      	ldr	r3, [pc, #644]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a84:	f023 0203 	bic.w	r2, r3, #3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	499d      	ldr	r1, [pc, #628]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aa0:	4b98      	ldr	r3, [pc, #608]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa6:	f023 020c 	bic.w	r2, r3, #12
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	4995      	ldr	r1, [pc, #596]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ac2:	4b90      	ldr	r3, [pc, #576]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	498c      	ldr	r1, [pc, #560]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ae4:	4b87      	ldr	r3, [pc, #540]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	4984      	ldr	r1, [pc, #528]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b06:	4b7f      	ldr	r3, [pc, #508]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	497b      	ldr	r1, [pc, #492]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b28:	4b76      	ldr	r3, [pc, #472]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	4973      	ldr	r1, [pc, #460]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b4a:	4b6e      	ldr	r3, [pc, #440]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b50:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	496a      	ldr	r1, [pc, #424]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b6c:	4b65      	ldr	r3, [pc, #404]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b72:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	4962      	ldr	r1, [pc, #392]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b8e:	4b5d      	ldr	r3, [pc, #372]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9c:	4959      	ldr	r1, [pc, #356]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bb0:	4b54      	ldr	r3, [pc, #336]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbe:	4951      	ldr	r1, [pc, #324]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d015      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bd2:	4b4c      	ldr	r3, [pc, #304]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be0:	4948      	ldr	r1, [pc, #288]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bf0:	d105      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bf2:	4b44      	ldr	r3, [pc, #272]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	4a43      	ldr	r2, [pc, #268]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bfc:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d015      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c10:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c18:	493a      	ldr	r1, [pc, #232]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c28:	d105      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c2a:	4b36      	ldr	r3, [pc, #216]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	4a35      	ldr	r2, [pc, #212]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c34:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d015      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c42:	4b30      	ldr	r3, [pc, #192]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c48:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c50:	492c      	ldr	r1, [pc, #176]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c60:	d105      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c62:	4b28      	ldr	r3, [pc, #160]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	4a27      	ldr	r2, [pc, #156]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c6c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d015      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c7a:	4b22      	ldr	r3, [pc, #136]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c80:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c88:	491e      	ldr	r1, [pc, #120]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c98:	d105      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	4a19      	ldr	r2, [pc, #100]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ca4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d015      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cb2:	4b14      	ldr	r3, [pc, #80]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc0:	4910      	ldr	r1, [pc, #64]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ccc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cd0:	d105      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	4a0b      	ldr	r2, [pc, #44]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cdc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d018      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cea:	4b06      	ldr	r3, [pc, #24]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf8:	4902      	ldr	r1, [pc, #8]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	e001      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004d04:	40021000 	.word	0x40021000
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d0e:	d105      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d10:	4b21      	ldr	r3, [pc, #132]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	4a20      	ldr	r2, [pc, #128]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d1a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d015      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004d28:	4b1b      	ldr	r3, [pc, #108]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d36:	4918      	ldr	r1, [pc, #96]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d46:	d105      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d48:	4b13      	ldr	r3, [pc, #76]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	4a12      	ldr	r2, [pc, #72]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d52:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d015      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d60:	4b0d      	ldr	r3, [pc, #52]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d6e:	490a      	ldr	r1, [pc, #40]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d7e:	d105      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d80:	4b05      	ldr	r3, [pc, #20]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	4a04      	ldr	r2, [pc, #16]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40021000 	.word	0x40021000

08004d9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e09d      	b.n	8004eea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d108      	bne.n	8004dc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dbe:	d009      	beq.n	8004dd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	61da      	str	r2, [r3, #28]
 8004dc6:	e005      	b.n	8004dd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fc fb04 	bl	80013fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e14:	d902      	bls.n	8004e1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	e002      	b.n	8004e22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004e2a:	d007      	beq.n	8004e3c <HAL_SPI_Init+0xa0>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e34:	d002      	beq.n	8004e3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7e:	ea42 0103 	orr.w	r1, r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e86:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	0c1b      	lsrs	r3, r3, #16
 8004e98:	f003 0204 	and.w	r2, r3, #4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea0:	f003 0310 	and.w	r3, r3, #16
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004eb8:	ea42 0103 	orr.w	r1, r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ed8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b08a      	sub	sp, #40	@ 0x28
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	607a      	str	r2, [r7, #4]
 8004efe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f00:	2301      	movs	r3, #1
 8004f02:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f04:	f7fc fc64 	bl	80017d0 <HAL_GetTick>
 8004f08:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f10:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004f18:	887b      	ldrh	r3, [r7, #2]
 8004f1a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004f1c:	887b      	ldrh	r3, [r7, #2]
 8004f1e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f20:	7ffb      	ldrb	r3, [r7, #31]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d00c      	beq.n	8004f40 <HAL_SPI_TransmitReceive+0x4e>
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f2c:	d106      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d102      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x4a>
 8004f36:	7ffb      	ldrb	r3, [r7, #31]
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d001      	beq.n	8004f40 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e1f3      	b.n	8005328 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d005      	beq.n	8004f52 <HAL_SPI_TransmitReceive+0x60>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <HAL_SPI_TransmitReceive+0x60>
 8004f4c:	887b      	ldrh	r3, [r7, #2]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e1e8      	b.n	8005328 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_SPI_TransmitReceive+0x72>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e1e1      	b.n	8005328 <HAL_SPI_TransmitReceive+0x436>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d003      	beq.n	8004f80 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2205      	movs	r2, #5
 8004f7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	887a      	ldrh	r2, [r7, #2]
 8004f90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	887a      	ldrh	r2, [r7, #2]
 8004f98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	887a      	ldrh	r2, [r7, #2]
 8004fa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	887a      	ldrh	r2, [r7, #2]
 8004fac:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fc2:	d802      	bhi.n	8004fca <HAL_SPI_TransmitReceive+0xd8>
 8004fc4:	8abb      	ldrh	r3, [r7, #20]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d908      	bls.n	8004fdc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	e007      	b.n	8004fec <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004fea:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff6:	2b40      	cmp	r3, #64	@ 0x40
 8004ff8:	d007      	beq.n	800500a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005008:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005012:	f240 8083 	bls.w	800511c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_SPI_TransmitReceive+0x132>
 800501e:	8afb      	ldrh	r3, [r7, #22]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d16f      	bne.n	8005104 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005028:	881a      	ldrh	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005034:	1c9a      	adds	r2, r3, #2
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005048:	e05c      	b.n	8005104 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b02      	cmp	r3, #2
 8005056:	d11b      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x19e>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d016      	beq.n	8005090 <HAL_SPI_TransmitReceive+0x19e>
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	2b01      	cmp	r3, #1
 8005066:	d113      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506c:	881a      	ldrh	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005078:	1c9a      	adds	r2, r3, #2
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b01      	cmp	r3, #1
 800509c:	d11c      	bne.n	80050d8 <HAL_SPI_TransmitReceive+0x1e6>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d016      	beq.n	80050d8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b4:	b292      	uxth	r2, r2
 80050b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050bc:	1c9a      	adds	r2, r3, #2
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050d4:	2301      	movs	r3, #1
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050d8:	f7fc fb7a 	bl	80017d0 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d80d      	bhi.n	8005104 <HAL_SPI_TransmitReceive+0x212>
 80050e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ee:	d009      	beq.n	8005104 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e111      	b.n	8005328 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d19d      	bne.n	800504a <HAL_SPI_TransmitReceive+0x158>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d197      	bne.n	800504a <HAL_SPI_TransmitReceive+0x158>
 800511a:	e0e5      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_SPI_TransmitReceive+0x23a>
 8005124:	8afb      	ldrh	r3, [r7, #22]
 8005126:	2b01      	cmp	r3, #1
 8005128:	f040 80d1 	bne.w	80052ce <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b01      	cmp	r3, #1
 8005134:	d912      	bls.n	800515c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513a:	881a      	ldrh	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005146:	1c9a      	adds	r2, r3, #2
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b02      	subs	r3, #2
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800515a:	e0b8      	b.n	80052ce <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	330c      	adds	r3, #12
 8005166:	7812      	ldrb	r2, [r2, #0]
 8005168:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005182:	e0a4      	b.n	80052ce <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b02      	cmp	r3, #2
 8005190:	d134      	bne.n	80051fc <HAL_SPI_TransmitReceive+0x30a>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d02f      	beq.n	80051fc <HAL_SPI_TransmitReceive+0x30a>
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d12c      	bne.n	80051fc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d912      	bls.n	80051d2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b0:	881a      	ldrh	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051bc:	1c9a      	adds	r2, r3, #2
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b02      	subs	r3, #2
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051d0:	e012      	b.n	80051f8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	7812      	ldrb	r2, [r2, #0]
 80051de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b01      	cmp	r3, #1
 8005208:	d148      	bne.n	800529c <HAL_SPI_TransmitReceive+0x3aa>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d042      	beq.n	800529c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b01      	cmp	r3, #1
 8005220:	d923      	bls.n	800526a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522c:	b292      	uxth	r2, r2
 800522e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005234:	1c9a      	adds	r2, r3, #2
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b02      	subs	r3, #2
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005252:	b29b      	uxth	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	d81f      	bhi.n	8005298 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005266:	605a      	str	r2, [r3, #4]
 8005268:	e016      	b.n	8005298 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f103 020c 	add.w	r2, r3, #12
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005276:	7812      	ldrb	r2, [r2, #0]
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800528c:	b29b      	uxth	r3, r3
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005298:	2301      	movs	r3, #1
 800529a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800529c:	f7fc fa98 	bl	80017d0 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d803      	bhi.n	80052b4 <HAL_SPI_TransmitReceive+0x3c2>
 80052ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b2:	d102      	bne.n	80052ba <HAL_SPI_TransmitReceive+0x3c8>
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e02c      	b.n	8005328 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f47f af55 	bne.w	8005184 <HAL_SPI_TransmitReceive+0x292>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f47f af4e 	bne.w	8005184 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052e8:	6a3a      	ldr	r2, [r7, #32]
 80052ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f93d 	bl	800556c <SPI_EndRxTxTransaction>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e00e      	b.n	8005328 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005326:	2300      	movs	r3, #0
  }
}
 8005328:	4618      	mov	r0, r3
 800532a:	3728      	adds	r7, #40	@ 0x28
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	4613      	mov	r3, r2
 800533e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005340:	f7fc fa46 	bl	80017d0 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	4413      	add	r3, r2
 800534e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005350:	f7fc fa3e 	bl	80017d0 <HAL_GetTick>
 8005354:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005356:	4b39      	ldr	r3, [pc, #228]	@ (800543c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	015b      	lsls	r3, r3, #5
 800535c:	0d1b      	lsrs	r3, r3, #20
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	fb02 f303 	mul.w	r3, r2, r3
 8005364:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005366:	e054      	b.n	8005412 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536e:	d050      	beq.n	8005412 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005370:	f7fc fa2e 	bl	80017d0 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	429a      	cmp	r2, r3
 800537e:	d902      	bls.n	8005386 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d13d      	bne.n	8005402 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005394:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800539e:	d111      	bne.n	80053c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053a8:	d004      	beq.n	80053b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053b2:	d107      	bne.n	80053c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053cc:	d10f      	bne.n	80053ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e017      	b.n	8005432 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	3b01      	subs	r3, #1
 8005410:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	429a      	cmp	r2, r3
 8005420:	bf0c      	ite	eq
 8005422:	2301      	moveq	r3, #1
 8005424:	2300      	movne	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	461a      	mov	r2, r3
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	429a      	cmp	r2, r3
 800542e:	d19b      	bne.n	8005368 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20000000 	.word	0x20000000

08005440 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08a      	sub	sp, #40	@ 0x28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005452:	f7fc f9bd 	bl	80017d0 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	4413      	add	r3, r2
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005462:	f7fc f9b5 	bl	80017d0 <HAL_GetTick>
 8005466:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	330c      	adds	r3, #12
 800546e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005470:	4b3d      	ldr	r3, [pc, #244]	@ (8005568 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	00da      	lsls	r2, r3, #3
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	0d1b      	lsrs	r3, r3, #20
 8005480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005488:	e060      	b.n	800554c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005490:	d107      	bne.n	80054a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d104      	bne.n	80054a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a8:	d050      	beq.n	800554c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054aa:	f7fc f991 	bl	80017d0 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d902      	bls.n	80054c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d13d      	bne.n	800553c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80054ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054d8:	d111      	bne.n	80054fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e2:	d004      	beq.n	80054ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ec:	d107      	bne.n	80054fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005506:	d10f      	bne.n	8005528 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005526:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e010      	b.n	800555e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	3b01      	subs	r3, #1
 800554a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	4013      	ands	r3, r2
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	429a      	cmp	r2, r3
 800555a:	d196      	bne.n	800548a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3728      	adds	r7, #40	@ 0x28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000000 	.word	0x20000000

0800556c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af02      	add	r7, sp, #8
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2200      	movs	r2, #0
 8005580:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f7ff ff5b 	bl	8005440 <SPI_WaitFifoStateUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d007      	beq.n	80055a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005594:	f043 0220 	orr.w	r2, r3, #32
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e027      	b.n	80055f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2200      	movs	r2, #0
 80055a8:	2180      	movs	r1, #128	@ 0x80
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff fec0 	bl	8005330 <SPI_WaitFlagStateUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e014      	b.n	80055f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f7ff ff34 	bl	8005440 <SPI_WaitFifoStateUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d007      	beq.n	80055ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e2:	f043 0220 	orr.w	r2, r3, #32
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e000      	b.n	80055f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e042      	b.n	8005690 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005610:	2b00      	cmp	r3, #0
 8005612:	d106      	bne.n	8005622 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7fb ff2f 	bl	8001480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2224      	movs	r2, #36	@ 0x24
 8005626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0201 	bic.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fb24 	bl	8005c90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f825 	bl	8005698 <UART_SetConfig>
 800564e:	4603      	mov	r3, r0
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e01b      	b.n	8005690 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005666:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005676:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0201 	orr.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fba3 	bl	8005dd4 <UART_CheckIdleState>
 800568e:	4603      	mov	r3, r0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800569c:	b08c      	sub	sp, #48	@ 0x30
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	431a      	orrs	r2, r3
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	431a      	orrs	r2, r3
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	4313      	orrs	r3, r2
 80056be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	4baa      	ldr	r3, [pc, #680]	@ (8005970 <UART_SetConfig+0x2d8>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056d0:	430b      	orrs	r3, r1
 80056d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a9f      	ldr	r2, [pc, #636]	@ (8005974 <UART_SetConfig+0x2dc>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d004      	beq.n	8005704 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005700:	4313      	orrs	r3, r2
 8005702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800570e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	6812      	ldr	r2, [r2, #0]
 8005716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005718:	430b      	orrs	r3, r1
 800571a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005722:	f023 010f 	bic.w	r1, r3, #15
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a90      	ldr	r2, [pc, #576]	@ (8005978 <UART_SetConfig+0x2e0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d125      	bne.n	8005788 <UART_SetConfig+0xf0>
 800573c:	4b8f      	ldr	r3, [pc, #572]	@ (800597c <UART_SetConfig+0x2e4>)
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	2b03      	cmp	r3, #3
 8005748:	d81a      	bhi.n	8005780 <UART_SetConfig+0xe8>
 800574a:	a201      	add	r2, pc, #4	@ (adr r2, 8005750 <UART_SetConfig+0xb8>)
 800574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005750:	08005761 	.word	0x08005761
 8005754:	08005771 	.word	0x08005771
 8005758:	08005769 	.word	0x08005769
 800575c:	08005779 	.word	0x08005779
 8005760:	2301      	movs	r3, #1
 8005762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005766:	e116      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005768:	2302      	movs	r3, #2
 800576a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800576e:	e112      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005770:	2304      	movs	r3, #4
 8005772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005776:	e10e      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005778:	2308      	movs	r3, #8
 800577a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800577e:	e10a      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005780:	2310      	movs	r3, #16
 8005782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005786:	e106      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a7c      	ldr	r2, [pc, #496]	@ (8005980 <UART_SetConfig+0x2e8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d138      	bne.n	8005804 <UART_SetConfig+0x16c>
 8005792:	4b7a      	ldr	r3, [pc, #488]	@ (800597c <UART_SetConfig+0x2e4>)
 8005794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005798:	f003 030c 	and.w	r3, r3, #12
 800579c:	2b0c      	cmp	r3, #12
 800579e:	d82d      	bhi.n	80057fc <UART_SetConfig+0x164>
 80057a0:	a201      	add	r2, pc, #4	@ (adr r2, 80057a8 <UART_SetConfig+0x110>)
 80057a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a6:	bf00      	nop
 80057a8:	080057dd 	.word	0x080057dd
 80057ac:	080057fd 	.word	0x080057fd
 80057b0:	080057fd 	.word	0x080057fd
 80057b4:	080057fd 	.word	0x080057fd
 80057b8:	080057ed 	.word	0x080057ed
 80057bc:	080057fd 	.word	0x080057fd
 80057c0:	080057fd 	.word	0x080057fd
 80057c4:	080057fd 	.word	0x080057fd
 80057c8:	080057e5 	.word	0x080057e5
 80057cc:	080057fd 	.word	0x080057fd
 80057d0:	080057fd 	.word	0x080057fd
 80057d4:	080057fd 	.word	0x080057fd
 80057d8:	080057f5 	.word	0x080057f5
 80057dc:	2300      	movs	r3, #0
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057e2:	e0d8      	b.n	8005996 <UART_SetConfig+0x2fe>
 80057e4:	2302      	movs	r3, #2
 80057e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ea:	e0d4      	b.n	8005996 <UART_SetConfig+0x2fe>
 80057ec:	2304      	movs	r3, #4
 80057ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057f2:	e0d0      	b.n	8005996 <UART_SetConfig+0x2fe>
 80057f4:	2308      	movs	r3, #8
 80057f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057fa:	e0cc      	b.n	8005996 <UART_SetConfig+0x2fe>
 80057fc:	2310      	movs	r3, #16
 80057fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005802:	e0c8      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a5e      	ldr	r2, [pc, #376]	@ (8005984 <UART_SetConfig+0x2ec>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d125      	bne.n	800585a <UART_SetConfig+0x1c2>
 800580e:	4b5b      	ldr	r3, [pc, #364]	@ (800597c <UART_SetConfig+0x2e4>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005814:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005818:	2b30      	cmp	r3, #48	@ 0x30
 800581a:	d016      	beq.n	800584a <UART_SetConfig+0x1b2>
 800581c:	2b30      	cmp	r3, #48	@ 0x30
 800581e:	d818      	bhi.n	8005852 <UART_SetConfig+0x1ba>
 8005820:	2b20      	cmp	r3, #32
 8005822:	d00a      	beq.n	800583a <UART_SetConfig+0x1a2>
 8005824:	2b20      	cmp	r3, #32
 8005826:	d814      	bhi.n	8005852 <UART_SetConfig+0x1ba>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <UART_SetConfig+0x19a>
 800582c:	2b10      	cmp	r3, #16
 800582e:	d008      	beq.n	8005842 <UART_SetConfig+0x1aa>
 8005830:	e00f      	b.n	8005852 <UART_SetConfig+0x1ba>
 8005832:	2300      	movs	r3, #0
 8005834:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005838:	e0ad      	b.n	8005996 <UART_SetConfig+0x2fe>
 800583a:	2302      	movs	r3, #2
 800583c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005840:	e0a9      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005842:	2304      	movs	r3, #4
 8005844:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005848:	e0a5      	b.n	8005996 <UART_SetConfig+0x2fe>
 800584a:	2308      	movs	r3, #8
 800584c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005850:	e0a1      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005852:	2310      	movs	r3, #16
 8005854:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005858:	e09d      	b.n	8005996 <UART_SetConfig+0x2fe>
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a4a      	ldr	r2, [pc, #296]	@ (8005988 <UART_SetConfig+0x2f0>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d125      	bne.n	80058b0 <UART_SetConfig+0x218>
 8005864:	4b45      	ldr	r3, [pc, #276]	@ (800597c <UART_SetConfig+0x2e4>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800586e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005870:	d016      	beq.n	80058a0 <UART_SetConfig+0x208>
 8005872:	2bc0      	cmp	r3, #192	@ 0xc0
 8005874:	d818      	bhi.n	80058a8 <UART_SetConfig+0x210>
 8005876:	2b80      	cmp	r3, #128	@ 0x80
 8005878:	d00a      	beq.n	8005890 <UART_SetConfig+0x1f8>
 800587a:	2b80      	cmp	r3, #128	@ 0x80
 800587c:	d814      	bhi.n	80058a8 <UART_SetConfig+0x210>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <UART_SetConfig+0x1f0>
 8005882:	2b40      	cmp	r3, #64	@ 0x40
 8005884:	d008      	beq.n	8005898 <UART_SetConfig+0x200>
 8005886:	e00f      	b.n	80058a8 <UART_SetConfig+0x210>
 8005888:	2300      	movs	r3, #0
 800588a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800588e:	e082      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005890:	2302      	movs	r3, #2
 8005892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005896:	e07e      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005898:	2304      	movs	r3, #4
 800589a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800589e:	e07a      	b.n	8005996 <UART_SetConfig+0x2fe>
 80058a0:	2308      	movs	r3, #8
 80058a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058a6:	e076      	b.n	8005996 <UART_SetConfig+0x2fe>
 80058a8:	2310      	movs	r3, #16
 80058aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ae:	e072      	b.n	8005996 <UART_SetConfig+0x2fe>
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a35      	ldr	r2, [pc, #212]	@ (800598c <UART_SetConfig+0x2f4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d12a      	bne.n	8005910 <UART_SetConfig+0x278>
 80058ba:	4b30      	ldr	r3, [pc, #192]	@ (800597c <UART_SetConfig+0x2e4>)
 80058bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058c8:	d01a      	beq.n	8005900 <UART_SetConfig+0x268>
 80058ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ce:	d81b      	bhi.n	8005908 <UART_SetConfig+0x270>
 80058d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058d4:	d00c      	beq.n	80058f0 <UART_SetConfig+0x258>
 80058d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058da:	d815      	bhi.n	8005908 <UART_SetConfig+0x270>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <UART_SetConfig+0x250>
 80058e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058e4:	d008      	beq.n	80058f8 <UART_SetConfig+0x260>
 80058e6:	e00f      	b.n	8005908 <UART_SetConfig+0x270>
 80058e8:	2300      	movs	r3, #0
 80058ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ee:	e052      	b.n	8005996 <UART_SetConfig+0x2fe>
 80058f0:	2302      	movs	r3, #2
 80058f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058f6:	e04e      	b.n	8005996 <UART_SetConfig+0x2fe>
 80058f8:	2304      	movs	r3, #4
 80058fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058fe:	e04a      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005900:	2308      	movs	r3, #8
 8005902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005906:	e046      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005908:	2310      	movs	r3, #16
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800590e:	e042      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a17      	ldr	r2, [pc, #92]	@ (8005974 <UART_SetConfig+0x2dc>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d13a      	bne.n	8005990 <UART_SetConfig+0x2f8>
 800591a:	4b18      	ldr	r3, [pc, #96]	@ (800597c <UART_SetConfig+0x2e4>)
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005920:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005924:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005928:	d01a      	beq.n	8005960 <UART_SetConfig+0x2c8>
 800592a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800592e:	d81b      	bhi.n	8005968 <UART_SetConfig+0x2d0>
 8005930:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005934:	d00c      	beq.n	8005950 <UART_SetConfig+0x2b8>
 8005936:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800593a:	d815      	bhi.n	8005968 <UART_SetConfig+0x2d0>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <UART_SetConfig+0x2b0>
 8005940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005944:	d008      	beq.n	8005958 <UART_SetConfig+0x2c0>
 8005946:	e00f      	b.n	8005968 <UART_SetConfig+0x2d0>
 8005948:	2300      	movs	r3, #0
 800594a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800594e:	e022      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005950:	2302      	movs	r3, #2
 8005952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005956:	e01e      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005958:	2304      	movs	r3, #4
 800595a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800595e:	e01a      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005960:	2308      	movs	r3, #8
 8005962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005966:	e016      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005968:	2310      	movs	r3, #16
 800596a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800596e:	e012      	b.n	8005996 <UART_SetConfig+0x2fe>
 8005970:	cfff69f3 	.word	0xcfff69f3
 8005974:	40008000 	.word	0x40008000
 8005978:	40013800 	.word	0x40013800
 800597c:	40021000 	.word	0x40021000
 8005980:	40004400 	.word	0x40004400
 8005984:	40004800 	.word	0x40004800
 8005988:	40004c00 	.word	0x40004c00
 800598c:	40005000 	.word	0x40005000
 8005990:	2310      	movs	r3, #16
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4aae      	ldr	r2, [pc, #696]	@ (8005c54 <UART_SetConfig+0x5bc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	f040 8097 	bne.w	8005ad0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d823      	bhi.n	80059f2 <UART_SetConfig+0x35a>
 80059aa:	a201      	add	r2, pc, #4	@ (adr r2, 80059b0 <UART_SetConfig+0x318>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	080059f3 	.word	0x080059f3
 80059b8:	080059dd 	.word	0x080059dd
 80059bc:	080059f3 	.word	0x080059f3
 80059c0:	080059e3 	.word	0x080059e3
 80059c4:	080059f3 	.word	0x080059f3
 80059c8:	080059f3 	.word	0x080059f3
 80059cc:	080059f3 	.word	0x080059f3
 80059d0:	080059eb 	.word	0x080059eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d4:	f7fe ff34 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 80059d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059da:	e010      	b.n	80059fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059dc:	4b9e      	ldr	r3, [pc, #632]	@ (8005c58 <UART_SetConfig+0x5c0>)
 80059de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059e0:	e00d      	b.n	80059fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059e2:	f7fe febf 	bl	8004764 <HAL_RCC_GetSysClockFreq>
 80059e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059e8:	e009      	b.n	80059fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059f0:	e005      	b.n	80059fe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80059fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8130 	beq.w	8005c66 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0a:	4a94      	ldr	r2, [pc, #592]	@ (8005c5c <UART_SetConfig+0x5c4>)
 8005a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a10:	461a      	mov	r2, r3
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a18:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	4413      	add	r3, r2
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d305      	bcc.n	8005a36 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d903      	bls.n	8005a3e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a3c:	e113      	b.n	8005c66 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	2200      	movs	r2, #0
 8005a42:	60bb      	str	r3, [r7, #8]
 8005a44:	60fa      	str	r2, [r7, #12]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4a:	4a84      	ldr	r2, [pc, #528]	@ (8005c5c <UART_SetConfig+0x5c4>)
 8005a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2200      	movs	r2, #0
 8005a54:	603b      	str	r3, [r7, #0]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a60:	f7fa fc2e 	bl	80002c0 <__aeabi_uldivmod>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4610      	mov	r0, r2
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	020b      	lsls	r3, r1, #8
 8005a76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a7a:	0202      	lsls	r2, r0, #8
 8005a7c:	6979      	ldr	r1, [r7, #20]
 8005a7e:	6849      	ldr	r1, [r1, #4]
 8005a80:	0849      	lsrs	r1, r1, #1
 8005a82:	2000      	movs	r0, #0
 8005a84:	460c      	mov	r4, r1
 8005a86:	4605      	mov	r5, r0
 8005a88:	eb12 0804 	adds.w	r8, r2, r4
 8005a8c:	eb43 0905 	adc.w	r9, r3, r5
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	469a      	mov	sl, r3
 8005a98:	4693      	mov	fp, r2
 8005a9a:	4652      	mov	r2, sl
 8005a9c:	465b      	mov	r3, fp
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	f7fa fc0d 	bl	80002c0 <__aeabi_uldivmod>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4613      	mov	r3, r2
 8005aac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ab4:	d308      	bcc.n	8005ac8 <UART_SetConfig+0x430>
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005abc:	d204      	bcs.n	8005ac8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6a3a      	ldr	r2, [r7, #32]
 8005ac4:	60da      	str	r2, [r3, #12]
 8005ac6:	e0ce      	b.n	8005c66 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ace:	e0ca      	b.n	8005c66 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ad8:	d166      	bne.n	8005ba8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005ada:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ade:	2b08      	cmp	r3, #8
 8005ae0:	d827      	bhi.n	8005b32 <UART_SetConfig+0x49a>
 8005ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae8 <UART_SetConfig+0x450>)
 8005ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae8:	08005b0d 	.word	0x08005b0d
 8005aec:	08005b15 	.word	0x08005b15
 8005af0:	08005b1d 	.word	0x08005b1d
 8005af4:	08005b33 	.word	0x08005b33
 8005af8:	08005b23 	.word	0x08005b23
 8005afc:	08005b33 	.word	0x08005b33
 8005b00:	08005b33 	.word	0x08005b33
 8005b04:	08005b33 	.word	0x08005b33
 8005b08:	08005b2b 	.word	0x08005b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b0c:	f7fe fe98 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8005b10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b12:	e014      	b.n	8005b3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b14:	f7fe feaa 	bl	800486c <HAL_RCC_GetPCLK2Freq>
 8005b18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b1a:	e010      	b.n	8005b3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b1c:	4b4e      	ldr	r3, [pc, #312]	@ (8005c58 <UART_SetConfig+0x5c0>)
 8005b1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b20:	e00d      	b.n	8005b3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b22:	f7fe fe1f 	bl	8004764 <HAL_RCC_GetSysClockFreq>
 8005b26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b28:	e009      	b.n	8005b3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b30:	e005      	b.n	8005b3e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8090 	beq.w	8005c66 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4a:	4a44      	ldr	r2, [pc, #272]	@ (8005c5c <UART_SetConfig+0x5c4>)
 8005b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b50:	461a      	mov	r2, r3
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b58:	005a      	lsls	r2, r3, #1
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	085b      	lsrs	r3, r3, #1
 8005b60:	441a      	add	r2, r3
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	2b0f      	cmp	r3, #15
 8005b70:	d916      	bls.n	8005ba0 <UART_SetConfig+0x508>
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b78:	d212      	bcs.n	8005ba0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f023 030f 	bic.w	r3, r3, #15
 8005b82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	085b      	lsrs	r3, r3, #1
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	8bfb      	ldrh	r3, [r7, #30]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	8bfa      	ldrh	r2, [r7, #30]
 8005b9c:	60da      	str	r2, [r3, #12]
 8005b9e:	e062      	b.n	8005c66 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ba6:	e05e      	b.n	8005c66 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ba8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d828      	bhi.n	8005c02 <UART_SetConfig+0x56a>
 8005bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb8 <UART_SetConfig+0x520>)
 8005bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb6:	bf00      	nop
 8005bb8:	08005bdd 	.word	0x08005bdd
 8005bbc:	08005be5 	.word	0x08005be5
 8005bc0:	08005bed 	.word	0x08005bed
 8005bc4:	08005c03 	.word	0x08005c03
 8005bc8:	08005bf3 	.word	0x08005bf3
 8005bcc:	08005c03 	.word	0x08005c03
 8005bd0:	08005c03 	.word	0x08005c03
 8005bd4:	08005c03 	.word	0x08005c03
 8005bd8:	08005bfb 	.word	0x08005bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bdc:	f7fe fe30 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8005be0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005be2:	e014      	b.n	8005c0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005be4:	f7fe fe42 	bl	800486c <HAL_RCC_GetPCLK2Freq>
 8005be8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bea:	e010      	b.n	8005c0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bec:	4b1a      	ldr	r3, [pc, #104]	@ (8005c58 <UART_SetConfig+0x5c0>)
 8005bee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bf0:	e00d      	b.n	8005c0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bf2:	f7fe fdb7 	bl	8004764 <HAL_RCC_GetSysClockFreq>
 8005bf6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bf8:	e009      	b.n	8005c0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c00:	e005      	b.n	8005c0e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c0c:	bf00      	nop
    }

    if (pclk != 0U)
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d028      	beq.n	8005c66 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c18:	4a10      	ldr	r2, [pc, #64]	@ (8005c5c <UART_SetConfig+0x5c4>)
 8005c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	085b      	lsrs	r3, r3, #1
 8005c2c:	441a      	add	r2, r3
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	2b0f      	cmp	r3, #15
 8005c3c:	d910      	bls.n	8005c60 <UART_SetConfig+0x5c8>
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c44:	d20c      	bcs.n	8005c60 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60da      	str	r2, [r3, #12]
 8005c50:	e009      	b.n	8005c66 <UART_SetConfig+0x5ce>
 8005c52:	bf00      	nop
 8005c54:	40008000 	.word	0x40008000
 8005c58:	00f42400 	.word	0x00f42400
 8005c5c:	0800afe8 	.word	0x0800afe8
      }
      else
      {
        ret = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005c82:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3730      	adds	r7, #48	@ 0x30
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01a      	beq.n	8005da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d8e:	d10a      	bne.n	8005da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	605a      	str	r2, [r3, #4]
  }
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b098      	sub	sp, #96	@ 0x60
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005de4:	f7fb fcf4 	bl	80017d0 <HAL_GetTick>
 8005de8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0308 	and.w	r3, r3, #8
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d12f      	bne.n	8005e58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005df8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e00:	2200      	movs	r2, #0
 8005e02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f88e 	bl	8005f28 <UART_WaitOnFlagUntilTimeout>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d022      	beq.n	8005e58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1a:	e853 3f00 	ldrex	r3, [r3]
 8005e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e26:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e32:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e6      	bne.n	8005e12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e063      	b.n	8005f20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d149      	bne.n	8005efa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f857 	bl	8005f28 <UART_WaitOnFlagUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d03c      	beq.n	8005efa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ea0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e6      	bne.n	8005e80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3308      	adds	r3, #8
 8005eb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f023 0301 	bic.w	r3, r3, #1
 8005ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3308      	adds	r3, #8
 8005ed0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ed2:	61fa      	str	r2, [r7, #28]
 8005ed4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed6:	69b9      	ldr	r1, [r7, #24]
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	e841 2300 	strex	r3, r2, [r1]
 8005ede:	617b      	str	r3, [r7, #20]
   return(result);
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1e5      	bne.n	8005eb2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e012      	b.n	8005f20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3758      	adds	r7, #88	@ 0x58
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	4613      	mov	r3, r2
 8005f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f38:	e04f      	b.n	8005fda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f40:	d04b      	beq.n	8005fda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f42:	f7fb fc45 	bl	80017d0 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d302      	bcc.n	8005f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e04e      	b.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d037      	beq.n	8005fda <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b80      	cmp	r3, #128	@ 0x80
 8005f6e:	d034      	beq.n	8005fda <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b40      	cmp	r3, #64	@ 0x40
 8005f74:	d031      	beq.n	8005fda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	f003 0308 	and.w	r3, r3, #8
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d110      	bne.n	8005fa6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2208      	movs	r2, #8
 8005f8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f838 	bl	8006002 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2208      	movs	r2, #8
 8005f96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e029      	b.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fb4:	d111      	bne.n	8005fda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 f81e 	bl	8006002 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e00f      	b.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69da      	ldr	r2, [r3, #28]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	bf0c      	ite	eq
 8005fea:	2301      	moveq	r3, #1
 8005fec:	2300      	movne	r3, #0
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d0a0      	beq.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006002:	b480      	push	{r7}
 8006004:	b095      	sub	sp, #84	@ 0x54
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006012:	e853 3f00 	ldrex	r3, [r3]
 8006016:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800601e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	461a      	mov	r2, r3
 8006026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006028:	643b      	str	r3, [r7, #64]	@ 0x40
 800602a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800602e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006030:	e841 2300 	strex	r3, r2, [r1]
 8006034:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e6      	bne.n	800600a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3308      	adds	r3, #8
 8006042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	61fb      	str	r3, [r7, #28]
   return(result);
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006052:	f023 0301 	bic.w	r3, r3, #1
 8006056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3308      	adds	r3, #8
 800605e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006060:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006068:	e841 2300 	strex	r3, r2, [r1]
 800606c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e3      	bne.n	800603c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d118      	bne.n	80060ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	60bb      	str	r3, [r7, #8]
   return(result);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f023 0310 	bic.w	r3, r3, #16
 8006090:	647b      	str	r3, [r7, #68]	@ 0x44
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800609a:	61bb      	str	r3, [r7, #24]
 800609c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	6979      	ldr	r1, [r7, #20]
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	613b      	str	r3, [r7, #16]
   return(result);
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e6      	bne.n	800607c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80060c2:	bf00      	nop
 80060c4:	3754      	adds	r7, #84	@ 0x54
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b085      	sub	sp, #20
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d101      	bne.n	80060e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e027      	b.n	8006134 <HAL_UARTEx_DisableFifoMode+0x66>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2224      	movs	r2, #36	@ 0x24
 80060f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0201 	bic.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006112:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006150:	2b01      	cmp	r3, #1
 8006152:	d101      	bne.n	8006158 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006154:	2302      	movs	r3, #2
 8006156:	e02d      	b.n	80061b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2224      	movs	r2, #36	@ 0x24
 8006164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0201 	bic.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f84f 	bl	8006238 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e02d      	b.n	8006230 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2224      	movs	r2, #36	@ 0x24
 80061e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0201 	bic.w	r2, r2, #1
 80061fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f811 	bl	8006238 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2220      	movs	r2, #32
 8006222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006244:	2b00      	cmp	r3, #0
 8006246:	d108      	bne.n	800625a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006258:	e031      	b.n	80062be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800625a:	2308      	movs	r3, #8
 800625c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800625e:	2308      	movs	r3, #8
 8006260:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	0e5b      	lsrs	r3, r3, #25
 800626a:	b2db      	uxtb	r3, r3
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	0f5b      	lsrs	r3, r3, #29
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	7b3a      	ldrb	r2, [r7, #12]
 8006286:	4911      	ldr	r1, [pc, #68]	@ (80062cc <UARTEx_SetNbDataToProcess+0x94>)
 8006288:	5c8a      	ldrb	r2, [r1, r2]
 800628a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800628e:	7b3a      	ldrb	r2, [r7, #12]
 8006290:	490f      	ldr	r1, [pc, #60]	@ (80062d0 <UARTEx_SetNbDataToProcess+0x98>)
 8006292:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006294:	fb93 f3f2 	sdiv	r3, r3, r2
 8006298:	b29a      	uxth	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	7b7a      	ldrb	r2, [r7, #13]
 80062a4:	4909      	ldr	r1, [pc, #36]	@ (80062cc <UARTEx_SetNbDataToProcess+0x94>)
 80062a6:	5c8a      	ldrb	r2, [r1, r2]
 80062a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80062ac:	7b7a      	ldrb	r2, [r7, #13]
 80062ae:	4908      	ldr	r1, [pc, #32]	@ (80062d0 <UARTEx_SetNbDataToProcess+0x98>)
 80062b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80062be:	bf00      	nop
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	0800b000 	.word	0x0800b000
 80062d0:	0800b008 	.word	0x0800b008

080062d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80062e4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80062e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800630a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800630e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	b29b      	uxth	r3, r3
 800631c:	43db      	mvns	r3, r3
 800631e:	b29b      	uxth	r3, r3
 8006320:	4013      	ands	r3, r2
 8006322:	b29a      	uxth	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	1d3b      	adds	r3, r7, #4
 8006342:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006374:	b480      	push	{r7}
 8006376:	b0a7      	sub	sp, #156	@ 0x9c
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800639a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	78db      	ldrb	r3, [r3, #3]
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d81f      	bhi.n	80063e6 <USB_ActivateEndpoint+0x72>
 80063a6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ac <USB_ActivateEndpoint+0x38>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063bd 	.word	0x080063bd
 80063b0:	080063d9 	.word	0x080063d9
 80063b4:	080063ef 	.word	0x080063ef
 80063b8:	080063cb 	.word	0x080063cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80063bc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80063c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063c4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80063c8:	e012      	b.n	80063f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80063ca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80063ce:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80063d2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80063d6:	e00b      	b.n	80063f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80063d8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80063dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80063e0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80063e4:	e004      	b.n	80063f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80063ec:	e000      	b.n	80063f0 <USB_ActivateEndpoint+0x7c>
      break;
 80063ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	441a      	add	r2, r3
 80063fa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80063fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006402:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800640a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800640e:	b29b      	uxth	r3, r3
 8006410:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	b29b      	uxth	r3, r3
 8006420:	b21b      	sxth	r3, r3
 8006422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800642a:	b21a      	sxth	r2, r3
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	b21b      	sxth	r3, r3
 8006432:	4313      	orrs	r3, r2
 8006434:	b21b      	sxth	r3, r3
 8006436:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	441a      	add	r2, r3
 8006444:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006448:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800644c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006450:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006458:	b29b      	uxth	r3, r3
 800645a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	7b1b      	ldrb	r3, [r3, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	f040 8180 	bne.w	8006766 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	785b      	ldrb	r3, [r3, #1]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 8084 	beq.w	8006578 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	61bb      	str	r3, [r7, #24]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800647a:	b29b      	uxth	r3, r3
 800647c:	461a      	mov	r2, r3
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	4413      	add	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	00da      	lsls	r2, r3, #3
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	88db      	ldrh	r3, [r3, #6]
 8006498:	085b      	lsrs	r3, r3, #1
 800649a:	b29b      	uxth	r3, r3
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	827b      	strh	r3, [r7, #18]
 80064b2:	8a7b      	ldrh	r3, [r7, #18]
 80064b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01b      	beq.n	80064f4 <USB_ActivateEndpoint+0x180>
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d2:	823b      	strh	r3, [r7, #16]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	441a      	add	r2, r3
 80064de:	8a3b      	ldrh	r3, [r7, #16]
 80064e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	78db      	ldrb	r3, [r3, #3]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d020      	beq.n	800653e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29b      	uxth	r3, r3
 800650a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800650e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006512:	81bb      	strh	r3, [r7, #12]
 8006514:	89bb      	ldrh	r3, [r7, #12]
 8006516:	f083 0320 	eor.w	r3, r3, #32
 800651a:	81bb      	strh	r3, [r7, #12]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	89bb      	ldrh	r3, [r7, #12]
 8006528:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800652c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006538:	b29b      	uxth	r3, r3
 800653a:	8013      	strh	r3, [r2, #0]
 800653c:	e3f9      	b.n	8006d32 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006554:	81fb      	strh	r3, [r7, #14]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	441a      	add	r2, r3
 8006560:	89fb      	ldrh	r3, [r7, #14]
 8006562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800656a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800656e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006572:	b29b      	uxth	r3, r3
 8006574:	8013      	strh	r3, [r2, #0]
 8006576:	e3dc      	b.n	8006d32 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	633b      	str	r3, [r7, #48]	@ 0x30
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006582:	b29b      	uxth	r3, r3
 8006584:	461a      	mov	r2, r3
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	4413      	add	r3, r2
 800658a:	633b      	str	r3, [r7, #48]	@ 0x30
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	00da      	lsls	r2, r3, #3
 8006592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006594:	4413      	add	r3, r2
 8006596:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800659a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	88db      	ldrh	r3, [r3, #6]
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065aa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065bc:	4413      	add	r3, r2
 80065be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	00da      	lsls	r2, r3, #3
 80065c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c8:	4413      	add	r3, r2
 80065ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80065d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065da:	b29a      	uxth	r2, r3
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	801a      	strh	r2, [r3, #0]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <USB_ActivateEndpoint+0x28a>
 80065e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	e041      	b.n	8006682 <USB_ActivateEndpoint+0x30e>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	2b3e      	cmp	r3, #62	@ 0x3e
 8006604:	d81c      	bhi.n	8006640 <USB_ActivateEndpoint+0x2cc>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	085b      	lsrs	r3, r3, #1
 800660c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d004      	beq.n	8006626 <USB_ActivateEndpoint+0x2b2>
 800661c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006620:	3301      	adds	r3, #1
 8006622:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	b29a      	uxth	r2, r3
 800662c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006630:	b29b      	uxth	r3, r3
 8006632:	029b      	lsls	r3, r3, #10
 8006634:	b29b      	uxth	r3, r3
 8006636:	4313      	orrs	r3, r2
 8006638:	b29a      	uxth	r2, r3
 800663a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	e020      	b.n	8006682 <USB_ActivateEndpoint+0x30e>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	f003 031f 	and.w	r3, r3, #31
 8006652:	2b00      	cmp	r3, #0
 8006654:	d104      	bne.n	8006660 <USB_ActivateEndpoint+0x2ec>
 8006656:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800665a:	3b01      	subs	r3, #1
 800665c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29a      	uxth	r2, r3
 8006666:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800666a:	b29b      	uxth	r3, r3
 800666c:	029b      	lsls	r3, r3, #10
 800666e:	b29b      	uxth	r3, r3
 8006670:	4313      	orrs	r3, r2
 8006672:	b29b      	uxth	r3, r3
 8006674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800667c:	b29a      	uxth	r2, r3
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006690:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01b      	beq.n	80066d2 <USB_ActivateEndpoint+0x35e>
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b0:	843b      	strh	r3, [r7, #32]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	441a      	add	r2, r3
 80066bc:	8c3b      	ldrh	r3, [r7, #32]
 80066be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d124      	bne.n	8006724 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066f0:	83bb      	strh	r3, [r7, #28]
 80066f2:	8bbb      	ldrh	r3, [r7, #28]
 80066f4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80066f8:	83bb      	strh	r3, [r7, #28]
 80066fa:	8bbb      	ldrh	r3, [r7, #28]
 80066fc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006700:	83bb      	strh	r3, [r7, #28]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	441a      	add	r2, r3
 800670c:	8bbb      	ldrh	r3, [r7, #28]
 800670e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006712:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800671a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800671e:	b29b      	uxth	r3, r3
 8006720:	8013      	strh	r3, [r2, #0]
 8006722:	e306      	b.n	8006d32 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673a:	83fb      	strh	r3, [r7, #30]
 800673c:	8bfb      	ldrh	r3, [r7, #30]
 800673e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006742:	83fb      	strh	r3, [r7, #30]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	441a      	add	r2, r3
 800674e:	8bfb      	ldrh	r3, [r7, #30]
 8006750:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006754:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006758:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800675c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006760:	b29b      	uxth	r3, r3
 8006762:	8013      	strh	r3, [r2, #0]
 8006764:	e2e5      	b.n	8006d32 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	78db      	ldrb	r3, [r3, #3]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d11e      	bne.n	80067ac <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006780:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006784:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	441a      	add	r2, r3
 8006792:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8006796:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800679a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800679e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80067a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	8013      	strh	r3, [r2, #0]
 80067aa:	e01d      	b.n	80067e8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80067be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067c2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	441a      	add	r2, r3
 80067d0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80067d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067f8:	4413      	add	r3, r2
 80067fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	00da      	lsls	r2, r3, #3
 8006802:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006804:	4413      	add	r3, r2
 8006806:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800680a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	891b      	ldrh	r3, [r3, #8]
 8006810:	085b      	lsrs	r3, r3, #1
 8006812:	b29b      	uxth	r3, r3
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800681a:	801a      	strh	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006826:	b29b      	uxth	r3, r3
 8006828:	461a      	mov	r2, r3
 800682a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800682c:	4413      	add	r3, r2
 800682e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	00da      	lsls	r2, r3, #3
 8006836:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006838:	4413      	add	r3, r2
 800683a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800683e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	895b      	ldrh	r3, [r3, #10]
 8006844:	085b      	lsrs	r3, r3, #1
 8006846:	b29b      	uxth	r3, r3
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800684e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f040 81af 	bne.w	8006bb8 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800686a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800686e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d01d      	beq.n	80068b2 <USB_ActivateEndpoint+0x53e>
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800688c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	441a      	add	r2, r3
 800689a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800689e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80068c2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80068c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01d      	beq.n	800690a <USB_ActivateEndpoint+0x596>
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068e4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	441a      	add	r2, r3
 80068f2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80068f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006902:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006906:	b29b      	uxth	r3, r3
 8006908:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	785b      	ldrb	r3, [r3, #1]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d16b      	bne.n	80069ea <USB_ActivateEndpoint+0x676>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800691c:	b29b      	uxth	r3, r3
 800691e:	461a      	mov	r2, r3
 8006920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006922:	4413      	add	r3, r2
 8006924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	00da      	lsls	r2, r3, #3
 800692c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800692e:	4413      	add	r3, r2
 8006930:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006934:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006940:	b29a      	uxth	r2, r3
 8006942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006944:	801a      	strh	r2, [r3, #0]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10a      	bne.n	8006964 <USB_ActivateEndpoint+0x5f0>
 800694e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	b29b      	uxth	r3, r3
 8006954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800695c:	b29a      	uxth	r2, r3
 800695e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006960:	801a      	strh	r2, [r3, #0]
 8006962:	e05d      	b.n	8006a20 <USB_ActivateEndpoint+0x6ac>
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	2b3e      	cmp	r3, #62	@ 0x3e
 800696a:	d81c      	bhi.n	80069a6 <USB_ActivateEndpoint+0x632>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	085b      	lsrs	r3, r3, #1
 8006972:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d004      	beq.n	800698c <USB_ActivateEndpoint+0x618>
 8006982:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006986:	3301      	adds	r3, #1
 8006988:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800698c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	b29a      	uxth	r2, r3
 8006992:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006996:	b29b      	uxth	r3, r3
 8006998:	029b      	lsls	r3, r3, #10
 800699a:	b29b      	uxth	r3, r3
 800699c:	4313      	orrs	r3, r2
 800699e:	b29a      	uxth	r2, r3
 80069a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	e03c      	b.n	8006a20 <USB_ActivateEndpoint+0x6ac>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	f003 031f 	and.w	r3, r3, #31
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d104      	bne.n	80069c6 <USB_ActivateEndpoint+0x652>
 80069bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069c0:	3b01      	subs	r3, #1
 80069c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80069c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	029b      	lsls	r3, r3, #10
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	4313      	orrs	r3, r2
 80069d8:	b29b      	uxth	r3, r3
 80069da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069e6:	801a      	strh	r2, [r3, #0]
 80069e8:	e01a      	b.n	8006a20 <USB_ActivateEndpoint+0x6ac>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	785b      	ldrb	r3, [r3, #1]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d116      	bne.n	8006a20 <USB_ActivateEndpoint+0x6ac>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a02:	4413      	add	r3, r2
 8006a04:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	00da      	lsls	r2, r3, #3
 8006a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a0e:	4413      	add	r3, r2
 8006a10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a14:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a1e:	801a      	strh	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	785b      	ldrb	r3, [r3, #1]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d16b      	bne.n	8006b04 <USB_ActivateEndpoint+0x790>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a3c:	4413      	add	r3, r2
 8006a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	00da      	lsls	r2, r3, #3
 8006a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a48:	4413      	add	r3, r2
 8006a4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5e:	801a      	strh	r2, [r3, #0]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10a      	bne.n	8006a7e <USB_ActivateEndpoint+0x70a>
 8006a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7a:	801a      	strh	r2, [r3, #0]
 8006a7c:	e05b      	b.n	8006b36 <USB_ActivateEndpoint+0x7c2>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a84:	d81c      	bhi.n	8006ac0 <USB_ActivateEndpoint+0x74c>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	085b      	lsrs	r3, r3, #1
 8006a8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d004      	beq.n	8006aa6 <USB_ActivateEndpoint+0x732>
 8006a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	029b      	lsls	r3, r3, #10
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006abc:	801a      	strh	r2, [r3, #0]
 8006abe:	e03a      	b.n	8006b36 <USB_ActivateEndpoint+0x7c2>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	095b      	lsrs	r3, r3, #5
 8006ac6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f003 031f 	and.w	r3, r3, #31
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d104      	bne.n	8006ae0 <USB_ActivateEndpoint+0x76c>
 8006ad6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ada:	3b01      	subs	r3, #1
 8006adc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	029b      	lsls	r3, r3, #10
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	4313      	orrs	r3, r2
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	e018      	b.n	8006b36 <USB_ActivateEndpoint+0x7c2>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d114      	bne.n	8006b36 <USB_ActivateEndpoint+0x7c2>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	461a      	mov	r2, r3
 8006b16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b18:	4413      	add	r3, r2
 8006b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	00da      	lsls	r2, r3, #3
 8006b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b24:	4413      	add	r3, r2
 8006b26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b34:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006b4e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b50:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b54:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006b56:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b58:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	441a      	add	r2, r3
 8006b68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b94:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	441a      	add	r2, r3
 8006ba0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006ba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ba6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	8013      	strh	r3, [r2, #0]
 8006bb6:	e0bc      	b.n	8006d32 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8006bc8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006bcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01d      	beq.n	8006c10 <USB_ActivateEndpoint+0x89c>
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bea:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	441a      	add	r2, r3
 8006bf8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006bfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8006c20:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01d      	beq.n	8006c68 <USB_ActivateEndpoint+0x8f4>
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c42:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	441a      	add	r2, r3
 8006c50:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006c54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	78db      	ldrb	r3, [r3, #3]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d024      	beq.n	8006cba <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	881b      	ldrh	r3, [r3, #0]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c86:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006c8a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006c8e:	f083 0320 	eor.w	r3, r3, #32
 8006c92:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	441a      	add	r2, r3
 8006ca0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006ca4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ca8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	8013      	strh	r3, [r2, #0]
 8006cb8:	e01d      	b.n	8006cf6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cd0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	441a      	add	r2, r3
 8006cde:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006ce2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ce6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d0c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	441a      	add	r2, r3
 8006d1a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006d1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006d32:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	379c      	adds	r7, #156	@ 0x9c
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop

08006d44 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b08d      	sub	sp, #52	@ 0x34
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	7b1b      	ldrb	r3, [r3, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f040 808e 	bne.w	8006e74 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	785b      	ldrb	r3, [r3, #1]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d044      	beq.n	8006dea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	81bb      	strh	r3, [r7, #12]
 8006d6e:	89bb      	ldrh	r3, [r7, #12]
 8006d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d01b      	beq.n	8006db0 <USB_DeactivateEndpoint+0x6c>
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d8e:	817b      	strh	r3, [r7, #10]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	441a      	add	r2, r3
 8006d9a:	897b      	ldrh	r3, [r7, #10]
 8006d9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006da0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006da4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006da8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dc6:	813b      	strh	r3, [r7, #8]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	441a      	add	r2, r3
 8006dd2:	893b      	ldrh	r3, [r7, #8]
 8006dd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	8013      	strh	r3, [r2, #0]
 8006de8:	e192      	b.n	8007110 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	827b      	strh	r3, [r7, #18]
 8006df8:	8a7b      	ldrh	r3, [r7, #18]
 8006dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d01b      	beq.n	8006e3a <USB_DeactivateEndpoint+0xf6>
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e18:	823b      	strh	r3, [r7, #16]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	441a      	add	r2, r3
 8006e24:	8a3b      	ldrh	r3, [r7, #16]
 8006e26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e50:	81fb      	strh	r3, [r7, #14]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	441a      	add	r2, r3
 8006e5c:	89fb      	ldrh	r3, [r7, #14]
 8006e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	8013      	strh	r3, [r2, #0]
 8006e72:	e14d      	b.n	8007110 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	785b      	ldrb	r3, [r3, #1]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f040 80a5 	bne.w	8006fc8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	843b      	strh	r3, [r7, #32]
 8006e8c:	8c3b      	ldrh	r3, [r7, #32]
 8006e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d01b      	beq.n	8006ece <USB_DeactivateEndpoint+0x18a>
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eac:	83fb      	strh	r3, [r7, #30]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	441a      	add	r2, r3
 8006eb8:	8bfb      	ldrh	r3, [r7, #30]
 8006eba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ebe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ec2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	83bb      	strh	r3, [r7, #28]
 8006edc:	8bbb      	ldrh	r3, [r7, #28]
 8006ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d01b      	beq.n	8006f1e <USB_DeactivateEndpoint+0x1da>
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006efc:	837b      	strh	r3, [r7, #26]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	441a      	add	r2, r3
 8006f08:	8b7b      	ldrh	r3, [r7, #26]
 8006f0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f34:	833b      	strh	r3, [r7, #24]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	441a      	add	r2, r3
 8006f40:	8b3b      	ldrh	r3, [r7, #24]
 8006f42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6c:	82fb      	strh	r3, [r7, #22]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	441a      	add	r2, r3
 8006f78:	8afb      	ldrh	r3, [r7, #22]
 8006f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fa4:	82bb      	strh	r3, [r7, #20]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	441a      	add	r2, r3
 8006fb0:	8abb      	ldrh	r3, [r7, #20]
 8006fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	8013      	strh	r3, [r2, #0]
 8006fc6:	e0a3      	b.n	8007110 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006fd6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006fd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01b      	beq.n	8007018 <USB_DeactivateEndpoint+0x2d4>
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	441a      	add	r2, r3
 8007002:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800700c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007014:	b29b      	uxth	r3, r3
 8007016:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007026:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800702c:	2b00      	cmp	r3, #0
 800702e:	d01b      	beq.n	8007068 <USB_DeactivateEndpoint+0x324>
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	b29b      	uxth	r3, r3
 800703e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007046:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	441a      	add	r2, r3
 8007052:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007054:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007058:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800705c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007060:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007064:	b29b      	uxth	r3, r3
 8007066:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800707a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800707e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	441a      	add	r2, r3
 800708a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800708c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007090:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007094:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007098:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800709c:	b29b      	uxth	r3, r3
 800709e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	441a      	add	r2, r3
 80070c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ee:	847b      	strh	r3, [r7, #34]	@ 0x22
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	441a      	add	r2, r3
 80070fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80070fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007104:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800710c:	b29b      	uxth	r3, r3
 800710e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3734      	adds	r7, #52	@ 0x34
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b0ac      	sub	sp, #176	@ 0xb0
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	785b      	ldrb	r3, [r3, #1]
 800712c:	2b01      	cmp	r3, #1
 800712e:	f040 84ca 	bne.w	8007ac6 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	699a      	ldr	r2, [r3, #24]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	429a      	cmp	r2, r3
 800713c:	d904      	bls.n	8007148 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007146:	e003      	b.n	8007150 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	7b1b      	ldrb	r3, [r3, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d122      	bne.n	800719e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	6959      	ldr	r1, [r3, #20]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	88da      	ldrh	r2, [r3, #6]
 8007160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007164:	b29b      	uxth	r3, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 febd 	bl	8007ee6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	613b      	str	r3, [r7, #16]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007176:	b29b      	uxth	r3, r3
 8007178:	461a      	mov	r2, r3
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	4413      	add	r3, r2
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	00da      	lsls	r2, r3, #3
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	4413      	add	r3, r2
 800718a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800718e:	60fb      	str	r3, [r7, #12]
 8007190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007194:	b29a      	uxth	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	801a      	strh	r2, [r3, #0]
 800719a:	f000 bc6f 	b.w	8007a7c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	78db      	ldrb	r3, [r3, #3]
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	f040 831e 	bne.w	80077e4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	6a1a      	ldr	r2, [r3, #32]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	f240 82cf 	bls.w	8007754 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071cc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	441a      	add	r2, r3
 80071da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80071de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071e6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80071ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	6a1a      	ldr	r2, [r3, #32]
 80071f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071fa:	1ad2      	subs	r2, r2, r3
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b29b      	uxth	r3, r3
 800720e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 814f 	beq.w	80074b6 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	633b      	str	r3, [r7, #48]	@ 0x30
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d16b      	bne.n	80072fc <USB_EPStartXfer+0x1de>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800722e:	b29b      	uxth	r3, r3
 8007230:	461a      	mov	r2, r3
 8007232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007234:	4413      	add	r3, r2
 8007236:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	00da      	lsls	r2, r3, #3
 800723e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007240:	4413      	add	r3, r2
 8007242:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007246:	627b      	str	r3, [r7, #36]	@ 0x24
 8007248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	b29b      	uxth	r3, r3
 800724e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007252:	b29a      	uxth	r2, r3
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	801a      	strh	r2, [r3, #0]
 8007258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <USB_EPStartXfer+0x158>
 8007260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	b29b      	uxth	r3, r3
 8007266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800726a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726e:	b29a      	uxth	r2, r3
 8007270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007272:	801a      	strh	r2, [r3, #0]
 8007274:	e05b      	b.n	800732e <USB_EPStartXfer+0x210>
 8007276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800727a:	2b3e      	cmp	r3, #62	@ 0x3e
 800727c:	d81c      	bhi.n	80072b8 <USB_EPStartXfer+0x19a>
 800727e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007282:	085b      	lsrs	r3, r3, #1
 8007284:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b00      	cmp	r3, #0
 8007292:	d004      	beq.n	800729e <USB_EPStartXfer+0x180>
 8007294:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007298:	3301      	adds	r3, #1
 800729a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	029b      	lsls	r3, r3, #10
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	4313      	orrs	r3, r2
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b4:	801a      	strh	r2, [r3, #0]
 80072b6:	e03a      	b.n	800732e <USB_EPStartXfer+0x210>
 80072b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072bc:	095b      	lsrs	r3, r3, #5
 80072be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80072c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072c6:	f003 031f 	and.w	r3, r3, #31
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d104      	bne.n	80072d8 <USB_EPStartXfer+0x1ba>
 80072ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072d2:	3b01      	subs	r3, #1
 80072d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80072d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	b29a      	uxth	r2, r3
 80072de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	029b      	lsls	r3, r3, #10
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	4313      	orrs	r3, r2
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f8:	801a      	strh	r2, [r3, #0]
 80072fa:	e018      	b.n	800732e <USB_EPStartXfer+0x210>
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d114      	bne.n	800732e <USB_EPStartXfer+0x210>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800730a:	b29b      	uxth	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	4413      	add	r3, r2
 8007312:	633b      	str	r3, [r7, #48]	@ 0x30
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	00da      	lsls	r2, r3, #3
 800731a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731c:	4413      	add	r3, r2
 800731e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007322:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007324:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007328:	b29a      	uxth	r2, r3
 800732a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800732c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	895b      	ldrh	r3, [r3, #10]
 8007332:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	6959      	ldr	r1, [r3, #20]
 800733a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800733e:	b29b      	uxth	r3, r3
 8007340:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fdce 	bl	8007ee6 <USB_WritePMA>
            ep->xfer_buff += len;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	695a      	ldr	r2, [r3, #20]
 800734e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007352:	441a      	add	r2, r3
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	6a1a      	ldr	r2, [r3, #32]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	429a      	cmp	r2, r3
 8007362:	d907      	bls.n	8007374 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	6a1a      	ldr	r2, [r3, #32]
 8007368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800736c:	1ad2      	subs	r2, r2, r3
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	621a      	str	r2, [r3, #32]
 8007372:	e006      	b.n	8007382 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2200      	movs	r2, #0
 8007380:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d16b      	bne.n	8007462 <USB_EPStartXfer+0x344>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007394:	b29b      	uxth	r3, r3
 8007396:	461a      	mov	r2, r3
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	4413      	add	r3, r2
 800739c:	61bb      	str	r3, [r7, #24]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	00da      	lsls	r2, r3, #3
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	4413      	add	r3, r2
 80073a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80073ac:	617b      	str	r3, [r7, #20]
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	801a      	strh	r2, [r3, #0]
 80073be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10a      	bne.n	80073dc <USB_EPStartXfer+0x2be>
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	801a      	strh	r2, [r3, #0]
 80073da:	e05d      	b.n	8007498 <USB_EPStartXfer+0x37a>
 80073dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80073e2:	d81c      	bhi.n	800741e <USB_EPStartXfer+0x300>
 80073e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073e8:	085b      	lsrs	r3, r3, #1
 80073ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80073ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d004      	beq.n	8007404 <USB_EPStartXfer+0x2e6>
 80073fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80073fe:	3301      	adds	r3, #1
 8007400:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	b29a      	uxth	r2, r3
 800740a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800740e:	b29b      	uxth	r3, r3
 8007410:	029b      	lsls	r3, r3, #10
 8007412:	b29b      	uxth	r3, r3
 8007414:	4313      	orrs	r3, r2
 8007416:	b29a      	uxth	r2, r3
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	801a      	strh	r2, [r3, #0]
 800741c:	e03c      	b.n	8007498 <USB_EPStartXfer+0x37a>
 800741e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007422:	095b      	lsrs	r3, r3, #5
 8007424:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800742c:	f003 031f 	and.w	r3, r3, #31
 8007430:	2b00      	cmp	r3, #0
 8007432:	d104      	bne.n	800743e <USB_EPStartXfer+0x320>
 8007434:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007438:	3b01      	subs	r3, #1
 800743a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29a      	uxth	r2, r3
 8007444:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007448:	b29b      	uxth	r3, r3
 800744a:	029b      	lsls	r3, r3, #10
 800744c:	b29b      	uxth	r3, r3
 800744e:	4313      	orrs	r3, r2
 8007450:	b29b      	uxth	r3, r3
 8007452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745a:	b29a      	uxth	r2, r3
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	801a      	strh	r2, [r3, #0]
 8007460:	e01a      	b.n	8007498 <USB_EPStartXfer+0x37a>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	785b      	ldrb	r3, [r3, #1]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d116      	bne.n	8007498 <USB_EPStartXfer+0x37a>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	623b      	str	r3, [r7, #32]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007474:	b29b      	uxth	r3, r3
 8007476:	461a      	mov	r2, r3
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	4413      	add	r3, r2
 800747c:	623b      	str	r3, [r7, #32]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	00da      	lsls	r2, r3, #3
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	4413      	add	r3, r2
 8007488:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800748c:	61fb      	str	r3, [r7, #28]
 800748e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007492:	b29a      	uxth	r2, r3
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	891b      	ldrh	r3, [r3, #8]
 800749c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	6959      	ldr	r1, [r3, #20]
 80074a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fd19 	bl	8007ee6 <USB_WritePMA>
 80074b4:	e2e2      	b.n	8007a7c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	785b      	ldrb	r3, [r3, #1]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d16b      	bne.n	8007596 <USB_EPStartXfer+0x478>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	461a      	mov	r2, r3
 80074cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074ce:	4413      	add	r3, r2
 80074d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	00da      	lsls	r2, r3, #3
 80074d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074da:	4413      	add	r3, r2
 80074dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80074e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074f0:	801a      	strh	r2, [r3, #0]
 80074f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10a      	bne.n	8007510 <USB_EPStartXfer+0x3f2>
 80074fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007508:	b29a      	uxth	r2, r3
 800750a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800750c:	801a      	strh	r2, [r3, #0]
 800750e:	e05d      	b.n	80075cc <USB_EPStartXfer+0x4ae>
 8007510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007514:	2b3e      	cmp	r3, #62	@ 0x3e
 8007516:	d81c      	bhi.n	8007552 <USB_EPStartXfer+0x434>
 8007518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800751c:	085b      	lsrs	r3, r3, #1
 800751e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d004      	beq.n	8007538 <USB_EPStartXfer+0x41a>
 800752e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007532:	3301      	adds	r3, #1
 8007534:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29a      	uxth	r2, r3
 800753e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007542:	b29b      	uxth	r3, r3
 8007544:	029b      	lsls	r3, r3, #10
 8007546:	b29b      	uxth	r3, r3
 8007548:	4313      	orrs	r3, r2
 800754a:	b29a      	uxth	r2, r3
 800754c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800754e:	801a      	strh	r2, [r3, #0]
 8007550:	e03c      	b.n	80075cc <USB_EPStartXfer+0x4ae>
 8007552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007556:	095b      	lsrs	r3, r3, #5
 8007558:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800755c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007560:	f003 031f 	and.w	r3, r3, #31
 8007564:	2b00      	cmp	r3, #0
 8007566:	d104      	bne.n	8007572 <USB_EPStartXfer+0x454>
 8007568:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800756c:	3b01      	subs	r3, #1
 800756e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	b29a      	uxth	r2, r3
 8007578:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800757c:	b29b      	uxth	r3, r3
 800757e:	029b      	lsls	r3, r3, #10
 8007580:	b29b      	uxth	r3, r3
 8007582:	4313      	orrs	r3, r2
 8007584:	b29b      	uxth	r3, r3
 8007586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800758a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800758e:	b29a      	uxth	r2, r3
 8007590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007592:	801a      	strh	r2, [r3, #0]
 8007594:	e01a      	b.n	80075cc <USB_EPStartXfer+0x4ae>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d116      	bne.n	80075cc <USB_EPStartXfer+0x4ae>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	461a      	mov	r2, r3
 80075ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ae:	4413      	add	r3, r2
 80075b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	00da      	lsls	r2, r3, #3
 80075b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ba:	4413      	add	r3, r2
 80075bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80075c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	891b      	ldrh	r3, [r3, #8]
 80075d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	6959      	ldr	r1, [r3, #20]
 80075d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075dc:	b29b      	uxth	r3, r3
 80075de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fc7f 	bl	8007ee6 <USB_WritePMA>
            ep->xfer_buff += len;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	695a      	ldr	r2, [r3, #20]
 80075ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075f0:	441a      	add	r2, r3
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	6a1a      	ldr	r2, [r3, #32]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d907      	bls.n	8007612 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	6a1a      	ldr	r2, [r3, #32]
 8007606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800760a:	1ad2      	subs	r2, r2, r3
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	621a      	str	r2, [r3, #32]
 8007610:	e006      	b.n	8007620 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2200      	movs	r2, #0
 800761e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	643b      	str	r3, [r7, #64]	@ 0x40
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	785b      	ldrb	r3, [r3, #1]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d16b      	bne.n	8007704 <USB_EPStartXfer+0x5e6>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007636:	b29b      	uxth	r3, r3
 8007638:	461a      	mov	r2, r3
 800763a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763c:	4413      	add	r3, r2
 800763e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	00da      	lsls	r2, r3, #3
 8007646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007648:	4413      	add	r3, r2
 800764a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800764e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800765a:	b29a      	uxth	r2, r3
 800765c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800765e:	801a      	strh	r2, [r3, #0]
 8007660:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10a      	bne.n	800767e <USB_EPStartXfer+0x560>
 8007668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	b29b      	uxth	r3, r3
 800766e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007676:	b29a      	uxth	r2, r3
 8007678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800767a:	801a      	strh	r2, [r3, #0]
 800767c:	e05b      	b.n	8007736 <USB_EPStartXfer+0x618>
 800767e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007682:	2b3e      	cmp	r3, #62	@ 0x3e
 8007684:	d81c      	bhi.n	80076c0 <USB_EPStartXfer+0x5a2>
 8007686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800768a:	085b      	lsrs	r3, r3, #1
 800768c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007690:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d004      	beq.n	80076a6 <USB_EPStartXfer+0x588>
 800769c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076a0:	3301      	adds	r3, #1
 80076a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	029b      	lsls	r3, r3, #10
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	4313      	orrs	r3, r2
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076bc:	801a      	strh	r2, [r3, #0]
 80076be:	e03a      	b.n	8007736 <USB_EPStartXfer+0x618>
 80076c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076c4:	095b      	lsrs	r3, r3, #5
 80076c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076ce:	f003 031f 	and.w	r3, r3, #31
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d104      	bne.n	80076e0 <USB_EPStartXfer+0x5c2>
 80076d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076da:	3b01      	subs	r3, #1
 80076dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	029b      	lsls	r3, r3, #10
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	4313      	orrs	r3, r2
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007700:	801a      	strh	r2, [r3, #0]
 8007702:	e018      	b.n	8007736 <USB_EPStartXfer+0x618>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	785b      	ldrb	r3, [r3, #1]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d114      	bne.n	8007736 <USB_EPStartXfer+0x618>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007712:	b29b      	uxth	r3, r3
 8007714:	461a      	mov	r2, r3
 8007716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007718:	4413      	add	r3, r2
 800771a:	643b      	str	r3, [r7, #64]	@ 0x40
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	00da      	lsls	r2, r3, #3
 8007722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007724:	4413      	add	r3, r2
 8007726:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800772a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800772c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007730:	b29a      	uxth	r2, r3
 8007732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007734:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	895b      	ldrh	r3, [r3, #10]
 800773a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	6959      	ldr	r1, [r3, #20]
 8007742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007746:	b29b      	uxth	r3, r3
 8007748:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fbca 	bl	8007ee6 <USB_WritePMA>
 8007752:	e193      	b.n	8007a7c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	b29b      	uxth	r3, r3
 800776a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800776e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007772:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	441a      	add	r2, r3
 8007780:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007784:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007788:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800778c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007794:	b29b      	uxth	r3, r3
 8007796:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077a8:	4413      	add	r3, r2
 80077aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	00da      	lsls	r2, r3, #3
 80077b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077b4:	4413      	add	r3, r2
 80077b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80077ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	891b      	ldrh	r3, [r3, #8]
 80077ca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	6959      	ldr	r1, [r3, #20]
 80077d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fb82 	bl	8007ee6 <USB_WritePMA>
 80077e2:	e14b      	b.n	8007a7c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	6a1a      	ldr	r2, [r3, #32]
 80077e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077ec:	1ad2      	subs	r2, r2, r3
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 809a 	beq.w	800793e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	673b      	str	r3, [r7, #112]	@ 0x70
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	785b      	ldrb	r3, [r3, #1]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d16b      	bne.n	80078ee <USB_EPStartXfer+0x7d0>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	66bb      	str	r3, [r7, #104]	@ 0x68
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007820:	b29b      	uxth	r3, r3
 8007822:	461a      	mov	r2, r3
 8007824:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007826:	4413      	add	r3, r2
 8007828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	00da      	lsls	r2, r3, #3
 8007830:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007832:	4413      	add	r3, r2
 8007834:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007838:	667b      	str	r3, [r7, #100]	@ 0x64
 800783a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800783c:	881b      	ldrh	r3, [r3, #0]
 800783e:	b29b      	uxth	r3, r3
 8007840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007844:	b29a      	uxth	r2, r3
 8007846:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007848:	801a      	strh	r2, [r3, #0]
 800784a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10a      	bne.n	8007868 <USB_EPStartXfer+0x74a>
 8007852:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800785c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007860:	b29a      	uxth	r2, r3
 8007862:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007864:	801a      	strh	r2, [r3, #0]
 8007866:	e05b      	b.n	8007920 <USB_EPStartXfer+0x802>
 8007868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800786c:	2b3e      	cmp	r3, #62	@ 0x3e
 800786e:	d81c      	bhi.n	80078aa <USB_EPStartXfer+0x78c>
 8007870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007874:	085b      	lsrs	r3, r3, #1
 8007876:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800787a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d004      	beq.n	8007890 <USB_EPStartXfer+0x772>
 8007886:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800788a:	3301      	adds	r3, #1
 800788c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007890:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	b29a      	uxth	r2, r3
 8007896:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800789a:	b29b      	uxth	r3, r3
 800789c:	029b      	lsls	r3, r3, #10
 800789e:	b29b      	uxth	r3, r3
 80078a0:	4313      	orrs	r3, r2
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078a6:	801a      	strh	r2, [r3, #0]
 80078a8:	e03a      	b.n	8007920 <USB_EPStartXfer+0x802>
 80078aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078b8:	f003 031f 	and.w	r3, r3, #31
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d104      	bne.n	80078ca <USB_EPStartXfer+0x7ac>
 80078c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078c4:	3b01      	subs	r3, #1
 80078c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078cc:	881b      	ldrh	r3, [r3, #0]
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	029b      	lsls	r3, r3, #10
 80078d8:	b29b      	uxth	r3, r3
 80078da:	4313      	orrs	r3, r2
 80078dc:	b29b      	uxth	r3, r3
 80078de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078ea:	801a      	strh	r2, [r3, #0]
 80078ec:	e018      	b.n	8007920 <USB_EPStartXfer+0x802>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d114      	bne.n	8007920 <USB_EPStartXfer+0x802>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	461a      	mov	r2, r3
 8007900:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007902:	4413      	add	r3, r2
 8007904:	673b      	str	r3, [r7, #112]	@ 0x70
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	00da      	lsls	r2, r3, #3
 800790c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800790e:	4413      	add	r3, r2
 8007910:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007914:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800791a:	b29a      	uxth	r2, r3
 800791c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800791e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	895b      	ldrh	r3, [r3, #10]
 8007924:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	6959      	ldr	r1, [r3, #20]
 800792c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007930:	b29b      	uxth	r3, r3
 8007932:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fad5 	bl	8007ee6 <USB_WritePMA>
 800793c:	e09e      	b.n	8007a7c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	785b      	ldrb	r3, [r3, #1]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d16b      	bne.n	8007a1e <USB_EPStartXfer+0x900>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007950:	b29b      	uxth	r3, r3
 8007952:	461a      	mov	r2, r3
 8007954:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007956:	4413      	add	r3, r2
 8007958:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	00da      	lsls	r2, r3, #3
 8007960:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007962:	4413      	add	r3, r2
 8007964:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007968:	67bb      	str	r3, [r7, #120]	@ 0x78
 800796a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	b29b      	uxth	r3, r3
 8007970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007974:	b29a      	uxth	r2, r3
 8007976:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007978:	801a      	strh	r2, [r3, #0]
 800797a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10a      	bne.n	8007998 <USB_EPStartXfer+0x87a>
 8007982:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	b29b      	uxth	r3, r3
 8007988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800798c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007990:	b29a      	uxth	r2, r3
 8007992:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007994:	801a      	strh	r2, [r3, #0]
 8007996:	e063      	b.n	8007a60 <USB_EPStartXfer+0x942>
 8007998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800799c:	2b3e      	cmp	r3, #62	@ 0x3e
 800799e:	d81c      	bhi.n	80079da <USB_EPStartXfer+0x8bc>
 80079a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079a4:	085b      	lsrs	r3, r3, #1
 80079a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80079aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d004      	beq.n	80079c0 <USB_EPStartXfer+0x8a2>
 80079b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80079ba:	3301      	adds	r3, #1
 80079bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80079c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	029b      	lsls	r3, r3, #10
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	4313      	orrs	r3, r2
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079d6:	801a      	strh	r2, [r3, #0]
 80079d8:	e042      	b.n	8007a60 <USB_EPStartXfer+0x942>
 80079da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80079e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079e8:	f003 031f 	and.w	r3, r3, #31
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d104      	bne.n	80079fa <USB_EPStartXfer+0x8dc>
 80079f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80079f4:	3b01      	subs	r3, #1
 80079f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80079fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	029b      	lsls	r3, r3, #10
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a1a:	801a      	strh	r2, [r3, #0]
 8007a1c:	e020      	b.n	8007a60 <USB_EPStartXfer+0x942>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	785b      	ldrb	r3, [r3, #1]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d11c      	bne.n	8007a60 <USB_EPStartXfer+0x942>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	461a      	mov	r2, r3
 8007a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	00da      	lsls	r2, r3, #3
 8007a46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a5e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	891b      	ldrh	r3, [r3, #8]
 8007a64:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	6959      	ldr	r1, [r3, #20]
 8007a6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fa35 	bl	8007ee6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a92:	817b      	strh	r3, [r7, #10]
 8007a94:	897b      	ldrh	r3, [r7, #10]
 8007a96:	f083 0310 	eor.w	r3, r3, #16
 8007a9a:	817b      	strh	r3, [r7, #10]
 8007a9c:	897b      	ldrh	r3, [r7, #10]
 8007a9e:	f083 0320 	eor.w	r3, r3, #32
 8007aa2:	817b      	strh	r3, [r7, #10]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	441a      	add	r2, r3
 8007aae:	897b      	ldrh	r3, [r7, #10]
 8007ab0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ab4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ab8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	8013      	strh	r3, [r2, #0]
 8007ac4:	e0d5      	b.n	8007c72 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	7b1b      	ldrb	r3, [r3, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d156      	bne.n	8007b7c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d122      	bne.n	8007b1c <USB_EPStartXfer+0x9fe>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	78db      	ldrb	r3, [r3, #3]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d11e      	bne.n	8007b1c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007af0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007af4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	441a      	add	r2, r3
 8007b02:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007b06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b0e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	8013      	strh	r3, [r2, #0]
 8007b1a:	e01d      	b.n	8007b58 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b32:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	441a      	add	r2, r3
 8007b40:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8007b44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	699a      	ldr	r2, [r3, #24]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d907      	bls.n	8007b74 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	699a      	ldr	r2, [r3, #24]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	1ad2      	subs	r2, r2, r3
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	619a      	str	r2, [r3, #24]
 8007b72:	e054      	b.n	8007c1e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2200      	movs	r2, #0
 8007b78:	619a      	str	r2, [r3, #24]
 8007b7a:	e050      	b.n	8007c1e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	78db      	ldrb	r3, [r3, #3]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d142      	bne.n	8007c0a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d048      	beq.n	8007c1e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	881b      	ldrh	r3, [r3, #0]
 8007b98:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007b9c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007ba0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d005      	beq.n	8007bb4 <USB_EPStartXfer+0xa96>
 8007ba8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10b      	bne.n	8007bcc <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007bb4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007bb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d12e      	bne.n	8007c1e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007bc0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d128      	bne.n	8007c1e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007be2:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	441a      	add	r2, r3
 8007bf0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007bf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	8013      	strh	r3, [r2, #0]
 8007c08:	e009      	b.n	8007c1e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	78db      	ldrb	r3, [r3, #3]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d103      	bne.n	8007c1a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2200      	movs	r2, #0
 8007c16:	619a      	str	r2, [r3, #24]
 8007c18:	e001      	b.n	8007c1e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e02a      	b.n	8007c74 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	881b      	ldrh	r3, [r3, #0]
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c34:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007c38:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007c3c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c40:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007c44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007c48:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c4c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	441a      	add	r2, r3
 8007c5a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007c5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	37b0      	adds	r7, #176	@ 0xb0
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	785b      	ldrb	r3, [r3, #1]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d020      	beq.n	8007cd0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ca0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ca4:	81bb      	strh	r3, [r7, #12]
 8007ca6:	89bb      	ldrh	r3, [r7, #12]
 8007ca8:	f083 0310 	eor.w	r3, r3, #16
 8007cac:	81bb      	strh	r3, [r7, #12]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	441a      	add	r2, r3
 8007cb8:	89bb      	ldrh	r3, [r7, #12]
 8007cba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	8013      	strh	r3, [r2, #0]
 8007cce:	e01f      	b.n	8007d10 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ce6:	81fb      	strh	r3, [r7, #14]
 8007ce8:	89fb      	ldrh	r3, [r7, #14]
 8007cea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007cee:	81fb      	strh	r3, [r7, #14]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	441a      	add	r2, r3
 8007cfa:	89fb      	ldrh	r3, [r7, #14]
 8007cfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b087      	sub	sp, #28
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	785b      	ldrb	r3, [r3, #1]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d04c      	beq.n	8007dca <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	823b      	strh	r3, [r7, #16]
 8007d3e:	8a3b      	ldrh	r3, [r7, #16]
 8007d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d01b      	beq.n	8007d80 <USB_EPClearStall+0x62>
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4413      	add	r3, r2
 8007d52:	881b      	ldrh	r3, [r3, #0]
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d5e:	81fb      	strh	r3, [r7, #14]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	441a      	add	r2, r3
 8007d6a:	89fb      	ldrh	r3, [r7, #14]
 8007d6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	78db      	ldrb	r3, [r3, #3]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d06c      	beq.n	8007e62 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d9e:	81bb      	strh	r3, [r7, #12]
 8007da0:	89bb      	ldrh	r3, [r7, #12]
 8007da2:	f083 0320 	eor.w	r3, r3, #32
 8007da6:	81bb      	strh	r3, [r7, #12]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	441a      	add	r2, r3
 8007db2:	89bb      	ldrh	r3, [r7, #12]
 8007db4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007db8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	8013      	strh	r3, [r2, #0]
 8007dc8:	e04b      	b.n	8007e62 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	82fb      	strh	r3, [r7, #22]
 8007dd8:	8afb      	ldrh	r3, [r7, #22]
 8007dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d01b      	beq.n	8007e1a <USB_EPClearStall+0xfc>
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007df8:	82bb      	strh	r3, [r7, #20]
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	441a      	add	r2, r3
 8007e04:	8abb      	ldrh	r3, [r7, #20]
 8007e06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e30:	827b      	strh	r3, [r7, #18]
 8007e32:	8a7b      	ldrh	r3, [r7, #18]
 8007e34:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e38:	827b      	strh	r3, [r7, #18]
 8007e3a:	8a7b      	ldrh	r3, [r7, #18]
 8007e3c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e40:	827b      	strh	r3, [r7, #18]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	441a      	add	r2, r3
 8007e4c:	8a7b      	ldrh	r3, [r7, #18]
 8007e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	371c      	adds	r7, #28
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007e7c:	78fb      	ldrb	r3, [r7, #3]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d103      	bne.n	8007e8a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2280      	movs	r2, #128	@ 0x80
 8007e86:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b085      	sub	sp, #20
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b08b      	sub	sp, #44	@ 0x2c
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	80fb      	strh	r3, [r7, #6]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007efc:	88bb      	ldrh	r3, [r7, #4]
 8007efe:	3301      	adds	r3, #1
 8007f00:	085b      	lsrs	r3, r3, #1
 8007f02:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f0c:	88fa      	ldrh	r2, [r7, #6]
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	4413      	add	r3, r2
 8007f12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f16:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f1c:	e01b      	b.n	8007f56 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	3301      	adds	r3, #1
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	021b      	lsls	r3, r3, #8
 8007f2c:	b21a      	sxth	r2, r3
 8007f2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	b21b      	sxth	r3, r3
 8007f36:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	8a7a      	ldrh	r2, [r7, #18]
 8007f3c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	3302      	adds	r3, #2
 8007f42:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	3301      	adds	r3, #1
 8007f48:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f52:	3b01      	subs	r3, #1
 8007f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e0      	bne.n	8007f1e <USB_WritePMA+0x38>
  }
}
 8007f5c:	bf00      	nop
 8007f5e:	bf00      	nop
 8007f60:	372c      	adds	r7, #44	@ 0x2c
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b08b      	sub	sp, #44	@ 0x2c
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	60b9      	str	r1, [r7, #8]
 8007f74:	4611      	mov	r1, r2
 8007f76:	461a      	mov	r2, r3
 8007f78:	460b      	mov	r3, r1
 8007f7a:	80fb      	strh	r3, [r7, #6]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007f80:	88bb      	ldrh	r3, [r7, #4]
 8007f82:	085b      	lsrs	r3, r3, #1
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f90:	88fa      	ldrh	r2, [r7, #6]
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f9a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fa0:	e018      	b.n	8007fd4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	3302      	adds	r3, #2
 8007fae:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	0a1b      	lsrs	r3, r3, #8
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e3      	bne.n	8007fa2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007fda:	88bb      	ldrh	r3, [r7, #4]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d007      	beq.n	8007ff6 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	701a      	strb	r2, [r3, #0]
  }
}
 8007ff6:	bf00      	nop
 8007ff8:	372c      	adds	r7, #44	@ 0x2c
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	460b      	mov	r3, r1
 800800c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800800e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008012:	f002 f8f9 	bl	800a208 <USBD_static_malloc>
 8008016:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d105      	bne.n	800802a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8008026:	2302      	movs	r3, #2
 8008028:	e066      	b.n	80080f8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	7c1b      	ldrb	r3, [r3, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d119      	bne.n	800806e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800803a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800803e:	2202      	movs	r2, #2
 8008040:	2181      	movs	r1, #129	@ 0x81
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f001 ff87 	bl	8009f56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800804e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008052:	2202      	movs	r2, #2
 8008054:	2101      	movs	r1, #1
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f001 ff7d 	bl	8009f56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2210      	movs	r2, #16
 8008068:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800806c:	e016      	b.n	800809c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800806e:	2340      	movs	r3, #64	@ 0x40
 8008070:	2202      	movs	r2, #2
 8008072:	2181      	movs	r1, #129	@ 0x81
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f001 ff6e 	bl	8009f56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008080:	2340      	movs	r3, #64	@ 0x40
 8008082:	2202      	movs	r2, #2
 8008084:	2101      	movs	r1, #1
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 ff65 	bl	8009f56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2210      	movs	r2, #16
 8008098:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800809c:	2308      	movs	r3, #8
 800809e:	2203      	movs	r2, #3
 80080a0:	2182      	movs	r1, #130	@ 0x82
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f001 ff57 	bl	8009f56 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	7c1b      	ldrb	r3, [r3, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d109      	bne.n	80080e6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080dc:	2101      	movs	r1, #1
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f002 f828 	bl	800a134 <USBD_LL_PrepareReceive>
 80080e4:	e007      	b.n	80080f6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080ec:	2340      	movs	r3, #64	@ 0x40
 80080ee:	2101      	movs	r1, #1
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f002 f81f 	bl	800a134 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800810c:	2181      	movs	r1, #129	@ 0x81
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 ff47 	bl	8009fa2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800811a:	2101      	movs	r1, #1
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f001 ff40 	bl	8009fa2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800812a:	2182      	movs	r1, #130	@ 0x82
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f001 ff38 	bl	8009fa2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00e      	beq.n	800816a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800815c:	4618      	mov	r0, r3
 800815e:	f002 f861 	bl	800a224 <USBD_static_free>
    pdev->pClassData = NULL;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008184:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008186:	2300      	movs	r3, #0
 8008188:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008198:	2303      	movs	r3, #3
 800819a:	e0af      	b.n	80082fc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d03f      	beq.n	8008228 <USBD_CDC_Setup+0xb4>
 80081a8:	2b20      	cmp	r3, #32
 80081aa:	f040 809f 	bne.w	80082ec <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	88db      	ldrh	r3, [r3, #6]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d02e      	beq.n	8008214 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	b25b      	sxtb	r3, r3
 80081bc:	2b00      	cmp	r3, #0
 80081be:	da16      	bge.n	80081ee <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80081cc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	88d2      	ldrh	r2, [r2, #6]
 80081d2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	88db      	ldrh	r3, [r3, #6]
 80081d8:	2b07      	cmp	r3, #7
 80081da:	bf28      	it	cs
 80081dc:	2307      	movcs	r3, #7
 80081de:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	89fa      	ldrh	r2, [r7, #14]
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f001 facd 	bl	8009786 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80081ec:	e085      	b.n	80082fa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	785a      	ldrb	r2, [r3, #1]
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	88db      	ldrh	r3, [r3, #6]
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008204:	6939      	ldr	r1, [r7, #16]
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	88db      	ldrh	r3, [r3, #6]
 800820a:	461a      	mov	r2, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f001 fae6 	bl	80097de <USBD_CtlPrepareRx>
      break;
 8008212:	e072      	b.n	80082fa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	7850      	ldrb	r0, [r2, #1]
 8008220:	2200      	movs	r2, #0
 8008222:	6839      	ldr	r1, [r7, #0]
 8008224:	4798      	blx	r3
      break;
 8008226:	e068      	b.n	80082fa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	2b0b      	cmp	r3, #11
 800822e:	d852      	bhi.n	80082d6 <USBD_CDC_Setup+0x162>
 8008230:	a201      	add	r2, pc, #4	@ (adr r2, 8008238 <USBD_CDC_Setup+0xc4>)
 8008232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008236:	bf00      	nop
 8008238:	08008269 	.word	0x08008269
 800823c:	080082e5 	.word	0x080082e5
 8008240:	080082d7 	.word	0x080082d7
 8008244:	080082d7 	.word	0x080082d7
 8008248:	080082d7 	.word	0x080082d7
 800824c:	080082d7 	.word	0x080082d7
 8008250:	080082d7 	.word	0x080082d7
 8008254:	080082d7 	.word	0x080082d7
 8008258:	080082d7 	.word	0x080082d7
 800825c:	080082d7 	.word	0x080082d7
 8008260:	08008293 	.word	0x08008293
 8008264:	080082bd 	.word	0x080082bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b03      	cmp	r3, #3
 8008272:	d107      	bne.n	8008284 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008274:	f107 030a 	add.w	r3, r7, #10
 8008278:	2202      	movs	r2, #2
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 fa82 	bl	8009786 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008282:	e032      	b.n	80082ea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 fa0c 	bl	80096a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800828c:	2303      	movs	r3, #3
 800828e:	75fb      	strb	r3, [r7, #23]
          break;
 8008290:	e02b      	b.n	80082ea <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b03      	cmp	r3, #3
 800829c:	d107      	bne.n	80082ae <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800829e:	f107 030d 	add.w	r3, r7, #13
 80082a2:	2201      	movs	r2, #1
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f001 fa6d 	bl	8009786 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082ac:	e01d      	b.n	80082ea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 f9f7 	bl	80096a4 <USBD_CtlError>
            ret = USBD_FAIL;
 80082b6:	2303      	movs	r3, #3
 80082b8:	75fb      	strb	r3, [r7, #23]
          break;
 80082ba:	e016      	b.n	80082ea <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d00f      	beq.n	80082e8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f001 f9ea 	bl	80096a4 <USBD_CtlError>
            ret = USBD_FAIL;
 80082d0:	2303      	movs	r3, #3
 80082d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80082d4:	e008      	b.n	80082e8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 f9e3 	bl	80096a4 <USBD_CtlError>
          ret = USBD_FAIL;
 80082de:	2303      	movs	r3, #3
 80082e0:	75fb      	strb	r3, [r7, #23]
          break;
 80082e2:	e002      	b.n	80082ea <USBD_CDC_Setup+0x176>
          break;
 80082e4:	bf00      	nop
 80082e6:	e008      	b.n	80082fa <USBD_CDC_Setup+0x186>
          break;
 80082e8:	bf00      	nop
      }
      break;
 80082ea:	e006      	b.n	80082fa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 f9d8 	bl	80096a4 <USBD_CtlError>
      ret = USBD_FAIL;
 80082f4:	2303      	movs	r3, #3
 80082f6:	75fb      	strb	r3, [r7, #23]
      break;
 80082f8:	bf00      	nop
  }

  return (uint8_t)ret;
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008316:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008322:	2303      	movs	r3, #3
 8008324:	e04f      	b.n	80083c6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800832c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800832e:	78fa      	ldrb	r2, [r7, #3]
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	4613      	mov	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	440b      	add	r3, r1
 800833c:	3318      	adds	r3, #24
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d029      	beq.n	8008398 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008344:	78fa      	ldrb	r2, [r7, #3]
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	4613      	mov	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	440b      	add	r3, r1
 8008352:	3318      	adds	r3, #24
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	78f9      	ldrb	r1, [r7, #3]
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	460b      	mov	r3, r1
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	440b      	add	r3, r1
 8008360:	00db      	lsls	r3, r3, #3
 8008362:	4403      	add	r3, r0
 8008364:	3320      	adds	r3, #32
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	fbb2 f1f3 	udiv	r1, r2, r3
 800836c:	fb01 f303 	mul.w	r3, r1, r3
 8008370:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008372:	2b00      	cmp	r3, #0
 8008374:	d110      	bne.n	8008398 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008376:	78fa      	ldrb	r2, [r7, #3]
 8008378:	6879      	ldr	r1, [r7, #4]
 800837a:	4613      	mov	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	3318      	adds	r3, #24
 8008386:	2200      	movs	r2, #0
 8008388:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800838a:	78f9      	ldrb	r1, [r7, #3]
 800838c:	2300      	movs	r3, #0
 800838e:	2200      	movs	r2, #0
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 feae 	bl	800a0f2 <USBD_LL_Transmit>
 8008396:	e015      	b.n	80083c4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2200      	movs	r2, #0
 800839c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00b      	beq.n	80083c4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80083c0:	78fa      	ldrb	r2, [r7, #3]
 80083c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	460b      	mov	r3, r1
 80083d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80083e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80083ec:	2303      	movs	r3, #3
 80083ee:	e015      	b.n	800841c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f001 febe 	bl	800a176 <USBD_LL_GetRxDataSize>
 80083fa:	4602      	mov	r2, r0
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008416:	4611      	mov	r1, r2
 8008418:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008432:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800843a:	2303      	movs	r3, #3
 800843c:	e01a      	b.n	8008474 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d014      	beq.n	8008472 <USBD_CDC_EP0_RxReady+0x4e>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800844e:	2bff      	cmp	r3, #255	@ 0xff
 8008450:	d00f      	beq.n	8008472 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8008460:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008468:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	22ff      	movs	r2, #255	@ 0xff
 800846e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2243      	movs	r2, #67	@ 0x43
 8008488:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800848a:	4b03      	ldr	r3, [pc, #12]	@ (8008498 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800848c:	4618      	mov	r0, r3
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	20000094 	.word	0x20000094

0800849c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2243      	movs	r2, #67	@ 0x43
 80084a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80084aa:	4b03      	ldr	r3, [pc, #12]	@ (80084b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	20000050 	.word	0x20000050

080084bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2243      	movs	r2, #67	@ 0x43
 80084c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80084ca:	4b03      	ldr	r3, [pc, #12]	@ (80084d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	200000d8 	.word	0x200000d8

080084dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	220a      	movs	r2, #10
 80084e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80084ea:	4b03      	ldr	r3, [pc, #12]	@ (80084f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	2000000c 	.word	0x2000000c

080084fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800850c:	2303      	movs	r3, #3
 800850e:	e004      	b.n	800851a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008526:	b480      	push	{r7}
 8008528:	b087      	sub	sp, #28
 800852a:	af00      	add	r7, sp, #0
 800852c:	60f8      	str	r0, [r7, #12]
 800852e:	60b9      	str	r1, [r7, #8]
 8008530:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008538:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008540:	2303      	movs	r3, #3
 8008542:	e008      	b.n	8008556 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008562:	b480      	push	{r7}
 8008564:	b085      	sub	sp, #20
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008572:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800857a:	2303      	movs	r3, #3
 800857c:	e004      	b.n	8008588 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085a2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80085a4:	2301      	movs	r3, #1
 80085a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e01a      	b.n	80085ec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d114      	bne.n	80085ea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80085de:	2181      	movs	r1, #129	@ 0x81
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 fd86 	bl	800a0f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80085ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008602:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800860e:	2303      	movs	r3, #3
 8008610:	e016      	b.n	8008640 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	7c1b      	ldrb	r3, [r3, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d109      	bne.n	800862e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008620:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008624:	2101      	movs	r1, #1
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f001 fd84 	bl	800a134 <USBD_LL_PrepareReceive>
 800862c:	e007      	b.n	800863e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008634:	2340      	movs	r3, #64	@ 0x40
 8008636:	2101      	movs	r1, #1
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 fd7b 	bl	800a134 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	4613      	mov	r3, r2
 8008654:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d101      	bne.n	8008660 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800865c:	2303      	movs	r3, #3
 800865e:	e01f      	b.n	80086a0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	79fa      	ldrb	r2, [r7, #7]
 8008692:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f001 fbe3 	bl	8009e60 <USBD_LL_Init>
 800869a:	4603      	mov	r3, r0
 800869c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800869e:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3718      	adds	r7, #24
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086b2:	2300      	movs	r3, #0
 80086b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80086bc:	2303      	movs	r3, #3
 80086be:	e016      	b.n	80086ee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00b      	beq.n	80086ec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086dc:	f107 020e 	add.w	r2, r7, #14
 80086e0:	4610      	mov	r0, r2
 80086e2:	4798      	blx	r3
 80086e4:	4602      	mov	r2, r0
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b082      	sub	sp, #8
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f001 fc0e 	bl	8009f20 <USBD_LL_Start>
 8008704:	4603      	mov	r3, r0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008730:	2303      	movs	r3, #3
 8008732:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800873a:	2b00      	cmp	r3, #0
 800873c:	d009      	beq.n	8008752 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	78fa      	ldrb	r2, [r7, #3]
 8008748:	4611      	mov	r1, r2
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	4798      	blx	r3
 800874e:	4603      	mov	r3, r0
 8008750:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008752:	7bfb      	ldrb	r3, [r7, #15]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	460b      	mov	r3, r1
 8008766:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800876e:	2b00      	cmp	r3, #0
 8008770:	d007      	beq.n	8008782 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	78fa      	ldrb	r2, [r7, #3]
 800877c:	4611      	mov	r1, r2
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	4798      	blx	r3
  }

  return USBD_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 ff46 	bl	8009630 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80087b2:	461a      	mov	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80087c0:	f003 031f 	and.w	r3, r3, #31
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d01a      	beq.n	80087fe <USBD_LL_SetupStage+0x72>
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d822      	bhi.n	8008812 <USBD_LL_SetupStage+0x86>
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <USBD_LL_SetupStage+0x4a>
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d00a      	beq.n	80087ea <USBD_LL_SetupStage+0x5e>
 80087d4:	e01d      	b.n	8008812 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f9ee 	bl	8008bc0 <USBD_StdDevReq>
 80087e4:	4603      	mov	r3, r0
 80087e6:	73fb      	strb	r3, [r7, #15]
      break;
 80087e8:	e020      	b.n	800882c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fa52 	bl	8008c9c <USBD_StdItfReq>
 80087f8:	4603      	mov	r3, r0
 80087fa:	73fb      	strb	r3, [r7, #15]
      break;
 80087fc:	e016      	b.n	800882c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fa91 	bl	8008d2e <USBD_StdEPReq>
 800880c:	4603      	mov	r3, r0
 800880e:	73fb      	strb	r3, [r7, #15]
      break;
 8008810:	e00c      	b.n	800882c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008818:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800881c:	b2db      	uxtb	r3, r3
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f001 fbdd 	bl	8009fe0 <USBD_LL_StallEP>
 8008826:	4603      	mov	r3, r0
 8008828:	73fb      	strb	r3, [r7, #15]
      break;
 800882a:	bf00      	nop
  }

  return ret;
 800882c:	7bfb      	ldrb	r3, [r7, #15]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b086      	sub	sp, #24
 800883a:	af00      	add	r7, sp, #0
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	460b      	mov	r3, r1
 8008840:	607a      	str	r2, [r7, #4]
 8008842:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008844:	7afb      	ldrb	r3, [r7, #11]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d138      	bne.n	80088bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008850:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008858:	2b03      	cmp	r3, #3
 800885a:	d14a      	bne.n	80088f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	429a      	cmp	r2, r3
 8008866:	d913      	bls.n	8008890 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	1ad2      	subs	r2, r2, r3
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	68da      	ldr	r2, [r3, #12]
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	4293      	cmp	r3, r2
 8008880:	bf28      	it	cs
 8008882:	4613      	movcs	r3, r2
 8008884:	461a      	mov	r2, r3
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f000 ffc5 	bl	8009818 <USBD_CtlContinueRx>
 800888e:	e030      	b.n	80088f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b03      	cmp	r3, #3
 800889a:	d10b      	bne.n	80088b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d005      	beq.n	80088b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 ffc0 	bl	800983a <USBD_CtlSendStatus>
 80088ba:	e01a      	b.n	80088f2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	d114      	bne.n	80088f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00e      	beq.n	80088f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	7afa      	ldrb	r2, [r7, #11]
 80088de:	4611      	mov	r1, r2
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	4798      	blx	r3
 80088e4:	4603      	mov	r3, r0
 80088e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	e000      	b.n	80088f4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	460b      	mov	r3, r1
 8008906:	607a      	str	r2, [r7, #4]
 8008908:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800890a:	7afb      	ldrb	r3, [r7, #11]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d16b      	bne.n	80089e8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3314      	adds	r3, #20
 8008914:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800891c:	2b02      	cmp	r3, #2
 800891e:	d156      	bne.n	80089ce <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	689a      	ldr	r2, [r3, #8]
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	429a      	cmp	r2, r3
 800892a:	d914      	bls.n	8008956 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	689a      	ldr	r2, [r3, #8]
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	1ad2      	subs	r2, r2, r3
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	461a      	mov	r2, r3
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f000 ff3a 	bl	80097bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008948:	2300      	movs	r3, #0
 800894a:	2200      	movs	r2, #0
 800894c:	2100      	movs	r1, #0
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f001 fbf0 	bl	800a134 <USBD_LL_PrepareReceive>
 8008954:	e03b      	b.n	80089ce <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	68da      	ldr	r2, [r3, #12]
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	429a      	cmp	r2, r3
 8008960:	d11c      	bne.n	800899c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800896a:	429a      	cmp	r2, r3
 800896c:	d316      	bcc.n	800899c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008978:	429a      	cmp	r2, r3
 800897a:	d20f      	bcs.n	800899c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800897c:	2200      	movs	r2, #0
 800897e:	2100      	movs	r1, #0
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 ff1b 	bl	80097bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800898e:	2300      	movs	r3, #0
 8008990:	2200      	movs	r2, #0
 8008992:	2100      	movs	r1, #0
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f001 fbcd 	bl	800a134 <USBD_LL_PrepareReceive>
 800899a:	e018      	b.n	80089ce <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d10b      	bne.n	80089c0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80089c0:	2180      	movs	r1, #128	@ 0x80
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f001 fb0c 	bl	8009fe0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 ff49 	bl	8009860 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d122      	bne.n	8008a1e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f7ff fe98 	bl	800870e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80089e6:	e01a      	b.n	8008a1e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d114      	bne.n	8008a1e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00e      	beq.n	8008a1e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	7afa      	ldrb	r2, [r7, #11]
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	4798      	blx	r3
 8008a10:	4603      	mov	r3, r0
 8008a12:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008a1a:	7dfb      	ldrb	r3, [r7, #23]
 8008a1c:	e000      	b.n	8008a20 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d101      	bne.n	8008a5c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e02f      	b.n	8008abc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00f      	beq.n	8008a86 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d009      	beq.n	8008a86 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	6852      	ldr	r2, [r2, #4]
 8008a7e:	b2d2      	uxtb	r2, r2
 8008a80:	4611      	mov	r1, r2
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a86:	2340      	movs	r3, #64	@ 0x40
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f001 fa62 	bl	8009f56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2240      	movs	r2, #64	@ 0x40
 8008a9e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008aa2:	2340      	movs	r3, #64	@ 0x40
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2180      	movs	r1, #128	@ 0x80
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f001 fa54 	bl	8009f56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2240      	movs	r2, #64	@ 0x40
 8008ab8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	78fa      	ldrb	r2, [r7, #3]
 8008ad4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2204      	movs	r2, #4
 8008afe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b04      	cmp	r3, #4
 8008b22:	d106      	bne.n	8008b32 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e012      	b.n	8008b7c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d10b      	bne.n	8008b7a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d005      	beq.n	8008b7a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b74:	69db      	ldr	r3, [r3, #28]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ba2:	8a3b      	ldrh	r3, [r7, #16]
 8008ba4:	021b      	lsls	r3, r3, #8
 8008ba6:	b21a      	sxth	r2, r3
 8008ba8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	b21b      	sxth	r3, r3
 8008bb0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008bb2:	89fb      	ldrh	r3, [r7, #14]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	371c      	adds	r7, #28
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bd6:	2b40      	cmp	r3, #64	@ 0x40
 8008bd8:	d005      	beq.n	8008be6 <USBD_StdDevReq+0x26>
 8008bda:	2b40      	cmp	r3, #64	@ 0x40
 8008bdc:	d853      	bhi.n	8008c86 <USBD_StdDevReq+0xc6>
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00b      	beq.n	8008bfa <USBD_StdDevReq+0x3a>
 8008be2:	2b20      	cmp	r3, #32
 8008be4:	d14f      	bne.n	8008c86 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	4798      	blx	r3
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8008bf8:	e04a      	b.n	8008c90 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	785b      	ldrb	r3, [r3, #1]
 8008bfe:	2b09      	cmp	r3, #9
 8008c00:	d83b      	bhi.n	8008c7a <USBD_StdDevReq+0xba>
 8008c02:	a201      	add	r2, pc, #4	@ (adr r2, 8008c08 <USBD_StdDevReq+0x48>)
 8008c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c08:	08008c5d 	.word	0x08008c5d
 8008c0c:	08008c71 	.word	0x08008c71
 8008c10:	08008c7b 	.word	0x08008c7b
 8008c14:	08008c67 	.word	0x08008c67
 8008c18:	08008c7b 	.word	0x08008c7b
 8008c1c:	08008c3b 	.word	0x08008c3b
 8008c20:	08008c31 	.word	0x08008c31
 8008c24:	08008c7b 	.word	0x08008c7b
 8008c28:	08008c53 	.word	0x08008c53
 8008c2c:	08008c45 	.word	0x08008c45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f9de 	bl	8008ff4 <USBD_GetDescriptor>
          break;
 8008c38:	e024      	b.n	8008c84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fb6d 	bl	800931c <USBD_SetAddress>
          break;
 8008c42:	e01f      	b.n	8008c84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fbac 	bl	80093a4 <USBD_SetConfig>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]
          break;
 8008c50:	e018      	b.n	8008c84 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fc4b 	bl	80094f0 <USBD_GetConfig>
          break;
 8008c5a:	e013      	b.n	8008c84 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fc7c 	bl	800955c <USBD_GetStatus>
          break;
 8008c64:	e00e      	b.n	8008c84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fcab 	bl	80095c4 <USBD_SetFeature>
          break;
 8008c6e:	e009      	b.n	8008c84 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fcba 	bl	80095ec <USBD_ClrFeature>
          break;
 8008c78:	e004      	b.n	8008c84 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 fd11 	bl	80096a4 <USBD_CtlError>
          break;
 8008c82:	bf00      	nop
      }
      break;
 8008c84:	e004      	b.n	8008c90 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fd0b 	bl	80096a4 <USBD_CtlError>
      break;
 8008c8e:	bf00      	nop
  }

  return ret;
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop

08008c9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008cb2:	2b40      	cmp	r3, #64	@ 0x40
 8008cb4:	d005      	beq.n	8008cc2 <USBD_StdItfReq+0x26>
 8008cb6:	2b40      	cmp	r3, #64	@ 0x40
 8008cb8:	d82f      	bhi.n	8008d1a <USBD_StdItfReq+0x7e>
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <USBD_StdItfReq+0x26>
 8008cbe:	2b20      	cmp	r3, #32
 8008cc0:	d12b      	bne.n	8008d1a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d81d      	bhi.n	8008d0c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	889b      	ldrh	r3, [r3, #4]
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d813      	bhi.n	8008d02 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	4798      	blx	r3
 8008ce8:	4603      	mov	r3, r0
 8008cea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	88db      	ldrh	r3, [r3, #6]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d110      	bne.n	8008d16 <USBD_StdItfReq+0x7a>
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10d      	bne.n	8008d16 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fd9d 	bl	800983a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d00:	e009      	b.n	8008d16 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fccd 	bl	80096a4 <USBD_CtlError>
          break;
 8008d0a:	e004      	b.n	8008d16 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fcc8 	bl	80096a4 <USBD_CtlError>
          break;
 8008d14:	e000      	b.n	8008d18 <USBD_StdItfReq+0x7c>
          break;
 8008d16:	bf00      	nop
      }
      break;
 8008d18:	e004      	b.n	8008d24 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fcc1 	bl	80096a4 <USBD_CtlError>
      break;
 8008d22:	bf00      	nop
  }

  return ret;
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	889b      	ldrh	r3, [r3, #4]
 8008d40:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d4a:	2b40      	cmp	r3, #64	@ 0x40
 8008d4c:	d007      	beq.n	8008d5e <USBD_StdEPReq+0x30>
 8008d4e:	2b40      	cmp	r3, #64	@ 0x40
 8008d50:	f200 8145 	bhi.w	8008fde <USBD_StdEPReq+0x2b0>
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00c      	beq.n	8008d72 <USBD_StdEPReq+0x44>
 8008d58:	2b20      	cmp	r3, #32
 8008d5a:	f040 8140 	bne.w	8008fde <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	4798      	blx	r3
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d70:	e13a      	b.n	8008fe8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	785b      	ldrb	r3, [r3, #1]
 8008d76:	2b03      	cmp	r3, #3
 8008d78:	d007      	beq.n	8008d8a <USBD_StdEPReq+0x5c>
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	f300 8129 	bgt.w	8008fd2 <USBD_StdEPReq+0x2a4>
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d07f      	beq.n	8008e84 <USBD_StdEPReq+0x156>
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d03c      	beq.n	8008e02 <USBD_StdEPReq+0xd4>
 8008d88:	e123      	b.n	8008fd2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d002      	beq.n	8008d9c <USBD_StdEPReq+0x6e>
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	d016      	beq.n	8008dc8 <USBD_StdEPReq+0x9a>
 8008d9a:	e02c      	b.n	8008df6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00d      	beq.n	8008dbe <USBD_StdEPReq+0x90>
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	2b80      	cmp	r3, #128	@ 0x80
 8008da6:	d00a      	beq.n	8008dbe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f001 f917 	bl	8009fe0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008db2:	2180      	movs	r1, #128	@ 0x80
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f001 f913 	bl	8009fe0 <USBD_LL_StallEP>
 8008dba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008dbc:	e020      	b.n	8008e00 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fc6f 	bl	80096a4 <USBD_CtlError>
              break;
 8008dc6:	e01b      	b.n	8008e00 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	885b      	ldrh	r3, [r3, #2]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10e      	bne.n	8008dee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00b      	beq.n	8008dee <USBD_StdEPReq+0xc0>
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
 8008dd8:	2b80      	cmp	r3, #128	@ 0x80
 8008dda:	d008      	beq.n	8008dee <USBD_StdEPReq+0xc0>
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	88db      	ldrh	r3, [r3, #6]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d104      	bne.n	8008dee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008de4:	7bbb      	ldrb	r3, [r7, #14]
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f001 f8f9 	bl	8009fe0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fd23 	bl	800983a <USBD_CtlSendStatus>

              break;
 8008df4:	e004      	b.n	8008e00 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008df6:	6839      	ldr	r1, [r7, #0]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fc53 	bl	80096a4 <USBD_CtlError>
              break;
 8008dfe:	bf00      	nop
          }
          break;
 8008e00:	e0ec      	b.n	8008fdc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d002      	beq.n	8008e14 <USBD_StdEPReq+0xe6>
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d016      	beq.n	8008e40 <USBD_StdEPReq+0x112>
 8008e12:	e030      	b.n	8008e76 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e14:	7bbb      	ldrb	r3, [r7, #14]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00d      	beq.n	8008e36 <USBD_StdEPReq+0x108>
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	2b80      	cmp	r3, #128	@ 0x80
 8008e1e:	d00a      	beq.n	8008e36 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e20:	7bbb      	ldrb	r3, [r7, #14]
 8008e22:	4619      	mov	r1, r3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f001 f8db 	bl	8009fe0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e2a:	2180      	movs	r1, #128	@ 0x80
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f001 f8d7 	bl	8009fe0 <USBD_LL_StallEP>
 8008e32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e34:	e025      	b.n	8008e82 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fc33 	bl	80096a4 <USBD_CtlError>
              break;
 8008e3e:	e020      	b.n	8008e82 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	885b      	ldrh	r3, [r3, #2]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d11b      	bne.n	8008e80 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e48:	7bbb      	ldrb	r3, [r7, #14]
 8008e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d004      	beq.n	8008e5c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f001 f8e1 	bl	800a01e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fcec 	bl	800983a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	4798      	blx	r3
 8008e70:	4603      	mov	r3, r0
 8008e72:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008e74:	e004      	b.n	8008e80 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fc13 	bl	80096a4 <USBD_CtlError>
              break;
 8008e7e:	e000      	b.n	8008e82 <USBD_StdEPReq+0x154>
              break;
 8008e80:	bf00      	nop
          }
          break;
 8008e82:	e0ab      	b.n	8008fdc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d002      	beq.n	8008e96 <USBD_StdEPReq+0x168>
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d032      	beq.n	8008efa <USBD_StdEPReq+0x1cc>
 8008e94:	e097      	b.n	8008fc6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e96:	7bbb      	ldrb	r3, [r7, #14]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d007      	beq.n	8008eac <USBD_StdEPReq+0x17e>
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
 8008e9e:	2b80      	cmp	r3, #128	@ 0x80
 8008ea0:	d004      	beq.n	8008eac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fbfd 	bl	80096a4 <USBD_CtlError>
                break;
 8008eaa:	e091      	b.n	8008fd0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	da0b      	bge.n	8008ecc <USBD_StdEPReq+0x19e>
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
 8008eb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008eba:	4613      	mov	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	3310      	adds	r3, #16
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	3304      	adds	r3, #4
 8008eca:	e00b      	b.n	8008ee4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fc47 	bl	8009786 <USBD_CtlSendData>
              break;
 8008ef8:	e06a      	b.n	8008fd0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008efa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	da11      	bge.n	8008f26 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
 8008f04:	f003 020f 	and.w	r2, r3, #15
 8008f08:	6879      	ldr	r1, [r7, #4]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4413      	add	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	440b      	add	r3, r1
 8008f14:	3324      	adds	r3, #36	@ 0x24
 8008f16:	881b      	ldrh	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d117      	bne.n	8008f4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fbc0 	bl	80096a4 <USBD_CtlError>
                  break;
 8008f24:	e054      	b.n	8008fd0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f26:	7bbb      	ldrb	r3, [r7, #14]
 8008f28:	f003 020f 	and.w	r2, r3, #15
 8008f2c:	6879      	ldr	r1, [r7, #4]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	440b      	add	r3, r1
 8008f38:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d104      	bne.n	8008f4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fbad 	bl	80096a4 <USBD_CtlError>
                  break;
 8008f4a:	e041      	b.n	8008fd0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	da0b      	bge.n	8008f6c <USBD_StdEPReq+0x23e>
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	3310      	adds	r3, #16
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	4413      	add	r3, r2
 8008f68:	3304      	adds	r3, #4
 8008f6a:	e00b      	b.n	8008f84 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f72:	4613      	mov	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	4413      	add	r3, r2
 8008f82:	3304      	adds	r3, #4
 8008f84:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <USBD_StdEPReq+0x264>
 8008f8c:	7bbb      	ldrb	r3, [r7, #14]
 8008f8e:	2b80      	cmp	r3, #128	@ 0x80
 8008f90:	d103      	bne.n	8008f9a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	e00e      	b.n	8008fb8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f001 f85c 	bl	800a05c <USBD_LL_IsStallEP>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2201      	movs	r2, #1
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	e002      	b.n	8008fb8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fbe1 	bl	8009786 <USBD_CtlSendData>
              break;
 8008fc4:	e004      	b.n	8008fd0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fb6b 	bl	80096a4 <USBD_CtlError>
              break;
 8008fce:	bf00      	nop
          }
          break;
 8008fd0:	e004      	b.n	8008fdc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fb65 	bl	80096a4 <USBD_CtlError>
          break;
 8008fda:	bf00      	nop
      }
      break;
 8008fdc:	e004      	b.n	8008fe8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fb5f 	bl	80096a4 <USBD_CtlError>
      break;
 8008fe6:	bf00      	nop
  }

  return ret;
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009002:	2300      	movs	r3, #0
 8009004:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009006:	2300      	movs	r3, #0
 8009008:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	885b      	ldrh	r3, [r3, #2]
 800900e:	0a1b      	lsrs	r3, r3, #8
 8009010:	b29b      	uxth	r3, r3
 8009012:	3b01      	subs	r3, #1
 8009014:	2b0e      	cmp	r3, #14
 8009016:	f200 8152 	bhi.w	80092be <USBD_GetDescriptor+0x2ca>
 800901a:	a201      	add	r2, pc, #4	@ (adr r2, 8009020 <USBD_GetDescriptor+0x2c>)
 800901c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009020:	08009091 	.word	0x08009091
 8009024:	080090a9 	.word	0x080090a9
 8009028:	080090e9 	.word	0x080090e9
 800902c:	080092bf 	.word	0x080092bf
 8009030:	080092bf 	.word	0x080092bf
 8009034:	0800925f 	.word	0x0800925f
 8009038:	0800928b 	.word	0x0800928b
 800903c:	080092bf 	.word	0x080092bf
 8009040:	080092bf 	.word	0x080092bf
 8009044:	080092bf 	.word	0x080092bf
 8009048:	080092bf 	.word	0x080092bf
 800904c:	080092bf 	.word	0x080092bf
 8009050:	080092bf 	.word	0x080092bf
 8009054:	080092bf 	.word	0x080092bf
 8009058:	0800905d 	.word	0x0800905d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009062:	69db      	ldr	r3, [r3, #28]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00b      	beq.n	8009080 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	7c12      	ldrb	r2, [r2, #16]
 8009074:	f107 0108 	add.w	r1, r7, #8
 8009078:	4610      	mov	r0, r2
 800907a:	4798      	blx	r3
 800907c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800907e:	e126      	b.n	80092ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fb0e 	bl	80096a4 <USBD_CtlError>
        err++;
 8009088:	7afb      	ldrb	r3, [r7, #11]
 800908a:	3301      	adds	r3, #1
 800908c:	72fb      	strb	r3, [r7, #11]
      break;
 800908e:	e11e      	b.n	80092ce <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	7c12      	ldrb	r2, [r2, #16]
 800909c:	f107 0108 	add.w	r1, r7, #8
 80090a0:	4610      	mov	r0, r2
 80090a2:	4798      	blx	r3
 80090a4:	60f8      	str	r0, [r7, #12]
      break;
 80090a6:	e112      	b.n	80092ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	7c1b      	ldrb	r3, [r3, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10d      	bne.n	80090cc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b8:	f107 0208 	add.w	r2, r7, #8
 80090bc:	4610      	mov	r0, r2
 80090be:	4798      	blx	r3
 80090c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	3301      	adds	r3, #1
 80090c6:	2202      	movs	r2, #2
 80090c8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80090ca:	e100      	b.n	80092ce <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d4:	f107 0208 	add.w	r2, r7, #8
 80090d8:	4610      	mov	r0, r2
 80090da:	4798      	blx	r3
 80090dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3301      	adds	r3, #1
 80090e2:	2202      	movs	r2, #2
 80090e4:	701a      	strb	r2, [r3, #0]
      break;
 80090e6:	e0f2      	b.n	80092ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	885b      	ldrh	r3, [r3, #2]
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b05      	cmp	r3, #5
 80090f0:	f200 80ac 	bhi.w	800924c <USBD_GetDescriptor+0x258>
 80090f4:	a201      	add	r2, pc, #4	@ (adr r2, 80090fc <USBD_GetDescriptor+0x108>)
 80090f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fa:	bf00      	nop
 80090fc:	08009115 	.word	0x08009115
 8009100:	08009149 	.word	0x08009149
 8009104:	0800917d 	.word	0x0800917d
 8009108:	080091b1 	.word	0x080091b1
 800910c:	080091e5 	.word	0x080091e5
 8009110:	08009219 	.word	0x08009219
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00b      	beq.n	8009138 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	7c12      	ldrb	r2, [r2, #16]
 800912c:	f107 0108 	add.w	r1, r7, #8
 8009130:	4610      	mov	r0, r2
 8009132:	4798      	blx	r3
 8009134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009136:	e091      	b.n	800925c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fab2 	bl	80096a4 <USBD_CtlError>
            err++;
 8009140:	7afb      	ldrb	r3, [r7, #11]
 8009142:	3301      	adds	r3, #1
 8009144:	72fb      	strb	r3, [r7, #11]
          break;
 8009146:	e089      	b.n	800925c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00b      	beq.n	800916c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	7c12      	ldrb	r2, [r2, #16]
 8009160:	f107 0108 	add.w	r1, r7, #8
 8009164:	4610      	mov	r0, r2
 8009166:	4798      	blx	r3
 8009168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800916a:	e077      	b.n	800925c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fa98 	bl	80096a4 <USBD_CtlError>
            err++;
 8009174:	7afb      	ldrb	r3, [r7, #11]
 8009176:	3301      	adds	r3, #1
 8009178:	72fb      	strb	r3, [r7, #11]
          break;
 800917a:	e06f      	b.n	800925c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00b      	beq.n	80091a0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	7c12      	ldrb	r2, [r2, #16]
 8009194:	f107 0108 	add.w	r1, r7, #8
 8009198:	4610      	mov	r0, r2
 800919a:	4798      	blx	r3
 800919c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800919e:	e05d      	b.n	800925c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091a0:	6839      	ldr	r1, [r7, #0]
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fa7e 	bl	80096a4 <USBD_CtlError>
            err++;
 80091a8:	7afb      	ldrb	r3, [r7, #11]
 80091aa:	3301      	adds	r3, #1
 80091ac:	72fb      	strb	r3, [r7, #11]
          break;
 80091ae:	e055      	b.n	800925c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00b      	beq.n	80091d4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	7c12      	ldrb	r2, [r2, #16]
 80091c8:	f107 0108 	add.w	r1, r7, #8
 80091cc:	4610      	mov	r0, r2
 80091ce:	4798      	blx	r3
 80091d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091d2:	e043      	b.n	800925c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fa64 	bl	80096a4 <USBD_CtlError>
            err++;
 80091dc:	7afb      	ldrb	r3, [r7, #11]
 80091de:	3301      	adds	r3, #1
 80091e0:	72fb      	strb	r3, [r7, #11]
          break;
 80091e2:	e03b      	b.n	800925c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00b      	beq.n	8009208 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	7c12      	ldrb	r2, [r2, #16]
 80091fc:	f107 0108 	add.w	r1, r7, #8
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009206:	e029      	b.n	800925c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fa4a 	bl	80096a4 <USBD_CtlError>
            err++;
 8009210:	7afb      	ldrb	r3, [r7, #11]
 8009212:	3301      	adds	r3, #1
 8009214:	72fb      	strb	r3, [r7, #11]
          break;
 8009216:	e021      	b.n	800925c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00b      	beq.n	800923c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	7c12      	ldrb	r2, [r2, #16]
 8009230:	f107 0108 	add.w	r1, r7, #8
 8009234:	4610      	mov	r0, r2
 8009236:	4798      	blx	r3
 8009238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800923a:	e00f      	b.n	800925c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fa30 	bl	80096a4 <USBD_CtlError>
            err++;
 8009244:	7afb      	ldrb	r3, [r7, #11]
 8009246:	3301      	adds	r3, #1
 8009248:	72fb      	strb	r3, [r7, #11]
          break;
 800924a:	e007      	b.n	800925c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fa28 	bl	80096a4 <USBD_CtlError>
          err++;
 8009254:	7afb      	ldrb	r3, [r7, #11]
 8009256:	3301      	adds	r3, #1
 8009258:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800925a:	bf00      	nop
      }
      break;
 800925c:	e037      	b.n	80092ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	7c1b      	ldrb	r3, [r3, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d109      	bne.n	800927a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800926c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800926e:	f107 0208 	add.w	r2, r7, #8
 8009272:	4610      	mov	r0, r2
 8009274:	4798      	blx	r3
 8009276:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009278:	e029      	b.n	80092ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fa11 	bl	80096a4 <USBD_CtlError>
        err++;
 8009282:	7afb      	ldrb	r3, [r7, #11]
 8009284:	3301      	adds	r3, #1
 8009286:	72fb      	strb	r3, [r7, #11]
      break;
 8009288:	e021      	b.n	80092ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	7c1b      	ldrb	r3, [r3, #16]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10d      	bne.n	80092ae <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800929a:	f107 0208 	add.w	r2, r7, #8
 800929e:	4610      	mov	r0, r2
 80092a0:	4798      	blx	r3
 80092a2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3301      	adds	r3, #1
 80092a8:	2207      	movs	r2, #7
 80092aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092ac:	e00f      	b.n	80092ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f9f7 	bl	80096a4 <USBD_CtlError>
        err++;
 80092b6:	7afb      	ldrb	r3, [r7, #11]
 80092b8:	3301      	adds	r3, #1
 80092ba:	72fb      	strb	r3, [r7, #11]
      break;
 80092bc:	e007      	b.n	80092ce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f9ef 	bl	80096a4 <USBD_CtlError>
      err++;
 80092c6:	7afb      	ldrb	r3, [r7, #11]
 80092c8:	3301      	adds	r3, #1
 80092ca:	72fb      	strb	r3, [r7, #11]
      break;
 80092cc:	bf00      	nop
  }

  if (err != 0U)
 80092ce:	7afb      	ldrb	r3, [r7, #11]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d11e      	bne.n	8009312 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	88db      	ldrh	r3, [r3, #6]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d016      	beq.n	800930a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80092dc:	893b      	ldrh	r3, [r7, #8]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00e      	beq.n	8009300 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	88da      	ldrh	r2, [r3, #6]
 80092e6:	893b      	ldrh	r3, [r7, #8]
 80092e8:	4293      	cmp	r3, r2
 80092ea:	bf28      	it	cs
 80092ec:	4613      	movcs	r3, r2
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80092f2:	893b      	ldrh	r3, [r7, #8]
 80092f4:	461a      	mov	r2, r3
 80092f6:	68f9      	ldr	r1, [r7, #12]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fa44 	bl	8009786 <USBD_CtlSendData>
 80092fe:	e009      	b.n	8009314 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f9ce 	bl	80096a4 <USBD_CtlError>
 8009308:	e004      	b.n	8009314 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fa95 	bl	800983a <USBD_CtlSendStatus>
 8009310:	e000      	b.n	8009314 <USBD_GetDescriptor+0x320>
    return;
 8009312:	bf00      	nop
  }
}
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop

0800931c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	889b      	ldrh	r3, [r3, #4]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d131      	bne.n	8009392 <USBD_SetAddress+0x76>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	88db      	ldrh	r3, [r3, #6]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d12d      	bne.n	8009392 <USBD_SetAddress+0x76>
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	885b      	ldrh	r3, [r3, #2]
 800933a:	2b7f      	cmp	r3, #127	@ 0x7f
 800933c:	d829      	bhi.n	8009392 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	885b      	ldrh	r3, [r3, #2]
 8009342:	b2db      	uxtb	r3, r3
 8009344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009348:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b03      	cmp	r3, #3
 8009354:	d104      	bne.n	8009360 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f9a3 	bl	80096a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800935e:	e01d      	b.n	800939c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	7bfa      	ldrb	r2, [r7, #15]
 8009364:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009368:	7bfb      	ldrb	r3, [r7, #15]
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fea1 	bl	800a0b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fa61 	bl	800983a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d004      	beq.n	8009388 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2202      	movs	r2, #2
 8009382:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009386:	e009      	b.n	800939c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009390:	e004      	b.n	800939c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f985 	bl	80096a4 <USBD_CtlError>
  }
}
 800939a:	bf00      	nop
 800939c:	bf00      	nop
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	885b      	ldrh	r3, [r3, #2]
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	4b4c      	ldr	r3, [pc, #304]	@ (80094ec <USBD_SetConfig+0x148>)
 80093ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80093bc:	4b4b      	ldr	r3, [pc, #300]	@ (80094ec <USBD_SetConfig+0x148>)
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d905      	bls.n	80093d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f96c 	bl	80096a4 <USBD_CtlError>
    return USBD_FAIL;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e088      	b.n	80094e2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d002      	beq.n	80093e2 <USBD_SetConfig+0x3e>
 80093dc:	2b03      	cmp	r3, #3
 80093de:	d025      	beq.n	800942c <USBD_SetConfig+0x88>
 80093e0:	e071      	b.n	80094c6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80093e2:	4b42      	ldr	r3, [pc, #264]	@ (80094ec <USBD_SetConfig+0x148>)
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d01c      	beq.n	8009424 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80093ea:	4b40      	ldr	r3, [pc, #256]	@ (80094ec <USBD_SetConfig+0x148>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80093f4:	4b3d      	ldr	r3, [pc, #244]	@ (80094ec <USBD_SetConfig+0x148>)
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	4619      	mov	r1, r3
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7ff f992 	bl	8008724 <USBD_SetClassConfig>
 8009400:	4603      	mov	r3, r0
 8009402:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009404:	7bfb      	ldrb	r3, [r7, #15]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d004      	beq.n	8009414 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f949 	bl	80096a4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009412:	e065      	b.n	80094e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fa10 	bl	800983a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2203      	movs	r2, #3
 800941e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009422:	e05d      	b.n	80094e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fa08 	bl	800983a <USBD_CtlSendStatus>
      break;
 800942a:	e059      	b.n	80094e0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800942c:	4b2f      	ldr	r3, [pc, #188]	@ (80094ec <USBD_SetConfig+0x148>)
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d112      	bne.n	800945a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800943c:	4b2b      	ldr	r3, [pc, #172]	@ (80094ec <USBD_SetConfig+0x148>)
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	461a      	mov	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009446:	4b29      	ldr	r3, [pc, #164]	@ (80094ec <USBD_SetConfig+0x148>)
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	4619      	mov	r1, r3
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7ff f985 	bl	800875c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f9f1 	bl	800983a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009458:	e042      	b.n	80094e0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800945a:	4b24      	ldr	r3, [pc, #144]	@ (80094ec <USBD_SetConfig+0x148>)
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	461a      	mov	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	429a      	cmp	r2, r3
 8009466:	d02a      	beq.n	80094be <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff f973 	bl	800875c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009476:	4b1d      	ldr	r3, [pc, #116]	@ (80094ec <USBD_SetConfig+0x148>)
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	461a      	mov	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009480:	4b1a      	ldr	r3, [pc, #104]	@ (80094ec <USBD_SetConfig+0x148>)
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7ff f94c 	bl	8008724 <USBD_SetClassConfig>
 800948c:	4603      	mov	r3, r0
 800948e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00f      	beq.n	80094b6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009496:	6839      	ldr	r1, [r7, #0]
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f903 	bl	80096a4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7ff f958 	bl	800875c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2202      	movs	r2, #2
 80094b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80094b4:	e014      	b.n	80094e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f9bf 	bl	800983a <USBD_CtlSendStatus>
      break;
 80094bc:	e010      	b.n	80094e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f9bb 	bl	800983a <USBD_CtlSendStatus>
      break;
 80094c4:	e00c      	b.n	80094e0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80094c6:	6839      	ldr	r1, [r7, #0]
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f8eb 	bl	80096a4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094ce:	4b07      	ldr	r3, [pc, #28]	@ (80094ec <USBD_SetConfig+0x148>)
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7ff f941 	bl	800875c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80094da:	2303      	movs	r3, #3
 80094dc:	73fb      	strb	r3, [r7, #15]
      break;
 80094de:	bf00      	nop
  }

  return ret;
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	2000043c 	.word	0x2000043c

080094f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	88db      	ldrh	r3, [r3, #6]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d004      	beq.n	800950c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f8cd 	bl	80096a4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800950a:	e023      	b.n	8009554 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b02      	cmp	r3, #2
 8009516:	dc02      	bgt.n	800951e <USBD_GetConfig+0x2e>
 8009518:	2b00      	cmp	r3, #0
 800951a:	dc03      	bgt.n	8009524 <USBD_GetConfig+0x34>
 800951c:	e015      	b.n	800954a <USBD_GetConfig+0x5a>
 800951e:	2b03      	cmp	r3, #3
 8009520:	d00b      	beq.n	800953a <USBD_GetConfig+0x4a>
 8009522:	e012      	b.n	800954a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	3308      	adds	r3, #8
 800952e:	2201      	movs	r2, #1
 8009530:	4619      	mov	r1, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f927 	bl	8009786 <USBD_CtlSendData>
        break;
 8009538:	e00c      	b.n	8009554 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	3304      	adds	r3, #4
 800953e:	2201      	movs	r2, #1
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f91f 	bl	8009786 <USBD_CtlSendData>
        break;
 8009548:	e004      	b.n	8009554 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f8a9 	bl	80096a4 <USBD_CtlError>
        break;
 8009552:	bf00      	nop
}
 8009554:	bf00      	nop
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800956c:	b2db      	uxtb	r3, r3
 800956e:	3b01      	subs	r3, #1
 8009570:	2b02      	cmp	r3, #2
 8009572:	d81e      	bhi.n	80095b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	88db      	ldrh	r3, [r3, #6]
 8009578:	2b02      	cmp	r3, #2
 800957a:	d004      	beq.n	8009586 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800957c:	6839      	ldr	r1, [r7, #0]
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f890 	bl	80096a4 <USBD_CtlError>
        break;
 8009584:	e01a      	b.n	80095bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009592:	2b00      	cmp	r3, #0
 8009594:	d005      	beq.n	80095a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	f043 0202 	orr.w	r2, r3, #2
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	330c      	adds	r3, #12
 80095a6:	2202      	movs	r2, #2
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f8eb 	bl	8009786 <USBD_CtlSendData>
      break;
 80095b0:	e004      	b.n	80095bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f875 	bl	80096a4 <USBD_CtlError>
      break;
 80095ba:	bf00      	nop
  }
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	885b      	ldrh	r3, [r3, #2]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d106      	bne.n	80095e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f92b 	bl	800983a <USBD_CtlSendStatus>
  }
}
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	3b01      	subs	r3, #1
 8009600:	2b02      	cmp	r3, #2
 8009602:	d80b      	bhi.n	800961c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	885b      	ldrh	r3, [r3, #2]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d10c      	bne.n	8009626 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f910 	bl	800983a <USBD_CtlSendStatus>
      }
      break;
 800961a:	e004      	b.n	8009626 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f840 	bl	80096a4 <USBD_CtlError>
      break;
 8009624:	e000      	b.n	8009628 <USBD_ClrFeature+0x3c>
      break;
 8009626:	bf00      	nop
  }
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	781a      	ldrb	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3301      	adds	r3, #1
 800964a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	781a      	ldrb	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	3301      	adds	r3, #1
 8009658:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f7ff fa92 	bl	8008b84 <SWAPBYTE>
 8009660:	4603      	mov	r3, r0
 8009662:	461a      	mov	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	3301      	adds	r3, #1
 800966c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	3301      	adds	r3, #1
 8009672:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f7ff fa85 	bl	8008b84 <SWAPBYTE>
 800967a:	4603      	mov	r3, r0
 800967c:	461a      	mov	r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3301      	adds	r3, #1
 8009686:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3301      	adds	r3, #1
 800968c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f7ff fa78 	bl	8008b84 <SWAPBYTE>
 8009694:	4603      	mov	r3, r0
 8009696:	461a      	mov	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	80da      	strh	r2, [r3, #6]
}
 800969c:	bf00      	nop
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80096ae:	2180      	movs	r1, #128	@ 0x80
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fc95 	bl	8009fe0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80096b6:	2100      	movs	r1, #0
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fc91 	bl	8009fe0 <USBD_LL_StallEP>
}
 80096be:	bf00      	nop
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b086      	sub	sp, #24
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	60f8      	str	r0, [r7, #12]
 80096ce:	60b9      	str	r1, [r7, #8]
 80096d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d036      	beq.n	800974a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80096e0:	6938      	ldr	r0, [r7, #16]
 80096e2:	f000 f836 	bl	8009752 <USBD_GetLen>
 80096e6:	4603      	mov	r3, r0
 80096e8:	3301      	adds	r3, #1
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	005b      	lsls	r3, r3, #1
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	4413      	add	r3, r2
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	7812      	ldrb	r2, [r2, #0]
 80096fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8009700:	7dfb      	ldrb	r3, [r7, #23]
 8009702:	3301      	adds	r3, #1
 8009704:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009706:	7dfb      	ldrb	r3, [r7, #23]
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	4413      	add	r3, r2
 800970c:	2203      	movs	r2, #3
 800970e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	3301      	adds	r3, #1
 8009714:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009716:	e013      	b.n	8009740 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009718:	7dfb      	ldrb	r3, [r7, #23]
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	4413      	add	r3, r2
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	7812      	ldrb	r2, [r2, #0]
 8009722:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	3301      	adds	r3, #1
 8009728:	613b      	str	r3, [r7, #16]
    idx++;
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	3301      	adds	r3, #1
 800972e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009730:	7dfb      	ldrb	r3, [r7, #23]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	4413      	add	r3, r2
 8009736:	2200      	movs	r2, #0
 8009738:	701a      	strb	r2, [r3, #0]
    idx++;
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	3301      	adds	r3, #1
 800973e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1e7      	bne.n	8009718 <USBD_GetString+0x52>
 8009748:	e000      	b.n	800974c <USBD_GetString+0x86>
    return;
 800974a:	bf00      	nop
  }
}
 800974c:	3718      	adds	r7, #24
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009752:	b480      	push	{r7}
 8009754:	b085      	sub	sp, #20
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800975a:	2300      	movs	r3, #0
 800975c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009762:	e005      	b.n	8009770 <USBD_GetLen+0x1e>
  {
    len++;
 8009764:	7bfb      	ldrb	r3, [r7, #15]
 8009766:	3301      	adds	r3, #1
 8009768:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	3301      	adds	r3, #1
 800976e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1f5      	bne.n	8009764 <USBD_GetLen+0x12>
  }

  return len;
 8009778:	7bfb      	ldrb	r3, [r7, #15]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2202      	movs	r2, #2
 8009796:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	2100      	movs	r1, #0
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 fca0 	bl	800a0f2 <USBD_LL_Transmit>

  return USBD_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	2100      	movs	r1, #0
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f000 fc8f 	bl	800a0f2 <USBD_LL_Transmit>

  return USBD_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	60f8      	str	r0, [r7, #12]
 80097e6:	60b9      	str	r1, [r7, #8]
 80097e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2203      	movs	r2, #3
 80097ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	2100      	movs	r1, #0
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 fc93 	bl	800a134 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	2100      	movs	r1, #0
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 fc82 	bl	800a134 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b082      	sub	sp, #8
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2204      	movs	r2, #4
 8009846:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800984a:	2300      	movs	r3, #0
 800984c:	2200      	movs	r2, #0
 800984e:	2100      	movs	r1, #0
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fc4e 	bl	800a0f2 <USBD_LL_Transmit>

  return USBD_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2205      	movs	r2, #5
 800986c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009870:	2300      	movs	r3, #0
 8009872:	2200      	movs	r2, #0
 8009874:	2100      	movs	r1, #0
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fc5c 	bl	800a134 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
	...

08009888 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800988c:	2200      	movs	r2, #0
 800988e:	4912      	ldr	r1, [pc, #72]	@ (80098d8 <MX_USB_Device_Init+0x50>)
 8009890:	4812      	ldr	r0, [pc, #72]	@ (80098dc <MX_USB_Device_Init+0x54>)
 8009892:	f7fe fed9 	bl	8008648 <USBD_Init>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800989c:	f7f7 fcb0 	bl	8001200 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80098a0:	490f      	ldr	r1, [pc, #60]	@ (80098e0 <MX_USB_Device_Init+0x58>)
 80098a2:	480e      	ldr	r0, [pc, #56]	@ (80098dc <MX_USB_Device_Init+0x54>)
 80098a4:	f7fe ff00 	bl	80086a8 <USBD_RegisterClass>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d001      	beq.n	80098b2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80098ae:	f7f7 fca7 	bl	8001200 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80098b2:	490c      	ldr	r1, [pc, #48]	@ (80098e4 <MX_USB_Device_Init+0x5c>)
 80098b4:	4809      	ldr	r0, [pc, #36]	@ (80098dc <MX_USB_Device_Init+0x54>)
 80098b6:	f7fe fe21 	bl	80084fc <USBD_CDC_RegisterInterface>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80098c0:	f7f7 fc9e 	bl	8001200 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80098c4:	4805      	ldr	r0, [pc, #20]	@ (80098dc <MX_USB_Device_Init+0x54>)
 80098c6:	f7fe ff16 	bl	80086f6 <USBD_Start>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80098d0:	f7f7 fc96 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80098d4:	bf00      	nop
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	20000130 	.word	0x20000130
 80098dc:	20000440 	.word	0x20000440
 80098e0:	20000018 	.word	0x20000018
 80098e4:	2000011c 	.word	0x2000011c

080098e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80098ec:	2200      	movs	r2, #0
 80098ee:	4905      	ldr	r1, [pc, #20]	@ (8009904 <CDC_Init_FS+0x1c>)
 80098f0:	4805      	ldr	r0, [pc, #20]	@ (8009908 <CDC_Init_FS+0x20>)
 80098f2:	f7fe fe18 	bl	8008526 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80098f6:	4905      	ldr	r1, [pc, #20]	@ (800990c <CDC_Init_FS+0x24>)
 80098f8:	4803      	ldr	r0, [pc, #12]	@ (8009908 <CDC_Init_FS+0x20>)
 80098fa:	f7fe fe32 	bl	8008562 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80098fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009900:	4618      	mov	r0, r3
 8009902:	bd80      	pop	{r7, pc}
 8009904:	20000f10 	.word	0x20000f10
 8009908:	20000440 	.word	0x20000440
 800990c:	20000710 	.word	0x20000710

08009910 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009910:	b480      	push	{r7}
 8009912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009914:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009916:	4618      	mov	r0, r3
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	6039      	str	r1, [r7, #0]
 800992a:	71fb      	strb	r3, [r7, #7]
 800992c:	4613      	mov	r3, r2
 800992e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009930:	79fb      	ldrb	r3, [r7, #7]
 8009932:	2b23      	cmp	r3, #35	@ 0x23
 8009934:	d84a      	bhi.n	80099cc <CDC_Control_FS+0xac>
 8009936:	a201      	add	r2, pc, #4	@ (adr r2, 800993c <CDC_Control_FS+0x1c>)
 8009938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993c:	080099cd 	.word	0x080099cd
 8009940:	080099cd 	.word	0x080099cd
 8009944:	080099cd 	.word	0x080099cd
 8009948:	080099cd 	.word	0x080099cd
 800994c:	080099cd 	.word	0x080099cd
 8009950:	080099cd 	.word	0x080099cd
 8009954:	080099cd 	.word	0x080099cd
 8009958:	080099cd 	.word	0x080099cd
 800995c:	080099cd 	.word	0x080099cd
 8009960:	080099cd 	.word	0x080099cd
 8009964:	080099cd 	.word	0x080099cd
 8009968:	080099cd 	.word	0x080099cd
 800996c:	080099cd 	.word	0x080099cd
 8009970:	080099cd 	.word	0x080099cd
 8009974:	080099cd 	.word	0x080099cd
 8009978:	080099cd 	.word	0x080099cd
 800997c:	080099cd 	.word	0x080099cd
 8009980:	080099cd 	.word	0x080099cd
 8009984:	080099cd 	.word	0x080099cd
 8009988:	080099cd 	.word	0x080099cd
 800998c:	080099cd 	.word	0x080099cd
 8009990:	080099cd 	.word	0x080099cd
 8009994:	080099cd 	.word	0x080099cd
 8009998:	080099cd 	.word	0x080099cd
 800999c:	080099cd 	.word	0x080099cd
 80099a0:	080099cd 	.word	0x080099cd
 80099a4:	080099cd 	.word	0x080099cd
 80099a8:	080099cd 	.word	0x080099cd
 80099ac:	080099cd 	.word	0x080099cd
 80099b0:	080099cd 	.word	0x080099cd
 80099b4:	080099cd 	.word	0x080099cd
 80099b8:	080099cd 	.word	0x080099cd
 80099bc:	080099cd 	.word	0x080099cd
 80099c0:	080099cd 	.word	0x080099cd
 80099c4:	080099cd 	.word	0x080099cd
 80099c8:	080099cd 	.word	0x080099cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80099cc:	bf00      	nop
  }

  return (USBD_OK);
 80099ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80099e6:	6879      	ldr	r1, [r7, #4]
 80099e8:	4805      	ldr	r0, [pc, #20]	@ (8009a00 <CDC_Receive_FS+0x24>)
 80099ea:	f7fe fdba 	bl	8008562 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80099ee:	4804      	ldr	r0, [pc, #16]	@ (8009a00 <CDC_Receive_FS+0x24>)
 80099f0:	f7fe fe00 	bl	80085f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80099f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	20000440 	.word	0x20000440

08009a04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009a14:	4b0d      	ldr	r3, [pc, #52]	@ (8009a4c <CDC_Transmit_FS+0x48>)
 8009a16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e00b      	b.n	8009a42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009a2a:	887b      	ldrh	r3, [r7, #2]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	6879      	ldr	r1, [r7, #4]
 8009a30:	4806      	ldr	r0, [pc, #24]	@ (8009a4c <CDC_Transmit_FS+0x48>)
 8009a32:	f7fe fd78 	bl	8008526 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009a36:	4805      	ldr	r0, [pc, #20]	@ (8009a4c <CDC_Transmit_FS+0x48>)
 8009a38:	f7fe fdac 	bl	8008594 <USBD_CDC_TransmitPacket>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20000440 	.word	0x20000440

08009a50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009a62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	371c      	adds	r7, #28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
	...

08009a74 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	6039      	str	r1, [r7, #0]
 8009a7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	2212      	movs	r2, #18
 8009a84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009a86:	4b03      	ldr	r3, [pc, #12]	@ (8009a94 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	20000150 	.word	0x20000150

08009a98 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	6039      	str	r1, [r7, #0]
 8009aa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2204      	movs	r2, #4
 8009aa8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009aaa:	4b03      	ldr	r3, [pc, #12]	@ (8009ab8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	20000164 	.word	0x20000164

08009abc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	6039      	str	r1, [r7, #0]
 8009ac6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ac8:	79fb      	ldrb	r3, [r7, #7]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d105      	bne.n	8009ada <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	4907      	ldr	r1, [pc, #28]	@ (8009af0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009ad2:	4808      	ldr	r0, [pc, #32]	@ (8009af4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009ad4:	f7ff fdf7 	bl	80096c6 <USBD_GetString>
 8009ad8:	e004      	b.n	8009ae4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	4904      	ldr	r1, [pc, #16]	@ (8009af0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009ade:	4805      	ldr	r0, [pc, #20]	@ (8009af4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009ae0:	f7ff fdf1 	bl	80096c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ae4:	4b02      	ldr	r3, [pc, #8]	@ (8009af0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20001710 	.word	0x20001710
 8009af4:	0800af88 	.word	0x0800af88

08009af8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	4603      	mov	r3, r0
 8009b00:	6039      	str	r1, [r7, #0]
 8009b02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	4904      	ldr	r1, [pc, #16]	@ (8009b18 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009b08:	4804      	ldr	r0, [pc, #16]	@ (8009b1c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009b0a:	f7ff fddc 	bl	80096c6 <USBD_GetString>
  return USBD_StrDesc;
 8009b0e:	4b02      	ldr	r3, [pc, #8]	@ (8009b18 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	20001710 	.word	0x20001710
 8009b1c:	0800afa0 	.word	0x0800afa0

08009b20 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	6039      	str	r1, [r7, #0]
 8009b2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	221a      	movs	r2, #26
 8009b30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b32:	f000 f843 	bl	8009bbc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009b36:	4b02      	ldr	r3, [pc, #8]	@ (8009b40 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	20000168 	.word	0x20000168

08009b44 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	6039      	str	r1, [r7, #0]
 8009b4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b50:	79fb      	ldrb	r3, [r7, #7]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d105      	bne.n	8009b62 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	4907      	ldr	r1, [pc, #28]	@ (8009b78 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009b5a:	4808      	ldr	r0, [pc, #32]	@ (8009b7c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009b5c:	f7ff fdb3 	bl	80096c6 <USBD_GetString>
 8009b60:	e004      	b.n	8009b6c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009b62:	683a      	ldr	r2, [r7, #0]
 8009b64:	4904      	ldr	r1, [pc, #16]	@ (8009b78 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009b66:	4805      	ldr	r0, [pc, #20]	@ (8009b7c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009b68:	f7ff fdad 	bl	80096c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b6c:	4b02      	ldr	r3, [pc, #8]	@ (8009b78 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20001710 	.word	0x20001710
 8009b7c:	0800afb4 	.word	0x0800afb4

08009b80 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	4603      	mov	r3, r0
 8009b88:	6039      	str	r1, [r7, #0]
 8009b8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b8c:	79fb      	ldrb	r3, [r7, #7]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d105      	bne.n	8009b9e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	4907      	ldr	r1, [pc, #28]	@ (8009bb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009b96:	4808      	ldr	r0, [pc, #32]	@ (8009bb8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009b98:	f7ff fd95 	bl	80096c6 <USBD_GetString>
 8009b9c:	e004      	b.n	8009ba8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	4904      	ldr	r1, [pc, #16]	@ (8009bb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009ba2:	4805      	ldr	r0, [pc, #20]	@ (8009bb8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009ba4:	f7ff fd8f 	bl	80096c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ba8:	4b02      	ldr	r3, [pc, #8]	@ (8009bb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3708      	adds	r7, #8
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20001710 	.word	0x20001710
 8009bb8:	0800afc0 	.word	0x0800afc0

08009bbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8009c00 <Get_SerialNum+0x44>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8009c04 <Get_SerialNum+0x48>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009bce:	4b0e      	ldr	r3, [pc, #56]	@ (8009c08 <Get_SerialNum+0x4c>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4413      	add	r3, r2
 8009bda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d009      	beq.n	8009bf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009be2:	2208      	movs	r2, #8
 8009be4:	4909      	ldr	r1, [pc, #36]	@ (8009c0c <Get_SerialNum+0x50>)
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f000 f814 	bl	8009c14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009bec:	2204      	movs	r2, #4
 8009bee:	4908      	ldr	r1, [pc, #32]	@ (8009c10 <Get_SerialNum+0x54>)
 8009bf0:	68b8      	ldr	r0, [r7, #8]
 8009bf2:	f000 f80f 	bl	8009c14 <IntToUnicode>
  }
}
 8009bf6:	bf00      	nop
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	1fff7590 	.word	0x1fff7590
 8009c04:	1fff7594 	.word	0x1fff7594
 8009c08:	1fff7598 	.word	0x1fff7598
 8009c0c:	2000016a 	.word	0x2000016a
 8009c10:	2000017a 	.word	0x2000017a

08009c14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c22:	2300      	movs	r3, #0
 8009c24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c26:	2300      	movs	r3, #0
 8009c28:	75fb      	strb	r3, [r7, #23]
 8009c2a:	e027      	b.n	8009c7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	0f1b      	lsrs	r3, r3, #28
 8009c30:	2b09      	cmp	r3, #9
 8009c32:	d80b      	bhi.n	8009c4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	0f1b      	lsrs	r3, r3, #28
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	7dfb      	ldrb	r3, [r7, #23]
 8009c3c:	005b      	lsls	r3, r3, #1
 8009c3e:	4619      	mov	r1, r3
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	440b      	add	r3, r1
 8009c44:	3230      	adds	r2, #48	@ 0x30
 8009c46:	b2d2      	uxtb	r2, r2
 8009c48:	701a      	strb	r2, [r3, #0]
 8009c4a:	e00a      	b.n	8009c62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	0f1b      	lsrs	r3, r3, #28
 8009c50:	b2da      	uxtb	r2, r3
 8009c52:	7dfb      	ldrb	r3, [r7, #23]
 8009c54:	005b      	lsls	r3, r3, #1
 8009c56:	4619      	mov	r1, r3
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	440b      	add	r3, r1
 8009c5c:	3237      	adds	r2, #55	@ 0x37
 8009c5e:	b2d2      	uxtb	r2, r2
 8009c60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	011b      	lsls	r3, r3, #4
 8009c66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c68:	7dfb      	ldrb	r3, [r7, #23]
 8009c6a:	005b      	lsls	r3, r3, #1
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	4413      	add	r3, r2
 8009c72:	2200      	movs	r2, #0
 8009c74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	75fb      	strb	r3, [r7, #23]
 8009c7c:	7dfa      	ldrb	r2, [r7, #23]
 8009c7e:	79fb      	ldrb	r3, [r7, #7]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d3d3      	bcc.n	8009c2c <IntToUnicode+0x18>
  }
}
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop
 8009c88:	371c      	adds	r7, #28
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
	...

08009c94 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b098      	sub	sp, #96	@ 0x60
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009c9c:	f107 0310 	add.w	r3, r7, #16
 8009ca0:	2250      	movs	r2, #80	@ 0x50
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f000 fb19 	bl	800a2dc <memset>
  if(pcdHandle->Instance==USB)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a15      	ldr	r2, [pc, #84]	@ (8009d04 <HAL_PCD_MspInit+0x70>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d122      	bne.n	8009cfa <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009cb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009cb8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009cbe:	f107 0310 	add.w	r3, r7, #16
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fa fe2e 	bl	8004924 <HAL_RCCEx_PeriphCLKConfig>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d001      	beq.n	8009cd2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009cce:	f7f7 fa97 	bl	8001200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8009d08 <HAL_PCD_MspInit+0x74>)
 8009cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8009d08 <HAL_PCD_MspInit+0x74>)
 8009cd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8009cde:	4b0a      	ldr	r3, [pc, #40]	@ (8009d08 <HAL_PCD_MspInit+0x74>)
 8009ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ce2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009cea:	2200      	movs	r2, #0
 8009cec:	2100      	movs	r1, #0
 8009cee:	2014      	movs	r0, #20
 8009cf0:	f7f7 fe77 	bl	80019e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009cf4:	2014      	movs	r0, #20
 8009cf6:	f7f7 fe8e 	bl	8001a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009cfa:	bf00      	nop
 8009cfc:	3760      	adds	r7, #96	@ 0x60
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	40005c00 	.word	0x40005c00
 8009d08:	40021000 	.word	0x40021000

08009d0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009d20:	4619      	mov	r1, r3
 8009d22:	4610      	mov	r0, r2
 8009d24:	f7fe fd32 	bl	800878c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009d28:	bf00      	nop
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009d42:	78fa      	ldrb	r2, [r7, #3]
 8009d44:	6879      	ldr	r1, [r7, #4]
 8009d46:	4613      	mov	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	00db      	lsls	r3, r3, #3
 8009d4e:	440b      	add	r3, r1
 8009d50:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	78fb      	ldrb	r3, [r7, #3]
 8009d58:	4619      	mov	r1, r3
 8009d5a:	f7fe fd6c 	bl	8008836 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009d5e:	bf00      	nop
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	460b      	mov	r3, r1
 8009d70:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009d78:	78fa      	ldrb	r2, [r7, #3]
 8009d7a:	6879      	ldr	r1, [r7, #4]
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	4413      	add	r3, r2
 8009d82:	00db      	lsls	r3, r3, #3
 8009d84:	440b      	add	r3, r1
 8009d86:	3324      	adds	r3, #36	@ 0x24
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	78fb      	ldrb	r3, [r7, #3]
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	f7fe fdb5 	bl	80088fc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009d92:	bf00      	nop
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b082      	sub	sp, #8
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fe fec9 	bl	8008b40 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009dae:	bf00      	nop
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	795b      	ldrb	r3, [r3, #5]
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d001      	beq.n	8009dce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009dca:	f7f7 fa19 	bl	8001200 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009dd4:	7bfa      	ldrb	r2, [r7, #15]
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fe fe73 	bl	8008ac4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fe fe1f 	bl	8008a28 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009dea:	bf00      	nop
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
	...

08009df4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fe fe6e 	bl	8008ae4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	7a5b      	ldrb	r3, [r3, #9]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d005      	beq.n	8009e1c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e10:	4b04      	ldr	r3, [pc, #16]	@ (8009e24 <HAL_PCD_SuspendCallback+0x30>)
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	4a03      	ldr	r2, [pc, #12]	@ (8009e24 <HAL_PCD_SuspendCallback+0x30>)
 8009e16:	f043 0306 	orr.w	r3, r3, #6
 8009e1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	e000ed00 	.word	0xe000ed00

08009e28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	7a5b      	ldrb	r3, [r3, #9]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d007      	beq.n	8009e48 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e38:	4b08      	ldr	r3, [pc, #32]	@ (8009e5c <HAL_PCD_ResumeCallback+0x34>)
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	4a07      	ldr	r2, [pc, #28]	@ (8009e5c <HAL_PCD_ResumeCallback+0x34>)
 8009e3e:	f023 0306 	bic.w	r3, r3, #6
 8009e42:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009e44:	f000 f9f8 	bl	800a238 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fe fe5e 	bl	8008b10 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009e54:	bf00      	nop
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	e000ed00 	.word	0xe000ed00

08009e60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009e68:	4a2b      	ldr	r2, [pc, #172]	@ (8009f18 <USBD_LL_Init+0xb8>)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a29      	ldr	r2, [pc, #164]	@ (8009f18 <USBD_LL_Init+0xb8>)
 8009e74:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009e78:	4b27      	ldr	r3, [pc, #156]	@ (8009f18 <USBD_LL_Init+0xb8>)
 8009e7a:	4a28      	ldr	r2, [pc, #160]	@ (8009f1c <USBD_LL_Init+0xbc>)
 8009e7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009e7e:	4b26      	ldr	r3, [pc, #152]	@ (8009f18 <USBD_LL_Init+0xb8>)
 8009e80:	2208      	movs	r2, #8
 8009e82:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009e84:	4b24      	ldr	r3, [pc, #144]	@ (8009f18 <USBD_LL_Init+0xb8>)
 8009e86:	2202      	movs	r2, #2
 8009e88:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009e8a:	4b23      	ldr	r3, [pc, #140]	@ (8009f18 <USBD_LL_Init+0xb8>)
 8009e8c:	2202      	movs	r2, #2
 8009e8e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009e90:	4b21      	ldr	r3, [pc, #132]	@ (8009f18 <USBD_LL_Init+0xb8>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009e96:	4b20      	ldr	r3, [pc, #128]	@ (8009f18 <USBD_LL_Init+0xb8>)
 8009e98:	2200      	movs	r2, #0
 8009e9a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8009f18 <USBD_LL_Init+0xb8>)
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8009f18 <USBD_LL_Init+0xb8>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009ea8:	481b      	ldr	r0, [pc, #108]	@ (8009f18 <USBD_LL_Init+0xb8>)
 8009eaa:	f7f8 fa57 	bl	800235c <HAL_PCD_Init>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009eb4:	f7f7 f9a4 	bl	8001200 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009ebe:	2318      	movs	r3, #24
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	f7f9 fede 	bl	8003c84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009ece:	2358      	movs	r3, #88	@ 0x58
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	2180      	movs	r1, #128	@ 0x80
 8009ed4:	f7f9 fed6 	bl	8003c84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009ede:	23c0      	movs	r3, #192	@ 0xc0
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	2181      	movs	r1, #129	@ 0x81
 8009ee4:	f7f9 fece 	bl	8003c84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009eee:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	f7f9 fec5 	bl	8003c84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009f00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f04:	2200      	movs	r2, #0
 8009f06:	2182      	movs	r1, #130	@ 0x82
 8009f08:	f7f9 febc 	bl	8003c84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	20001910 	.word	0x20001910
 8009f1c:	40005c00 	.word	0x40005c00

08009f20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7f8 fade 	bl	80024f8 <HAL_PCD_Start>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 f97e 	bl	800a244 <USBD_Get_USB_Status>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b084      	sub	sp, #16
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	4608      	mov	r0, r1
 8009f60:	4611      	mov	r1, r2
 8009f62:	461a      	mov	r2, r3
 8009f64:	4603      	mov	r3, r0
 8009f66:	70fb      	strb	r3, [r7, #3]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	70bb      	strb	r3, [r7, #2]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f74:	2300      	movs	r3, #0
 8009f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009f7e:	78bb      	ldrb	r3, [r7, #2]
 8009f80:	883a      	ldrh	r2, [r7, #0]
 8009f82:	78f9      	ldrb	r1, [r7, #3]
 8009f84:	f7f8 fc25 	bl	80027d2 <HAL_PCD_EP_Open>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f8c:	7bfb      	ldrb	r3, [r7, #15]
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f000 f958 	bl	800a244 <USBD_Get_USB_Status>
 8009f94:	4603      	mov	r3, r0
 8009f96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	460b      	mov	r3, r1
 8009fac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009fbc:	78fa      	ldrb	r2, [r7, #3]
 8009fbe:	4611      	mov	r1, r2
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7f8 fc65 	bl	8002890 <HAL_PCD_EP_Close>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f000 f939 	bl	800a244 <USBD_Get_USB_Status>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009ffa:	78fa      	ldrb	r2, [r7, #3]
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7f8 fd0e 	bl	8002a20 <HAL_PCD_EP_SetStall>
 800a004:	4603      	mov	r3, r0
 800a006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a008:	7bfb      	ldrb	r3, [r7, #15]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 f91a 	bl	800a244 <USBD_Get_USB_Status>
 800a010:	4603      	mov	r3, r0
 800a012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a014:	7bbb      	ldrb	r3, [r7, #14]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	460b      	mov	r3, r1
 800a028:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a038:	78fa      	ldrb	r2, [r7, #3]
 800a03a:	4611      	mov	r1, r2
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7f8 fd41 	bl	8002ac4 <HAL_PCD_EP_ClrStall>
 800a042:	4603      	mov	r3, r0
 800a044:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a046:	7bfb      	ldrb	r3, [r7, #15]
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 f8fb 	bl	800a244 <USBD_Get_USB_Status>
 800a04e:	4603      	mov	r3, r0
 800a050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a052:	7bbb      	ldrb	r3, [r7, #14]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	460b      	mov	r3, r1
 800a066:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a06e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a074:	2b00      	cmp	r3, #0
 800a076:	da0b      	bge.n	800a090 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a078:	78fb      	ldrb	r3, [r7, #3]
 800a07a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a07e:	68f9      	ldr	r1, [r7, #12]
 800a080:	4613      	mov	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	00db      	lsls	r3, r3, #3
 800a088:	440b      	add	r3, r1
 800a08a:	3312      	adds	r3, #18
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	e00b      	b.n	800a0a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a090:	78fb      	ldrb	r3, [r7, #3]
 800a092:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a096:	68f9      	ldr	r1, [r7, #12]
 800a098:	4613      	mov	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	4413      	add	r3, r2
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	440b      	add	r3, r1
 800a0a2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a0a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3714      	adds	r7, #20
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a0ce:	78fa      	ldrb	r2, [r7, #3]
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7f8 fb59 	bl	800278a <HAL_PCD_SetAddress>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 f8b0 	bl	800a244 <USBD_Get_USB_Status>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b086      	sub	sp, #24
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	60f8      	str	r0, [r7, #12]
 800a0fa:	607a      	str	r2, [r7, #4]
 800a0fc:	603b      	str	r3, [r7, #0]
 800a0fe:	460b      	mov	r3, r1
 800a100:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a110:	7af9      	ldrb	r1, [r7, #11]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	f7f8 fc4c 	bl	80029b2 <HAL_PCD_EP_Transmit>
 800a11a:	4603      	mov	r3, r0
 800a11c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a11e:	7dfb      	ldrb	r3, [r7, #23]
 800a120:	4618      	mov	r0, r3
 800a122:	f000 f88f 	bl	800a244 <USBD_Get_USB_Status>
 800a126:	4603      	mov	r3, r0
 800a128:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a12a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3718      	adds	r7, #24
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	607a      	str	r2, [r7, #4]
 800a13e:	603b      	str	r3, [r7, #0]
 800a140:	460b      	mov	r3, r1
 800a142:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a152:	7af9      	ldrb	r1, [r7, #11]
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	f7f8 fbe2 	bl	8002920 <HAL_PCD_EP_Receive>
 800a15c:	4603      	mov	r3, r0
 800a15e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a160:	7dfb      	ldrb	r3, [r7, #23]
 800a162:	4618      	mov	r0, r3
 800a164:	f000 f86e 	bl	800a244 <USBD_Get_USB_Status>
 800a168:	4603      	mov	r3, r0
 800a16a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a16c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b082      	sub	sp, #8
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	460b      	mov	r3, r1
 800a180:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a188:	78fa      	ldrb	r2, [r7, #3]
 800a18a:	4611      	mov	r1, r2
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7f8 fbf8 	bl	8002982 <HAL_PCD_EP_GetRxCount>
 800a192:	4603      	mov	r3, r0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a1a8:	78fb      	ldrb	r3, [r7, #3]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d002      	beq.n	800a1b4 <HAL_PCDEx_LPM_Callback+0x18>
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d013      	beq.n	800a1da <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a1b2:	e023      	b.n	800a1fc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	7a5b      	ldrb	r3, [r3, #9]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d007      	beq.n	800a1cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a1bc:	f000 f83c 	bl	800a238 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1c0:	4b10      	ldr	r3, [pc, #64]	@ (800a204 <HAL_PCDEx_LPM_Callback+0x68>)
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	4a0f      	ldr	r2, [pc, #60]	@ (800a204 <HAL_PCDEx_LPM_Callback+0x68>)
 800a1c6:	f023 0306 	bic.w	r3, r3, #6
 800a1ca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fe fc9c 	bl	8008b10 <USBD_LL_Resume>
    break;
 800a1d8:	e010      	b.n	800a1fc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7fe fc7f 	bl	8008ae4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	7a5b      	ldrb	r3, [r3, #9]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d005      	beq.n	800a1fa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1ee:	4b05      	ldr	r3, [pc, #20]	@ (800a204 <HAL_PCDEx_LPM_Callback+0x68>)
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	4a04      	ldr	r2, [pc, #16]	@ (800a204 <HAL_PCDEx_LPM_Callback+0x68>)
 800a1f4:	f043 0306 	orr.w	r3, r3, #6
 800a1f8:	6113      	str	r3, [r2, #16]
    break;
 800a1fa:	bf00      	nop
}
 800a1fc:	bf00      	nop
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	e000ed00 	.word	0xe000ed00

0800a208 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a210:	4b03      	ldr	r3, [pc, #12]	@ (800a220 <USBD_static_malloc+0x18>)
}
 800a212:	4618      	mov	r0, r3
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	20001bec 	.word	0x20001bec

0800a224 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]

}
 800a22c:	bf00      	nop
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a23c:	f7f6 fdea 	bl	8000e14 <SystemClock_Config>
}
 800a240:	bf00      	nop
 800a242:	bd80      	pop	{r7, pc}

0800a244 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	4603      	mov	r3, r0
 800a24c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a252:	79fb      	ldrb	r3, [r7, #7]
 800a254:	2b03      	cmp	r3, #3
 800a256:	d817      	bhi.n	800a288 <USBD_Get_USB_Status+0x44>
 800a258:	a201      	add	r2, pc, #4	@ (adr r2, 800a260 <USBD_Get_USB_Status+0x1c>)
 800a25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25e:	bf00      	nop
 800a260:	0800a271 	.word	0x0800a271
 800a264:	0800a277 	.word	0x0800a277
 800a268:	0800a27d 	.word	0x0800a27d
 800a26c:	0800a283 	.word	0x0800a283
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	73fb      	strb	r3, [r7, #15]
    break;
 800a274:	e00b      	b.n	800a28e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a276:	2303      	movs	r3, #3
 800a278:	73fb      	strb	r3, [r7, #15]
    break;
 800a27a:	e008      	b.n	800a28e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a27c:	2301      	movs	r3, #1
 800a27e:	73fb      	strb	r3, [r7, #15]
    break;
 800a280:	e005      	b.n	800a28e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a282:	2303      	movs	r3, #3
 800a284:	73fb      	strb	r3, [r7, #15]
    break;
 800a286:	e002      	b.n	800a28e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a288:	2303      	movs	r3, #3
 800a28a:	73fb      	strb	r3, [r7, #15]
    break;
 800a28c:	bf00      	nop
  }
  return usb_status;
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <_vsiprintf_r>:
 800a29c:	b500      	push	{lr}
 800a29e:	b09b      	sub	sp, #108	@ 0x6c
 800a2a0:	9100      	str	r1, [sp, #0]
 800a2a2:	9104      	str	r1, [sp, #16]
 800a2a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a2a8:	9105      	str	r1, [sp, #20]
 800a2aa:	9102      	str	r1, [sp, #8]
 800a2ac:	4905      	ldr	r1, [pc, #20]	@ (800a2c4 <_vsiprintf_r+0x28>)
 800a2ae:	9103      	str	r1, [sp, #12]
 800a2b0:	4669      	mov	r1, sp
 800a2b2:	f000 f99b 	bl	800a5ec <_svfiprintf_r>
 800a2b6:	9b00      	ldr	r3, [sp, #0]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	701a      	strb	r2, [r3, #0]
 800a2bc:	b01b      	add	sp, #108	@ 0x6c
 800a2be:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2c2:	bf00      	nop
 800a2c4:	ffff0208 	.word	0xffff0208

0800a2c8 <vsiprintf>:
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	460a      	mov	r2, r1
 800a2cc:	4601      	mov	r1, r0
 800a2ce:	4802      	ldr	r0, [pc, #8]	@ (800a2d8 <vsiprintf+0x10>)
 800a2d0:	6800      	ldr	r0, [r0, #0]
 800a2d2:	f7ff bfe3 	b.w	800a29c <_vsiprintf_r>
 800a2d6:	bf00      	nop
 800a2d8:	20000184 	.word	0x20000184

0800a2dc <memset>:
 800a2dc:	4402      	add	r2, r0
 800a2de:	4603      	mov	r3, r0
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d100      	bne.n	800a2e6 <memset+0xa>
 800a2e4:	4770      	bx	lr
 800a2e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a2ea:	e7f9      	b.n	800a2e0 <memset+0x4>

0800a2ec <__errno>:
 800a2ec:	4b01      	ldr	r3, [pc, #4]	@ (800a2f4 <__errno+0x8>)
 800a2ee:	6818      	ldr	r0, [r3, #0]
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	20000184 	.word	0x20000184

0800a2f8 <__libc_init_array>:
 800a2f8:	b570      	push	{r4, r5, r6, lr}
 800a2fa:	4d0d      	ldr	r5, [pc, #52]	@ (800a330 <__libc_init_array+0x38>)
 800a2fc:	4c0d      	ldr	r4, [pc, #52]	@ (800a334 <__libc_init_array+0x3c>)
 800a2fe:	1b64      	subs	r4, r4, r5
 800a300:	10a4      	asrs	r4, r4, #2
 800a302:	2600      	movs	r6, #0
 800a304:	42a6      	cmp	r6, r4
 800a306:	d109      	bne.n	800a31c <__libc_init_array+0x24>
 800a308:	4d0b      	ldr	r5, [pc, #44]	@ (800a338 <__libc_init_array+0x40>)
 800a30a:	4c0c      	ldr	r4, [pc, #48]	@ (800a33c <__libc_init_array+0x44>)
 800a30c:	f000 fc66 	bl	800abdc <_init>
 800a310:	1b64      	subs	r4, r4, r5
 800a312:	10a4      	asrs	r4, r4, #2
 800a314:	2600      	movs	r6, #0
 800a316:	42a6      	cmp	r6, r4
 800a318:	d105      	bne.n	800a326 <__libc_init_array+0x2e>
 800a31a:	bd70      	pop	{r4, r5, r6, pc}
 800a31c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a320:	4798      	blx	r3
 800a322:	3601      	adds	r6, #1
 800a324:	e7ee      	b.n	800a304 <__libc_init_array+0xc>
 800a326:	f855 3b04 	ldr.w	r3, [r5], #4
 800a32a:	4798      	blx	r3
 800a32c:	3601      	adds	r6, #1
 800a32e:	e7f2      	b.n	800a316 <__libc_init_array+0x1e>
 800a330:	0800b04c 	.word	0x0800b04c
 800a334:	0800b04c 	.word	0x0800b04c
 800a338:	0800b04c 	.word	0x0800b04c
 800a33c:	0800b050 	.word	0x0800b050

0800a340 <__retarget_lock_acquire_recursive>:
 800a340:	4770      	bx	lr

0800a342 <__retarget_lock_release_recursive>:
 800a342:	4770      	bx	lr

0800a344 <_free_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	4605      	mov	r5, r0
 800a348:	2900      	cmp	r1, #0
 800a34a:	d041      	beq.n	800a3d0 <_free_r+0x8c>
 800a34c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a350:	1f0c      	subs	r4, r1, #4
 800a352:	2b00      	cmp	r3, #0
 800a354:	bfb8      	it	lt
 800a356:	18e4      	addlt	r4, r4, r3
 800a358:	f000 f8e0 	bl	800a51c <__malloc_lock>
 800a35c:	4a1d      	ldr	r2, [pc, #116]	@ (800a3d4 <_free_r+0x90>)
 800a35e:	6813      	ldr	r3, [r2, #0]
 800a360:	b933      	cbnz	r3, 800a370 <_free_r+0x2c>
 800a362:	6063      	str	r3, [r4, #4]
 800a364:	6014      	str	r4, [r2, #0]
 800a366:	4628      	mov	r0, r5
 800a368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a36c:	f000 b8dc 	b.w	800a528 <__malloc_unlock>
 800a370:	42a3      	cmp	r3, r4
 800a372:	d908      	bls.n	800a386 <_free_r+0x42>
 800a374:	6820      	ldr	r0, [r4, #0]
 800a376:	1821      	adds	r1, r4, r0
 800a378:	428b      	cmp	r3, r1
 800a37a:	bf01      	itttt	eq
 800a37c:	6819      	ldreq	r1, [r3, #0]
 800a37e:	685b      	ldreq	r3, [r3, #4]
 800a380:	1809      	addeq	r1, r1, r0
 800a382:	6021      	streq	r1, [r4, #0]
 800a384:	e7ed      	b.n	800a362 <_free_r+0x1e>
 800a386:	461a      	mov	r2, r3
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	b10b      	cbz	r3, 800a390 <_free_r+0x4c>
 800a38c:	42a3      	cmp	r3, r4
 800a38e:	d9fa      	bls.n	800a386 <_free_r+0x42>
 800a390:	6811      	ldr	r1, [r2, #0]
 800a392:	1850      	adds	r0, r2, r1
 800a394:	42a0      	cmp	r0, r4
 800a396:	d10b      	bne.n	800a3b0 <_free_r+0x6c>
 800a398:	6820      	ldr	r0, [r4, #0]
 800a39a:	4401      	add	r1, r0
 800a39c:	1850      	adds	r0, r2, r1
 800a39e:	4283      	cmp	r3, r0
 800a3a0:	6011      	str	r1, [r2, #0]
 800a3a2:	d1e0      	bne.n	800a366 <_free_r+0x22>
 800a3a4:	6818      	ldr	r0, [r3, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	6053      	str	r3, [r2, #4]
 800a3aa:	4408      	add	r0, r1
 800a3ac:	6010      	str	r0, [r2, #0]
 800a3ae:	e7da      	b.n	800a366 <_free_r+0x22>
 800a3b0:	d902      	bls.n	800a3b8 <_free_r+0x74>
 800a3b2:	230c      	movs	r3, #12
 800a3b4:	602b      	str	r3, [r5, #0]
 800a3b6:	e7d6      	b.n	800a366 <_free_r+0x22>
 800a3b8:	6820      	ldr	r0, [r4, #0]
 800a3ba:	1821      	adds	r1, r4, r0
 800a3bc:	428b      	cmp	r3, r1
 800a3be:	bf04      	itt	eq
 800a3c0:	6819      	ldreq	r1, [r3, #0]
 800a3c2:	685b      	ldreq	r3, [r3, #4]
 800a3c4:	6063      	str	r3, [r4, #4]
 800a3c6:	bf04      	itt	eq
 800a3c8:	1809      	addeq	r1, r1, r0
 800a3ca:	6021      	streq	r1, [r4, #0]
 800a3cc:	6054      	str	r4, [r2, #4]
 800a3ce:	e7ca      	b.n	800a366 <_free_r+0x22>
 800a3d0:	bd38      	pop	{r3, r4, r5, pc}
 800a3d2:	bf00      	nop
 800a3d4:	20001f50 	.word	0x20001f50

0800a3d8 <sbrk_aligned>:
 800a3d8:	b570      	push	{r4, r5, r6, lr}
 800a3da:	4e0f      	ldr	r6, [pc, #60]	@ (800a418 <sbrk_aligned+0x40>)
 800a3dc:	460c      	mov	r4, r1
 800a3de:	6831      	ldr	r1, [r6, #0]
 800a3e0:	4605      	mov	r5, r0
 800a3e2:	b911      	cbnz	r1, 800a3ea <sbrk_aligned+0x12>
 800a3e4:	f000 fba6 	bl	800ab34 <_sbrk_r>
 800a3e8:	6030      	str	r0, [r6, #0]
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	f000 fba1 	bl	800ab34 <_sbrk_r>
 800a3f2:	1c43      	adds	r3, r0, #1
 800a3f4:	d103      	bne.n	800a3fe <sbrk_aligned+0x26>
 800a3f6:	f04f 34ff 	mov.w	r4, #4294967295
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	bd70      	pop	{r4, r5, r6, pc}
 800a3fe:	1cc4      	adds	r4, r0, #3
 800a400:	f024 0403 	bic.w	r4, r4, #3
 800a404:	42a0      	cmp	r0, r4
 800a406:	d0f8      	beq.n	800a3fa <sbrk_aligned+0x22>
 800a408:	1a21      	subs	r1, r4, r0
 800a40a:	4628      	mov	r0, r5
 800a40c:	f000 fb92 	bl	800ab34 <_sbrk_r>
 800a410:	3001      	adds	r0, #1
 800a412:	d1f2      	bne.n	800a3fa <sbrk_aligned+0x22>
 800a414:	e7ef      	b.n	800a3f6 <sbrk_aligned+0x1e>
 800a416:	bf00      	nop
 800a418:	20001f4c 	.word	0x20001f4c

0800a41c <_malloc_r>:
 800a41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a420:	1ccd      	adds	r5, r1, #3
 800a422:	f025 0503 	bic.w	r5, r5, #3
 800a426:	3508      	adds	r5, #8
 800a428:	2d0c      	cmp	r5, #12
 800a42a:	bf38      	it	cc
 800a42c:	250c      	movcc	r5, #12
 800a42e:	2d00      	cmp	r5, #0
 800a430:	4606      	mov	r6, r0
 800a432:	db01      	blt.n	800a438 <_malloc_r+0x1c>
 800a434:	42a9      	cmp	r1, r5
 800a436:	d904      	bls.n	800a442 <_malloc_r+0x26>
 800a438:	230c      	movs	r3, #12
 800a43a:	6033      	str	r3, [r6, #0]
 800a43c:	2000      	movs	r0, #0
 800a43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a442:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a518 <_malloc_r+0xfc>
 800a446:	f000 f869 	bl	800a51c <__malloc_lock>
 800a44a:	f8d8 3000 	ldr.w	r3, [r8]
 800a44e:	461c      	mov	r4, r3
 800a450:	bb44      	cbnz	r4, 800a4a4 <_malloc_r+0x88>
 800a452:	4629      	mov	r1, r5
 800a454:	4630      	mov	r0, r6
 800a456:	f7ff ffbf 	bl	800a3d8 <sbrk_aligned>
 800a45a:	1c43      	adds	r3, r0, #1
 800a45c:	4604      	mov	r4, r0
 800a45e:	d158      	bne.n	800a512 <_malloc_r+0xf6>
 800a460:	f8d8 4000 	ldr.w	r4, [r8]
 800a464:	4627      	mov	r7, r4
 800a466:	2f00      	cmp	r7, #0
 800a468:	d143      	bne.n	800a4f2 <_malloc_r+0xd6>
 800a46a:	2c00      	cmp	r4, #0
 800a46c:	d04b      	beq.n	800a506 <_malloc_r+0xea>
 800a46e:	6823      	ldr	r3, [r4, #0]
 800a470:	4639      	mov	r1, r7
 800a472:	4630      	mov	r0, r6
 800a474:	eb04 0903 	add.w	r9, r4, r3
 800a478:	f000 fb5c 	bl	800ab34 <_sbrk_r>
 800a47c:	4581      	cmp	r9, r0
 800a47e:	d142      	bne.n	800a506 <_malloc_r+0xea>
 800a480:	6821      	ldr	r1, [r4, #0]
 800a482:	1a6d      	subs	r5, r5, r1
 800a484:	4629      	mov	r1, r5
 800a486:	4630      	mov	r0, r6
 800a488:	f7ff ffa6 	bl	800a3d8 <sbrk_aligned>
 800a48c:	3001      	adds	r0, #1
 800a48e:	d03a      	beq.n	800a506 <_malloc_r+0xea>
 800a490:	6823      	ldr	r3, [r4, #0]
 800a492:	442b      	add	r3, r5
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	f8d8 3000 	ldr.w	r3, [r8]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	bb62      	cbnz	r2, 800a4f8 <_malloc_r+0xdc>
 800a49e:	f8c8 7000 	str.w	r7, [r8]
 800a4a2:	e00f      	b.n	800a4c4 <_malloc_r+0xa8>
 800a4a4:	6822      	ldr	r2, [r4, #0]
 800a4a6:	1b52      	subs	r2, r2, r5
 800a4a8:	d420      	bmi.n	800a4ec <_malloc_r+0xd0>
 800a4aa:	2a0b      	cmp	r2, #11
 800a4ac:	d917      	bls.n	800a4de <_malloc_r+0xc2>
 800a4ae:	1961      	adds	r1, r4, r5
 800a4b0:	42a3      	cmp	r3, r4
 800a4b2:	6025      	str	r5, [r4, #0]
 800a4b4:	bf18      	it	ne
 800a4b6:	6059      	strne	r1, [r3, #4]
 800a4b8:	6863      	ldr	r3, [r4, #4]
 800a4ba:	bf08      	it	eq
 800a4bc:	f8c8 1000 	streq.w	r1, [r8]
 800a4c0:	5162      	str	r2, [r4, r5]
 800a4c2:	604b      	str	r3, [r1, #4]
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f000 f82f 	bl	800a528 <__malloc_unlock>
 800a4ca:	f104 000b 	add.w	r0, r4, #11
 800a4ce:	1d23      	adds	r3, r4, #4
 800a4d0:	f020 0007 	bic.w	r0, r0, #7
 800a4d4:	1ac2      	subs	r2, r0, r3
 800a4d6:	bf1c      	itt	ne
 800a4d8:	1a1b      	subne	r3, r3, r0
 800a4da:	50a3      	strne	r3, [r4, r2]
 800a4dc:	e7af      	b.n	800a43e <_malloc_r+0x22>
 800a4de:	6862      	ldr	r2, [r4, #4]
 800a4e0:	42a3      	cmp	r3, r4
 800a4e2:	bf0c      	ite	eq
 800a4e4:	f8c8 2000 	streq.w	r2, [r8]
 800a4e8:	605a      	strne	r2, [r3, #4]
 800a4ea:	e7eb      	b.n	800a4c4 <_malloc_r+0xa8>
 800a4ec:	4623      	mov	r3, r4
 800a4ee:	6864      	ldr	r4, [r4, #4]
 800a4f0:	e7ae      	b.n	800a450 <_malloc_r+0x34>
 800a4f2:	463c      	mov	r4, r7
 800a4f4:	687f      	ldr	r7, [r7, #4]
 800a4f6:	e7b6      	b.n	800a466 <_malloc_r+0x4a>
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	42a3      	cmp	r3, r4
 800a4fe:	d1fb      	bne.n	800a4f8 <_malloc_r+0xdc>
 800a500:	2300      	movs	r3, #0
 800a502:	6053      	str	r3, [r2, #4]
 800a504:	e7de      	b.n	800a4c4 <_malloc_r+0xa8>
 800a506:	230c      	movs	r3, #12
 800a508:	6033      	str	r3, [r6, #0]
 800a50a:	4630      	mov	r0, r6
 800a50c:	f000 f80c 	bl	800a528 <__malloc_unlock>
 800a510:	e794      	b.n	800a43c <_malloc_r+0x20>
 800a512:	6005      	str	r5, [r0, #0]
 800a514:	e7d6      	b.n	800a4c4 <_malloc_r+0xa8>
 800a516:	bf00      	nop
 800a518:	20001f50 	.word	0x20001f50

0800a51c <__malloc_lock>:
 800a51c:	4801      	ldr	r0, [pc, #4]	@ (800a524 <__malloc_lock+0x8>)
 800a51e:	f7ff bf0f 	b.w	800a340 <__retarget_lock_acquire_recursive>
 800a522:	bf00      	nop
 800a524:	20001f48 	.word	0x20001f48

0800a528 <__malloc_unlock>:
 800a528:	4801      	ldr	r0, [pc, #4]	@ (800a530 <__malloc_unlock+0x8>)
 800a52a:	f7ff bf0a 	b.w	800a342 <__retarget_lock_release_recursive>
 800a52e:	bf00      	nop
 800a530:	20001f48 	.word	0x20001f48

0800a534 <__ssputs_r>:
 800a534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a538:	688e      	ldr	r6, [r1, #8]
 800a53a:	461f      	mov	r7, r3
 800a53c:	42be      	cmp	r6, r7
 800a53e:	680b      	ldr	r3, [r1, #0]
 800a540:	4682      	mov	sl, r0
 800a542:	460c      	mov	r4, r1
 800a544:	4690      	mov	r8, r2
 800a546:	d82d      	bhi.n	800a5a4 <__ssputs_r+0x70>
 800a548:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a54c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a550:	d026      	beq.n	800a5a0 <__ssputs_r+0x6c>
 800a552:	6965      	ldr	r5, [r4, #20]
 800a554:	6909      	ldr	r1, [r1, #16]
 800a556:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a55a:	eba3 0901 	sub.w	r9, r3, r1
 800a55e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a562:	1c7b      	adds	r3, r7, #1
 800a564:	444b      	add	r3, r9
 800a566:	106d      	asrs	r5, r5, #1
 800a568:	429d      	cmp	r5, r3
 800a56a:	bf38      	it	cc
 800a56c:	461d      	movcc	r5, r3
 800a56e:	0553      	lsls	r3, r2, #21
 800a570:	d527      	bpl.n	800a5c2 <__ssputs_r+0x8e>
 800a572:	4629      	mov	r1, r5
 800a574:	f7ff ff52 	bl	800a41c <_malloc_r>
 800a578:	4606      	mov	r6, r0
 800a57a:	b360      	cbz	r0, 800a5d6 <__ssputs_r+0xa2>
 800a57c:	6921      	ldr	r1, [r4, #16]
 800a57e:	464a      	mov	r2, r9
 800a580:	f000 fae8 	bl	800ab54 <memcpy>
 800a584:	89a3      	ldrh	r3, [r4, #12]
 800a586:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a58a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a58e:	81a3      	strh	r3, [r4, #12]
 800a590:	6126      	str	r6, [r4, #16]
 800a592:	6165      	str	r5, [r4, #20]
 800a594:	444e      	add	r6, r9
 800a596:	eba5 0509 	sub.w	r5, r5, r9
 800a59a:	6026      	str	r6, [r4, #0]
 800a59c:	60a5      	str	r5, [r4, #8]
 800a59e:	463e      	mov	r6, r7
 800a5a0:	42be      	cmp	r6, r7
 800a5a2:	d900      	bls.n	800a5a6 <__ssputs_r+0x72>
 800a5a4:	463e      	mov	r6, r7
 800a5a6:	6820      	ldr	r0, [r4, #0]
 800a5a8:	4632      	mov	r2, r6
 800a5aa:	4641      	mov	r1, r8
 800a5ac:	f000 faa8 	bl	800ab00 <memmove>
 800a5b0:	68a3      	ldr	r3, [r4, #8]
 800a5b2:	1b9b      	subs	r3, r3, r6
 800a5b4:	60a3      	str	r3, [r4, #8]
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	4433      	add	r3, r6
 800a5ba:	6023      	str	r3, [r4, #0]
 800a5bc:	2000      	movs	r0, #0
 800a5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c2:	462a      	mov	r2, r5
 800a5c4:	f000 fad4 	bl	800ab70 <_realloc_r>
 800a5c8:	4606      	mov	r6, r0
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d1e0      	bne.n	800a590 <__ssputs_r+0x5c>
 800a5ce:	6921      	ldr	r1, [r4, #16]
 800a5d0:	4650      	mov	r0, sl
 800a5d2:	f7ff feb7 	bl	800a344 <_free_r>
 800a5d6:	230c      	movs	r3, #12
 800a5d8:	f8ca 3000 	str.w	r3, [sl]
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5e2:	81a3      	strh	r3, [r4, #12]
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e8:	e7e9      	b.n	800a5be <__ssputs_r+0x8a>
	...

0800a5ec <_svfiprintf_r>:
 800a5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f0:	4698      	mov	r8, r3
 800a5f2:	898b      	ldrh	r3, [r1, #12]
 800a5f4:	061b      	lsls	r3, r3, #24
 800a5f6:	b09d      	sub	sp, #116	@ 0x74
 800a5f8:	4607      	mov	r7, r0
 800a5fa:	460d      	mov	r5, r1
 800a5fc:	4614      	mov	r4, r2
 800a5fe:	d510      	bpl.n	800a622 <_svfiprintf_r+0x36>
 800a600:	690b      	ldr	r3, [r1, #16]
 800a602:	b973      	cbnz	r3, 800a622 <_svfiprintf_r+0x36>
 800a604:	2140      	movs	r1, #64	@ 0x40
 800a606:	f7ff ff09 	bl	800a41c <_malloc_r>
 800a60a:	6028      	str	r0, [r5, #0]
 800a60c:	6128      	str	r0, [r5, #16]
 800a60e:	b930      	cbnz	r0, 800a61e <_svfiprintf_r+0x32>
 800a610:	230c      	movs	r3, #12
 800a612:	603b      	str	r3, [r7, #0]
 800a614:	f04f 30ff 	mov.w	r0, #4294967295
 800a618:	b01d      	add	sp, #116	@ 0x74
 800a61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61e:	2340      	movs	r3, #64	@ 0x40
 800a620:	616b      	str	r3, [r5, #20]
 800a622:	2300      	movs	r3, #0
 800a624:	9309      	str	r3, [sp, #36]	@ 0x24
 800a626:	2320      	movs	r3, #32
 800a628:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a62c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a630:	2330      	movs	r3, #48	@ 0x30
 800a632:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a7d0 <_svfiprintf_r+0x1e4>
 800a636:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a63a:	f04f 0901 	mov.w	r9, #1
 800a63e:	4623      	mov	r3, r4
 800a640:	469a      	mov	sl, r3
 800a642:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a646:	b10a      	cbz	r2, 800a64c <_svfiprintf_r+0x60>
 800a648:	2a25      	cmp	r2, #37	@ 0x25
 800a64a:	d1f9      	bne.n	800a640 <_svfiprintf_r+0x54>
 800a64c:	ebba 0b04 	subs.w	fp, sl, r4
 800a650:	d00b      	beq.n	800a66a <_svfiprintf_r+0x7e>
 800a652:	465b      	mov	r3, fp
 800a654:	4622      	mov	r2, r4
 800a656:	4629      	mov	r1, r5
 800a658:	4638      	mov	r0, r7
 800a65a:	f7ff ff6b 	bl	800a534 <__ssputs_r>
 800a65e:	3001      	adds	r0, #1
 800a660:	f000 80a7 	beq.w	800a7b2 <_svfiprintf_r+0x1c6>
 800a664:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a666:	445a      	add	r2, fp
 800a668:	9209      	str	r2, [sp, #36]	@ 0x24
 800a66a:	f89a 3000 	ldrb.w	r3, [sl]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f000 809f 	beq.w	800a7b2 <_svfiprintf_r+0x1c6>
 800a674:	2300      	movs	r3, #0
 800a676:	f04f 32ff 	mov.w	r2, #4294967295
 800a67a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a67e:	f10a 0a01 	add.w	sl, sl, #1
 800a682:	9304      	str	r3, [sp, #16]
 800a684:	9307      	str	r3, [sp, #28]
 800a686:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a68a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a68c:	4654      	mov	r4, sl
 800a68e:	2205      	movs	r2, #5
 800a690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a694:	484e      	ldr	r0, [pc, #312]	@ (800a7d0 <_svfiprintf_r+0x1e4>)
 800a696:	f7f5 fdc3 	bl	8000220 <memchr>
 800a69a:	9a04      	ldr	r2, [sp, #16]
 800a69c:	b9d8      	cbnz	r0, 800a6d6 <_svfiprintf_r+0xea>
 800a69e:	06d0      	lsls	r0, r2, #27
 800a6a0:	bf44      	itt	mi
 800a6a2:	2320      	movmi	r3, #32
 800a6a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6a8:	0711      	lsls	r1, r2, #28
 800a6aa:	bf44      	itt	mi
 800a6ac:	232b      	movmi	r3, #43	@ 0x2b
 800a6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6b8:	d015      	beq.n	800a6e6 <_svfiprintf_r+0xfa>
 800a6ba:	9a07      	ldr	r2, [sp, #28]
 800a6bc:	4654      	mov	r4, sl
 800a6be:	2000      	movs	r0, #0
 800a6c0:	f04f 0c0a 	mov.w	ip, #10
 800a6c4:	4621      	mov	r1, r4
 800a6c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6ca:	3b30      	subs	r3, #48	@ 0x30
 800a6cc:	2b09      	cmp	r3, #9
 800a6ce:	d94b      	bls.n	800a768 <_svfiprintf_r+0x17c>
 800a6d0:	b1b0      	cbz	r0, 800a700 <_svfiprintf_r+0x114>
 800a6d2:	9207      	str	r2, [sp, #28]
 800a6d4:	e014      	b.n	800a700 <_svfiprintf_r+0x114>
 800a6d6:	eba0 0308 	sub.w	r3, r0, r8
 800a6da:	fa09 f303 	lsl.w	r3, r9, r3
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	9304      	str	r3, [sp, #16]
 800a6e2:	46a2      	mov	sl, r4
 800a6e4:	e7d2      	b.n	800a68c <_svfiprintf_r+0xa0>
 800a6e6:	9b03      	ldr	r3, [sp, #12]
 800a6e8:	1d19      	adds	r1, r3, #4
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	9103      	str	r1, [sp, #12]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	bfbb      	ittet	lt
 800a6f2:	425b      	neglt	r3, r3
 800a6f4:	f042 0202 	orrlt.w	r2, r2, #2
 800a6f8:	9307      	strge	r3, [sp, #28]
 800a6fa:	9307      	strlt	r3, [sp, #28]
 800a6fc:	bfb8      	it	lt
 800a6fe:	9204      	strlt	r2, [sp, #16]
 800a700:	7823      	ldrb	r3, [r4, #0]
 800a702:	2b2e      	cmp	r3, #46	@ 0x2e
 800a704:	d10a      	bne.n	800a71c <_svfiprintf_r+0x130>
 800a706:	7863      	ldrb	r3, [r4, #1]
 800a708:	2b2a      	cmp	r3, #42	@ 0x2a
 800a70a:	d132      	bne.n	800a772 <_svfiprintf_r+0x186>
 800a70c:	9b03      	ldr	r3, [sp, #12]
 800a70e:	1d1a      	adds	r2, r3, #4
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	9203      	str	r2, [sp, #12]
 800a714:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a718:	3402      	adds	r4, #2
 800a71a:	9305      	str	r3, [sp, #20]
 800a71c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a7e0 <_svfiprintf_r+0x1f4>
 800a720:	7821      	ldrb	r1, [r4, #0]
 800a722:	2203      	movs	r2, #3
 800a724:	4650      	mov	r0, sl
 800a726:	f7f5 fd7b 	bl	8000220 <memchr>
 800a72a:	b138      	cbz	r0, 800a73c <_svfiprintf_r+0x150>
 800a72c:	9b04      	ldr	r3, [sp, #16]
 800a72e:	eba0 000a 	sub.w	r0, r0, sl
 800a732:	2240      	movs	r2, #64	@ 0x40
 800a734:	4082      	lsls	r2, r0
 800a736:	4313      	orrs	r3, r2
 800a738:	3401      	adds	r4, #1
 800a73a:	9304      	str	r3, [sp, #16]
 800a73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a740:	4824      	ldr	r0, [pc, #144]	@ (800a7d4 <_svfiprintf_r+0x1e8>)
 800a742:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a746:	2206      	movs	r2, #6
 800a748:	f7f5 fd6a 	bl	8000220 <memchr>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d036      	beq.n	800a7be <_svfiprintf_r+0x1d2>
 800a750:	4b21      	ldr	r3, [pc, #132]	@ (800a7d8 <_svfiprintf_r+0x1ec>)
 800a752:	bb1b      	cbnz	r3, 800a79c <_svfiprintf_r+0x1b0>
 800a754:	9b03      	ldr	r3, [sp, #12]
 800a756:	3307      	adds	r3, #7
 800a758:	f023 0307 	bic.w	r3, r3, #7
 800a75c:	3308      	adds	r3, #8
 800a75e:	9303      	str	r3, [sp, #12]
 800a760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a762:	4433      	add	r3, r6
 800a764:	9309      	str	r3, [sp, #36]	@ 0x24
 800a766:	e76a      	b.n	800a63e <_svfiprintf_r+0x52>
 800a768:	fb0c 3202 	mla	r2, ip, r2, r3
 800a76c:	460c      	mov	r4, r1
 800a76e:	2001      	movs	r0, #1
 800a770:	e7a8      	b.n	800a6c4 <_svfiprintf_r+0xd8>
 800a772:	2300      	movs	r3, #0
 800a774:	3401      	adds	r4, #1
 800a776:	9305      	str	r3, [sp, #20]
 800a778:	4619      	mov	r1, r3
 800a77a:	f04f 0c0a 	mov.w	ip, #10
 800a77e:	4620      	mov	r0, r4
 800a780:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a784:	3a30      	subs	r2, #48	@ 0x30
 800a786:	2a09      	cmp	r2, #9
 800a788:	d903      	bls.n	800a792 <_svfiprintf_r+0x1a6>
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d0c6      	beq.n	800a71c <_svfiprintf_r+0x130>
 800a78e:	9105      	str	r1, [sp, #20]
 800a790:	e7c4      	b.n	800a71c <_svfiprintf_r+0x130>
 800a792:	fb0c 2101 	mla	r1, ip, r1, r2
 800a796:	4604      	mov	r4, r0
 800a798:	2301      	movs	r3, #1
 800a79a:	e7f0      	b.n	800a77e <_svfiprintf_r+0x192>
 800a79c:	ab03      	add	r3, sp, #12
 800a79e:	9300      	str	r3, [sp, #0]
 800a7a0:	462a      	mov	r2, r5
 800a7a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a7dc <_svfiprintf_r+0x1f0>)
 800a7a4:	a904      	add	r1, sp, #16
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	f3af 8000 	nop.w
 800a7ac:	1c42      	adds	r2, r0, #1
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	d1d6      	bne.n	800a760 <_svfiprintf_r+0x174>
 800a7b2:	89ab      	ldrh	r3, [r5, #12]
 800a7b4:	065b      	lsls	r3, r3, #25
 800a7b6:	f53f af2d 	bmi.w	800a614 <_svfiprintf_r+0x28>
 800a7ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7bc:	e72c      	b.n	800a618 <_svfiprintf_r+0x2c>
 800a7be:	ab03      	add	r3, sp, #12
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	462a      	mov	r2, r5
 800a7c4:	4b05      	ldr	r3, [pc, #20]	@ (800a7dc <_svfiprintf_r+0x1f0>)
 800a7c6:	a904      	add	r1, sp, #16
 800a7c8:	4638      	mov	r0, r7
 800a7ca:	f000 f879 	bl	800a8c0 <_printf_i>
 800a7ce:	e7ed      	b.n	800a7ac <_svfiprintf_r+0x1c0>
 800a7d0:	0800b010 	.word	0x0800b010
 800a7d4:	0800b01a 	.word	0x0800b01a
 800a7d8:	00000000 	.word	0x00000000
 800a7dc:	0800a535 	.word	0x0800a535
 800a7e0:	0800b016 	.word	0x0800b016

0800a7e4 <_printf_common>:
 800a7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e8:	4616      	mov	r6, r2
 800a7ea:	4698      	mov	r8, r3
 800a7ec:	688a      	ldr	r2, [r1, #8]
 800a7ee:	690b      	ldr	r3, [r1, #16]
 800a7f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	bfb8      	it	lt
 800a7f8:	4613      	movlt	r3, r2
 800a7fa:	6033      	str	r3, [r6, #0]
 800a7fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a800:	4607      	mov	r7, r0
 800a802:	460c      	mov	r4, r1
 800a804:	b10a      	cbz	r2, 800a80a <_printf_common+0x26>
 800a806:	3301      	adds	r3, #1
 800a808:	6033      	str	r3, [r6, #0]
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	0699      	lsls	r1, r3, #26
 800a80e:	bf42      	ittt	mi
 800a810:	6833      	ldrmi	r3, [r6, #0]
 800a812:	3302      	addmi	r3, #2
 800a814:	6033      	strmi	r3, [r6, #0]
 800a816:	6825      	ldr	r5, [r4, #0]
 800a818:	f015 0506 	ands.w	r5, r5, #6
 800a81c:	d106      	bne.n	800a82c <_printf_common+0x48>
 800a81e:	f104 0a19 	add.w	sl, r4, #25
 800a822:	68e3      	ldr	r3, [r4, #12]
 800a824:	6832      	ldr	r2, [r6, #0]
 800a826:	1a9b      	subs	r3, r3, r2
 800a828:	42ab      	cmp	r3, r5
 800a82a:	dc26      	bgt.n	800a87a <_printf_common+0x96>
 800a82c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a830:	6822      	ldr	r2, [r4, #0]
 800a832:	3b00      	subs	r3, #0
 800a834:	bf18      	it	ne
 800a836:	2301      	movne	r3, #1
 800a838:	0692      	lsls	r2, r2, #26
 800a83a:	d42b      	bmi.n	800a894 <_printf_common+0xb0>
 800a83c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a840:	4641      	mov	r1, r8
 800a842:	4638      	mov	r0, r7
 800a844:	47c8      	blx	r9
 800a846:	3001      	adds	r0, #1
 800a848:	d01e      	beq.n	800a888 <_printf_common+0xa4>
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	6922      	ldr	r2, [r4, #16]
 800a84e:	f003 0306 	and.w	r3, r3, #6
 800a852:	2b04      	cmp	r3, #4
 800a854:	bf02      	ittt	eq
 800a856:	68e5      	ldreq	r5, [r4, #12]
 800a858:	6833      	ldreq	r3, [r6, #0]
 800a85a:	1aed      	subeq	r5, r5, r3
 800a85c:	68a3      	ldr	r3, [r4, #8]
 800a85e:	bf0c      	ite	eq
 800a860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a864:	2500      	movne	r5, #0
 800a866:	4293      	cmp	r3, r2
 800a868:	bfc4      	itt	gt
 800a86a:	1a9b      	subgt	r3, r3, r2
 800a86c:	18ed      	addgt	r5, r5, r3
 800a86e:	2600      	movs	r6, #0
 800a870:	341a      	adds	r4, #26
 800a872:	42b5      	cmp	r5, r6
 800a874:	d11a      	bne.n	800a8ac <_printf_common+0xc8>
 800a876:	2000      	movs	r0, #0
 800a878:	e008      	b.n	800a88c <_printf_common+0xa8>
 800a87a:	2301      	movs	r3, #1
 800a87c:	4652      	mov	r2, sl
 800a87e:	4641      	mov	r1, r8
 800a880:	4638      	mov	r0, r7
 800a882:	47c8      	blx	r9
 800a884:	3001      	adds	r0, #1
 800a886:	d103      	bne.n	800a890 <_printf_common+0xac>
 800a888:	f04f 30ff 	mov.w	r0, #4294967295
 800a88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a890:	3501      	adds	r5, #1
 800a892:	e7c6      	b.n	800a822 <_printf_common+0x3e>
 800a894:	18e1      	adds	r1, r4, r3
 800a896:	1c5a      	adds	r2, r3, #1
 800a898:	2030      	movs	r0, #48	@ 0x30
 800a89a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a89e:	4422      	add	r2, r4
 800a8a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a8a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a8a8:	3302      	adds	r3, #2
 800a8aa:	e7c7      	b.n	800a83c <_printf_common+0x58>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	4622      	mov	r2, r4
 800a8b0:	4641      	mov	r1, r8
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	47c8      	blx	r9
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	d0e6      	beq.n	800a888 <_printf_common+0xa4>
 800a8ba:	3601      	adds	r6, #1
 800a8bc:	e7d9      	b.n	800a872 <_printf_common+0x8e>
	...

0800a8c0 <_printf_i>:
 800a8c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c4:	7e0f      	ldrb	r7, [r1, #24]
 800a8c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8c8:	2f78      	cmp	r7, #120	@ 0x78
 800a8ca:	4691      	mov	r9, r2
 800a8cc:	4680      	mov	r8, r0
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	469a      	mov	sl, r3
 800a8d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8d6:	d807      	bhi.n	800a8e8 <_printf_i+0x28>
 800a8d8:	2f62      	cmp	r7, #98	@ 0x62
 800a8da:	d80a      	bhi.n	800a8f2 <_printf_i+0x32>
 800a8dc:	2f00      	cmp	r7, #0
 800a8de:	f000 80d2 	beq.w	800aa86 <_printf_i+0x1c6>
 800a8e2:	2f58      	cmp	r7, #88	@ 0x58
 800a8e4:	f000 80b9 	beq.w	800aa5a <_printf_i+0x19a>
 800a8e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a8f0:	e03a      	b.n	800a968 <_printf_i+0xa8>
 800a8f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a8f6:	2b15      	cmp	r3, #21
 800a8f8:	d8f6      	bhi.n	800a8e8 <_printf_i+0x28>
 800a8fa:	a101      	add	r1, pc, #4	@ (adr r1, 800a900 <_printf_i+0x40>)
 800a8fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a900:	0800a959 	.word	0x0800a959
 800a904:	0800a96d 	.word	0x0800a96d
 800a908:	0800a8e9 	.word	0x0800a8e9
 800a90c:	0800a8e9 	.word	0x0800a8e9
 800a910:	0800a8e9 	.word	0x0800a8e9
 800a914:	0800a8e9 	.word	0x0800a8e9
 800a918:	0800a96d 	.word	0x0800a96d
 800a91c:	0800a8e9 	.word	0x0800a8e9
 800a920:	0800a8e9 	.word	0x0800a8e9
 800a924:	0800a8e9 	.word	0x0800a8e9
 800a928:	0800a8e9 	.word	0x0800a8e9
 800a92c:	0800aa6d 	.word	0x0800aa6d
 800a930:	0800a997 	.word	0x0800a997
 800a934:	0800aa27 	.word	0x0800aa27
 800a938:	0800a8e9 	.word	0x0800a8e9
 800a93c:	0800a8e9 	.word	0x0800a8e9
 800a940:	0800aa8f 	.word	0x0800aa8f
 800a944:	0800a8e9 	.word	0x0800a8e9
 800a948:	0800a997 	.word	0x0800a997
 800a94c:	0800a8e9 	.word	0x0800a8e9
 800a950:	0800a8e9 	.word	0x0800a8e9
 800a954:	0800aa2f 	.word	0x0800aa2f
 800a958:	6833      	ldr	r3, [r6, #0]
 800a95a:	1d1a      	adds	r2, r3, #4
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6032      	str	r2, [r6, #0]
 800a960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a964:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a968:	2301      	movs	r3, #1
 800a96a:	e09d      	b.n	800aaa8 <_printf_i+0x1e8>
 800a96c:	6833      	ldr	r3, [r6, #0]
 800a96e:	6820      	ldr	r0, [r4, #0]
 800a970:	1d19      	adds	r1, r3, #4
 800a972:	6031      	str	r1, [r6, #0]
 800a974:	0606      	lsls	r6, r0, #24
 800a976:	d501      	bpl.n	800a97c <_printf_i+0xbc>
 800a978:	681d      	ldr	r5, [r3, #0]
 800a97a:	e003      	b.n	800a984 <_printf_i+0xc4>
 800a97c:	0645      	lsls	r5, r0, #25
 800a97e:	d5fb      	bpl.n	800a978 <_printf_i+0xb8>
 800a980:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a984:	2d00      	cmp	r5, #0
 800a986:	da03      	bge.n	800a990 <_printf_i+0xd0>
 800a988:	232d      	movs	r3, #45	@ 0x2d
 800a98a:	426d      	negs	r5, r5
 800a98c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a990:	4859      	ldr	r0, [pc, #356]	@ (800aaf8 <_printf_i+0x238>)
 800a992:	230a      	movs	r3, #10
 800a994:	e011      	b.n	800a9ba <_printf_i+0xfa>
 800a996:	6821      	ldr	r1, [r4, #0]
 800a998:	6833      	ldr	r3, [r6, #0]
 800a99a:	0608      	lsls	r0, r1, #24
 800a99c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a9a0:	d402      	bmi.n	800a9a8 <_printf_i+0xe8>
 800a9a2:	0649      	lsls	r1, r1, #25
 800a9a4:	bf48      	it	mi
 800a9a6:	b2ad      	uxthmi	r5, r5
 800a9a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a9aa:	4853      	ldr	r0, [pc, #332]	@ (800aaf8 <_printf_i+0x238>)
 800a9ac:	6033      	str	r3, [r6, #0]
 800a9ae:	bf14      	ite	ne
 800a9b0:	230a      	movne	r3, #10
 800a9b2:	2308      	moveq	r3, #8
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a9ba:	6866      	ldr	r6, [r4, #4]
 800a9bc:	60a6      	str	r6, [r4, #8]
 800a9be:	2e00      	cmp	r6, #0
 800a9c0:	bfa2      	ittt	ge
 800a9c2:	6821      	ldrge	r1, [r4, #0]
 800a9c4:	f021 0104 	bicge.w	r1, r1, #4
 800a9c8:	6021      	strge	r1, [r4, #0]
 800a9ca:	b90d      	cbnz	r5, 800a9d0 <_printf_i+0x110>
 800a9cc:	2e00      	cmp	r6, #0
 800a9ce:	d04b      	beq.n	800aa68 <_printf_i+0x1a8>
 800a9d0:	4616      	mov	r6, r2
 800a9d2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9d6:	fb03 5711 	mls	r7, r3, r1, r5
 800a9da:	5dc7      	ldrb	r7, [r0, r7]
 800a9dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9e0:	462f      	mov	r7, r5
 800a9e2:	42bb      	cmp	r3, r7
 800a9e4:	460d      	mov	r5, r1
 800a9e6:	d9f4      	bls.n	800a9d2 <_printf_i+0x112>
 800a9e8:	2b08      	cmp	r3, #8
 800a9ea:	d10b      	bne.n	800aa04 <_printf_i+0x144>
 800a9ec:	6823      	ldr	r3, [r4, #0]
 800a9ee:	07df      	lsls	r7, r3, #31
 800a9f0:	d508      	bpl.n	800aa04 <_printf_i+0x144>
 800a9f2:	6923      	ldr	r3, [r4, #16]
 800a9f4:	6861      	ldr	r1, [r4, #4]
 800a9f6:	4299      	cmp	r1, r3
 800a9f8:	bfde      	ittt	le
 800a9fa:	2330      	movle	r3, #48	@ 0x30
 800a9fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa00:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa04:	1b92      	subs	r2, r2, r6
 800aa06:	6122      	str	r2, [r4, #16]
 800aa08:	f8cd a000 	str.w	sl, [sp]
 800aa0c:	464b      	mov	r3, r9
 800aa0e:	aa03      	add	r2, sp, #12
 800aa10:	4621      	mov	r1, r4
 800aa12:	4640      	mov	r0, r8
 800aa14:	f7ff fee6 	bl	800a7e4 <_printf_common>
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d14a      	bne.n	800aab2 <_printf_i+0x1f2>
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	b004      	add	sp, #16
 800aa22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa26:	6823      	ldr	r3, [r4, #0]
 800aa28:	f043 0320 	orr.w	r3, r3, #32
 800aa2c:	6023      	str	r3, [r4, #0]
 800aa2e:	4833      	ldr	r0, [pc, #204]	@ (800aafc <_printf_i+0x23c>)
 800aa30:	2778      	movs	r7, #120	@ 0x78
 800aa32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa36:	6823      	ldr	r3, [r4, #0]
 800aa38:	6831      	ldr	r1, [r6, #0]
 800aa3a:	061f      	lsls	r7, r3, #24
 800aa3c:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa40:	d402      	bmi.n	800aa48 <_printf_i+0x188>
 800aa42:	065f      	lsls	r7, r3, #25
 800aa44:	bf48      	it	mi
 800aa46:	b2ad      	uxthmi	r5, r5
 800aa48:	6031      	str	r1, [r6, #0]
 800aa4a:	07d9      	lsls	r1, r3, #31
 800aa4c:	bf44      	itt	mi
 800aa4e:	f043 0320 	orrmi.w	r3, r3, #32
 800aa52:	6023      	strmi	r3, [r4, #0]
 800aa54:	b11d      	cbz	r5, 800aa5e <_printf_i+0x19e>
 800aa56:	2310      	movs	r3, #16
 800aa58:	e7ac      	b.n	800a9b4 <_printf_i+0xf4>
 800aa5a:	4827      	ldr	r0, [pc, #156]	@ (800aaf8 <_printf_i+0x238>)
 800aa5c:	e7e9      	b.n	800aa32 <_printf_i+0x172>
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	f023 0320 	bic.w	r3, r3, #32
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	e7f6      	b.n	800aa56 <_printf_i+0x196>
 800aa68:	4616      	mov	r6, r2
 800aa6a:	e7bd      	b.n	800a9e8 <_printf_i+0x128>
 800aa6c:	6833      	ldr	r3, [r6, #0]
 800aa6e:	6825      	ldr	r5, [r4, #0]
 800aa70:	6961      	ldr	r1, [r4, #20]
 800aa72:	1d18      	adds	r0, r3, #4
 800aa74:	6030      	str	r0, [r6, #0]
 800aa76:	062e      	lsls	r6, r5, #24
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	d501      	bpl.n	800aa80 <_printf_i+0x1c0>
 800aa7c:	6019      	str	r1, [r3, #0]
 800aa7e:	e002      	b.n	800aa86 <_printf_i+0x1c6>
 800aa80:	0668      	lsls	r0, r5, #25
 800aa82:	d5fb      	bpl.n	800aa7c <_printf_i+0x1bc>
 800aa84:	8019      	strh	r1, [r3, #0]
 800aa86:	2300      	movs	r3, #0
 800aa88:	6123      	str	r3, [r4, #16]
 800aa8a:	4616      	mov	r6, r2
 800aa8c:	e7bc      	b.n	800aa08 <_printf_i+0x148>
 800aa8e:	6833      	ldr	r3, [r6, #0]
 800aa90:	1d1a      	adds	r2, r3, #4
 800aa92:	6032      	str	r2, [r6, #0]
 800aa94:	681e      	ldr	r6, [r3, #0]
 800aa96:	6862      	ldr	r2, [r4, #4]
 800aa98:	2100      	movs	r1, #0
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f7f5 fbc0 	bl	8000220 <memchr>
 800aaa0:	b108      	cbz	r0, 800aaa6 <_printf_i+0x1e6>
 800aaa2:	1b80      	subs	r0, r0, r6
 800aaa4:	6060      	str	r0, [r4, #4]
 800aaa6:	6863      	ldr	r3, [r4, #4]
 800aaa8:	6123      	str	r3, [r4, #16]
 800aaaa:	2300      	movs	r3, #0
 800aaac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aab0:	e7aa      	b.n	800aa08 <_printf_i+0x148>
 800aab2:	6923      	ldr	r3, [r4, #16]
 800aab4:	4632      	mov	r2, r6
 800aab6:	4649      	mov	r1, r9
 800aab8:	4640      	mov	r0, r8
 800aaba:	47d0      	blx	sl
 800aabc:	3001      	adds	r0, #1
 800aabe:	d0ad      	beq.n	800aa1c <_printf_i+0x15c>
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	079b      	lsls	r3, r3, #30
 800aac4:	d413      	bmi.n	800aaee <_printf_i+0x22e>
 800aac6:	68e0      	ldr	r0, [r4, #12]
 800aac8:	9b03      	ldr	r3, [sp, #12]
 800aaca:	4298      	cmp	r0, r3
 800aacc:	bfb8      	it	lt
 800aace:	4618      	movlt	r0, r3
 800aad0:	e7a6      	b.n	800aa20 <_printf_i+0x160>
 800aad2:	2301      	movs	r3, #1
 800aad4:	4632      	mov	r2, r6
 800aad6:	4649      	mov	r1, r9
 800aad8:	4640      	mov	r0, r8
 800aada:	47d0      	blx	sl
 800aadc:	3001      	adds	r0, #1
 800aade:	d09d      	beq.n	800aa1c <_printf_i+0x15c>
 800aae0:	3501      	adds	r5, #1
 800aae2:	68e3      	ldr	r3, [r4, #12]
 800aae4:	9903      	ldr	r1, [sp, #12]
 800aae6:	1a5b      	subs	r3, r3, r1
 800aae8:	42ab      	cmp	r3, r5
 800aaea:	dcf2      	bgt.n	800aad2 <_printf_i+0x212>
 800aaec:	e7eb      	b.n	800aac6 <_printf_i+0x206>
 800aaee:	2500      	movs	r5, #0
 800aaf0:	f104 0619 	add.w	r6, r4, #25
 800aaf4:	e7f5      	b.n	800aae2 <_printf_i+0x222>
 800aaf6:	bf00      	nop
 800aaf8:	0800b021 	.word	0x0800b021
 800aafc:	0800b032 	.word	0x0800b032

0800ab00 <memmove>:
 800ab00:	4288      	cmp	r0, r1
 800ab02:	b510      	push	{r4, lr}
 800ab04:	eb01 0402 	add.w	r4, r1, r2
 800ab08:	d902      	bls.n	800ab10 <memmove+0x10>
 800ab0a:	4284      	cmp	r4, r0
 800ab0c:	4623      	mov	r3, r4
 800ab0e:	d807      	bhi.n	800ab20 <memmove+0x20>
 800ab10:	1e43      	subs	r3, r0, #1
 800ab12:	42a1      	cmp	r1, r4
 800ab14:	d008      	beq.n	800ab28 <memmove+0x28>
 800ab16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab1e:	e7f8      	b.n	800ab12 <memmove+0x12>
 800ab20:	4402      	add	r2, r0
 800ab22:	4601      	mov	r1, r0
 800ab24:	428a      	cmp	r2, r1
 800ab26:	d100      	bne.n	800ab2a <memmove+0x2a>
 800ab28:	bd10      	pop	{r4, pc}
 800ab2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab32:	e7f7      	b.n	800ab24 <memmove+0x24>

0800ab34 <_sbrk_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4d06      	ldr	r5, [pc, #24]	@ (800ab50 <_sbrk_r+0x1c>)
 800ab38:	2300      	movs	r3, #0
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	602b      	str	r3, [r5, #0]
 800ab40:	f7f6 fd70 	bl	8001624 <_sbrk>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_sbrk_r+0x1a>
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_sbrk_r+0x1a>
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	20001f44 	.word	0x20001f44

0800ab54 <memcpy>:
 800ab54:	440a      	add	r2, r1
 800ab56:	4291      	cmp	r1, r2
 800ab58:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab5c:	d100      	bne.n	800ab60 <memcpy+0xc>
 800ab5e:	4770      	bx	lr
 800ab60:	b510      	push	{r4, lr}
 800ab62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab6a:	4291      	cmp	r1, r2
 800ab6c:	d1f9      	bne.n	800ab62 <memcpy+0xe>
 800ab6e:	bd10      	pop	{r4, pc}

0800ab70 <_realloc_r>:
 800ab70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab74:	4680      	mov	r8, r0
 800ab76:	4615      	mov	r5, r2
 800ab78:	460c      	mov	r4, r1
 800ab7a:	b921      	cbnz	r1, 800ab86 <_realloc_r+0x16>
 800ab7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab80:	4611      	mov	r1, r2
 800ab82:	f7ff bc4b 	b.w	800a41c <_malloc_r>
 800ab86:	b92a      	cbnz	r2, 800ab94 <_realloc_r+0x24>
 800ab88:	f7ff fbdc 	bl	800a344 <_free_r>
 800ab8c:	2400      	movs	r4, #0
 800ab8e:	4620      	mov	r0, r4
 800ab90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab94:	f000 f81a 	bl	800abcc <_malloc_usable_size_r>
 800ab98:	4285      	cmp	r5, r0
 800ab9a:	4606      	mov	r6, r0
 800ab9c:	d802      	bhi.n	800aba4 <_realloc_r+0x34>
 800ab9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aba2:	d8f4      	bhi.n	800ab8e <_realloc_r+0x1e>
 800aba4:	4629      	mov	r1, r5
 800aba6:	4640      	mov	r0, r8
 800aba8:	f7ff fc38 	bl	800a41c <_malloc_r>
 800abac:	4607      	mov	r7, r0
 800abae:	2800      	cmp	r0, #0
 800abb0:	d0ec      	beq.n	800ab8c <_realloc_r+0x1c>
 800abb2:	42b5      	cmp	r5, r6
 800abb4:	462a      	mov	r2, r5
 800abb6:	4621      	mov	r1, r4
 800abb8:	bf28      	it	cs
 800abba:	4632      	movcs	r2, r6
 800abbc:	f7ff ffca 	bl	800ab54 <memcpy>
 800abc0:	4621      	mov	r1, r4
 800abc2:	4640      	mov	r0, r8
 800abc4:	f7ff fbbe 	bl	800a344 <_free_r>
 800abc8:	463c      	mov	r4, r7
 800abca:	e7e0      	b.n	800ab8e <_realloc_r+0x1e>

0800abcc <_malloc_usable_size_r>:
 800abcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abd0:	1f18      	subs	r0, r3, #4
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	bfbc      	itt	lt
 800abd6:	580b      	ldrlt	r3, [r1, r0]
 800abd8:	18c0      	addlt	r0, r0, r3
 800abda:	4770      	bx	lr

0800abdc <_init>:
 800abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abde:	bf00      	nop
 800abe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe2:	bc08      	pop	{r3}
 800abe4:	469e      	mov	lr, r3
 800abe6:	4770      	bx	lr

0800abe8 <_fini>:
 800abe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abea:	bf00      	nop
 800abec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abee:	bc08      	pop	{r3}
 800abf0:	469e      	mov	lr, r3
 800abf2:	4770      	bx	lr
