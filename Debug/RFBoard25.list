
RFBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbe0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800fdc0  0800fdc0  00010dc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010250  08010250  00012350  2**0
                  CONTENTS
  4 .ARM          00000008  08010250  08010250  00011250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010258  08010258  00012350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010258  08010258  00011258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801025c  0801025c  0001125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  08010260  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000124d4  20000350  080105b0  00012350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012824  080105b0  00012824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b370  00000000  00000000  00012380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b5e  00000000  00000000  0003d6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002318  00000000  00000000  00043250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b04  00000000  00000000  00045568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007fcf  00000000  00000000  0004706c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000288af  00000000  00000000  0004f03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e620e  00000000  00000000  000778ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015daf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a658  00000000  00000000  0015db3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00168194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fda8 	.word	0x0800fda8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	0800fda8 	.word	0x0800fda8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <CDC_Transmit_Print>:
static void MX_FDCAN2_Init(void);
void StartReadData(void *argument);

/* USER CODE BEGIN PFP */
void CDC_Transmit_Print(const char *format, ...)
{
 8000ee8:	b40f      	push	{r0, r1, r2, r3}
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b0c2      	sub	sp, #264	@ 0x108
 8000eee:	af00      	add	r7, sp, #0
    char buf[PRINT_BUFFER_SIZE];
    va_list  args;
    va_start(args, format);
 8000ef0:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000efc:	601a      	str	r2, [r3, #0]
    int len = vsnprintf(buf, sizeof(buf), format, args);
 8000efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000f02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f06:	1d38      	adds	r0, r7, #4
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000f0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f12:	f00c fdd9 	bl	800dac8 <vsniprintf>
 8000f16:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    va_end(args);
    if (len <= 0) {
 8000f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	dd0f      	ble.n	8000f42 <CDC_Transmit_Print+0x5a>
        return;
    }
    if (len > (PRINT_BUFFER_SIZE - 1)) {
 8000f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f26:	2bff      	cmp	r3, #255	@ 0xff
 8000f28:	dd02      	ble.n	8000f30 <CDC_Transmit_Print+0x48>
        len = PRINT_BUFFER_SIZE - 1;
 8000f2a:	23ff      	movs	r3, #255	@ 0xff
 8000f2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }
    CDC_Transmit_FS((uint8_t*)buf, (uint16_t)len);
 8000f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f00b fc32 	bl	800c7a4 <CDC_Transmit_FS>
 8000f40:	e000      	b.n	8000f44 <CDC_Transmit_Print+0x5c>
        return;
 8000f42:	bf00      	nop
}
 8000f44:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f4e:	b004      	add	sp, #16
 8000f50:	4770      	bx	lr
	...

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5a:	f000 fcde 	bl	800191a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5e:	f000 f843 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f62:	f000 f955 	bl	8001210 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f66:	f000 f8c9 	bl	80010fc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f6a:	f000 f905 	bl	8001178 <MX_USART1_UART_Init>
  MX_FDCAN2_Init();
 8000f6e:	f000 f87d 	bl	800106c <MX_FDCAN2_Init>
  HAL_GPIO_WritePin(LED_POWER_GPIO_Port, LED_POWER_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f78:	4815      	ldr	r0, [pc, #84]	@ (8000fd0 <main+0x7c>)
 8000f7a:	f001 facb 	bl	8002514 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN 2 */
  FDCAN_FilterTypeDef rxFilter = {
 8000f7e:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <main+0x80>)
 8000f80:	463c      	mov	r4, r7
 8000f82:	461d      	mov	r5, r3
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f8c:	e884 0003 	stmia.w	r4, {r0, r1}
      .FilterType   = FDCAN_FILTER_MASK,
      .FilterConfig = FDCAN_FILTER_TO_RXFIFO0,
      .FilterID1    = 0x111,
      .FilterID2    = 0x7FF
  };
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &rxFilter) != HAL_OK) {
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	4810      	ldr	r0, [pc, #64]	@ (8000fd8 <main+0x84>)
 8000f96:	f000 ff31 	bl	8001dfc <HAL_FDCAN_ConfigFilter>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <main+0x50>
      Error_Handler();
 8000fa0:	f000 f9f8 	bl	8001394 <Error_Handler>
  }
  // Start CAN
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 8000fa4:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <main+0x84>)
 8000fa6:	f000 ff83 	bl	8001eb0 <HAL_FDCAN_Start>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <main+0x60>
      Error_Handler();
 8000fb0:	f000 f9f0 	bl	8001394 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fb4:	f008 fd88 	bl	8009ac8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readData */
  readDataHandle = osThreadNew(StartReadData, NULL, &readData_attributes);
 8000fb8:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <main+0x88>)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <main+0x8c>)
 8000fbe:	f008 fdcd 	bl	8009b5c <osThreadNew>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a07      	ldr	r2, [pc, #28]	@ (8000fe4 <main+0x90>)
 8000fc6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fc8:	f008 fda2 	bl	8009b10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <main+0x78>
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	0800fdcc 	.word	0x0800fdcc
 8000fd8:	2000036c 	.word	0x2000036c
 8000fdc:	0800fe68 	.word	0x0800fe68
 8000fe0:	080012c1 	.word	0x080012c1
 8000fe4:	200004c8 	.word	0x200004c8

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	@ 0x50
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	2238      	movs	r2, #56	@ 0x38
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f00c fd74 	bl	800dae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800100a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800100e:	f002 ff9b 	bl	8003f48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001012:	2322      	movs	r3, #34	@ 0x22
 8001014:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001016:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800101c:	2340      	movs	r3, #64	@ 0x40
 800101e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001020:	2301      	movs	r3, #1
 8001022:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001024:	2300      	movs	r3, #0
 8001026:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 0318 	add.w	r3, r7, #24
 800102c:	4618      	mov	r0, r3
 800102e:	f003 f83f 	bl	80040b0 <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001038:	f000 f9ac 	bl	8001394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001040:	2301      	movs	r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f003 fb3d 	bl	80046d4 <HAL_RCC_ClockConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001060:	f000 f998 	bl	8001394 <Error_Handler>
  }
}
 8001064:	bf00      	nop
 8001066:	3750      	adds	r7, #80	@ 0x50
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001070:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 8001072:	4a21      	ldr	r2, [pc, #132]	@ (80010f8 <MX_FDCAN2_Init+0x8c>)
 8001074:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001076:	4b1f      	ldr	r3, [pc, #124]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800107c:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 800107e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001082:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001084:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 800108c:	2200      	movs	r2, #0
 800108e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001090:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 8001092:	2200      	movs	r2, #0
 8001094:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001096:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 8001098:	2200      	movs	r2, #0
 800109a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 800109e:	2201      	movs	r2, #1
 80010a0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 80010aa:	223f      	movs	r2, #63	@ 0x3f
 80010ac:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 80010b0:	2210      	movs	r2, #16
 80010b2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 80010bc:	2204      	movs	r2, #4
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 80010c2:	220d      	movs	r2, #13
 80010c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 80010c8:	2202      	movs	r2, #2
 80010ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 80010cc:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 80010d2:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 80010da:	2200      	movs	r2, #0
 80010dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80010de:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <MX_FDCAN2_Init+0x88>)
 80010e0:	f000 fd32 	bl	8001b48 <HAL_FDCAN_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 80010ea:	f000 f953 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000036c 	.word	0x2000036c
 80010f8:	40006800 	.word	0x40006800

080010fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001100:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <MX_SPI1_Init+0x74>)
 8001102:	4a1c      	ldr	r2, [pc, #112]	@ (8001174 <MX_SPI1_Init+0x78>)
 8001104:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001106:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <MX_SPI1_Init+0x74>)
 8001108:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800110c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800110e:	4b18      	ldr	r3, [pc, #96]	@ (8001170 <MX_SPI1_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001114:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <MX_SPI1_Init+0x74>)
 8001116:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800111a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800111c:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <MX_SPI1_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001122:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <MX_SPI1_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001128:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <MX_SPI1_Init+0x74>)
 800112a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800112e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <MX_SPI1_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <MX_SPI1_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <MX_SPI1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <MX_SPI1_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001148:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <MX_SPI1_Init+0x74>)
 800114a:	2207      	movs	r2, #7
 800114c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <MX_SPI1_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_SPI1_Init+0x74>)
 8001156:	2208      	movs	r2, #8
 8001158:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	@ (8001170 <MX_SPI1_Init+0x74>)
 800115c:	f003 ff44 	bl	8004fe8 <HAL_SPI_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001166:	f000 f915 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200003d0 	.word	0x200003d0
 8001174:	40013000 	.word	0x40013000

08001178 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800117c:	4b22      	ldr	r3, [pc, #136]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 800117e:	4a23      	ldr	r2, [pc, #140]	@ (800120c <MX_USART1_UART_Init+0x94>)
 8001180:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001182:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 8001184:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001188:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001196:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011c0:	4811      	ldr	r0, [pc, #68]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011c2:	f004 faf5 	bl	80057b0 <HAL_UART_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011cc:	f000 f8e2 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d0:	2100      	movs	r1, #0
 80011d2:	480d      	ldr	r0, [pc, #52]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011d4:	f005 f890 	bl	80062f8 <HAL_UARTEx_SetTxFifoThreshold>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011de:	f000 f8d9 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e2:	2100      	movs	r1, #0
 80011e4:	4808      	ldr	r0, [pc, #32]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011e6:	f005 f8c5 	bl	8006374 <HAL_UARTEx_SetRxFifoThreshold>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011f0:	f000 f8d0 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011f6:	f005 f846 	bl	8006286 <HAL_UARTEx_DisableFifoMode>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001200:	f000 f8c8 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000434 	.word	0x20000434
 800120c:	40013800 	.word	0x40013800

08001210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	4b24      	ldr	r3, [pc, #144]	@ (80012b8 <MX_GPIO_Init+0xa8>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	4a23      	ldr	r2, [pc, #140]	@ (80012b8 <MX_GPIO_Init+0xa8>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001232:	4b21      	ldr	r3, [pc, #132]	@ (80012b8 <MX_GPIO_Init+0xa8>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800123e:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <MX_GPIO_Init+0xa8>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	4a1d      	ldr	r2, [pc, #116]	@ (80012b8 <MX_GPIO_Init+0xa8>)
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124a:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <MX_GPIO_Init+0xa8>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <MX_GPIO_Init+0xa8>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	4a17      	ldr	r2, [pc, #92]	@ (80012b8 <MX_GPIO_Init+0xa8>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <MX_GPIO_Init+0xa8>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <MX_GPIO_Init+0xa8>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	4a11      	ldr	r2, [pc, #68]	@ (80012b8 <MX_GPIO_Init+0xa8>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127a:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <MX_GPIO_Init+0xa8>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_NeoGPS_Pin|LED_D2_Pin|Patrick_Pin|LED_POWER_Pin
 8001286:	2200      	movs	r2, #0
 8001288:	f64c 0142 	movw	r1, #51266	@ 0xc842
 800128c:	480b      	ldr	r0, [pc, #44]	@ (80012bc <MX_GPIO_Init+0xac>)
 800128e:	f001 f941 	bl	8002514 <HAL_GPIO_WritePin>
                          |Squidward_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_NeoGPS_Pin LED_D2_Pin Patrick_Pin LED_POWER_Pin
                           Squidward_Pin */
  GPIO_InitStruct.Pin = CS_NeoGPS_Pin|LED_D2_Pin|Patrick_Pin|LED_POWER_Pin
 8001292:	f64c 0342 	movw	r3, #51266	@ 0xc842
 8001296:	617b      	str	r3, [r7, #20]
                          |Squidward_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	4804      	ldr	r0, [pc, #16]	@ (80012bc <MX_GPIO_Init+0xac>)
 80012ac:	f000 ffb0 	bl	8002210 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	@ 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000400 	.word	0x48000400

080012c0 <StartReadData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadData */
void StartReadData(void *argument)
{
 80012c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012c4:	b098      	sub	sp, #96	@ 0x60
 80012c6:	af06      	add	r7, sp, #24
 80012c8:	6078      	str	r0, [r7, #4]
    FDCAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[16];
    MX_USB_Device_Init();
 80012ca:	f00b f9ad 	bl	800c628 <MX_USB_Device_Init>

    for (;;) {
        /* Poll for new CAN frames */
        uint32_t fill = HAL_FDCAN_GetRxFifoFillLevel(&hfdcan2, FDCAN_RX_FIFO0);
 80012ce:	2140      	movs	r1, #64	@ 0x40
 80012d0:	4825      	ldr	r0, [pc, #148]	@ (8001368 <StartReadData+0xa8>)
 80012d2:	f000 ff1d 	bl	8002110 <HAL_FDCAN_GetRxFifoFillLevel>
 80012d6:	6478      	str	r0, [r7, #68]	@ 0x44
        if (fill > 0) {
 80012d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d03f      	beq.n	800135e <StartReadData+0x9e>
            if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK) {
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	f107 0218 	add.w	r2, r7, #24
 80012e6:	2140      	movs	r1, #64	@ 0x40
 80012e8:	481f      	ldr	r0, [pc, #124]	@ (8001368 <StartReadData+0xa8>)
 80012ea:	f000 fe09 	bl	8001f00 <HAL_FDCAN_GetRxMessage>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d134      	bne.n	800135e <StartReadData+0x9e>
                if (rxHeader.Identifier == 0x111 && rxHeader.DataLength == FDCAN_DLC_BYTES_16) {
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	f240 1211 	movw	r2, #273	@ 0x111
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d12f      	bne.n	800135e <StartReadData+0x9e>
 80012fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001300:	2b0a      	cmp	r3, #10
 8001302:	d12c      	bne.n	800135e <StartReadData+0x9e>
                    float *v = (float *)rxData;
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	643b      	str	r3, [r7, #64]	@ 0x40
                    CDC_Transmit_Print("Voltages: %.3f, %.3f, %.3f, %.3f\r\n",
                                      v[0], v[1], v[2], v[3]);
 800130a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800130c:	681b      	ldr	r3, [r3, #0]
                    CDC_Transmit_Print("Voltages: %.3f, %.3f, %.3f, %.3f\r\n",
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f942 	bl	8000598 <__aeabi_f2d>
 8001314:	4682      	mov	sl, r0
 8001316:	468b      	mov	fp, r1
                                      v[0], v[1], v[2], v[3]);
 8001318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800131a:	3304      	adds	r3, #4
 800131c:	681b      	ldr	r3, [r3, #0]
                    CDC_Transmit_Print("Voltages: %.3f, %.3f, %.3f, %.3f\r\n",
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f93a 	bl	8000598 <__aeabi_f2d>
 8001324:	4604      	mov	r4, r0
 8001326:	460d      	mov	r5, r1
                                      v[0], v[1], v[2], v[3]);
 8001328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800132a:	3308      	adds	r3, #8
 800132c:	681b      	ldr	r3, [r3, #0]
                    CDC_Transmit_Print("Voltages: %.3f, %.3f, %.3f, %.3f\r\n",
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f932 	bl	8000598 <__aeabi_f2d>
 8001334:	4680      	mov	r8, r0
 8001336:	4689      	mov	r9, r1
                                      v[0], v[1], v[2], v[3]);
 8001338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800133a:	330c      	adds	r3, #12
 800133c:	681b      	ldr	r3, [r3, #0]
                    CDC_Transmit_Print("Voltages: %.3f, %.3f, %.3f, %.3f\r\n",
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f92a 	bl	8000598 <__aeabi_f2d>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800134c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001350:	e9cd 4500 	strd	r4, r5, [sp]
 8001354:	4652      	mov	r2, sl
 8001356:	465b      	mov	r3, fp
 8001358:	4804      	ldr	r0, [pc, #16]	@ (800136c <StartReadData+0xac>)
 800135a:	f7ff fdc5 	bl	8000ee8 <CDC_Transmit_Print>
                }
            }
        }
        osDelay(50);
 800135e:	2032      	movs	r0, #50	@ 0x32
 8001360:	f008 fc8e 	bl	8009c80 <osDelay>
    for (;;) {
 8001364:	e7b3      	b.n	80012ce <StartReadData+0xe>
 8001366:	bf00      	nop
 8001368:	2000036c 	.word	0x2000036c
 800136c:	0800fde4 	.word	0x0800fde4

08001370 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001382:	f000 fae3 	bl	800194c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40012c00 	.word	0x40012c00

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <Error_Handler+0x8>

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <HAL_MspInit+0x50>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013aa:	4a11      	ldr	r2, [pc, #68]	@ (80013f0 <HAL_MspInit+0x50>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013b2:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <HAL_MspInit+0x50>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <HAL_MspInit+0x50>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c2:	4a0b      	ldr	r2, [pc, #44]	@ (80013f0 <HAL_MspInit+0x50>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_MspInit+0x50>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	210f      	movs	r1, #15
 80013da:	f06f 0001 	mvn.w	r0, #1
 80013de:	f000 fb8b 	bl	8001af8 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013e2:	f002 fe55 	bl	8004090 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000

080013f4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b09e      	sub	sp, #120	@ 0x78
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2250      	movs	r2, #80	@ 0x50
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f00c fb65 	bl	800dae4 <memset>
  if(hfdcan->Instance==FDCAN2)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a20      	ldr	r2, [pc, #128]	@ (80014a0 <HAL_FDCAN_MspInit+0xac>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d138      	bne.n	8001496 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001428:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800142a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800142e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fb9b 	bl	8004b70 <HAL_RCCEx_PeriphCLKConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001440:	f7ff ffa8 	bl	8001394 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001444:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <HAL_FDCAN_MspInit+0xb0>)
 8001446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001448:	4a16      	ldr	r2, [pc, #88]	@ (80014a4 <HAL_FDCAN_MspInit+0xb0>)
 800144a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800144e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001450:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <HAL_FDCAN_MspInit+0xb0>)
 8001452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <HAL_FDCAN_MspInit+0xb0>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001460:	4a10      	ldr	r2, [pc, #64]	@ (80014a4 <HAL_FDCAN_MspInit+0xb0>)
 8001462:	f043 0302 	orr.w	r3, r3, #2
 8001466:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <HAL_FDCAN_MspInit+0xb0>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001474:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001478:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001486:	2309      	movs	r3, #9
 8001488:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <HAL_FDCAN_MspInit+0xb4>)
 8001492:	f000 febd 	bl	8002210 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8001496:	bf00      	nop
 8001498:	3778      	adds	r7, #120	@ 0x78
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40006800 	.word	0x40006800
 80014a4:	40021000 	.word	0x40021000
 80014a8:	48000400 	.word	0x48000400

080014ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	@ 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a17      	ldr	r2, [pc, #92]	@ (8001528 <HAL_SPI_MspInit+0x7c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d128      	bne.n	8001520 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ce:	4b17      	ldr	r3, [pc, #92]	@ (800152c <HAL_SPI_MspInit+0x80>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d2:	4a16      	ldr	r2, [pc, #88]	@ (800152c <HAL_SPI_MspInit+0x80>)
 80014d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <HAL_SPI_MspInit+0x80>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <HAL_SPI_MspInit+0x80>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a10      	ldr	r2, [pc, #64]	@ (800152c <HAL_SPI_MspInit+0x80>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <HAL_SPI_MspInit+0x80>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014fe:	23e0      	movs	r3, #224	@ 0xe0
 8001500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800150e:	2305      	movs	r3, #5
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151c:	f000 fe78 	bl	8002210 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	@ 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40013000 	.word	0x40013000
 800152c:	40021000 	.word	0x40021000

08001530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b09e      	sub	sp, #120	@ 0x78
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2250      	movs	r2, #80	@ 0x50
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f00c fac7 	bl	800dae4 <memset>
  if(huart->Instance==USART1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a1f      	ldr	r2, [pc, #124]	@ (80015d8 <HAL_UART_MspInit+0xa8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d137      	bne.n	80015d0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001560:	2301      	movs	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4618      	mov	r0, r3
 800156e:	f003 faff 	bl	8004b70 <HAL_RCCEx_PeriphCLKConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001578:	f7ff ff0c 	bl	8001394 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800157c:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <HAL_UART_MspInit+0xac>)
 800157e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001580:	4a16      	ldr	r2, [pc, #88]	@ (80015dc <HAL_UART_MspInit+0xac>)
 8001582:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001586:	6613      	str	r3, [r2, #96]	@ 0x60
 8001588:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <HAL_UART_MspInit+0xac>)
 800158a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <HAL_UART_MspInit+0xac>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001598:	4a10      	ldr	r2, [pc, #64]	@ (80015dc <HAL_UART_MspInit+0xac>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a0:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <HAL_UART_MspInit+0xac>)
 80015a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015ac:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80015b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015be:	2307      	movs	r3, #7
 80015c0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015c6:	4619      	mov	r1, r3
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015cc:	f000 fe20 	bl	8002210 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80015d0:	bf00      	nop
 80015d2:	3778      	adds	r7, #120	@ 0x78
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40013800 	.word	0x40013800
 80015dc:	40021000 	.word	0x40021000

080015e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	@ 0x30
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015f0:	4b2c      	ldr	r3, [pc, #176]	@ (80016a4 <HAL_InitTick+0xc4>)
 80015f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f4:	4a2b      	ldr	r2, [pc, #172]	@ (80016a4 <HAL_InitTick+0xc4>)
 80015f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80015fc:	4b29      	ldr	r3, [pc, #164]	@ (80016a4 <HAL_InitTick+0xc4>)
 80015fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001608:	f107 020c 	add.w	r2, r7, #12
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f003 fa34 	bl	8004a80 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001618:	f003 fa1c 	bl	8004a54 <HAL_RCC_GetPCLK2Freq>
 800161c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800161e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001620:	4a21      	ldr	r2, [pc, #132]	@ (80016a8 <HAL_InitTick+0xc8>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0c9b      	lsrs	r3, r3, #18
 8001628:	3b01      	subs	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800162c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <HAL_InitTick+0xcc>)
 800162e:	4a20      	ldr	r2, [pc, #128]	@ (80016b0 <HAL_InitTick+0xd0>)
 8001630:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001632:	4b1e      	ldr	r3, [pc, #120]	@ (80016ac <HAL_InitTick+0xcc>)
 8001634:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001638:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800163a:	4a1c      	ldr	r2, [pc, #112]	@ (80016ac <HAL_InitTick+0xcc>)
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001640:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <HAL_InitTick+0xcc>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001646:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <HAL_InitTick+0xcc>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800164c:	4817      	ldr	r0, [pc, #92]	@ (80016ac <HAL_InitTick+0xcc>)
 800164e:	f003 fd76 	bl	800513e <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001658:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800165c:	2b00      	cmp	r3, #0
 800165e:	d11b      	bne.n	8001698 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001660:	4812      	ldr	r0, [pc, #72]	@ (80016ac <HAL_InitTick+0xcc>)
 8001662:	f003 fdcd 	bl	8005200 <HAL_TIM_Base_Start_IT>
 8001666:	4603      	mov	r3, r0
 8001668:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800166c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001670:	2b00      	cmp	r3, #0
 8001672:	d111      	bne.n	8001698 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001674:	2019      	movs	r0, #25
 8001676:	f000 fa59 	bl	8001b2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d808      	bhi.n	8001692 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	2019      	movs	r0, #25
 8001686:	f000 fa37 	bl	8001af8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800168a:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <HAL_InitTick+0xd4>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	e002      	b.n	8001698 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001698:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800169c:	4618      	mov	r0, r3
 800169e:	3730      	adds	r7, #48	@ 0x30
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000
 80016a8:	431bde83 	.word	0x431bde83
 80016ac:	200004cc 	.word	0x200004cc
 80016b0:	40012c00 	.word	0x40012c00
 80016b4:	20000004 	.word	0x20000004

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <NMI_Handler+0x4>

080016c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <MemManage_Handler+0x4>

080016d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <UsageFault_Handler+0x4>

080016e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80016f4:	4802      	ldr	r0, [pc, #8]	@ (8001700 <USB_LP_IRQHandler+0x10>)
 80016f6:	f001 f815 	bl	8002724 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200121dc 	.word	0x200121dc

08001704 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001708:	4802      	ldr	r0, [pc, #8]	@ (8001714 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800170a:	f003 fde9 	bl	80052e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200004cc 	.word	0x200004cc

08001718 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return 1;
 800171c:	2301      	movs	r3, #1
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_kill>:

int _kill(int pid, int sig)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001732:	f00c fa39 	bl	800dba8 <__errno>
 8001736:	4603      	mov	r3, r0
 8001738:	2216      	movs	r2, #22
 800173a:	601a      	str	r2, [r3, #0]
  return -1;
 800173c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_exit>:

void _exit (int status)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001750:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ffe7 	bl	8001728 <_kill>
  while (1) {}    /* Make sure we hang here */
 800175a:	bf00      	nop
 800175c:	e7fd      	b.n	800175a <_exit+0x12>

0800175e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	e00a      	b.n	8001786 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001770:	f3af 8000 	nop.w
 8001774:	4601      	mov	r1, r0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	60ba      	str	r2, [r7, #8]
 800177c:	b2ca      	uxtb	r2, r1
 800177e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3301      	adds	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	429a      	cmp	r2, r3
 800178c:	dbf0      	blt.n	8001770 <_read+0x12>
  }

  return len;
 800178e:	687b      	ldr	r3, [r7, #4]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e009      	b.n	80017be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	60ba      	str	r2, [r7, #8]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3301      	adds	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	dbf1      	blt.n	80017aa <_write+0x12>
  }
  return len;
 80017c6:	687b      	ldr	r3, [r7, #4]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_close>:

int _close(int file)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017f8:	605a      	str	r2, [r3, #4]
  return 0;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_isatty>:

int _isatty(int file)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001810:	2301      	movs	r3, #1
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800181e:	b480      	push	{r7}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001840:	4a14      	ldr	r2, [pc, #80]	@ (8001894 <_sbrk+0x5c>)
 8001842:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <_sbrk+0x60>)
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800184c:	4b13      	ldr	r3, [pc, #76]	@ (800189c <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001854:	4b11      	ldr	r3, [pc, #68]	@ (800189c <_sbrk+0x64>)
 8001856:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <_sbrk+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d207      	bcs.n	8001878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001868:	f00c f99e 	bl	800dba8 <__errno>
 800186c:	4603      	mov	r3, r0
 800186e:	220c      	movs	r2, #12
 8001870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001876:	e009      	b.n	800188c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001878:	4b08      	ldr	r3, [pc, #32]	@ (800189c <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187e:	4b07      	ldr	r3, [pc, #28]	@ (800189c <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	4a05      	ldr	r2, [pc, #20]	@ (800189c <_sbrk+0x64>)
 8001888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2001c000 	.word	0x2001c000
 8001898:	00000400 	.word	0x00000400
 800189c:	20000518 	.word	0x20000518
 80018a0:	20012828 	.word	0x20012828

080018a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <SystemInit+0x20>)
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ae:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <SystemInit+0x20>)
 80018b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018c8:	480d      	ldr	r0, [pc, #52]	@ (8001900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80018cc:	f7ff ffea 	bl	80018a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d0:	480c      	ldr	r0, [pc, #48]	@ (8001904 <LoopForever+0x6>)
  ldr r1, =_edata
 80018d2:	490d      	ldr	r1, [pc, #52]	@ (8001908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d4:	4a0d      	ldr	r2, [pc, #52]	@ (800190c <LoopForever+0xe>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018d8:	e002      	b.n	80018e0 <LoopCopyDataInit>

080018da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018de:	3304      	adds	r3, #4

080018e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e4:	d3f9      	bcc.n	80018da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001914 <LoopForever+0x16>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ec:	e001      	b.n	80018f2 <LoopFillZerobss>

080018ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f0:	3204      	adds	r2, #4

080018f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f4:	d3fb      	bcc.n	80018ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f6:	f00c f95d 	bl	800dbb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018fa:	f7ff fb2b 	bl	8000f54 <main>

080018fe <LoopForever>:

LoopForever:
    b LoopForever
 80018fe:	e7fe      	b.n	80018fe <LoopForever>
  ldr   r0, =_estack
 8001900:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 800190c:	08010260 	.word	0x08010260
  ldr r2, =_sbss
 8001910:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001914:	20012824 	.word	0x20012824

08001918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC1_2_IRQHandler>

0800191a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001924:	2003      	movs	r0, #3
 8001926:	f000 f8dc 	bl	8001ae2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800192a:	200f      	movs	r0, #15
 800192c:	f7ff fe58 	bl	80015e0 <HAL_InitTick>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	71fb      	strb	r3, [r7, #7]
 800193a:	e001      	b.n	8001940 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800193c:	f7ff fd30 	bl	80013a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001940:	79fb      	ldrb	r3, [r7, #7]

}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_IncTick+0x1c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_IncTick+0x20>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4413      	add	r3, r2
 800195a:	4a03      	ldr	r2, [pc, #12]	@ (8001968 <HAL_IncTick+0x1c>)
 800195c:	6013      	str	r3, [r2, #0]
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	2000051c 	.word	0x2000051c
 800196c:	20000008 	.word	0x20000008

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	@ (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	2000051c 	.word	0x2000051c

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	@ (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	@ (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	@ (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	@ 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff4c 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b06:	f7ff ff63 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b0a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	68b9      	ldr	r1, [r7, #8]
 8001b10:	6978      	ldr	r0, [r7, #20]
 8001b12:	f7ff ffb3 	bl	8001a7c <NVIC_EncodePriority>
 8001b16:	4602      	mov	r2, r0
 8001b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff82 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b24:	bf00      	nop
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff56 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e147      	b.n	8001dea <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fc40 	bl	80013f4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699a      	ldr	r2, [r3, #24]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0210 	bic.w	r2, r2, #16
 8001b82:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b84:	f7ff fef4 	bl	8001970 <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001b8a:	e012      	b.n	8001bb2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001b8c:	f7ff fef0 	bl	8001970 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b0a      	cmp	r3, #10
 8001b98:	d90b      	bls.n	8001bb2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9e:	f043 0201 	orr.w	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e11b      	b.n	8001dea <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d0e5      	beq.n	8001b8c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699a      	ldr	r2, [r3, #24]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd0:	f7ff fece 	bl	8001970 <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001bd6:	e012      	b.n	8001bfe <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001bd8:	f7ff feca 	bl	8001970 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b0a      	cmp	r3, #10
 8001be4:	d90b      	bls.n	8001bfe <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0f5      	b.n	8001dea <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0e5      	beq.n	8001bd8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0202 	orr.w	r2, r2, #2
 8001c1a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a74      	ldr	r2, [pc, #464]	@ (8001df4 <HAL_FDCAN_Init+0x2ac>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d103      	bne.n	8001c2e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001c26:	4a74      	ldr	r2, [pc, #464]	@ (8001df8 <HAL_FDCAN_Init+0x2b0>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7c1b      	ldrb	r3, [r3, #16]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d108      	bne.n	8001c48 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699a      	ldr	r2, [r3, #24]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c44:	619a      	str	r2, [r3, #24]
 8001c46:	e007      	b.n	8001c58 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c56:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7c5b      	ldrb	r3, [r3, #17]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d108      	bne.n	8001c72 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699a      	ldr	r2, [r3, #24]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c6e:	619a      	str	r2, [r3, #24]
 8001c70:	e007      	b.n	8001c82 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699a      	ldr	r2, [r3, #24]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001c80:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7c9b      	ldrb	r3, [r3, #18]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d108      	bne.n	8001c9c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699a      	ldr	r2, [r3, #24]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c98:	619a      	str	r2, [r3, #24]
 8001c9a:	e007      	b.n	8001cac <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001caa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001cd0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0210 	bic.w	r2, r2, #16
 8001ce0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d108      	bne.n	8001cfc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699a      	ldr	r2, [r3, #24]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0204 	orr.w	r2, r2, #4
 8001cf8:	619a      	str	r2, [r3, #24]
 8001cfa:	e02c      	b.n	8001d56 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d028      	beq.n	8001d56 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d01c      	beq.n	8001d46 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d1a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0210 	orr.w	r2, r2, #16
 8001d2a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d110      	bne.n	8001d56 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0220 	orr.w	r2, r2, #32
 8001d42:	619a      	str	r2, [r3, #24]
 8001d44:	e007      	b.n	8001d56 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699a      	ldr	r2, [r3, #24]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0220 	orr.w	r2, r2, #32
 8001d54:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d66:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001d6e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001d7e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d80:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001d8a:	d115      	bne.n	8001db8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d90:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d96:	3b01      	subs	r3, #1
 8001d98:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d9a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da0:	3b01      	subs	r3, #1
 8001da2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001da4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dac:	3b01      	subs	r3, #1
 8001dae:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001db4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001db6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f9bc 	bl	800214c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40006400 	.word	0x40006400
 8001df8:	40006500 	.word	0x40006500

08001dfc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001e0c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d002      	beq.n	8001e1a <HAL_FDCAN_ConfigFilter+0x1e>
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d13d      	bne.n	8001e96 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d119      	bne.n	8001e56 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001e2e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001e36:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e01d      	b.n	8001e92 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	075a      	lsls	r2, r3, #29
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	079a      	lsls	r2, r3, #30
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e006      	b.n	8001ea4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e9a:	f043 0202 	orr.w	r2, r3, #2
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
  }
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d110      	bne.n	8001ee6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e006      	b.n	8001ef4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eea:	f043 0204 	orr.w	r2, r3, #4
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
  }
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b08b      	sub	sp, #44	@ 0x2c
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001f18:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001f1a:	7efb      	ldrb	r3, [r7, #27]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	f040 80e8 	bne.w	80020f2 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b40      	cmp	r3, #64	@ 0x40
 8001f26:	d137      	bne.n	8001f98 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d107      	bne.n	8001f48 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0db      	b.n	8002100 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f50:	0e1b      	lsrs	r3, r3, #24
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d10a      	bne.n	8001f70 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f62:	0a5b      	lsrs	r3, r3, #9
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	4413      	add	r3, r2
 8001f82:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f96:	e036      	b.n	8002006 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d107      	bne.n	8001fb8 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0a3      	b.n	8002100 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fc0:	0e1b      	lsrs	r3, r3, #24
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d10a      	bne.n	8001fe0 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d107      	bne.n	800202a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	0c9b      	lsrs	r3, r3, #18
 8002020:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	e005      	b.n	8002036 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	3304      	adds	r3, #4
 8002052:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	b29a      	uxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	0c1b      	lsrs	r3, r3, #16
 8002064:	f003 020f 	and.w	r2, r3, #15
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0e1b      	lsrs	r3, r3, #24
 800208a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	0fda      	lsrs	r2, r3, #31
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	3304      	adds	r3, #4
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
 80020aa:	e00a      	b.n	80020c2 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	441a      	add	r2, r3
 80020b2:	6839      	ldr	r1, [r7, #0]
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	440b      	add	r3, r1
 80020b8:	7812      	ldrb	r2, [r2, #0]
 80020ba:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	3301      	adds	r3, #1
 80020c0:	623b      	str	r3, [r7, #32]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	4a11      	ldr	r2, [pc, #68]	@ (800210c <HAL_FDCAN_GetRxMessage+0x20c>)
 80020c8:	5cd3      	ldrb	r3, [r2, r3]
 80020ca:	461a      	mov	r2, r3
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d3ec      	bcc.n	80020ac <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b40      	cmp	r3, #64	@ 0x40
 80020d6:	d105      	bne.n	80020e4 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80020e2:	e004      	b.n	80020ee <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e006      	b.n	8002100 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f6:	f043 0208 	orr.w	r2, r3, #8
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
  }
}
 8002100:	4618      	mov	r0, r3
 8002102:	372c      	adds	r7, #44	@ 0x2c
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	0800fea4 	.word	0x0800fea4

08002110 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b40      	cmp	r3, #64	@ 0x40
 800211e:	d107      	bne.n	8002130 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	e006      	b.n	800213e <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002154:	4b2c      	ldr	r3, [pc, #176]	@ (8002208 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8002156:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a2b      	ldr	r2, [pc, #172]	@ (800220c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d103      	bne.n	800216a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002168:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002178:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002180:	041a      	lsls	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800219e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a6:	061a      	lsls	r2, r3, #24
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	e005      	b.n	80021ec <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3304      	adds	r3, #4
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d3f3      	bcc.n	80021e0 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	4000a400 	.word	0x4000a400
 800220c:	40006800 	.word	0x40006800

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800221e:	e15a      	b.n	80024d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 814c 	beq.w	80024d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d005      	beq.n	8002250 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800224c:	2b02      	cmp	r3, #2
 800224e:	d130      	bne.n	80022b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002286:	2201      	movs	r2, #1
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 0201 	and.w	r2, r3, #1
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d017      	beq.n	80022ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d123      	bne.n	8002342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	6939      	ldr	r1, [r7, #16]
 800233e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0203 	and.w	r2, r3, #3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80a6 	beq.w	80024d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002384:	4b5b      	ldr	r3, [pc, #364]	@ (80024f4 <HAL_GPIO_Init+0x2e4>)
 8002386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002388:	4a5a      	ldr	r2, [pc, #360]	@ (80024f4 <HAL_GPIO_Init+0x2e4>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002390:	4b58      	ldr	r3, [pc, #352]	@ (80024f4 <HAL_GPIO_Init+0x2e4>)
 8002392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239c:	4a56      	ldr	r2, [pc, #344]	@ (80024f8 <HAL_GPIO_Init+0x2e8>)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023c6:	d01f      	beq.n	8002408 <HAL_GPIO_Init+0x1f8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a4c      	ldr	r2, [pc, #304]	@ (80024fc <HAL_GPIO_Init+0x2ec>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d019      	beq.n	8002404 <HAL_GPIO_Init+0x1f4>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a4b      	ldr	r2, [pc, #300]	@ (8002500 <HAL_GPIO_Init+0x2f0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d013      	beq.n	8002400 <HAL_GPIO_Init+0x1f0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a4a      	ldr	r2, [pc, #296]	@ (8002504 <HAL_GPIO_Init+0x2f4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d00d      	beq.n	80023fc <HAL_GPIO_Init+0x1ec>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a49      	ldr	r2, [pc, #292]	@ (8002508 <HAL_GPIO_Init+0x2f8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d007      	beq.n	80023f8 <HAL_GPIO_Init+0x1e8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a48      	ldr	r2, [pc, #288]	@ (800250c <HAL_GPIO_Init+0x2fc>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d101      	bne.n	80023f4 <HAL_GPIO_Init+0x1e4>
 80023f0:	2305      	movs	r3, #5
 80023f2:	e00a      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 80023f4:	2306      	movs	r3, #6
 80023f6:	e008      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 80023f8:	2304      	movs	r3, #4
 80023fa:	e006      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 80023fc:	2303      	movs	r3, #3
 80023fe:	e004      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 8002400:	2302      	movs	r3, #2
 8002402:	e002      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 8002408:	2300      	movs	r3, #0
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	f002 0203 	and.w	r2, r2, #3
 8002410:	0092      	lsls	r2, r2, #2
 8002412:	4093      	lsls	r3, r2
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800241a:	4937      	ldr	r1, [pc, #220]	@ (80024f8 <HAL_GPIO_Init+0x2e8>)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	089b      	lsrs	r3, r3, #2
 8002420:	3302      	adds	r3, #2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002428:	4b39      	ldr	r3, [pc, #228]	@ (8002510 <HAL_GPIO_Init+0x300>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	43db      	mvns	r3, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800244c:	4a30      	ldr	r2, [pc, #192]	@ (8002510 <HAL_GPIO_Init+0x300>)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002452:	4b2f      	ldr	r3, [pc, #188]	@ (8002510 <HAL_GPIO_Init+0x300>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002476:	4a26      	ldr	r2, [pc, #152]	@ (8002510 <HAL_GPIO_Init+0x300>)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800247c:	4b24      	ldr	r3, [pc, #144]	@ (8002510 <HAL_GPIO_Init+0x300>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002510 <HAL_GPIO_Init+0x300>)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002510 <HAL_GPIO_Init+0x300>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024ca:	4a11      	ldr	r2, [pc, #68]	@ (8002510 <HAL_GPIO_Init+0x300>)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	3301      	adds	r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f47f ae9d 	bne.w	8002220 <HAL_GPIO_Init+0x10>
  }
}
 80024e6:	bf00      	nop
 80024e8:	bf00      	nop
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010000 	.word	0x40010000
 80024fc:	48000400 	.word	0x48000400
 8002500:	48000800 	.word	0x48000800
 8002504:	48000c00 	.word	0x48000c00
 8002508:	48001000 	.word	0x48001000
 800250c:	48001400 	.word	0x48001400
 8002510:	40010400 	.word	0x40010400

08002514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
 8002520:	4613      	mov	r3, r2
 8002522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002524:	787b      	ldrb	r3, [r7, #1]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002530:	e002      	b.n	8002538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e0c0      	b.n	80026d8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f00a fa62 	bl	800ca34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2203      	movs	r2, #3
 8002574:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f003 ff9c 	bl	80064ba <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	e03e      	b.n	8002606 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	440b      	add	r3, r1
 8002596:	3311      	adds	r3, #17
 8002598:	2201      	movs	r2, #1
 800259a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	440b      	add	r3, r1
 80025aa:	3310      	adds	r3, #16
 80025ac:	7bfa      	ldrb	r2, [r7, #15]
 80025ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	440b      	add	r3, r1
 80025be:	3313      	adds	r3, #19
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	440b      	add	r3, r1
 80025d2:	3320      	adds	r3, #32
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	440b      	add	r3, r1
 80025e6:	3324      	adds	r3, #36	@ 0x24
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	440b      	add	r3, r1
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	3301      	adds	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	791b      	ldrb	r3, [r3, #4]
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	429a      	cmp	r2, r3
 800260e:	d3bb      	bcc.n	8002588 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	e044      	b.n	80026a0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	440b      	add	r3, r1
 8002624:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	440b      	add	r3, r1
 800263a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	440b      	add	r3, r1
 8002650:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800266e:	7bfa      	ldrb	r2, [r7, #15]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	440b      	add	r3, r1
 800267c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	440b      	add	r3, r1
 8002692:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	3301      	adds	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	791b      	ldrb	r3, [r3, #4]
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d3b5      	bcc.n	8002616 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3304      	adds	r3, #4
 80026b2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80026b6:	f003 ff1b 	bl	80064f0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7a9b      	ldrb	r3, [r3, #10]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d102      	bne.n	80026d6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f001 fc0e 	bl	8003ef2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_PCD_Start+0x16>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e012      	b.n	800271c <HAL_PCD_Start+0x3c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f003 fec2 	bl	800648c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f005 fc9f 	bl	8008050 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f005 fca4 	bl	800807e <USB_ReadInterrupts>
 8002736:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fb06 	bl	8002d54 <PCD_EP_ISR_Handler>

    return;
 8002748:	e110      	b.n	800296c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d013      	beq.n	800277c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800275c:	b29a      	uxth	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002766:	b292      	uxth	r2, r2
 8002768:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f00a f9f2 	bl	800cb56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002772:	2100      	movs	r1, #0
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f8fc 	bl	8002972 <HAL_PCD_SetAddress>

    return;
 800277a:	e0f7      	b.n	800296c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00c      	beq.n	80027a0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800278e:	b29a      	uxth	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002798:	b292      	uxth	r2, r2
 800279a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800279e:	e0e5      	b.n	800296c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00c      	beq.n	80027c4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027bc:	b292      	uxth	r2, r2
 80027be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80027c2:	e0d3      	b.n	800296c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d034      	beq.n	8002838 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0204 	bic.w	r2, r2, #4
 80027e0:	b292      	uxth	r2, r2
 80027e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0208 	bic.w	r2, r2, #8
 80027f8:	b292      	uxth	r2, r2
 80027fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002804:	2b01      	cmp	r3, #1
 8002806:	d107      	bne.n	8002818 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002810:	2100      	movs	r1, #0
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f00a fb92 	bl	800cf3c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f00a f9d5 	bl	800cbc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002826:	b29a      	uxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002830:	b292      	uxth	r2, r2
 8002832:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002836:	e099      	b.n	800296c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800283e:	2b00      	cmp	r3, #0
 8002840:	d027      	beq.n	8002892 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800284a:	b29a      	uxth	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0208 	orr.w	r2, r2, #8
 8002854:	b292      	uxth	r2, r2
 8002856:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002862:	b29a      	uxth	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800286c:	b292      	uxth	r2, r2
 800286e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800287a:	b29a      	uxth	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0204 	orr.w	r2, r2, #4
 8002884:	b292      	uxth	r2, r2
 8002886:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f00a f982 	bl	800cb94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002890:	e06c      	b.n	800296c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002898:	2b00      	cmp	r3, #0
 800289a:	d040      	beq.n	800291e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028ae:	b292      	uxth	r2, r2
 80028b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d12b      	bne.n	8002916 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0204 	orr.w	r2, r2, #4
 80028d0:	b292      	uxth	r2, r2
 80028d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80028de:	b29a      	uxth	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0208 	orr.w	r2, r2, #8
 80028e8:	b292      	uxth	r2, r2
 80028ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80028fe:	b29b      	uxth	r3, r3
 8002900:	089b      	lsrs	r3, r3, #2
 8002902:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800290c:	2101      	movs	r1, #1
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f00a fb14 	bl	800cf3c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002914:	e02a      	b.n	800296c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f00a f93c 	bl	800cb94 <HAL_PCD_SuspendCallback>
    return;
 800291c:	e026      	b.n	800296c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00f      	beq.n	8002948 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800293a:	b292      	uxth	r2, r2
 800293c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f00a f8fa 	bl	800cb3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002946:	e011      	b.n	800296c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00c      	beq.n	800296c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800295a:	b29a      	uxth	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002964:	b292      	uxth	r2, r2
 8002966:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800296a:	bf00      	nop
  }
}
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	460b      	mov	r3, r1
 800297c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_PCD_SetAddress+0x1a>
 8002988:	2302      	movs	r3, #2
 800298a:	e012      	b.n	80029b2 <HAL_PCD_SetAddress+0x40>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f005 fb40 	bl	8008028 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	4608      	mov	r0, r1
 80029c4:	4611      	mov	r1, r2
 80029c6:	461a      	mov	r2, r3
 80029c8:	4603      	mov	r3, r0
 80029ca:	70fb      	strb	r3, [r7, #3]
 80029cc:	460b      	mov	r3, r1
 80029ce:	803b      	strh	r3, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	da0e      	bge.n	80029fe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	f003 0207 	and.w	r2, r3, #7
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	3310      	adds	r3, #16
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4413      	add	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	705a      	strb	r2, [r3, #1]
 80029fc:	e00e      	b.n	8002a1c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	f003 0207 	and.w	r2, r3, #7
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	4413      	add	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002a28:	883b      	ldrh	r3, [r7, #0]
 8002a2a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	78ba      	ldrb	r2, [r7, #2]
 8002a36:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a38:	78bb      	ldrb	r3, [r7, #2]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d102      	bne.n	8002a44 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_PCD_EP_Open+0x98>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e00e      	b.n	8002a70 <HAL_PCD_EP_Open+0xb6>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68f9      	ldr	r1, [r7, #12]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f003 fd63 	bl	800652c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002a6e:	7afb      	ldrb	r3, [r7, #11]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	da0e      	bge.n	8002aaa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	f003 0207 	and.w	r2, r3, #7
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	3310      	adds	r3, #16
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	705a      	strb	r2, [r3, #1]
 8002aa8:	e00e      	b.n	8002ac8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	f003 0207 	and.w	r2, r3, #7
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_PCD_EP_Close+0x6a>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e00e      	b.n	8002b00 <HAL_PCD_EP_Close+0x88>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68f9      	ldr	r1, [r7, #12]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f004 fa03 	bl	8006efc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	460b      	mov	r3, r1
 8002b16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b18:	7afb      	ldrb	r3, [r7, #11]
 8002b1a:	f003 0207 	and.w	r2, r3, #7
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2200      	movs	r2, #0
 8002b46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b48:	7afb      	ldrb	r3, [r7, #11]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6979      	ldr	r1, [r7, #20]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f004 fbbb 	bl	80072d6 <USB_EPStartXfer>

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	f003 0207 	and.w	r2, r3, #7
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002b8c:	681b      	ldr	r3, [r3, #0]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002baa:	7afb      	ldrb	r3, [r7, #11]
 8002bac:	f003 0207 	and.w	r2, r3, #7
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	3310      	adds	r3, #16
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2201      	movs	r2, #1
 8002be4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002be6:	7afb      	ldrb	r3, [r7, #11]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6979      	ldr	r1, [r7, #20]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f004 fb6c 	bl	80072d6 <USB_EPStartXfer>

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	7912      	ldrb	r2, [r2, #4]
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e03e      	b.n	8002ca4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	da0e      	bge.n	8002c4c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	f003 0207 	and.w	r2, r3, #7
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	3310      	adds	r3, #16
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	705a      	strb	r2, [r3, #1]
 8002c4a:	e00c      	b.n	8002c66 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_PCD_EP_SetStall+0x7e>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e00e      	b.n	8002ca4 <HAL_PCD_EP_SetStall+0x9c>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68f9      	ldr	r1, [r7, #12]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f005 f8cd 	bl	8007e34 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	7912      	ldrb	r2, [r2, #4]
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e040      	b.n	8002d4c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	da0e      	bge.n	8002cf0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	f003 0207 	and.w	r2, r3, #7
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	3310      	adds	r3, #16
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	705a      	strb	r2, [r3, #1]
 8002cee:	e00e      	b.n	8002d0e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	f003 0207 	and.w	r2, r3, #7
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_PCD_EP_ClrStall+0x82>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e00e      	b.n	8002d4c <HAL_PCD_EP_ClrStall+0xa0>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68f9      	ldr	r1, [r7, #12]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f005 f8ca 	bl	8007ed6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b092      	sub	sp, #72	@ 0x48
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d5c:	e333      	b.n	80033c6 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d66:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d68:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8002d74:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f040 8108 	bne.w	8002f8e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d7e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d14c      	bne.n	8002e22 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d98:	813b      	strh	r3, [r7, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	893b      	ldrh	r3, [r7, #8]
 8002da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3310      	adds	r3, #16
 8002db0:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	441a      	add	r2, r3
 8002de4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002de6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002de8:	2100      	movs	r1, #0
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f009 fe8b 	bl	800cb06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7b1b      	ldrb	r3, [r3, #12]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 82e5 	beq.w	80033c6 <PCD_EP_ISR_Handler+0x672>
 8002dfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f040 82e0 	bne.w	80033c6 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7b1b      	ldrb	r3, [r3, #12]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	731a      	strb	r2, [r3, #12]
 8002e20:	e2d1      	b.n	80033c6 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e28:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e32:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d032      	beq.n	8002ea2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4413      	add	r3, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	4413      	add	r3, r2
 8002e56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e62:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002e6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e70:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e74:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f005 f953 	bl	8008122 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002e88:	4013      	ands	r3, r2
 8002e8a:	817b      	strh	r3, [r7, #10]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	897a      	ldrh	r2, [r7, #10]
 8002e92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e96:	b292      	uxth	r2, r2
 8002e98:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f009 fe06 	bl	800caac <HAL_PCD_SetupStageCallback>
 8002ea0:	e291      	b.n	80033c6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ea2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f280 828d 	bge.w	80033c6 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002eb8:	4013      	ands	r3, r2
 8002eba:	81fb      	strh	r3, [r7, #14]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	89fa      	ldrh	r2, [r7, #14]
 8002ec2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ec6:	b292      	uxth	r2, r2
 8002ec8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ef0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d019      	beq.n	8002f2e <PCD_EP_ISR_Handler+0x1da>
 8002efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d015      	beq.n	8002f2e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f08:	6959      	ldr	r1, [r3, #20]
 8002f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f0c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f10:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	f005 f905 	bl	8008122 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	441a      	add	r2, r3
 8002f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f24:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002f26:	2100      	movs	r1, #0
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f009 fdd1 	bl	800cad0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002f36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002f38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f040 8242 	bne.w	80033c6 <PCD_EP_ISR_Handler+0x672>
 8002f42:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002f44:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002f48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f4c:	f000 823b 	beq.w	80033c6 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f60:	81bb      	strh	r3, [r7, #12]
 8002f62:	89bb      	ldrh	r3, [r7, #12]
 8002f64:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002f68:	81bb      	strh	r3, [r7, #12]
 8002f6a:	89bb      	ldrh	r3, [r7, #12]
 8002f6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f70:	81bb      	strh	r3, [r7, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	89bb      	ldrh	r3, [r7, #12]
 8002f78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	8013      	strh	r3, [r2, #0]
 8002f8c:	e21b      	b.n	80033c6 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002fa0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f280 80f1 	bge.w	800318c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002fd4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002fd8:	b292      	uxth	r2, r2
 8002fda:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002fdc:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	4413      	add	r3, r2
 8002ff0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ff4:	7b1b      	ldrb	r3, [r3, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d123      	bne.n	8003042 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003002:	b29b      	uxth	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	4413      	add	r3, r2
 8003014:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800301e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8003022:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 808b 	beq.w	8003142 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003032:	6959      	ldr	r1, [r3, #20]
 8003034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003036:	88da      	ldrh	r2, [r3, #6]
 8003038:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800303c:	f005 f871 	bl	8008122 <USB_ReadPMA>
 8003040:	e07f      	b.n	8003142 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003044:	78db      	ldrb	r3, [r3, #3]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d109      	bne.n	800305e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800304a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800304c:	461a      	mov	r2, r3
 800304e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f9c6 	bl	80033e2 <HAL_PCD_EP_DB_Receive>
 8003056:	4603      	mov	r3, r0
 8003058:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800305c:	e071      	b.n	8003142 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003078:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	441a      	add	r2, r3
 8003088:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800308a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800308e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003096:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800309a:	b29b      	uxth	r3, r3
 800309c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d022      	beq.n	80030fe <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	4413      	add	r3, r2
 80030d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030dc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80030e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d02c      	beq.n	8003142 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030ee:	6959      	ldr	r1, [r3, #20]
 80030f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030f2:	891a      	ldrh	r2, [r3, #8]
 80030f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80030f8:	f005 f813 	bl	8008122 <USB_ReadPMA>
 80030fc:	e021      	b.n	8003142 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003106:	b29b      	uxth	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	4413      	add	r3, r2
 8003118:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003122:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003126:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003134:	6959      	ldr	r1, [r3, #20]
 8003136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003138:	895a      	ldrh	r2, [r3, #10]
 800313a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800313e:	f004 fff0 	bl	8008122 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003144:	69da      	ldr	r2, [r3, #28]
 8003146:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800314a:	441a      	add	r2, r3
 800314c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800314e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003158:	441a      	add	r2, r3
 800315a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800315c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800315e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <PCD_EP_ISR_Handler+0x41e>
 8003166:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800316a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	429a      	cmp	r2, r3
 8003170:	d206      	bcs.n	8003180 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	4619      	mov	r1, r3
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f009 fca9 	bl	800cad0 <HAL_PCD_DataOutStageCallback>
 800317e:	e005      	b.n	800318c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003186:	4618      	mov	r0, r3
 8003188:	f004 f8a5 	bl	80072d6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800318c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800318e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8117 	beq.w	80033c6 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003198:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	3310      	adds	r3, #16
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80031c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	441a      	add	r2, r3
 80031d6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80031d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80031e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031e6:	78db      	ldrb	r3, [r3, #3]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	f040 80a1 	bne.w	8003330 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80031ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031f0:	2200      	movs	r2, #0
 80031f2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80031f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031f6:	7b1b      	ldrb	r3, [r3, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 8092 	beq.w	8003322 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d046      	beq.n	8003296 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003208:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800320a:	785b      	ldrb	r3, [r3, #1]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d126      	bne.n	800325e <PCD_EP_ISR_Handler+0x50a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	4413      	add	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	00da      	lsls	r2, r3, #3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	4413      	add	r3, r2
 8003232:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	b29b      	uxth	r3, r3
 800323e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003242:	b29a      	uxth	r2, r3
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	801a      	strh	r2, [r3, #0]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	b29b      	uxth	r3, r3
 800324e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003256:	b29a      	uxth	r2, r3
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	801a      	strh	r2, [r3, #0]
 800325c:	e061      	b.n	8003322 <PCD_EP_ISR_Handler+0x5ce>
 800325e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003260:	785b      	ldrb	r3, [r3, #1]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d15d      	bne.n	8003322 <PCD_EP_ISR_Handler+0x5ce>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003274:	b29b      	uxth	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	4413      	add	r3, r2
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	00da      	lsls	r2, r3, #3
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	4413      	add	r3, r2
 8003288:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	2200      	movs	r2, #0
 8003292:	801a      	strh	r2, [r3, #0]
 8003294:	e045      	b.n	8003322 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800329c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800329e:	785b      	ldrb	r3, [r3, #1]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d126      	bne.n	80032f2 <PCD_EP_ISR_Handler+0x59e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	4413      	add	r3, r2
 80032ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80032bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	00da      	lsls	r2, r3, #3
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	4413      	add	r3, r2
 80032c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80032ca:	623b      	str	r3, [r7, #32]
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	801a      	strh	r2, [r3, #0]
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	801a      	strh	r2, [r3, #0]
 80032f0:	e017      	b.n	8003322 <PCD_EP_ISR_Handler+0x5ce>
 80032f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f4:	785b      	ldrb	r3, [r3, #1]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d113      	bne.n	8003322 <PCD_EP_ISR_Handler+0x5ce>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003302:	b29b      	uxth	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003308:	4413      	add	r3, r2
 800330a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800330c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	00da      	lsls	r2, r3, #3
 8003312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003314:	4413      	add	r3, r2
 8003316:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800331a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800331c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331e:	2200      	movs	r2, #0
 8003320:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f009 fbec 	bl	800cb06 <HAL_PCD_DataInStageCallback>
 800332e:	e04a      	b.n	80033c6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003330:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d13f      	bne.n	80033ba <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003342:	b29b      	uxth	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4413      	add	r3, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6812      	ldr	r2, [r2, #0]
 8003352:	4413      	add	r3, r2
 8003354:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800335e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003360:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003362:	699a      	ldr	r2, [r3, #24]
 8003364:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003366:	429a      	cmp	r2, r3
 8003368:	d906      	bls.n	8003378 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800336a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003370:	1ad2      	subs	r2, r2, r3
 8003372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003374:	619a      	str	r2, [r3, #24]
 8003376:	e002      	b.n	800337e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800337a:	2200      	movs	r2, #0
 800337c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800337e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	4619      	mov	r1, r3
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f009 fbba 	bl	800cb06 <HAL_PCD_DataInStageCallback>
 8003392:	e018      	b.n	80033c6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800339a:	441a      	add	r2, r3
 800339c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800339e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80033a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033a2:	69da      	ldr	r2, [r3, #28]
 80033a4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80033a6:	441a      	add	r2, r3
 80033a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033aa:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033b2:	4618      	mov	r0, r3
 80033b4:	f003 ff8f 	bl	80072d6 <USB_EPStartXfer>
 80033b8:	e005      	b.n	80033c6 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80033ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80033bc:	461a      	mov	r2, r3
 80033be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f917 	bl	80035f4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	b21b      	sxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f6ff acc3 	blt.w	8002d5e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3748      	adds	r7, #72	@ 0x48
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b088      	sub	sp, #32
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	4613      	mov	r3, r2
 80033ee:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033f0:	88fb      	ldrh	r3, [r7, #6]
 80033f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d07c      	beq.n	80034f4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003402:	b29b      	uxth	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4413      	add	r3, r2
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	6812      	ldr	r2, [r2, #0]
 8003412:	4413      	add	r3, r2
 8003414:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800341e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	8b7b      	ldrh	r3, [r7, #26]
 8003426:	429a      	cmp	r2, r3
 8003428:	d306      	bcc.n	8003438 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	8b7b      	ldrh	r3, [r7, #26]
 8003430:	1ad2      	subs	r2, r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	619a      	str	r2, [r3, #24]
 8003436:	e002      	b.n	800343e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2200      	movs	r2, #0
 800343c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d123      	bne.n	800348e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	b29b      	uxth	r3, r3
 8003458:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800345c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003460:	833b      	strh	r3, [r7, #24]
 8003462:	8b3b      	ldrh	r3, [r7, #24]
 8003464:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003468:	833b      	strh	r3, [r7, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	441a      	add	r2, r3
 8003478:	8b3b      	ldrh	r3, [r7, #24]
 800347a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800347e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003482:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800348a:	b29b      	uxth	r3, r3
 800348c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01f      	beq.n	80034d8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034b2:	82fb      	strh	r3, [r7, #22]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	441a      	add	r2, r3
 80034c2:	8afb      	ldrh	r3, [r7, #22]
 80034c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034d8:	8b7b      	ldrh	r3, [r7, #26]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8085 	beq.w	80035ea <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	6959      	ldr	r1, [r3, #20]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	891a      	ldrh	r2, [r3, #8]
 80034ec:	8b7b      	ldrh	r3, [r7, #26]
 80034ee:	f004 fe18 	bl	8008122 <USB_ReadPMA>
 80034f2:	e07a      	b.n	80035ea <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	4413      	add	r3, r2
 800350e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003518:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	8b7b      	ldrh	r3, [r7, #26]
 8003520:	429a      	cmp	r2, r3
 8003522:	d306      	bcc.n	8003532 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	699a      	ldr	r2, [r3, #24]
 8003528:	8b7b      	ldrh	r3, [r7, #26]
 800352a:	1ad2      	subs	r2, r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	619a      	str	r2, [r3, #24]
 8003530:	e002      	b.n	8003538 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2200      	movs	r2, #0
 8003536:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d123      	bne.n	8003588 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800355a:	83fb      	strh	r3, [r7, #30]
 800355c:	8bfb      	ldrh	r3, [r7, #30]
 800355e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003562:	83fb      	strh	r3, [r7, #30]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	441a      	add	r2, r3
 8003572:	8bfb      	ldrh	r3, [r7, #30]
 8003574:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003578:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800357c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003584:	b29b      	uxth	r3, r3
 8003586:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d11f      	bne.n	80035d2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ac:	83bb      	strh	r3, [r7, #28]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	441a      	add	r2, r3
 80035bc:	8bbb      	ldrh	r3, [r7, #28]
 80035be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035d2:	8b7b      	ldrh	r3, [r7, #26]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	6959      	ldr	r1, [r3, #20]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	895a      	ldrh	r2, [r3, #10]
 80035e4:	8b7b      	ldrh	r3, [r7, #26]
 80035e6:	f004 fd9c 	bl	8008122 <USB_ReadPMA>
    }
  }

  return count;
 80035ea:	8b7b      	ldrh	r3, [r7, #26]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3720      	adds	r7, #32
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b0a6      	sub	sp, #152	@ 0x98
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	4613      	mov	r3, r2
 8003600:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 81f7 	beq.w	80039fc <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003616:	b29b      	uxth	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	6812      	ldr	r2, [r2, #0]
 8003626:	4413      	add	r3, r2
 8003628:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003632:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	699a      	ldr	r2, [r3, #24]
 800363a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800363e:	429a      	cmp	r2, r3
 8003640:	d907      	bls.n	8003652 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800364a:	1ad2      	subs	r2, r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	619a      	str	r2, [r3, #24]
 8003650:	e002      	b.n	8003658 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2200      	movs	r2, #0
 8003656:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f040 80e1 	bne.w	8003824 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	785b      	ldrb	r3, [r3, #1]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d126      	bne.n	80036b8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003678:	b29b      	uxth	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367e:	4413      	add	r3, r2
 8003680:	633b      	str	r3, [r7, #48]	@ 0x30
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	00da      	lsls	r2, r3, #3
 8003688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368a:	4413      	add	r3, r2
 800368c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	b29b      	uxth	r3, r3
 8003698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800369c:	b29a      	uxth	r2, r3
 800369e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a0:	801a      	strh	r2, [r3, #0]
 80036a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b4:	801a      	strh	r2, [r3, #0]
 80036b6:	e01a      	b.n	80036ee <HAL_PCD_EP_DB_Transmit+0xfa>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	785b      	ldrb	r3, [r3, #1]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d116      	bne.n	80036ee <HAL_PCD_EP_DB_Transmit+0xfa>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d4:	4413      	add	r3, r2
 80036d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	00da      	lsls	r2, r3, #3
 80036de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e0:	4413      	add	r3, r2
 80036e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80036e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ea:	2200      	movs	r2, #0
 80036ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	785b      	ldrb	r3, [r3, #1]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d126      	bne.n	800374a <HAL_PCD_EP_DB_Transmit+0x156>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	623b      	str	r3, [r7, #32]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800370a:	b29b      	uxth	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	4413      	add	r3, r2
 8003712:	623b      	str	r3, [r7, #32]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	00da      	lsls	r2, r3, #3
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	4413      	add	r3, r2
 800371e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003722:	61fb      	str	r3, [r7, #28]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800372e:	b29a      	uxth	r2, r3
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	801a      	strh	r2, [r3, #0]
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	b29b      	uxth	r3, r3
 800373a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800373e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003742:	b29a      	uxth	r2, r3
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	801a      	strh	r2, [r3, #0]
 8003748:	e017      	b.n	800377a <HAL_PCD_EP_DB_Transmit+0x186>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	785b      	ldrb	r3, [r3, #1]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d113      	bne.n	800377a <HAL_PCD_EP_DB_Transmit+0x186>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800375a:	b29b      	uxth	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003760:	4413      	add	r3, r2
 8003762:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	00da      	lsls	r2, r3, #3
 800376a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376c:	4413      	add	r3, r2
 800376e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	2200      	movs	r2, #0
 8003778:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	78db      	ldrb	r3, [r3, #3]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d123      	bne.n	80037ca <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	b29b      	uxth	r3, r3
 8003794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003798:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800379c:	837b      	strh	r3, [r7, #26]
 800379e:	8b7b      	ldrh	r3, [r7, #26]
 80037a0:	f083 0320 	eor.w	r3, r3, #32
 80037a4:	837b      	strh	r3, [r7, #26]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	441a      	add	r2, r3
 80037b4:	8b7b      	ldrh	r3, [r7, #26]
 80037b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	4619      	mov	r1, r3
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f009 f998 	bl	800cb06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01f      	beq.n	8003820 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037fa:	833b      	strh	r3, [r7, #24]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	441a      	add	r2, r3
 800380a:	8b3b      	ldrh	r3, [r7, #24]
 800380c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003810:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003814:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800381c:	b29b      	uxth	r3, r3
 800381e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	e31f      	b.n	8003e64 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d021      	beq.n	8003872 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003844:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003848:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	441a      	add	r2, r3
 800385a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800385e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003862:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003866:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800386a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800386e:	b29b      	uxth	r3, r3
 8003870:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003878:	2b01      	cmp	r3, #1
 800387a:	f040 82ca 	bne.w	8003e12 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003886:	441a      	add	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003894:	441a      	add	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	6a1a      	ldr	r2, [r3, #32]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d309      	bcc.n	80038ba <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	6a1a      	ldr	r2, [r3, #32]
 80038b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038b2:	1ad2      	subs	r2, r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	621a      	str	r2, [r3, #32]
 80038b8:	e015      	b.n	80038e6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d107      	bne.n	80038d2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80038c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80038c6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80038d0:	e009      	b.n	80038e6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2200      	movs	r2, #0
 80038e4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	785b      	ldrb	r3, [r3, #1]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d15f      	bne.n	80039ae <HAL_PCD_EP_DB_Transmit+0x3ba>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	461a      	mov	r2, r3
 8003900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003902:	4413      	add	r3, r2
 8003904:	643b      	str	r3, [r7, #64]	@ 0x40
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	00da      	lsls	r2, r3, #3
 800390c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800390e:	4413      	add	r3, r2
 8003910:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003914:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003920:	b29a      	uxth	r2, r3
 8003922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003924:	801a      	strh	r2, [r3, #0]
 8003926:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <HAL_PCD_EP_DB_Transmit+0x34e>
 800392c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	b29b      	uxth	r3, r3
 8003932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800393a:	b29a      	uxth	r2, r3
 800393c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800393e:	801a      	strh	r2, [r3, #0]
 8003940:	e051      	b.n	80039e6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003942:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003944:	2b3e      	cmp	r3, #62	@ 0x3e
 8003946:	d816      	bhi.n	8003976 <HAL_PCD_EP_DB_Transmit+0x382>
 8003948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	653b      	str	r3, [r7, #80]	@ 0x50
 800394e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_PCD_EP_DB_Transmit+0x36a>
 8003958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800395a:	3301      	adds	r3, #1
 800395c:	653b      	str	r3, [r7, #80]	@ 0x50
 800395e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	b29a      	uxth	r2, r3
 8003964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003966:	b29b      	uxth	r3, r3
 8003968:	029b      	lsls	r3, r3, #10
 800396a:	b29b      	uxth	r3, r3
 800396c:	4313      	orrs	r3, r2
 800396e:	b29a      	uxth	r2, r3
 8003970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003972:	801a      	strh	r2, [r3, #0]
 8003974:	e037      	b.n	80039e6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003976:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003978:	095b      	lsrs	r3, r3, #5
 800397a:	653b      	str	r3, [r7, #80]	@ 0x50
 800397c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <HAL_PCD_EP_DB_Transmit+0x398>
 8003986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003988:	3b01      	subs	r3, #1
 800398a:	653b      	str	r3, [r7, #80]	@ 0x50
 800398c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	b29a      	uxth	r2, r3
 8003992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003994:	b29b      	uxth	r3, r3
 8003996:	029b      	lsls	r3, r3, #10
 8003998:	b29b      	uxth	r3, r3
 800399a:	4313      	orrs	r3, r2
 800399c:	b29b      	uxth	r3, r3
 800399e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039aa:	801a      	strh	r2, [r3, #0]
 80039ac:	e01b      	b.n	80039e6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d117      	bne.n	80039e6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039ca:	4413      	add	r3, r2
 80039cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	00da      	lsls	r2, r3, #3
 80039d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039d6:	4413      	add	r3, r2
 80039d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80039dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80039de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039e4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	6959      	ldr	r1, [r3, #20]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	891a      	ldrh	r2, [r3, #8]
 80039f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	f004 fb52 	bl	800809e <USB_WritePMA>
 80039fa:	e20a      	b.n	8003e12 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4413      	add	r3, r2
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	4413      	add	r3, r2
 8003a16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a20:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	699a      	ldr	r2, [r3, #24]
 8003a28:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d307      	bcc.n	8003a40 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	699a      	ldr	r2, [r3, #24]
 8003a34:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003a38:	1ad2      	subs	r2, r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	619a      	str	r2, [r3, #24]
 8003a3e:	e002      	b.n	8003a46 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2200      	movs	r2, #0
 8003a44:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f040 80f6 	bne.w	8003c3c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	785b      	ldrb	r3, [r3, #1]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d126      	bne.n	8003aa6 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a6c:	4413      	add	r3, r2
 8003a6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	00da      	lsls	r2, r3, #3
 8003a76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a78:	4413      	add	r3, r2
 8003a7a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a8e:	801a      	strh	r2, [r3, #0]
 8003a90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003aa2:	801a      	strh	r2, [r3, #0]
 8003aa4:	e01a      	b.n	8003adc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	785b      	ldrb	r3, [r3, #1]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d116      	bne.n	8003adc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ac2:	4413      	add	r3, r2
 8003ac4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	00da      	lsls	r2, r3, #3
 8003acc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ace:	4413      	add	r3, r2
 8003ad0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ad4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ad6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ad8:	2200      	movs	r2, #0
 8003ada:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	785b      	ldrb	r3, [r3, #1]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d12f      	bne.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x558>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b04:	4413      	add	r3, r2
 8003b06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	00da      	lsls	r2, r3, #3
 8003b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b14:	4413      	add	r3, r2
 8003b16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b30:	801a      	strh	r2, [r3, #0]
 8003b32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b48:	801a      	strh	r2, [r3, #0]
 8003b4a:	e01c      	b.n	8003b86 <HAL_PCD_EP_DB_Transmit+0x592>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	785b      	ldrb	r3, [r3, #1]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d118      	bne.n	8003b86 <HAL_PCD_EP_DB_Transmit+0x592>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b64:	4413      	add	r3, r2
 8003b66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	00da      	lsls	r2, r3, #3
 8003b70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b74:	4413      	add	r3, r2
 8003b76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b82:	2200      	movs	r2, #0
 8003b84:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	78db      	ldrb	r3, [r3, #3]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d127      	bne.n	8003bde <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ba8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003bac:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003bb0:	f083 0320 	eor.w	r3, r3, #32
 8003bb4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	441a      	add	r2, r3
 8003bc6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003bca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	4619      	mov	r1, r3
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f008 ff8e 	bl	800cb06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d121      	bne.n	8003c38 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c0e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	441a      	add	r2, r3
 8003c20:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8003c24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e113      	b.n	8003e64 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d121      	bne.n	8003c8a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c60:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003c76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	f040 80be 	bne.w	8003e12 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c9e:	441a      	add	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003cac:	441a      	add	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	6a1a      	ldr	r2, [r3, #32]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d309      	bcc.n	8003cd2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	6a1a      	ldr	r2, [r3, #32]
 8003cc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cca:	1ad2      	subs	r2, r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	621a      	str	r2, [r3, #32]
 8003cd0:	e015      	b.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d107      	bne.n	8003cea <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8003cda:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003cde:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ce8:	e009      	b.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	785b      	ldrb	r3, [r3, #1]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d15f      	bne.n	8003dcc <HAL_PCD_EP_DB_Transmit+0x7d8>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d20:	4413      	add	r3, r2
 8003d22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	00da      	lsls	r2, r3, #3
 8003d2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d32:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d42:	801a      	strh	r2, [r3, #0]
 8003d44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <HAL_PCD_EP_DB_Transmit+0x76c>
 8003d4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d5c:	801a      	strh	r2, [r3, #0]
 8003d5e:	e04e      	b.n	8003dfe <HAL_PCD_EP_DB_Transmit+0x80a>
 8003d60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d62:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d64:	d816      	bhi.n	8003d94 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003d66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_PCD_EP_DB_Transmit+0x788>
 8003d76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d78:	3301      	adds	r3, #1
 8003d7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	029b      	lsls	r3, r3, #10
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d90:	801a      	strh	r2, [r3, #0]
 8003d92:	e034      	b.n	8003dfe <HAL_PCD_EP_DB_Transmit+0x80a>
 8003d94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d9c:	f003 031f 	and.w	r3, r3, #31
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d102      	bne.n	8003daa <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003da4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003da6:	3b01      	subs	r3, #1
 8003da8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003daa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	029b      	lsls	r3, r3, #10
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	4313      	orrs	r3, r2
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	e018      	b.n	8003dfe <HAL_PCD_EP_DB_Transmit+0x80a>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	785b      	ldrb	r3, [r3, #1]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d114      	bne.n	8003dfe <HAL_PCD_EP_DB_Transmit+0x80a>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003de2:	4413      	add	r3, r2
 8003de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	00da      	lsls	r2, r3, #3
 8003dec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dee:	4413      	add	r3, r2
 8003df0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003df4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003df6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dfc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	6959      	ldr	r1, [r3, #20]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	895a      	ldrh	r2, [r3, #10]
 8003e0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	f004 f946 	bl	800809e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e2c:	82fb      	strh	r3, [r7, #22]
 8003e2e:	8afb      	ldrh	r3, [r7, #22]
 8003e30:	f083 0310 	eor.w	r3, r3, #16
 8003e34:	82fb      	strh	r3, [r7, #22]
 8003e36:	8afb      	ldrh	r3, [r7, #22]
 8003e38:	f083 0320 	eor.w	r3, r3, #32
 8003e3c:	82fb      	strh	r3, [r7, #22]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	441a      	add	r2, r3
 8003e4c:	8afb      	ldrh	r3, [r7, #22]
 8003e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3798      	adds	r7, #152	@ 0x98
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	607b      	str	r3, [r7, #4]
 8003e76:	460b      	mov	r3, r1
 8003e78:	817b      	strh	r3, [r7, #10]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003e7e:	897b      	ldrh	r3, [r7, #10]
 8003e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e8a:	897b      	ldrh	r3, [r7, #10]
 8003e8c:	f003 0207 	and.w	r2, r3, #7
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	3310      	adds	r3, #16
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	e009      	b.n	8003eb6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ea2:	897a      	ldrh	r2, [r7, #10]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003eb6:	893b      	ldrh	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d107      	bne.n	8003ecc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	80da      	strh	r2, [r3, #6]
 8003eca:	e00b      	b.n	8003ee4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0c1b      	lsrs	r3, r3, #16
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f043 0302 	orr.w	r3, r3, #2
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
	...

08003f48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d141      	bne.n	8003fda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f56:	4b4b      	ldr	r3, [pc, #300]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f62:	d131      	bne.n	8003fc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f64:	4b47      	ldr	r3, [pc, #284]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f6a:	4a46      	ldr	r2, [pc, #280]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f74:	4b43      	ldr	r3, [pc, #268]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f7c:	4a41      	ldr	r2, [pc, #260]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f84:	4b40      	ldr	r3, [pc, #256]	@ (8004088 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2232      	movs	r2, #50	@ 0x32
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	4a3f      	ldr	r2, [pc, #252]	@ (800408c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	0c9b      	lsrs	r3, r3, #18
 8003f96:	3301      	adds	r3, #1
 8003f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f9a:	e002      	b.n	8003fa2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fa2:	4b38      	ldr	r3, [pc, #224]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fae:	d102      	bne.n	8003fb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f2      	bne.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fb6:	4b33      	ldr	r3, [pc, #204]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fc2:	d158      	bne.n	8004076 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e057      	b.n	8004078 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fce:	4a2d      	ldr	r2, [pc, #180]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003fd8:	e04d      	b.n	8004076 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fe0:	d141      	bne.n	8004066 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fe2:	4b28      	ldr	r3, [pc, #160]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fee:	d131      	bne.n	8004054 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ff0:	4b24      	ldr	r3, [pc, #144]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ff6:	4a23      	ldr	r2, [pc, #140]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ffc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004000:	4b20      	ldr	r3, [pc, #128]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004008:	4a1e      	ldr	r2, [pc, #120]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800400e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004010:	4b1d      	ldr	r3, [pc, #116]	@ (8004088 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2232      	movs	r2, #50	@ 0x32
 8004016:	fb02 f303 	mul.w	r3, r2, r3
 800401a:	4a1c      	ldr	r2, [pc, #112]	@ (800408c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	0c9b      	lsrs	r3, r3, #18
 8004022:	3301      	adds	r3, #1
 8004024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004026:	e002      	b.n	800402e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3b01      	subs	r3, #1
 800402c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800402e:	4b15      	ldr	r3, [pc, #84]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800403a:	d102      	bne.n	8004042 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f2      	bne.n	8004028 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004042:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800404a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800404e:	d112      	bne.n	8004076 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e011      	b.n	8004078 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004054:	4b0b      	ldr	r3, [pc, #44]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800405a:	4a0a      	ldr	r2, [pc, #40]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004060:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004064:	e007      	b.n	8004076 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004066:	4b07      	ldr	r3, [pc, #28]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800406e:	4a05      	ldr	r2, [pc, #20]	@ (8004084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004070:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004074:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	40007000 	.word	0x40007000
 8004088:	20000000 	.word	0x20000000
 800408c:	431bde83 	.word	0x431bde83

08004090 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004094:	4b05      	ldr	r3, [pc, #20]	@ (80040ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4a04      	ldr	r2, [pc, #16]	@ (80040ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800409a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800409e:	6093      	str	r3, [r2, #8]
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40007000 	.word	0x40007000

080040b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e2fe      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d075      	beq.n	80041ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ce:	4b97      	ldr	r3, [pc, #604]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040d8:	4b94      	ldr	r3, [pc, #592]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b0c      	cmp	r3, #12
 80040e6:	d102      	bne.n	80040ee <HAL_RCC_OscConfig+0x3e>
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d002      	beq.n	80040f4 <HAL_RCC_OscConfig+0x44>
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d10b      	bne.n	800410c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f4:	4b8d      	ldr	r3, [pc, #564]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d05b      	beq.n	80041b8 <HAL_RCC_OscConfig+0x108>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d157      	bne.n	80041b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e2d9      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004114:	d106      	bne.n	8004124 <HAL_RCC_OscConfig+0x74>
 8004116:	4b85      	ldr	r3, [pc, #532]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a84      	ldr	r2, [pc, #528]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e01d      	b.n	8004160 <HAL_RCC_OscConfig+0xb0>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800412c:	d10c      	bne.n	8004148 <HAL_RCC_OscConfig+0x98>
 800412e:	4b7f      	ldr	r3, [pc, #508]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a7e      	ldr	r2, [pc, #504]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 8004134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	4b7c      	ldr	r3, [pc, #496]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a7b      	ldr	r2, [pc, #492]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	e00b      	b.n	8004160 <HAL_RCC_OscConfig+0xb0>
 8004148:	4b78      	ldr	r3, [pc, #480]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a77      	ldr	r2, [pc, #476]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 800414e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	4b75      	ldr	r3, [pc, #468]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a74      	ldr	r2, [pc, #464]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 800415a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800415e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d013      	beq.n	8004190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fd fc02 	bl	8001970 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004170:	f7fd fbfe 	bl	8001970 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	@ 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e29e      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004182:	4b6a      	ldr	r3, [pc, #424]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0xc0>
 800418e:	e014      	b.n	80041ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fd fbee 	bl	8001970 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004198:	f7fd fbea 	bl	8001970 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	@ 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e28a      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041aa:	4b60      	ldr	r3, [pc, #384]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0xe8>
 80041b6:	e000      	b.n	80041ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d075      	beq.n	80042b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041c6:	4b59      	ldr	r3, [pc, #356]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041d0:	4b56      	ldr	r3, [pc, #344]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	2b0c      	cmp	r3, #12
 80041de:	d102      	bne.n	80041e6 <HAL_RCC_OscConfig+0x136>
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d002      	beq.n	80041ec <HAL_RCC_OscConfig+0x13c>
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d11f      	bne.n	800422c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041ec:	4b4f      	ldr	r3, [pc, #316]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_OscConfig+0x154>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e25d      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004204:	4b49      	ldr	r3, [pc, #292]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	061b      	lsls	r3, r3, #24
 8004212:	4946      	ldr	r1, [pc, #280]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 8004214:	4313      	orrs	r3, r2
 8004216:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004218:	4b45      	ldr	r3, [pc, #276]	@ (8004330 <HAL_RCC_OscConfig+0x280>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	f7fd f9df 	bl	80015e0 <HAL_InitTick>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d043      	beq.n	80042b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e249      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d023      	beq.n	800427c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004234:	4b3d      	ldr	r3, [pc, #244]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a3c      	ldr	r2, [pc, #240]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 800423a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800423e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fd fb96 	bl	8001970 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004248:	f7fd fb92 	bl	8001970 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e232      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800425a:	4b34      	ldr	r3, [pc, #208]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004266:	4b31      	ldr	r3, [pc, #196]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	061b      	lsls	r3, r3, #24
 8004274:	492d      	ldr	r1, [pc, #180]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 8004276:	4313      	orrs	r3, r2
 8004278:	604b      	str	r3, [r1, #4]
 800427a:	e01a      	b.n	80042b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427c:	4b2b      	ldr	r3, [pc, #172]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2a      	ldr	r2, [pc, #168]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 8004282:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fd fb72 	bl	8001970 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004290:	f7fd fb6e 	bl	8001970 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e20e      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042a2:	4b22      	ldr	r3, [pc, #136]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x1e0>
 80042ae:	e000      	b.n	80042b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d041      	beq.n	8004342 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01c      	beq.n	8004300 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c6:	4b19      	ldr	r3, [pc, #100]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 80042c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042cc:	4a17      	ldr	r2, [pc, #92]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d6:	f7fd fb4b 	bl	8001970 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042de:	f7fd fb47 	bl	8001970 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e1e7      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042f0:	4b0e      	ldr	r3, [pc, #56]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 80042f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0ef      	beq.n	80042de <HAL_RCC_OscConfig+0x22e>
 80042fe:	e020      	b.n	8004342 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004300:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 8004302:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004306:	4a09      	ldr	r2, [pc, #36]	@ (800432c <HAL_RCC_OscConfig+0x27c>)
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004310:	f7fd fb2e 	bl	8001970 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004316:	e00d      	b.n	8004334 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004318:	f7fd fb2a 	bl	8001970 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d906      	bls.n	8004334 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e1ca      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
 800432a:	bf00      	nop
 800432c:	40021000 	.word	0x40021000
 8004330:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004334:	4b8c      	ldr	r3, [pc, #560]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 8004336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1ea      	bne.n	8004318 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80a6 	beq.w	800449c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004350:	2300      	movs	r3, #0
 8004352:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004354:	4b84      	ldr	r3, [pc, #528]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 8004356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_RCC_OscConfig+0x2b4>
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x2b6>
 8004364:	2300      	movs	r3, #0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00d      	beq.n	8004386 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800436a:	4b7f      	ldr	r3, [pc, #508]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 800436c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436e:	4a7e      	ldr	r2, [pc, #504]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 8004370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004374:	6593      	str	r3, [r2, #88]	@ 0x58
 8004376:	4b7c      	ldr	r3, [pc, #496]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 8004378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004382:	2301      	movs	r3, #1
 8004384:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004386:	4b79      	ldr	r3, [pc, #484]	@ (800456c <HAL_RCC_OscConfig+0x4bc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438e:	2b00      	cmp	r3, #0
 8004390:	d118      	bne.n	80043c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004392:	4b76      	ldr	r3, [pc, #472]	@ (800456c <HAL_RCC_OscConfig+0x4bc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a75      	ldr	r2, [pc, #468]	@ (800456c <HAL_RCC_OscConfig+0x4bc>)
 8004398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800439c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800439e:	f7fd fae7 	bl	8001970 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a6:	f7fd fae3 	bl	8001970 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e183      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b8:	4b6c      	ldr	r3, [pc, #432]	@ (800456c <HAL_RCC_OscConfig+0x4bc>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d108      	bne.n	80043de <HAL_RCC_OscConfig+0x32e>
 80043cc:	4b66      	ldr	r3, [pc, #408]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d2:	4a65      	ldr	r2, [pc, #404]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043dc:	e024      	b.n	8004428 <HAL_RCC_OscConfig+0x378>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b05      	cmp	r3, #5
 80043e4:	d110      	bne.n	8004408 <HAL_RCC_OscConfig+0x358>
 80043e6:	4b60      	ldr	r3, [pc, #384]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 80043e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ec:	4a5e      	ldr	r2, [pc, #376]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 80043ee:	f043 0304 	orr.w	r3, r3, #4
 80043f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043f6:	4b5c      	ldr	r3, [pc, #368]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 80043f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043fc:	4a5a      	ldr	r2, [pc, #360]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004406:	e00f      	b.n	8004428 <HAL_RCC_OscConfig+0x378>
 8004408:	4b57      	ldr	r3, [pc, #348]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440e:	4a56      	ldr	r2, [pc, #344]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004418:	4b53      	ldr	r3, [pc, #332]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800441e:	4a52      	ldr	r2, [pc, #328]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 8004420:	f023 0304 	bic.w	r3, r3, #4
 8004424:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d016      	beq.n	800445e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004430:	f7fd fa9e 	bl	8001970 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004436:	e00a      	b.n	800444e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004438:	f7fd fa9a 	bl	8001970 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e138      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444e:	4b46      	ldr	r3, [pc, #280]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ed      	beq.n	8004438 <HAL_RCC_OscConfig+0x388>
 800445c:	e015      	b.n	800448a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445e:	f7fd fa87 	bl	8001970 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004464:	e00a      	b.n	800447c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004466:	f7fd fa83 	bl	8001970 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004474:	4293      	cmp	r3, r2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e121      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800447c:	4b3a      	ldr	r3, [pc, #232]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1ed      	bne.n	8004466 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800448a:	7ffb      	ldrb	r3, [r7, #31]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d105      	bne.n	800449c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004490:	4b35      	ldr	r3, [pc, #212]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004494:	4a34      	ldr	r2, [pc, #208]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 8004496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800449a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d03c      	beq.n	8004522 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01c      	beq.n	80044ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 80044b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c0:	f7fd fa56 	bl	8001970 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044c8:	f7fd fa52 	bl	8001970 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e0f2      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044da:	4b23      	ldr	r3, [pc, #140]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 80044dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ef      	beq.n	80044c8 <HAL_RCC_OscConfig+0x418>
 80044e8:	e01b      	b.n	8004522 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 80044ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fa:	f7fd fa39 	bl	8001970 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004502:	f7fd fa35 	bl	8001970 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e0d5      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004514:	4b14      	ldr	r3, [pc, #80]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 8004516:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1ef      	bne.n	8004502 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 80c9 	beq.w	80046be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800452c:	4b0e      	ldr	r3, [pc, #56]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 030c 	and.w	r3, r3, #12
 8004534:	2b0c      	cmp	r3, #12
 8004536:	f000 8083 	beq.w	8004640 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d15e      	bne.n	8004600 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004542:	4b09      	ldr	r3, [pc, #36]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a08      	ldr	r2, [pc, #32]	@ (8004568 <HAL_RCC_OscConfig+0x4b8>)
 8004548:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800454c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454e:	f7fd fa0f 	bl	8001970 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004554:	e00c      	b.n	8004570 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004556:	f7fd fa0b 	bl	8001970 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d905      	bls.n	8004570 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e0ab      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
 8004568:	40021000 	.word	0x40021000
 800456c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004570:	4b55      	ldr	r3, [pc, #340]	@ (80046c8 <HAL_RCC_OscConfig+0x618>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1ec      	bne.n	8004556 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800457c:	4b52      	ldr	r3, [pc, #328]	@ (80046c8 <HAL_RCC_OscConfig+0x618>)
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	4b52      	ldr	r3, [pc, #328]	@ (80046cc <HAL_RCC_OscConfig+0x61c>)
 8004582:	4013      	ands	r3, r2
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6a11      	ldr	r1, [r2, #32]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800458c:	3a01      	subs	r2, #1
 800458e:	0112      	lsls	r2, r2, #4
 8004590:	4311      	orrs	r1, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004596:	0212      	lsls	r2, r2, #8
 8004598:	4311      	orrs	r1, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800459e:	0852      	lsrs	r2, r2, #1
 80045a0:	3a01      	subs	r2, #1
 80045a2:	0552      	lsls	r2, r2, #21
 80045a4:	4311      	orrs	r1, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045aa:	0852      	lsrs	r2, r2, #1
 80045ac:	3a01      	subs	r2, #1
 80045ae:	0652      	lsls	r2, r2, #25
 80045b0:	4311      	orrs	r1, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80045b6:	06d2      	lsls	r2, r2, #27
 80045b8:	430a      	orrs	r2, r1
 80045ba:	4943      	ldr	r1, [pc, #268]	@ (80046c8 <HAL_RCC_OscConfig+0x618>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c0:	4b41      	ldr	r3, [pc, #260]	@ (80046c8 <HAL_RCC_OscConfig+0x618>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a40      	ldr	r2, [pc, #256]	@ (80046c8 <HAL_RCC_OscConfig+0x618>)
 80045c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045cc:	4b3e      	ldr	r3, [pc, #248]	@ (80046c8 <HAL_RCC_OscConfig+0x618>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4a3d      	ldr	r2, [pc, #244]	@ (80046c8 <HAL_RCC_OscConfig+0x618>)
 80045d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fd f9ca 	bl	8001970 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e0:	f7fd f9c6 	bl	8001970 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e066      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f2:	4b35      	ldr	r3, [pc, #212]	@ (80046c8 <HAL_RCC_OscConfig+0x618>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x530>
 80045fe:	e05e      	b.n	80046be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004600:	4b31      	ldr	r3, [pc, #196]	@ (80046c8 <HAL_RCC_OscConfig+0x618>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a30      	ldr	r2, [pc, #192]	@ (80046c8 <HAL_RCC_OscConfig+0x618>)
 8004606:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800460a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fd f9b0 	bl	8001970 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004614:	f7fd f9ac 	bl	8001970 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e04c      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004626:	4b28      	ldr	r3, [pc, #160]	@ (80046c8 <HAL_RCC_OscConfig+0x618>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004632:	4b25      	ldr	r3, [pc, #148]	@ (80046c8 <HAL_RCC_OscConfig+0x618>)
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	4924      	ldr	r1, [pc, #144]	@ (80046c8 <HAL_RCC_OscConfig+0x618>)
 8004638:	4b25      	ldr	r3, [pc, #148]	@ (80046d0 <HAL_RCC_OscConfig+0x620>)
 800463a:	4013      	ands	r3, r2
 800463c:	60cb      	str	r3, [r1, #12]
 800463e:	e03e      	b.n	80046be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e039      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800464c:	4b1e      	ldr	r3, [pc, #120]	@ (80046c8 <HAL_RCC_OscConfig+0x618>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f003 0203 	and.w	r2, r3, #3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	429a      	cmp	r2, r3
 800465e:	d12c      	bne.n	80046ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	3b01      	subs	r3, #1
 800466c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d123      	bne.n	80046ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800467e:	429a      	cmp	r2, r3
 8004680:	d11b      	bne.n	80046ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d113      	bne.n	80046ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469c:	085b      	lsrs	r3, r3, #1
 800469e:	3b01      	subs	r3, #1
 80046a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d109      	bne.n	80046ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	3b01      	subs	r3, #1
 80046b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d001      	beq.n	80046be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3720      	adds	r7, #32
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40021000 	.word	0x40021000
 80046cc:	019f800c 	.word	0x019f800c
 80046d0:	feeefffc 	.word	0xfeeefffc

080046d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e11e      	b.n	800492a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046ec:	4b91      	ldr	r3, [pc, #580]	@ (8004934 <HAL_RCC_ClockConfig+0x260>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d910      	bls.n	800471c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fa:	4b8e      	ldr	r3, [pc, #568]	@ (8004934 <HAL_RCC_ClockConfig+0x260>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f023 020f 	bic.w	r2, r3, #15
 8004702:	498c      	ldr	r1, [pc, #560]	@ (8004934 <HAL_RCC_ClockConfig+0x260>)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	4313      	orrs	r3, r2
 8004708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800470a:	4b8a      	ldr	r3, [pc, #552]	@ (8004934 <HAL_RCC_ClockConfig+0x260>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d001      	beq.n	800471c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e106      	b.n	800492a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d073      	beq.n	8004810 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d129      	bne.n	8004784 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004730:	4b81      	ldr	r3, [pc, #516]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e0f4      	b.n	800492a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004740:	f000 f9d0 	bl	8004ae4 <RCC_GetSysClockFreqFromPLLSource>
 8004744:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4a7c      	ldr	r2, [pc, #496]	@ (800493c <HAL_RCC_ClockConfig+0x268>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d93f      	bls.n	80047ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800474e:	4b7a      	ldr	r3, [pc, #488]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d009      	beq.n	800476e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004762:	2b00      	cmp	r3, #0
 8004764:	d033      	beq.n	80047ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800476a:	2b00      	cmp	r3, #0
 800476c:	d12f      	bne.n	80047ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800476e:	4b72      	ldr	r3, [pc, #456]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004776:	4a70      	ldr	r2, [pc, #448]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 8004778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800477c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800477e:	2380      	movs	r3, #128	@ 0x80
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	e024      	b.n	80047ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d107      	bne.n	800479c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800478c:	4b6a      	ldr	r3, [pc, #424]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d109      	bne.n	80047ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0c6      	b.n	800492a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800479c:	4b66      	ldr	r3, [pc, #408]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0be      	b.n	800492a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80047ac:	f000 f8ce 	bl	800494c <HAL_RCC_GetSysClockFreq>
 80047b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4a61      	ldr	r2, [pc, #388]	@ (800493c <HAL_RCC_ClockConfig+0x268>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d909      	bls.n	80047ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047ba:	4b5f      	ldr	r3, [pc, #380]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047c2:	4a5d      	ldr	r2, [pc, #372]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 80047c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047ca:	2380      	movs	r3, #128	@ 0x80
 80047cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047ce:	4b5a      	ldr	r3, [pc, #360]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f023 0203 	bic.w	r2, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	4957      	ldr	r1, [pc, #348]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e0:	f7fd f8c6 	bl	8001970 <HAL_GetTick>
 80047e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e6:	e00a      	b.n	80047fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e8:	f7fd f8c2 	bl	8001970 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e095      	b.n	800492a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fe:	4b4e      	ldr	r3, [pc, #312]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 020c 	and.w	r2, r3, #12
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	429a      	cmp	r2, r3
 800480e:	d1eb      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d023      	beq.n	8004864 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004828:	4b43      	ldr	r3, [pc, #268]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4a42      	ldr	r2, [pc, #264]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 800482e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004832:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004840:	4b3d      	ldr	r3, [pc, #244]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004848:	4a3b      	ldr	r2, [pc, #236]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 800484a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800484e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004850:	4b39      	ldr	r3, [pc, #228]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	4936      	ldr	r1, [pc, #216]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 800485e:	4313      	orrs	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
 8004862:	e008      	b.n	8004876 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2b80      	cmp	r3, #128	@ 0x80
 8004868:	d105      	bne.n	8004876 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800486a:	4b33      	ldr	r3, [pc, #204]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	4a32      	ldr	r2, [pc, #200]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 8004870:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004874:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004876:	4b2f      	ldr	r3, [pc, #188]	@ (8004934 <HAL_RCC_ClockConfig+0x260>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d21d      	bcs.n	80048c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004884:	4b2b      	ldr	r3, [pc, #172]	@ (8004934 <HAL_RCC_ClockConfig+0x260>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f023 020f 	bic.w	r2, r3, #15
 800488c:	4929      	ldr	r1, [pc, #164]	@ (8004934 <HAL_RCC_ClockConfig+0x260>)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	4313      	orrs	r3, r2
 8004892:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004894:	f7fd f86c 	bl	8001970 <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489c:	f7fd f868 	bl	8001970 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e03b      	b.n	800492a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b2:	4b20      	ldr	r3, [pc, #128]	@ (8004934 <HAL_RCC_ClockConfig+0x260>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d1ed      	bne.n	800489c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4917      	ldr	r1, [pc, #92]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ea:	4b13      	ldr	r3, [pc, #76]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	490f      	ldr	r1, [pc, #60]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048fe:	f000 f825 	bl	800494c <HAL_RCC_GetSysClockFreq>
 8004902:	4602      	mov	r2, r0
 8004904:	4b0c      	ldr	r3, [pc, #48]	@ (8004938 <HAL_RCC_ClockConfig+0x264>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	490c      	ldr	r1, [pc, #48]	@ (8004940 <HAL_RCC_ClockConfig+0x26c>)
 8004910:	5ccb      	ldrb	r3, [r1, r3]
 8004912:	f003 031f 	and.w	r3, r3, #31
 8004916:	fa22 f303 	lsr.w	r3, r2, r3
 800491a:	4a0a      	ldr	r2, [pc, #40]	@ (8004944 <HAL_RCC_ClockConfig+0x270>)
 800491c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800491e:	4b0a      	ldr	r3, [pc, #40]	@ (8004948 <HAL_RCC_ClockConfig+0x274>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f7fc fe5c 	bl	80015e0 <HAL_InitTick>
 8004928:	4603      	mov	r3, r0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40022000 	.word	0x40022000
 8004938:	40021000 	.word	0x40021000
 800493c:	04c4b400 	.word	0x04c4b400
 8004940:	0800fe8c 	.word	0x0800fe8c
 8004944:	20000000 	.word	0x20000000
 8004948:	20000004 	.word	0x20000004

0800494c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004952:	4b2c      	ldr	r3, [pc, #176]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b04      	cmp	r3, #4
 800495c:	d102      	bne.n	8004964 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800495e:	4b2a      	ldr	r3, [pc, #168]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	e047      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004964:	4b27      	ldr	r3, [pc, #156]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 030c 	and.w	r3, r3, #12
 800496c:	2b08      	cmp	r3, #8
 800496e:	d102      	bne.n	8004976 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004970:	4b26      	ldr	r3, [pc, #152]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	e03e      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004976:	4b23      	ldr	r3, [pc, #140]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 030c 	and.w	r3, r3, #12
 800497e:	2b0c      	cmp	r3, #12
 8004980:	d136      	bne.n	80049f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004982:	4b20      	ldr	r3, [pc, #128]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800498c:	4b1d      	ldr	r3, [pc, #116]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	091b      	lsrs	r3, r3, #4
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	3301      	adds	r3, #1
 8004998:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d10c      	bne.n	80049ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049a0:	4a1a      	ldr	r2, [pc, #104]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0xc0>)
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	4a16      	ldr	r2, [pc, #88]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049aa:	68d2      	ldr	r2, [r2, #12]
 80049ac:	0a12      	lsrs	r2, r2, #8
 80049ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80049b2:	fb02 f303 	mul.w	r3, r2, r3
 80049b6:	617b      	str	r3, [r7, #20]
      break;
 80049b8:	e00c      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049ba:	4a13      	ldr	r2, [pc, #76]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c2:	4a10      	ldr	r2, [pc, #64]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049c4:	68d2      	ldr	r2, [r2, #12]
 80049c6:	0a12      	lsrs	r2, r2, #8
 80049c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80049cc:	fb02 f303 	mul.w	r3, r2, r3
 80049d0:	617b      	str	r3, [r7, #20]
      break;
 80049d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	0e5b      	lsrs	r3, r3, #25
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	3301      	adds	r3, #1
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	613b      	str	r3, [r7, #16]
 80049ee:	e001      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049f4:	693b      	ldr	r3, [r7, #16]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40021000 	.word	0x40021000
 8004a08:	00f42400 	.word	0x00f42400
 8004a0c:	007a1200 	.word	0x007a1200

08004a10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a14:	4b03      	ldr	r3, [pc, #12]	@ (8004a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a16:	681b      	ldr	r3, [r3, #0]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	20000000 	.word	0x20000000

08004a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a2c:	f7ff fff0 	bl	8004a10 <HAL_RCC_GetHCLKFreq>
 8004a30:	4602      	mov	r2, r0
 8004a32:	4b06      	ldr	r3, [pc, #24]	@ (8004a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	0a1b      	lsrs	r3, r3, #8
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	4904      	ldr	r1, [pc, #16]	@ (8004a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a3e:	5ccb      	ldrb	r3, [r1, r3]
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	0800fe9c 	.word	0x0800fe9c

08004a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a58:	f7ff ffda 	bl	8004a10 <HAL_RCC_GetHCLKFreq>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4b06      	ldr	r3, [pc, #24]	@ (8004a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	0adb      	lsrs	r3, r3, #11
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	4904      	ldr	r1, [pc, #16]	@ (8004a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a6a:	5ccb      	ldrb	r3, [r1, r3]
 8004a6c:	f003 031f 	and.w	r3, r3, #31
 8004a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	0800fe9c 	.word	0x0800fe9c

08004a80 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	220f      	movs	r2, #15
 8004a8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a90:	4b12      	ldr	r3, [pc, #72]	@ (8004adc <HAL_RCC_GetClockConfig+0x5c>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f003 0203 	and.w	r2, r3, #3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004adc <HAL_RCC_GetClockConfig+0x5c>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8004adc <HAL_RCC_GetClockConfig+0x5c>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004ab4:	4b09      	ldr	r3, [pc, #36]	@ (8004adc <HAL_RCC_GetClockConfig+0x5c>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	08db      	lsrs	r3, r3, #3
 8004aba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004ac2:	4b07      	ldr	r3, [pc, #28]	@ (8004ae0 <HAL_RCC_GetClockConfig+0x60>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 020f 	and.w	r2, r3, #15
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	601a      	str	r2, [r3, #0]
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	40022000 	.word	0x40022000

08004ae4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aea:	4b1e      	ldr	r3, [pc, #120]	@ (8004b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004af4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	3301      	adds	r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d10c      	bne.n	8004b22 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b08:	4a17      	ldr	r2, [pc, #92]	@ (8004b68 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b10:	4a14      	ldr	r2, [pc, #80]	@ (8004b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b12:	68d2      	ldr	r2, [r2, #12]
 8004b14:	0a12      	lsrs	r2, r2, #8
 8004b16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
 8004b1e:	617b      	str	r3, [r7, #20]
    break;
 8004b20:	e00c      	b.n	8004b3c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b22:	4a12      	ldr	r2, [pc, #72]	@ (8004b6c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8004b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b2c:	68d2      	ldr	r2, [r2, #12]
 8004b2e:	0a12      	lsrs	r2, r2, #8
 8004b30:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b34:	fb02 f303 	mul.w	r3, r2, r3
 8004b38:	617b      	str	r3, [r7, #20]
    break;
 8004b3a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b3c:	4b09      	ldr	r3, [pc, #36]	@ (8004b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	0e5b      	lsrs	r3, r3, #25
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	3301      	adds	r3, #1
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b56:	687b      	ldr	r3, [r7, #4]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	40021000 	.word	0x40021000
 8004b68:	007a1200 	.word	0x007a1200
 8004b6c:	00f42400 	.word	0x00f42400

08004b70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b78:	2300      	movs	r3, #0
 8004b7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8098 	beq.w	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b92:	4b43      	ldr	r3, [pc, #268]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10d      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9e:	4b40      	ldr	r3, [pc, #256]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004baa:	4b3d      	ldr	r3, [pc, #244]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bba:	4b3a      	ldr	r3, [pc, #232]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a39      	ldr	r2, [pc, #228]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bc6:	f7fc fed3 	bl	8001970 <HAL_GetTick>
 8004bca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bcc:	e009      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bce:	f7fc fecf 	bl	8001970 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d902      	bls.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	74fb      	strb	r3, [r7, #19]
        break;
 8004be0:	e005      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004be2:	4b30      	ldr	r3, [pc, #192]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0ef      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004bee:	7cfb      	ldrb	r3, [r7, #19]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d159      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d01e      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d019      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c10:	4b23      	ldr	r3, [pc, #140]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c1c:	4b20      	ldr	r3, [pc, #128]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c22:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c32:	4a1b      	ldr	r2, [pc, #108]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c3c:	4a18      	ldr	r2, [pc, #96]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d016      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4e:	f7fc fe8f 	bl	8001970 <HAL_GetTick>
 8004c52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c54:	e00b      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c56:	f7fc fe8b 	bl	8001970 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d902      	bls.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	74fb      	strb	r3, [r7, #19]
            break;
 8004c6c:	e006      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0ec      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c7c:	7cfb      	ldrb	r3, [r7, #19]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10b      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c82:	4b07      	ldr	r3, [pc, #28]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c90:	4903      	ldr	r1, [pc, #12]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c98:	e008      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c9a:	7cfb      	ldrb	r3, [r7, #19]
 8004c9c:	74bb      	strb	r3, [r7, #18]
 8004c9e:	e005      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca8:	7cfb      	ldrb	r3, [r7, #19]
 8004caa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cac:	7c7b      	ldrb	r3, [r7, #17]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d105      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb2:	4ba7      	ldr	r3, [pc, #668]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb6:	4aa6      	ldr	r2, [pc, #664]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cbc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cca:	4ba1      	ldr	r3, [pc, #644]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd0:	f023 0203 	bic.w	r2, r3, #3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	499d      	ldr	r1, [pc, #628]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cec:	4b98      	ldr	r3, [pc, #608]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf2:	f023 020c 	bic.w	r2, r3, #12
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	4995      	ldr	r1, [pc, #596]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d0e:	4b90      	ldr	r3, [pc, #576]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d14:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	498c      	ldr	r1, [pc, #560]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d30:	4b87      	ldr	r3, [pc, #540]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	4984      	ldr	r1, [pc, #528]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0310 	and.w	r3, r3, #16
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d52:	4b7f      	ldr	r3, [pc, #508]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	497b      	ldr	r1, [pc, #492]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d74:	4b76      	ldr	r3, [pc, #472]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	4973      	ldr	r1, [pc, #460]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d96:	4b6e      	ldr	r3, [pc, #440]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	496a      	ldr	r1, [pc, #424]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004db8:	4b65      	ldr	r3, [pc, #404]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dbe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	4962      	ldr	r1, [pc, #392]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dda:	4b5d      	ldr	r3, [pc, #372]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de8:	4959      	ldr	r1, [pc, #356]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dfc:	4b54      	ldr	r3, [pc, #336]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e02:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0a:	4951      	ldr	r1, [pc, #324]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d015      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e1e:	4b4c      	ldr	r3, [pc, #304]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e24:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	4948      	ldr	r1, [pc, #288]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e3c:	d105      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e3e:	4b44      	ldr	r3, [pc, #272]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	4a43      	ldr	r2, [pc, #268]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e48:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d015      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e56:	4b3e      	ldr	r3, [pc, #248]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e64:	493a      	ldr	r1, [pc, #232]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e74:	d105      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e76:	4b36      	ldr	r3, [pc, #216]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	4a35      	ldr	r2, [pc, #212]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e80:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d015      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e8e:	4b30      	ldr	r3, [pc, #192]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e94:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9c:	492c      	ldr	r1, [pc, #176]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eac:	d105      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eae:	4b28      	ldr	r3, [pc, #160]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	4a27      	ldr	r2, [pc, #156]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eb8:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d015      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ec6:	4b22      	ldr	r3, [pc, #136]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ecc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed4:	491e      	ldr	r1, [pc, #120]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ee4:	d105      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	4a19      	ldr	r2, [pc, #100]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ef0:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d015      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004efe:	4b14      	ldr	r3, [pc, #80]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f04:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f0c:	4910      	ldr	r1, [pc, #64]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f1c:	d105      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	4a0b      	ldr	r2, [pc, #44]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f28:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d018      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f36:	4b06      	ldr	r3, [pc, #24]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f3c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f44:	4902      	ldr	r1, [pc, #8]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	e001      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f50:	40021000 	.word	0x40021000
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f5a:	d105      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f5c:	4b21      	ldr	r3, [pc, #132]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	4a20      	ldr	r2, [pc, #128]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f66:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d015      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004f74:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f82:	4918      	ldr	r1, [pc, #96]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f92:	d105      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f94:	4b13      	ldr	r3, [pc, #76]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	4a12      	ldr	r2, [pc, #72]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f9e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d015      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004fac:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fba:	490a      	ldr	r1, [pc, #40]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fca:	d105      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fcc:	4b05      	ldr	r3, [pc, #20]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4a04      	ldr	r2, [pc, #16]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fd6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004fd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40021000 	.word	0x40021000

08004fe8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e09d      	b.n	8005136 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d108      	bne.n	8005014 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800500a:	d009      	beq.n	8005020 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	61da      	str	r2, [r3, #28]
 8005012:	e005      	b.n	8005020 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fc fa36 	bl	80014ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005056:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005060:	d902      	bls.n	8005068 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005062:	2300      	movs	r3, #0
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	e002      	b.n	800506e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005068:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800506c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005076:	d007      	beq.n	8005088 <HAL_SPI_Init+0xa0>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005080:	d002      	beq.n	8005088 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ca:	ea42 0103 	orr.w	r1, r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	0c1b      	lsrs	r3, r3, #16
 80050e4:	f003 0204 	and.w	r2, r3, #4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005104:	ea42 0103 	orr.w	r1, r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69da      	ldr	r2, [r3, #28]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005124:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b082      	sub	sp, #8
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e049      	b.n	80051e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d106      	bne.n	800516a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f841 	bl	80051ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3304      	adds	r3, #4
 800517a:	4619      	mov	r1, r3
 800517c:	4610      	mov	r0, r2
 800517e:	f000 fa27 	bl	80055d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b01      	cmp	r3, #1
 8005212:	d001      	beq.n	8005218 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e04f      	b.n	80052b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a23      	ldr	r2, [pc, #140]	@ (80052c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d01d      	beq.n	8005276 <HAL_TIM_Base_Start_IT+0x76>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005242:	d018      	beq.n	8005276 <HAL_TIM_Base_Start_IT+0x76>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1f      	ldr	r2, [pc, #124]	@ (80052c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d013      	beq.n	8005276 <HAL_TIM_Base_Start_IT+0x76>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a1e      	ldr	r2, [pc, #120]	@ (80052cc <HAL_TIM_Base_Start_IT+0xcc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00e      	beq.n	8005276 <HAL_TIM_Base_Start_IT+0x76>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a1c      	ldr	r2, [pc, #112]	@ (80052d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d009      	beq.n	8005276 <HAL_TIM_Base_Start_IT+0x76>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1b      	ldr	r2, [pc, #108]	@ (80052d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d004      	beq.n	8005276 <HAL_TIM_Base_Start_IT+0x76>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a19      	ldr	r2, [pc, #100]	@ (80052d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d115      	bne.n	80052a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	4b17      	ldr	r3, [pc, #92]	@ (80052dc <HAL_TIM_Base_Start_IT+0xdc>)
 800527e:	4013      	ands	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b06      	cmp	r3, #6
 8005286:	d015      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0xb4>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800528e:	d011      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a0:	e008      	b.n	80052b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0201 	orr.w	r2, r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	e000      	b.n	80052b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	40012c00 	.word	0x40012c00
 80052c8:	40000400 	.word	0x40000400
 80052cc:	40000800 	.word	0x40000800
 80052d0:	40013400 	.word	0x40013400
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40015000 	.word	0x40015000
 80052dc:	00010007 	.word	0x00010007

080052e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d020      	beq.n	8005344 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01b      	beq.n	8005344 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0202 	mvn.w	r2, #2
 8005314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f931 	bl	8005592 <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f923 	bl	800557e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f934 	bl	80055a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	d020      	beq.n	8005390 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01b      	beq.n	8005390 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0204 	mvn.w	r2, #4
 8005360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2202      	movs	r2, #2
 8005366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f90b 	bl	8005592 <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f8fd 	bl	800557e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f90e 	bl	80055a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d020      	beq.n	80053dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01b      	beq.n	80053dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0208 	mvn.w	r2, #8
 80053ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2204      	movs	r2, #4
 80053b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f8e5 	bl	8005592 <HAL_TIM_IC_CaptureCallback>
 80053c8:	e005      	b.n	80053d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f8d7 	bl	800557e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f8e8 	bl	80055a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f003 0310 	and.w	r3, r3, #16
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d020      	beq.n	8005428 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01b      	beq.n	8005428 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0210 	mvn.w	r2, #16
 80053f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2208      	movs	r2, #8
 80053fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f8bf 	bl	8005592 <HAL_TIM_IC_CaptureCallback>
 8005414:	e005      	b.n	8005422 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f8b1 	bl	800557e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f8c2 	bl	80055a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00c      	beq.n	800544c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d007      	beq.n	800544c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0201 	mvn.w	r2, #1
 8005444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fb ff92 	bl	8001370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005452:	2b00      	cmp	r3, #0
 8005454:	d104      	bne.n	8005460 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00c      	beq.n	800547a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f95f 	bl	8005738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00c      	beq.n	800549e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548a:	2b00      	cmp	r3, #0
 800548c:	d007      	beq.n	800549e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f957 	bl	800574c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00c      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d007      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f87c 	bl	80055ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00c      	beq.n	80054e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d007      	beq.n	80054e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f06f 0220 	mvn.w	r2, #32
 80054de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f91f 	bl	8005724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00c      	beq.n	800550a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f92b 	bl	8005760 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00c      	beq.n	800552e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f923 	bl	8005774 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00c      	beq.n	8005552 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800554a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f91b 	bl	8005788 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00c      	beq.n	8005576 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d007      	beq.n	8005576 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800556e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f913 	bl	800579c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005576:	bf00      	nop
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a48      	ldr	r2, [pc, #288]	@ (8005704 <TIM_Base_SetConfig+0x134>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d013      	beq.n	8005610 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ee:	d00f      	beq.n	8005610 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a45      	ldr	r2, [pc, #276]	@ (8005708 <TIM_Base_SetConfig+0x138>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00b      	beq.n	8005610 <TIM_Base_SetConfig+0x40>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a44      	ldr	r2, [pc, #272]	@ (800570c <TIM_Base_SetConfig+0x13c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d007      	beq.n	8005610 <TIM_Base_SetConfig+0x40>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a43      	ldr	r2, [pc, #268]	@ (8005710 <TIM_Base_SetConfig+0x140>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_Base_SetConfig+0x40>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a42      	ldr	r2, [pc, #264]	@ (8005714 <TIM_Base_SetConfig+0x144>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d108      	bne.n	8005622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a37      	ldr	r2, [pc, #220]	@ (8005704 <TIM_Base_SetConfig+0x134>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01f      	beq.n	800566a <TIM_Base_SetConfig+0x9a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005630:	d01b      	beq.n	800566a <TIM_Base_SetConfig+0x9a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a34      	ldr	r2, [pc, #208]	@ (8005708 <TIM_Base_SetConfig+0x138>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d017      	beq.n	800566a <TIM_Base_SetConfig+0x9a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a33      	ldr	r2, [pc, #204]	@ (800570c <TIM_Base_SetConfig+0x13c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d013      	beq.n	800566a <TIM_Base_SetConfig+0x9a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a32      	ldr	r2, [pc, #200]	@ (8005710 <TIM_Base_SetConfig+0x140>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00f      	beq.n	800566a <TIM_Base_SetConfig+0x9a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a32      	ldr	r2, [pc, #200]	@ (8005718 <TIM_Base_SetConfig+0x148>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00b      	beq.n	800566a <TIM_Base_SetConfig+0x9a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a31      	ldr	r2, [pc, #196]	@ (800571c <TIM_Base_SetConfig+0x14c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d007      	beq.n	800566a <TIM_Base_SetConfig+0x9a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a30      	ldr	r2, [pc, #192]	@ (8005720 <TIM_Base_SetConfig+0x150>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d003      	beq.n	800566a <TIM_Base_SetConfig+0x9a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a2b      	ldr	r2, [pc, #172]	@ (8005714 <TIM_Base_SetConfig+0x144>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d108      	bne.n	800567c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a18      	ldr	r2, [pc, #96]	@ (8005704 <TIM_Base_SetConfig+0x134>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d013      	beq.n	80056d0 <TIM_Base_SetConfig+0x100>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a19      	ldr	r2, [pc, #100]	@ (8005710 <TIM_Base_SetConfig+0x140>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00f      	beq.n	80056d0 <TIM_Base_SetConfig+0x100>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a19      	ldr	r2, [pc, #100]	@ (8005718 <TIM_Base_SetConfig+0x148>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00b      	beq.n	80056d0 <TIM_Base_SetConfig+0x100>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a18      	ldr	r2, [pc, #96]	@ (800571c <TIM_Base_SetConfig+0x14c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d007      	beq.n	80056d0 <TIM_Base_SetConfig+0x100>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a17      	ldr	r2, [pc, #92]	@ (8005720 <TIM_Base_SetConfig+0x150>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_Base_SetConfig+0x100>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a12      	ldr	r2, [pc, #72]	@ (8005714 <TIM_Base_SetConfig+0x144>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d103      	bne.n	80056d8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d105      	bne.n	80056f6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f023 0201 	bic.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	611a      	str	r2, [r3, #16]
  }
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40012c00 	.word	0x40012c00
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40013400 	.word	0x40013400
 8005714:	40015000 	.word	0x40015000
 8005718:	40014000 	.word	0x40014000
 800571c:	40014400 	.word	0x40014400
 8005720:	40014800 	.word	0x40014800

08005724 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e042      	b.n	8005848 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d106      	bne.n	80057da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7fb feab 	bl	8001530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2224      	movs	r2, #36	@ 0x24
 80057de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0201 	bic.w	r2, r2, #1
 80057f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fb24 	bl	8005e48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f825 	bl	8005850 <UART_SetConfig>
 8005806:	4603      	mov	r3, r0
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e01b      	b.n	8005848 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800581e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800582e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0201 	orr.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fba3 	bl	8005f8c <UART_CheckIdleState>
 8005846:	4603      	mov	r3, r0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005854:	b08c      	sub	sp, #48	@ 0x30
 8005856:	af00      	add	r7, sp, #0
 8005858:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	431a      	orrs	r2, r3
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	431a      	orrs	r2, r3
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	4313      	orrs	r3, r2
 8005876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	4baa      	ldr	r3, [pc, #680]	@ (8005b28 <UART_SetConfig+0x2d8>)
 8005880:	4013      	ands	r3, r2
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005888:	430b      	orrs	r3, r1
 800588a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a9f      	ldr	r2, [pc, #636]	@ (8005b2c <UART_SetConfig+0x2dc>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d004      	beq.n	80058bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058b8:	4313      	orrs	r3, r2
 80058ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80058c6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	6812      	ldr	r2, [r2, #0]
 80058ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058d0:	430b      	orrs	r3, r1
 80058d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058da:	f023 010f 	bic.w	r1, r3, #15
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a90      	ldr	r2, [pc, #576]	@ (8005b30 <UART_SetConfig+0x2e0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d125      	bne.n	8005940 <UART_SetConfig+0xf0>
 80058f4:	4b8f      	ldr	r3, [pc, #572]	@ (8005b34 <UART_SetConfig+0x2e4>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d81a      	bhi.n	8005938 <UART_SetConfig+0xe8>
 8005902:	a201      	add	r2, pc, #4	@ (adr r2, 8005908 <UART_SetConfig+0xb8>)
 8005904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005908:	08005919 	.word	0x08005919
 800590c:	08005929 	.word	0x08005929
 8005910:	08005921 	.word	0x08005921
 8005914:	08005931 	.word	0x08005931
 8005918:	2301      	movs	r3, #1
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800591e:	e116      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005920:	2302      	movs	r3, #2
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005926:	e112      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005928:	2304      	movs	r3, #4
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800592e:	e10e      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005930:	2308      	movs	r3, #8
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005936:	e10a      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005938:	2310      	movs	r3, #16
 800593a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800593e:	e106      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a7c      	ldr	r2, [pc, #496]	@ (8005b38 <UART_SetConfig+0x2e8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d138      	bne.n	80059bc <UART_SetConfig+0x16c>
 800594a:	4b7a      	ldr	r3, [pc, #488]	@ (8005b34 <UART_SetConfig+0x2e4>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005950:	f003 030c 	and.w	r3, r3, #12
 8005954:	2b0c      	cmp	r3, #12
 8005956:	d82d      	bhi.n	80059b4 <UART_SetConfig+0x164>
 8005958:	a201      	add	r2, pc, #4	@ (adr r2, 8005960 <UART_SetConfig+0x110>)
 800595a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595e:	bf00      	nop
 8005960:	08005995 	.word	0x08005995
 8005964:	080059b5 	.word	0x080059b5
 8005968:	080059b5 	.word	0x080059b5
 800596c:	080059b5 	.word	0x080059b5
 8005970:	080059a5 	.word	0x080059a5
 8005974:	080059b5 	.word	0x080059b5
 8005978:	080059b5 	.word	0x080059b5
 800597c:	080059b5 	.word	0x080059b5
 8005980:	0800599d 	.word	0x0800599d
 8005984:	080059b5 	.word	0x080059b5
 8005988:	080059b5 	.word	0x080059b5
 800598c:	080059b5 	.word	0x080059b5
 8005990:	080059ad 	.word	0x080059ad
 8005994:	2300      	movs	r3, #0
 8005996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800599a:	e0d8      	b.n	8005b4e <UART_SetConfig+0x2fe>
 800599c:	2302      	movs	r3, #2
 800599e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059a2:	e0d4      	b.n	8005b4e <UART_SetConfig+0x2fe>
 80059a4:	2304      	movs	r3, #4
 80059a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059aa:	e0d0      	b.n	8005b4e <UART_SetConfig+0x2fe>
 80059ac:	2308      	movs	r3, #8
 80059ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059b2:	e0cc      	b.n	8005b4e <UART_SetConfig+0x2fe>
 80059b4:	2310      	movs	r3, #16
 80059b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ba:	e0c8      	b.n	8005b4e <UART_SetConfig+0x2fe>
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a5e      	ldr	r2, [pc, #376]	@ (8005b3c <UART_SetConfig+0x2ec>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d125      	bne.n	8005a12 <UART_SetConfig+0x1c2>
 80059c6:	4b5b      	ldr	r3, [pc, #364]	@ (8005b34 <UART_SetConfig+0x2e4>)
 80059c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059d0:	2b30      	cmp	r3, #48	@ 0x30
 80059d2:	d016      	beq.n	8005a02 <UART_SetConfig+0x1b2>
 80059d4:	2b30      	cmp	r3, #48	@ 0x30
 80059d6:	d818      	bhi.n	8005a0a <UART_SetConfig+0x1ba>
 80059d8:	2b20      	cmp	r3, #32
 80059da:	d00a      	beq.n	80059f2 <UART_SetConfig+0x1a2>
 80059dc:	2b20      	cmp	r3, #32
 80059de:	d814      	bhi.n	8005a0a <UART_SetConfig+0x1ba>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <UART_SetConfig+0x19a>
 80059e4:	2b10      	cmp	r3, #16
 80059e6:	d008      	beq.n	80059fa <UART_SetConfig+0x1aa>
 80059e8:	e00f      	b.n	8005a0a <UART_SetConfig+0x1ba>
 80059ea:	2300      	movs	r3, #0
 80059ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059f0:	e0ad      	b.n	8005b4e <UART_SetConfig+0x2fe>
 80059f2:	2302      	movs	r3, #2
 80059f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059f8:	e0a9      	b.n	8005b4e <UART_SetConfig+0x2fe>
 80059fa:	2304      	movs	r3, #4
 80059fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a00:	e0a5      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005a02:	2308      	movs	r3, #8
 8005a04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a08:	e0a1      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005a0a:	2310      	movs	r3, #16
 8005a0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a10:	e09d      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a4a      	ldr	r2, [pc, #296]	@ (8005b40 <UART_SetConfig+0x2f0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d125      	bne.n	8005a68 <UART_SetConfig+0x218>
 8005a1c:	4b45      	ldr	r3, [pc, #276]	@ (8005b34 <UART_SetConfig+0x2e4>)
 8005a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a26:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a28:	d016      	beq.n	8005a58 <UART_SetConfig+0x208>
 8005a2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a2c:	d818      	bhi.n	8005a60 <UART_SetConfig+0x210>
 8005a2e:	2b80      	cmp	r3, #128	@ 0x80
 8005a30:	d00a      	beq.n	8005a48 <UART_SetConfig+0x1f8>
 8005a32:	2b80      	cmp	r3, #128	@ 0x80
 8005a34:	d814      	bhi.n	8005a60 <UART_SetConfig+0x210>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <UART_SetConfig+0x1f0>
 8005a3a:	2b40      	cmp	r3, #64	@ 0x40
 8005a3c:	d008      	beq.n	8005a50 <UART_SetConfig+0x200>
 8005a3e:	e00f      	b.n	8005a60 <UART_SetConfig+0x210>
 8005a40:	2300      	movs	r3, #0
 8005a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a46:	e082      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a4e:	e07e      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005a50:	2304      	movs	r3, #4
 8005a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a56:	e07a      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005a58:	2308      	movs	r3, #8
 8005a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a5e:	e076      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005a60:	2310      	movs	r3, #16
 8005a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a66:	e072      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a35      	ldr	r2, [pc, #212]	@ (8005b44 <UART_SetConfig+0x2f4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d12a      	bne.n	8005ac8 <UART_SetConfig+0x278>
 8005a72:	4b30      	ldr	r3, [pc, #192]	@ (8005b34 <UART_SetConfig+0x2e4>)
 8005a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a80:	d01a      	beq.n	8005ab8 <UART_SetConfig+0x268>
 8005a82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a86:	d81b      	bhi.n	8005ac0 <UART_SetConfig+0x270>
 8005a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a8c:	d00c      	beq.n	8005aa8 <UART_SetConfig+0x258>
 8005a8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a92:	d815      	bhi.n	8005ac0 <UART_SetConfig+0x270>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <UART_SetConfig+0x250>
 8005a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a9c:	d008      	beq.n	8005ab0 <UART_SetConfig+0x260>
 8005a9e:	e00f      	b.n	8005ac0 <UART_SetConfig+0x270>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aa6:	e052      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aae:	e04e      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ab6:	e04a      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005ab8:	2308      	movs	r3, #8
 8005aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005abe:	e046      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ac6:	e042      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a17      	ldr	r2, [pc, #92]	@ (8005b2c <UART_SetConfig+0x2dc>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d13a      	bne.n	8005b48 <UART_SetConfig+0x2f8>
 8005ad2:	4b18      	ldr	r3, [pc, #96]	@ (8005b34 <UART_SetConfig+0x2e4>)
 8005ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005adc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ae0:	d01a      	beq.n	8005b18 <UART_SetConfig+0x2c8>
 8005ae2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ae6:	d81b      	bhi.n	8005b20 <UART_SetConfig+0x2d0>
 8005ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aec:	d00c      	beq.n	8005b08 <UART_SetConfig+0x2b8>
 8005aee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005af2:	d815      	bhi.n	8005b20 <UART_SetConfig+0x2d0>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <UART_SetConfig+0x2b0>
 8005af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005afc:	d008      	beq.n	8005b10 <UART_SetConfig+0x2c0>
 8005afe:	e00f      	b.n	8005b20 <UART_SetConfig+0x2d0>
 8005b00:	2300      	movs	r3, #0
 8005b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b06:	e022      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b0e:	e01e      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005b10:	2304      	movs	r3, #4
 8005b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b16:	e01a      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005b18:	2308      	movs	r3, #8
 8005b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b1e:	e016      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005b20:	2310      	movs	r3, #16
 8005b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b26:	e012      	b.n	8005b4e <UART_SetConfig+0x2fe>
 8005b28:	cfff69f3 	.word	0xcfff69f3
 8005b2c:	40008000 	.word	0x40008000
 8005b30:	40013800 	.word	0x40013800
 8005b34:	40021000 	.word	0x40021000
 8005b38:	40004400 	.word	0x40004400
 8005b3c:	40004800 	.word	0x40004800
 8005b40:	40004c00 	.word	0x40004c00
 8005b44:	40005000 	.word	0x40005000
 8005b48:	2310      	movs	r3, #16
 8005b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4aae      	ldr	r2, [pc, #696]	@ (8005e0c <UART_SetConfig+0x5bc>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	f040 8097 	bne.w	8005c88 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d823      	bhi.n	8005baa <UART_SetConfig+0x35a>
 8005b62:	a201      	add	r2, pc, #4	@ (adr r2, 8005b68 <UART_SetConfig+0x318>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b8d 	.word	0x08005b8d
 8005b6c:	08005bab 	.word	0x08005bab
 8005b70:	08005b95 	.word	0x08005b95
 8005b74:	08005bab 	.word	0x08005bab
 8005b78:	08005b9b 	.word	0x08005b9b
 8005b7c:	08005bab 	.word	0x08005bab
 8005b80:	08005bab 	.word	0x08005bab
 8005b84:	08005bab 	.word	0x08005bab
 8005b88:	08005ba3 	.word	0x08005ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b8c:	f7fe ff4c 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 8005b90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b92:	e010      	b.n	8005bb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b94:	4b9e      	ldr	r3, [pc, #632]	@ (8005e10 <UART_SetConfig+0x5c0>)
 8005b96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b98:	e00d      	b.n	8005bb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b9a:	f7fe fed7 	bl	800494c <HAL_RCC_GetSysClockFreq>
 8005b9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ba0:	e009      	b.n	8005bb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ba8:	e005      	b.n	8005bb6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005bb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 8130 	beq.w	8005e1e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc2:	4a94      	ldr	r2, [pc, #592]	@ (8005e14 <UART_SetConfig+0x5c4>)
 8005bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	4413      	add	r3, r2
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d305      	bcc.n	8005bee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d903      	bls.n	8005bf6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005bf4:	e113      	b.n	8005e1e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	60bb      	str	r3, [r7, #8]
 8005bfc:	60fa      	str	r2, [r7, #12]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c02:	4a84      	ldr	r2, [pc, #528]	@ (8005e14 <UART_SetConfig+0x5c4>)
 8005c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	603b      	str	r3, [r7, #0]
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c18:	f7fa ffee 	bl	8000bf8 <__aeabi_uldivmod>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4610      	mov	r0, r2
 8005c22:	4619      	mov	r1, r3
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	020b      	lsls	r3, r1, #8
 8005c2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c32:	0202      	lsls	r2, r0, #8
 8005c34:	6979      	ldr	r1, [r7, #20]
 8005c36:	6849      	ldr	r1, [r1, #4]
 8005c38:	0849      	lsrs	r1, r1, #1
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	4605      	mov	r5, r0
 8005c40:	eb12 0804 	adds.w	r8, r2, r4
 8005c44:	eb43 0905 	adc.w	r9, r3, r5
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	469a      	mov	sl, r3
 8005c50:	4693      	mov	fp, r2
 8005c52:	4652      	mov	r2, sl
 8005c54:	465b      	mov	r3, fp
 8005c56:	4640      	mov	r0, r8
 8005c58:	4649      	mov	r1, r9
 8005c5a:	f7fa ffcd 	bl	8000bf8 <__aeabi_uldivmod>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4613      	mov	r3, r2
 8005c64:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c6c:	d308      	bcc.n	8005c80 <UART_SetConfig+0x430>
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c74:	d204      	bcs.n	8005c80 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6a3a      	ldr	r2, [r7, #32]
 8005c7c:	60da      	str	r2, [r3, #12]
 8005c7e:	e0ce      	b.n	8005e1e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c86:	e0ca      	b.n	8005e1e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c90:	d166      	bne.n	8005d60 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005c92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d827      	bhi.n	8005cea <UART_SetConfig+0x49a>
 8005c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca0 <UART_SetConfig+0x450>)
 8005c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005ccd 	.word	0x08005ccd
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	08005ceb 	.word	0x08005ceb
 8005cb0:	08005cdb 	.word	0x08005cdb
 8005cb4:	08005ceb 	.word	0x08005ceb
 8005cb8:	08005ceb 	.word	0x08005ceb
 8005cbc:	08005ceb 	.word	0x08005ceb
 8005cc0:	08005ce3 	.word	0x08005ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc4:	f7fe feb0 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 8005cc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cca:	e014      	b.n	8005cf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ccc:	f7fe fec2 	bl	8004a54 <HAL_RCC_GetPCLK2Freq>
 8005cd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cd2:	e010      	b.n	8005cf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8005e10 <UART_SetConfig+0x5c0>)
 8005cd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cd8:	e00d      	b.n	8005cf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cda:	f7fe fe37 	bl	800494c <HAL_RCC_GetSysClockFreq>
 8005cde:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ce0:	e009      	b.n	8005cf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ce6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ce8:	e005      	b.n	8005cf6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005cf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8090 	beq.w	8005e1e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d02:	4a44      	ldr	r2, [pc, #272]	@ (8005e14 <UART_SetConfig+0x5c4>)
 8005d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d10:	005a      	lsls	r2, r3, #1
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	441a      	add	r2, r3
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	2b0f      	cmp	r3, #15
 8005d28:	d916      	bls.n	8005d58 <UART_SetConfig+0x508>
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d30:	d212      	bcs.n	8005d58 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f023 030f 	bic.w	r3, r3, #15
 8005d3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	085b      	lsrs	r3, r3, #1
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	8bfb      	ldrh	r3, [r7, #30]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	8bfa      	ldrh	r2, [r7, #30]
 8005d54:	60da      	str	r2, [r3, #12]
 8005d56:	e062      	b.n	8005e1e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d5e:	e05e      	b.n	8005e1e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d828      	bhi.n	8005dba <UART_SetConfig+0x56a>
 8005d68:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <UART_SetConfig+0x520>)
 8005d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6e:	bf00      	nop
 8005d70:	08005d95 	.word	0x08005d95
 8005d74:	08005d9d 	.word	0x08005d9d
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	08005dbb 	.word	0x08005dbb
 8005d80:	08005dab 	.word	0x08005dab
 8005d84:	08005dbb 	.word	0x08005dbb
 8005d88:	08005dbb 	.word	0x08005dbb
 8005d8c:	08005dbb 	.word	0x08005dbb
 8005d90:	08005db3 	.word	0x08005db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d94:	f7fe fe48 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 8005d98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d9a:	e014      	b.n	8005dc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d9c:	f7fe fe5a 	bl	8004a54 <HAL_RCC_GetPCLK2Freq>
 8005da0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005da2:	e010      	b.n	8005dc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e10 <UART_SetConfig+0x5c0>)
 8005da6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005da8:	e00d      	b.n	8005dc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005daa:	f7fe fdcf 	bl	800494c <HAL_RCC_GetSysClockFreq>
 8005dae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005db0:	e009      	b.n	8005dc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005db6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005db8:	e005      	b.n	8005dc6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005dc4:	bf00      	nop
    }

    if (pclk != 0U)
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d028      	beq.n	8005e1e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd0:	4a10      	ldr	r2, [pc, #64]	@ (8005e14 <UART_SetConfig+0x5c4>)
 8005dd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dda:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	441a      	add	r2, r3
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	2b0f      	cmp	r3, #15
 8005df4:	d910      	bls.n	8005e18 <UART_SetConfig+0x5c8>
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dfc:	d20c      	bcs.n	8005e18 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60da      	str	r2, [r3, #12]
 8005e08:	e009      	b.n	8005e1e <UART_SetConfig+0x5ce>
 8005e0a:	bf00      	nop
 8005e0c:	40008000 	.word	0x40008000
 8005e10:	00f42400 	.word	0x00f42400
 8005e14:	0800feb4 	.word	0x0800feb4
      }
      else
      {
        ret = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2200      	movs	r2, #0
 8005e32:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2200      	movs	r2, #0
 8005e38:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e3a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3730      	adds	r7, #48	@ 0x30
 8005e42:	46bd      	mov	sp, r7
 8005e44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e54:	f003 0308 	and.w	r3, r3, #8
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01a      	beq.n	8005f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f46:	d10a      	bne.n	8005f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	605a      	str	r2, [r3, #4]
  }
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b098      	sub	sp, #96	@ 0x60
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f9c:	f7fb fce8 	bl	8001970 <HAL_GetTick>
 8005fa0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d12f      	bne.n	8006010 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f88e 	bl	80060e0 <UART_WaitOnFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d022      	beq.n	8006010 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd2:	e853 3f00 	ldrex	r3, [r3]
 8005fd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fde:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e6      	bne.n	8005fca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e063      	b.n	80060d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b04      	cmp	r3, #4
 800601c:	d149      	bne.n	80060b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800601e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006026:	2200      	movs	r2, #0
 8006028:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f857 	bl	80060e0 <UART_WaitOnFlagUntilTimeout>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d03c      	beq.n	80060b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	623b      	str	r3, [r7, #32]
   return(result);
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800604c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006056:	633b      	str	r3, [r7, #48]	@ 0x30
 8006058:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800605c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e6      	bne.n	8006038 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3308      	adds	r3, #8
 8006070:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	60fb      	str	r3, [r7, #12]
   return(result);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f023 0301 	bic.w	r3, r3, #1
 8006080:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3308      	adds	r3, #8
 8006088:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800608a:	61fa      	str	r2, [r7, #28]
 800608c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	69b9      	ldr	r1, [r7, #24]
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	617b      	str	r3, [r7, #20]
   return(result);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e5      	bne.n	800606a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e012      	b.n	80060d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3758      	adds	r7, #88	@ 0x58
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	4613      	mov	r3, r2
 80060ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f0:	e04f      	b.n	8006192 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060f8:	d04b      	beq.n	8006192 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fa:	f7fb fc39 	bl	8001970 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	429a      	cmp	r2, r3
 8006108:	d302      	bcc.n	8006110 <UART_WaitOnFlagUntilTimeout+0x30>
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e04e      	b.n	80061b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0304 	and.w	r3, r3, #4
 800611e:	2b00      	cmp	r3, #0
 8006120:	d037      	beq.n	8006192 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b80      	cmp	r3, #128	@ 0x80
 8006126:	d034      	beq.n	8006192 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b40      	cmp	r3, #64	@ 0x40
 800612c:	d031      	beq.n	8006192 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b08      	cmp	r3, #8
 800613a:	d110      	bne.n	800615e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2208      	movs	r2, #8
 8006142:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f838 	bl	80061ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2208      	movs	r2, #8
 800614e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e029      	b.n	80061b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800616c:	d111      	bne.n	8006192 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 f81e 	bl	80061ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e00f      	b.n	80061b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4013      	ands	r3, r2
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	429a      	cmp	r2, r3
 80061a0:	bf0c      	ite	eq
 80061a2:	2301      	moveq	r3, #1
 80061a4:	2300      	movne	r3, #0
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d0a0      	beq.n	80060f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b095      	sub	sp, #84	@ 0x54
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80061e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e6      	bne.n	80061c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3308      	adds	r3, #8
 80061fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	61fb      	str	r3, [r7, #28]
   return(result);
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800620a:	f023 0301 	bic.w	r3, r3, #1
 800620e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3308      	adds	r3, #8
 8006216:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006218:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800621a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800621e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e3      	bne.n	80061f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006230:	2b01      	cmp	r3, #1
 8006232:	d118      	bne.n	8006266 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	60bb      	str	r3, [r7, #8]
   return(result);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f023 0310 	bic.w	r3, r3, #16
 8006248:	647b      	str	r3, [r7, #68]	@ 0x44
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006252:	61bb      	str	r3, [r7, #24]
 8006254:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	6979      	ldr	r1, [r7, #20]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	613b      	str	r3, [r7, #16]
   return(result);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e6      	bne.n	8006234 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800627a:	bf00      	nop
 800627c:	3754      	adds	r7, #84	@ 0x54
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006286:	b480      	push	{r7}
 8006288:	b085      	sub	sp, #20
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_UARTEx_DisableFifoMode+0x16>
 8006298:	2302      	movs	r3, #2
 800629a:	e027      	b.n	80062ec <HAL_UARTEx_DisableFifoMode+0x66>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2224      	movs	r2, #36	@ 0x24
 80062a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0201 	bic.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800630c:	2302      	movs	r3, #2
 800630e:	e02d      	b.n	800636c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2224      	movs	r2, #36	@ 0x24
 800631c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0201 	bic.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f84f 	bl	80063f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006388:	2302      	movs	r3, #2
 800638a:	e02d      	b.n	80063e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2224      	movs	r2, #36	@ 0x24
 8006398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0201 	bic.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f811 	bl	80063f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d108      	bne.n	8006412 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006410:	e031      	b.n	8006476 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006412:	2308      	movs	r3, #8
 8006414:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006416:	2308      	movs	r3, #8
 8006418:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	0e5b      	lsrs	r3, r3, #25
 8006422:	b2db      	uxtb	r3, r3
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	0f5b      	lsrs	r3, r3, #29
 8006432:	b2db      	uxtb	r3, r3
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800643a:	7bbb      	ldrb	r3, [r7, #14]
 800643c:	7b3a      	ldrb	r2, [r7, #12]
 800643e:	4911      	ldr	r1, [pc, #68]	@ (8006484 <UARTEx_SetNbDataToProcess+0x94>)
 8006440:	5c8a      	ldrb	r2, [r1, r2]
 8006442:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006446:	7b3a      	ldrb	r2, [r7, #12]
 8006448:	490f      	ldr	r1, [pc, #60]	@ (8006488 <UARTEx_SetNbDataToProcess+0x98>)
 800644a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800644c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006450:	b29a      	uxth	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	7b7a      	ldrb	r2, [r7, #13]
 800645c:	4909      	ldr	r1, [pc, #36]	@ (8006484 <UARTEx_SetNbDataToProcess+0x94>)
 800645e:	5c8a      	ldrb	r2, [r1, r2]
 8006460:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006464:	7b7a      	ldrb	r2, [r7, #13]
 8006466:	4908      	ldr	r1, [pc, #32]	@ (8006488 <UARTEx_SetNbDataToProcess+0x98>)
 8006468:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800646a:	fb93 f3f2 	sdiv	r3, r3, r2
 800646e:	b29a      	uxth	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	0800fecc 	.word	0x0800fecc
 8006488:	0800fed4 	.word	0x0800fed4

0800648c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800649c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80064a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b085      	sub	sp, #20
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064c2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80064c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	43db      	mvns	r3, r3
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	4013      	ands	r3, r2
 80064da:	b29a      	uxth	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	1d3b      	adds	r3, r7, #4
 80064fa:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2201      	movs	r2, #1
 8006502:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800652c:	b480      	push	{r7}
 800652e:	b0a7      	sub	sp, #156	@ 0x9c
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800654e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006552:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	78db      	ldrb	r3, [r3, #3]
 800655a:	2b03      	cmp	r3, #3
 800655c:	d81f      	bhi.n	800659e <USB_ActivateEndpoint+0x72>
 800655e:	a201      	add	r2, pc, #4	@ (adr r2, 8006564 <USB_ActivateEndpoint+0x38>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	08006575 	.word	0x08006575
 8006568:	08006591 	.word	0x08006591
 800656c:	080065a7 	.word	0x080065a7
 8006570:	08006583 	.word	0x08006583
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006574:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006578:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800657c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006580:	e012      	b.n	80065a8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006582:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006586:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800658a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800658e:	e00b      	b.n	80065a8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006590:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006594:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006598:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800659c:	e004      	b.n	80065a8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80065a4:	e000      	b.n	80065a8 <USB_ActivateEndpoint+0x7c>
      break;
 80065a6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	441a      	add	r2, r3
 80065b2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80065b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	b21b      	sxth	r3, r3
 80065da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065e2:	b21a      	sxth	r2, r3
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	b21b      	sxth	r3, r3
 80065ea:	4313      	orrs	r3, r2
 80065ec:	b21b      	sxth	r3, r3
 80065ee:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	441a      	add	r2, r3
 80065fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800660c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006610:	b29b      	uxth	r3, r3
 8006612:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	7b1b      	ldrb	r3, [r3, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f040 8180 	bne.w	800691e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	785b      	ldrb	r3, [r3, #1]
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 8084 	beq.w	8006730 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	61bb      	str	r3, [r7, #24]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006632:	b29b      	uxth	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	4413      	add	r3, r2
 800663a:	61bb      	str	r3, [r7, #24]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	00da      	lsls	r2, r3, #3
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	88db      	ldrh	r3, [r3, #6]
 8006650:	085b      	lsrs	r3, r3, #1
 8006652:	b29b      	uxth	r3, r3
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	827b      	strh	r3, [r7, #18]
 800666a:	8a7b      	ldrh	r3, [r7, #18]
 800666c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	d01b      	beq.n	80066ac <USB_ActivateEndpoint+0x180>
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	b29b      	uxth	r3, r3
 8006682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800668a:	823b      	strh	r3, [r7, #16]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	441a      	add	r2, r3
 8006696:	8a3b      	ldrh	r3, [r7, #16]
 8006698:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800669c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	78db      	ldrb	r3, [r3, #3]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d020      	beq.n	80066f6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066ca:	81bb      	strh	r3, [r7, #12]
 80066cc:	89bb      	ldrh	r3, [r7, #12]
 80066ce:	f083 0320 	eor.w	r3, r3, #32
 80066d2:	81bb      	strh	r3, [r7, #12]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	441a      	add	r2, r3
 80066de:	89bb      	ldrh	r3, [r7, #12]
 80066e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	8013      	strh	r3, [r2, #0]
 80066f4:	e3f9      	b.n	8006eea <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	b29b      	uxth	r3, r3
 8006704:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800670c:	81fb      	strh	r3, [r7, #14]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	441a      	add	r2, r3
 8006718:	89fb      	ldrh	r3, [r7, #14]
 800671a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800671e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800672a:	b29b      	uxth	r3, r3
 800672c:	8013      	strh	r3, [r2, #0]
 800672e:	e3dc      	b.n	8006eea <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	633b      	str	r3, [r7, #48]	@ 0x30
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800673a:	b29b      	uxth	r3, r3
 800673c:	461a      	mov	r2, r3
 800673e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006740:	4413      	add	r3, r2
 8006742:	633b      	str	r3, [r7, #48]	@ 0x30
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	00da      	lsls	r2, r3, #3
 800674a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674c:	4413      	add	r3, r2
 800674e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006752:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	88db      	ldrh	r3, [r3, #6]
 8006758:	085b      	lsrs	r3, r3, #1
 800675a:	b29b      	uxth	r3, r3
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	b29a      	uxth	r2, r3
 8006760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006762:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800676e:	b29b      	uxth	r3, r3
 8006770:	461a      	mov	r2, r3
 8006772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006774:	4413      	add	r3, r2
 8006776:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	00da      	lsls	r2, r3, #3
 800677e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006780:	4413      	add	r3, r2
 8006782:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006786:	627b      	str	r3, [r7, #36]	@ 0x24
 8006788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006792:	b29a      	uxth	r2, r3
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	801a      	strh	r2, [r3, #0]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10a      	bne.n	80067b6 <USB_ActivateEndpoint+0x28a>
 80067a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b2:	801a      	strh	r2, [r3, #0]
 80067b4:	e041      	b.n	800683a <USB_ActivateEndpoint+0x30e>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80067bc:	d81c      	bhi.n	80067f8 <USB_ActivateEndpoint+0x2cc>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	085b      	lsrs	r3, r3, #1
 80067c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d004      	beq.n	80067de <USB_ActivateEndpoint+0x2b2>
 80067d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80067d8:	3301      	adds	r3, #1
 80067da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	029b      	lsls	r3, r3, #10
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	4313      	orrs	r3, r2
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	801a      	strh	r2, [r3, #0]
 80067f6:	e020      	b.n	800683a <USB_ActivateEndpoint+0x30e>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f003 031f 	and.w	r3, r3, #31
 800680a:	2b00      	cmp	r3, #0
 800680c:	d104      	bne.n	8006818 <USB_ActivateEndpoint+0x2ec>
 800680e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006812:	3b01      	subs	r3, #1
 8006814:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29a      	uxth	r2, r3
 800681e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006822:	b29b      	uxth	r3, r3
 8006824:	029b      	lsls	r3, r3, #10
 8006826:	b29b      	uxth	r3, r3
 8006828:	4313      	orrs	r3, r2
 800682a:	b29b      	uxth	r3, r3
 800682c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006834:	b29a      	uxth	r2, r3
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006838:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006848:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800684a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d01b      	beq.n	800688a <USB_ActivateEndpoint+0x35e>
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006868:	843b      	strh	r3, [r7, #32]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	441a      	add	r2, r3
 8006874:	8c3b      	ldrh	r3, [r7, #32]
 8006876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800687a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800687e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006886:	b29b      	uxth	r3, r3
 8006888:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d124      	bne.n	80068dc <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068a8:	83bb      	strh	r3, [r7, #28]
 80068aa:	8bbb      	ldrh	r3, [r7, #28]
 80068ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80068b0:	83bb      	strh	r3, [r7, #28]
 80068b2:	8bbb      	ldrh	r3, [r7, #28]
 80068b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068b8:	83bb      	strh	r3, [r7, #28]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	441a      	add	r2, r3
 80068c4:	8bbb      	ldrh	r3, [r7, #28]
 80068c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	8013      	strh	r3, [r2, #0]
 80068da:	e306      	b.n	8006eea <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f2:	83fb      	strh	r3, [r7, #30]
 80068f4:	8bfb      	ldrh	r3, [r7, #30]
 80068f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068fa:	83fb      	strh	r3, [r7, #30]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	441a      	add	r2, r3
 8006906:	8bfb      	ldrh	r3, [r7, #30]
 8006908:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800690c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006910:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006918:	b29b      	uxth	r3, r3
 800691a:	8013      	strh	r3, [r2, #0]
 800691c:	e2e5      	b.n	8006eea <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	78db      	ldrb	r3, [r3, #3]
 8006922:	2b02      	cmp	r3, #2
 8006924:	d11e      	bne.n	8006964 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	b29b      	uxth	r3, r3
 8006934:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800693c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	441a      	add	r2, r3
 800694a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800694e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006956:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800695a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800695e:	b29b      	uxth	r3, r3
 8006960:	8013      	strh	r3, [r2, #0]
 8006962:	e01d      	b.n	80069a0 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	b29b      	uxth	r3, r3
 8006972:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800697a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	441a      	add	r2, r3
 8006988:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800698c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800699c:	b29b      	uxth	r3, r3
 800699e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	461a      	mov	r2, r3
 80069ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069b0:	4413      	add	r3, r2
 80069b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	00da      	lsls	r2, r3, #3
 80069ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	891b      	ldrh	r3, [r3, #8]
 80069c8:	085b      	lsrs	r3, r3, #1
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069d2:	801a      	strh	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069de:	b29b      	uxth	r3, r3
 80069e0:	461a      	mov	r2, r3
 80069e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069e4:	4413      	add	r3, r2
 80069e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	00da      	lsls	r2, r3, #3
 80069ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069f0:	4413      	add	r3, r2
 80069f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	895b      	ldrh	r3, [r3, #10]
 80069fc:	085b      	lsrs	r3, r3, #1
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a06:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	785b      	ldrb	r3, [r3, #1]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f040 81af 	bne.w	8006d70 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006a22:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d01d      	beq.n	8006a6a <USB_ActivateEndpoint+0x53e>
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a44:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	441a      	add	r2, r3
 8006a52:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006a56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8006a7a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8006a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d01d      	beq.n	8006ac2 <USB_ActivateEndpoint+0x596>
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a9c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	441a      	add	r2, r3
 8006aaa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006aae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	785b      	ldrb	r3, [r3, #1]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d16b      	bne.n	8006ba2 <USB_ActivateEndpoint+0x676>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ada:	4413      	add	r3, r2
 8006adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	00da      	lsls	r2, r3, #3
 8006ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006aec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006afc:	801a      	strh	r2, [r3, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10a      	bne.n	8006b1c <USB_ActivateEndpoint+0x5f0>
 8006b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b18:	801a      	strh	r2, [r3, #0]
 8006b1a:	e05d      	b.n	8006bd8 <USB_ActivateEndpoint+0x6ac>
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b22:	d81c      	bhi.n	8006b5e <USB_ActivateEndpoint+0x632>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d004      	beq.n	8006b44 <USB_ActivateEndpoint+0x618>
 8006b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b3e:	3301      	adds	r3, #1
 8006b40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	029b      	lsls	r3, r3, #10
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	4313      	orrs	r3, r2
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b5a:	801a      	strh	r2, [r3, #0]
 8006b5c:	e03c      	b.n	8006bd8 <USB_ActivateEndpoint+0x6ac>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	095b      	lsrs	r3, r3, #5
 8006b64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	f003 031f 	and.w	r3, r3, #31
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <USB_ActivateEndpoint+0x652>
 8006b74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	029b      	lsls	r3, r3, #10
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b9e:	801a      	strh	r2, [r3, #0]
 8006ba0:	e01a      	b.n	8006bd8 <USB_ActivateEndpoint+0x6ac>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	785b      	ldrb	r3, [r3, #1]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d116      	bne.n	8006bd8 <USB_ActivateEndpoint+0x6ac>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bba:	4413      	add	r3, r2
 8006bbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	00da      	lsls	r2, r3, #3
 8006bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006bcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bd6:	801a      	strh	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d16b      	bne.n	8006cbc <USB_ActivateEndpoint+0x790>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bf4:	4413      	add	r3, r2
 8006bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	00da      	lsls	r2, r3, #3
 8006bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c00:	4413      	add	r3, r2
 8006c02:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c16:	801a      	strh	r2, [r3, #0]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10a      	bne.n	8006c36 <USB_ActivateEndpoint+0x70a>
 8006c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c32:	801a      	strh	r2, [r3, #0]
 8006c34:	e05b      	b.n	8006cee <USB_ActivateEndpoint+0x7c2>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c3c:	d81c      	bhi.n	8006c78 <USB_ActivateEndpoint+0x74c>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d004      	beq.n	8006c5e <USB_ActivateEndpoint+0x732>
 8006c54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c58:	3301      	adds	r3, #1
 8006c5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	029b      	lsls	r3, r3, #10
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c74:	801a      	strh	r2, [r3, #0]
 8006c76:	e03a      	b.n	8006cee <USB_ActivateEndpoint+0x7c2>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	095b      	lsrs	r3, r3, #5
 8006c7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	f003 031f 	and.w	r3, r3, #31
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d104      	bne.n	8006c98 <USB_ActivateEndpoint+0x76c>
 8006c8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c92:	3b01      	subs	r3, #1
 8006c94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	029b      	lsls	r3, r3, #10
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb8:	801a      	strh	r2, [r3, #0]
 8006cba:	e018      	b.n	8006cee <USB_ActivateEndpoint+0x7c2>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	785b      	ldrb	r3, [r3, #1]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d114      	bne.n	8006cee <USB_ActivateEndpoint+0x7c2>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	461a      	mov	r2, r3
 8006cce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd0:	4413      	add	r3, r2
 8006cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	00da      	lsls	r2, r3, #3
 8006cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cdc:	4413      	add	r3, r2
 8006cde:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ce2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cec:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d04:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006d06:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d08:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006d0e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d10:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d14:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	441a      	add	r2, r3
 8006d20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d4c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	441a      	add	r2, r3
 8006d58:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006d5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	8013      	strh	r3, [r2, #0]
 8006d6e:	e0bc      	b.n	8006eea <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8006d80:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01d      	beq.n	8006dc8 <USB_ActivateEndpoint+0x89c>
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	881b      	ldrh	r3, [r3, #0]
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006da2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	441a      	add	r2, r3
 8006db0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006db4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006db8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8006dd8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d01d      	beq.n	8006e20 <USB_ActivateEndpoint+0x8f4>
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dfa:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	441a      	add	r2, r3
 8006e08:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006e0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	78db      	ldrb	r3, [r3, #3]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d024      	beq.n	8006e72 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e3e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006e42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006e46:	f083 0320 	eor.w	r3, r3, #32
 8006e4a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	441a      	add	r2, r3
 8006e58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006e5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	8013      	strh	r3, [r2, #0]
 8006e70:	e01d      	b.n	8006eae <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e88:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	441a      	add	r2, r3
 8006e96:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006e9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	441a      	add	r2, r3
 8006ed2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006ed6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006eea:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	379c      	adds	r7, #156	@ 0x9c
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop

08006efc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b08d      	sub	sp, #52	@ 0x34
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	7b1b      	ldrb	r3, [r3, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f040 808e 	bne.w	800702c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	785b      	ldrb	r3, [r3, #1]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d044      	beq.n	8006fa2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	81bb      	strh	r3, [r7, #12]
 8006f26:	89bb      	ldrh	r3, [r7, #12]
 8006f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d01b      	beq.n	8006f68 <USB_DeactivateEndpoint+0x6c>
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f46:	817b      	strh	r3, [r7, #10]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	441a      	add	r2, r3
 8006f52:	897b      	ldrh	r3, [r7, #10]
 8006f54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f7e:	813b      	strh	r3, [r7, #8]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	441a      	add	r2, r3
 8006f8a:	893b      	ldrh	r3, [r7, #8]
 8006f8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	8013      	strh	r3, [r2, #0]
 8006fa0:	e192      	b.n	80072c8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	827b      	strh	r3, [r7, #18]
 8006fb0:	8a7b      	ldrh	r3, [r7, #18]
 8006fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d01b      	beq.n	8006ff2 <USB_DeactivateEndpoint+0xf6>
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd0:	823b      	strh	r3, [r7, #16]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	441a      	add	r2, r3
 8006fdc:	8a3b      	ldrh	r3, [r7, #16]
 8006fde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fe2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fe6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007008:	81fb      	strh	r3, [r7, #14]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	441a      	add	r2, r3
 8007014:	89fb      	ldrh	r3, [r7, #14]
 8007016:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800701a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800701e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007026:	b29b      	uxth	r3, r3
 8007028:	8013      	strh	r3, [r2, #0]
 800702a:	e14d      	b.n	80072c8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	785b      	ldrb	r3, [r3, #1]
 8007030:	2b00      	cmp	r3, #0
 8007032:	f040 80a5 	bne.w	8007180 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	843b      	strh	r3, [r7, #32]
 8007044:	8c3b      	ldrh	r3, [r7, #32]
 8007046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d01b      	beq.n	8007086 <USB_DeactivateEndpoint+0x18a>
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007064:	83fb      	strh	r3, [r7, #30]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	441a      	add	r2, r3
 8007070:	8bfb      	ldrh	r3, [r7, #30]
 8007072:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007076:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800707a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800707e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007082:	b29b      	uxth	r3, r3
 8007084:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	83bb      	strh	r3, [r7, #28]
 8007094:	8bbb      	ldrh	r3, [r7, #28]
 8007096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800709a:	2b00      	cmp	r3, #0
 800709c:	d01b      	beq.n	80070d6 <USB_DeactivateEndpoint+0x1da>
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070b4:	837b      	strh	r3, [r7, #26]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	441a      	add	r2, r3
 80070c0:	8b7b      	ldrh	r3, [r7, #26]
 80070c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ec:	833b      	strh	r3, [r7, #24]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	441a      	add	r2, r3
 80070f8:	8b3b      	ldrh	r3, [r7, #24]
 80070fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007106:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800710a:	b29b      	uxth	r3, r3
 800710c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	b29b      	uxth	r3, r3
 800711c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007124:	82fb      	strh	r3, [r7, #22]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	441a      	add	r2, r3
 8007130:	8afb      	ldrh	r3, [r7, #22]
 8007132:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007136:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800713a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800713e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007142:	b29b      	uxth	r3, r3
 8007144:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	b29b      	uxth	r3, r3
 8007154:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800715c:	82bb      	strh	r3, [r7, #20]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	441a      	add	r2, r3
 8007168:	8abb      	ldrh	r3, [r7, #20]
 800716a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800716e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800717a:	b29b      	uxth	r3, r3
 800717c:	8013      	strh	r3, [r2, #0]
 800717e:	e0a3      	b.n	80072c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800718e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d01b      	beq.n	80071d0 <USB_DeactivateEndpoint+0x2d4>
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	441a      	add	r2, r3
 80071ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80071bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80071de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80071e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d01b      	beq.n	8007220 <USB_DeactivateEndpoint+0x324>
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	441a      	add	r2, r3
 800720a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800720c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007210:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007218:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800721c:	b29b      	uxth	r3, r3
 800721e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b29b      	uxth	r3, r3
 800722e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007236:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	441a      	add	r2, r3
 8007242:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800724c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007254:	b29b      	uxth	r3, r3
 8007256:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	b29b      	uxth	r3, r3
 8007266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800726a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800726e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	441a      	add	r2, r3
 800727a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800727c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007280:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007284:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800728c:	b29b      	uxth	r3, r3
 800728e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	b29b      	uxth	r3, r3
 800729e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072a6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	441a      	add	r2, r3
 80072b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80072b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3734      	adds	r7, #52	@ 0x34
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b0ac      	sub	sp, #176	@ 0xb0
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	785b      	ldrb	r3, [r3, #1]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	f040 84ca 	bne.w	8007c7e <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	699a      	ldr	r2, [r3, #24]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d904      	bls.n	8007300 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072fe:	e003      	b.n	8007308 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	7b1b      	ldrb	r3, [r3, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d122      	bne.n	8007356 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	6959      	ldr	r1, [r3, #20]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	88da      	ldrh	r2, [r3, #6]
 8007318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800731c:	b29b      	uxth	r3, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 febd 	bl	800809e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800732e:	b29b      	uxth	r3, r3
 8007330:	461a      	mov	r2, r3
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	4413      	add	r3, r2
 8007336:	613b      	str	r3, [r7, #16]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	00da      	lsls	r2, r3, #3
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	4413      	add	r3, r2
 8007342:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800734c:	b29a      	uxth	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	801a      	strh	r2, [r3, #0]
 8007352:	f000 bc6f 	b.w	8007c34 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	78db      	ldrb	r3, [r3, #3]
 800735a:	2b02      	cmp	r3, #2
 800735c:	f040 831e 	bne.w	800799c <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	6a1a      	ldr	r2, [r3, #32]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	429a      	cmp	r2, r3
 800736a:	f240 82cf 	bls.w	800790c <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	b29b      	uxth	r3, r3
 800737c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007384:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	441a      	add	r2, r3
 8007392:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007396:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800739a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800739e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80073a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	6a1a      	ldr	r2, [r3, #32]
 80073ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073b2:	1ad2      	subs	r2, r2, r3
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 814f 	beq.w	800766e <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	785b      	ldrb	r3, [r3, #1]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d16b      	bne.n	80074b4 <USB_EPStartXfer+0x1de>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	461a      	mov	r2, r3
 80073ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ec:	4413      	add	r3, r2
 80073ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	00da      	lsls	r2, r3, #3
 80073f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f8:	4413      	add	r3, r2
 80073fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80073fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29b      	uxth	r3, r3
 8007406:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800740a:	b29a      	uxth	r2, r3
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	801a      	strh	r2, [r3, #0]
 8007410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10a      	bne.n	800742e <USB_EPStartXfer+0x158>
 8007418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	b29b      	uxth	r3, r3
 800741e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007426:	b29a      	uxth	r2, r3
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	801a      	strh	r2, [r3, #0]
 800742c:	e05b      	b.n	80074e6 <USB_EPStartXfer+0x210>
 800742e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007432:	2b3e      	cmp	r3, #62	@ 0x3e
 8007434:	d81c      	bhi.n	8007470 <USB_EPStartXfer+0x19a>
 8007436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800743a:	085b      	lsrs	r3, r3, #1
 800743c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	2b00      	cmp	r3, #0
 800744a:	d004      	beq.n	8007456 <USB_EPStartXfer+0x180>
 800744c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007450:	3301      	adds	r3, #1
 8007452:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29a      	uxth	r2, r3
 800745c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007460:	b29b      	uxth	r3, r3
 8007462:	029b      	lsls	r3, r3, #10
 8007464:	b29b      	uxth	r3, r3
 8007466:	4313      	orrs	r3, r2
 8007468:	b29a      	uxth	r2, r3
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	801a      	strh	r2, [r3, #0]
 800746e:	e03a      	b.n	80074e6 <USB_EPStartXfer+0x210>
 8007470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007474:	095b      	lsrs	r3, r3, #5
 8007476:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800747a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800747e:	f003 031f 	and.w	r3, r3, #31
 8007482:	2b00      	cmp	r3, #0
 8007484:	d104      	bne.n	8007490 <USB_EPStartXfer+0x1ba>
 8007486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800748a:	3b01      	subs	r3, #1
 800748c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29a      	uxth	r2, r3
 8007496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800749a:	b29b      	uxth	r3, r3
 800749c:	029b      	lsls	r3, r3, #10
 800749e:	b29b      	uxth	r3, r3
 80074a0:	4313      	orrs	r3, r2
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b0:	801a      	strh	r2, [r3, #0]
 80074b2:	e018      	b.n	80074e6 <USB_EPStartXfer+0x210>
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	785b      	ldrb	r3, [r3, #1]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d114      	bne.n	80074e6 <USB_EPStartXfer+0x210>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c8:	4413      	add	r3, r2
 80074ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	00da      	lsls	r2, r3, #3
 80074d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d4:	4413      	add	r3, r2
 80074d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	895b      	ldrh	r3, [r3, #10]
 80074ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	6959      	ldr	r1, [r3, #20]
 80074f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fdce 	bl	800809e <USB_WritePMA>
            ep->xfer_buff += len;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	695a      	ldr	r2, [r3, #20]
 8007506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800750a:	441a      	add	r2, r3
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	6a1a      	ldr	r2, [r3, #32]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	429a      	cmp	r2, r3
 800751a:	d907      	bls.n	800752c <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	6a1a      	ldr	r2, [r3, #32]
 8007520:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007524:	1ad2      	subs	r2, r2, r3
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	621a      	str	r2, [r3, #32]
 800752a:	e006      	b.n	800753a <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2200      	movs	r2, #0
 8007538:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	785b      	ldrb	r3, [r3, #1]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d16b      	bne.n	800761a <USB_EPStartXfer+0x344>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	61bb      	str	r3, [r7, #24]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800754c:	b29b      	uxth	r3, r3
 800754e:	461a      	mov	r2, r3
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	4413      	add	r3, r2
 8007554:	61bb      	str	r3, [r7, #24]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	00da      	lsls	r2, r3, #3
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	4413      	add	r3, r2
 8007560:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007564:	617b      	str	r3, [r7, #20]
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29b      	uxth	r3, r3
 800756c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007570:	b29a      	uxth	r2, r3
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	801a      	strh	r2, [r3, #0]
 8007576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10a      	bne.n	8007594 <USB_EPStartXfer+0x2be>
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	b29b      	uxth	r3, r3
 8007584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800758c:	b29a      	uxth	r2, r3
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	801a      	strh	r2, [r3, #0]
 8007592:	e05d      	b.n	8007650 <USB_EPStartXfer+0x37a>
 8007594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007598:	2b3e      	cmp	r3, #62	@ 0x3e
 800759a:	d81c      	bhi.n	80075d6 <USB_EPStartXfer+0x300>
 800759c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075a0:	085b      	lsrs	r3, r3, #1
 80075a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d004      	beq.n	80075bc <USB_EPStartXfer+0x2e6>
 80075b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075b6:	3301      	adds	r3, #1
 80075b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	881b      	ldrh	r3, [r3, #0]
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	029b      	lsls	r3, r3, #10
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	801a      	strh	r2, [r3, #0]
 80075d4:	e03c      	b.n	8007650 <USB_EPStartXfer+0x37a>
 80075d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075da:	095b      	lsrs	r3, r3, #5
 80075dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075e4:	f003 031f 	and.w	r3, r3, #31
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d104      	bne.n	80075f6 <USB_EPStartXfer+0x320>
 80075ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075f0:	3b01      	subs	r3, #1
 80075f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007600:	b29b      	uxth	r3, r3
 8007602:	029b      	lsls	r3, r3, #10
 8007604:	b29b      	uxth	r3, r3
 8007606:	4313      	orrs	r3, r2
 8007608:	b29b      	uxth	r3, r3
 800760a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800760e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007612:	b29a      	uxth	r2, r3
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	801a      	strh	r2, [r3, #0]
 8007618:	e01a      	b.n	8007650 <USB_EPStartXfer+0x37a>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	785b      	ldrb	r3, [r3, #1]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d116      	bne.n	8007650 <USB_EPStartXfer+0x37a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	623b      	str	r3, [r7, #32]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800762c:	b29b      	uxth	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	4413      	add	r3, r2
 8007634:	623b      	str	r3, [r7, #32]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	00da      	lsls	r2, r3, #3
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	4413      	add	r3, r2
 8007640:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007644:	61fb      	str	r3, [r7, #28]
 8007646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800764a:	b29a      	uxth	r2, r3
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	891b      	ldrh	r3, [r3, #8]
 8007654:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	6959      	ldr	r1, [r3, #20]
 800765c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007660:	b29b      	uxth	r3, r3
 8007662:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fd19 	bl	800809e <USB_WritePMA>
 800766c:	e2e2      	b.n	8007c34 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	785b      	ldrb	r3, [r3, #1]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d16b      	bne.n	800774e <USB_EPStartXfer+0x478>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	64bb      	str	r3, [r7, #72]	@ 0x48
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007680:	b29b      	uxth	r3, r3
 8007682:	461a      	mov	r2, r3
 8007684:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007686:	4413      	add	r3, r2
 8007688:	64bb      	str	r3, [r7, #72]	@ 0x48
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	00da      	lsls	r2, r3, #3
 8007690:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007692:	4413      	add	r3, r2
 8007694:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007698:	647b      	str	r3, [r7, #68]	@ 0x44
 800769a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076a8:	801a      	strh	r2, [r3, #0]
 80076aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <USB_EPStartXfer+0x3f2>
 80076b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076c4:	801a      	strh	r2, [r3, #0]
 80076c6:	e05d      	b.n	8007784 <USB_EPStartXfer+0x4ae>
 80076c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80076ce:	d81c      	bhi.n	800770a <USB_EPStartXfer+0x434>
 80076d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076d4:	085b      	lsrs	r3, r3, #1
 80076d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d004      	beq.n	80076f0 <USB_EPStartXfer+0x41a>
 80076e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076ea:	3301      	adds	r3, #1
 80076ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	029b      	lsls	r3, r3, #10
 80076fe:	b29b      	uxth	r3, r3
 8007700:	4313      	orrs	r3, r2
 8007702:	b29a      	uxth	r2, r3
 8007704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007706:	801a      	strh	r2, [r3, #0]
 8007708:	e03c      	b.n	8007784 <USB_EPStartXfer+0x4ae>
 800770a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800770e:	095b      	lsrs	r3, r3, #5
 8007710:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007718:	f003 031f 	and.w	r3, r3, #31
 800771c:	2b00      	cmp	r3, #0
 800771e:	d104      	bne.n	800772a <USB_EPStartXfer+0x454>
 8007720:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007724:	3b01      	subs	r3, #1
 8007726:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800772a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	b29a      	uxth	r2, r3
 8007730:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007734:	b29b      	uxth	r3, r3
 8007736:	029b      	lsls	r3, r3, #10
 8007738:	b29b      	uxth	r3, r3
 800773a:	4313      	orrs	r3, r2
 800773c:	b29b      	uxth	r3, r3
 800773e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007746:	b29a      	uxth	r2, r3
 8007748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800774a:	801a      	strh	r2, [r3, #0]
 800774c:	e01a      	b.n	8007784 <USB_EPStartXfer+0x4ae>
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	785b      	ldrb	r3, [r3, #1]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d116      	bne.n	8007784 <USB_EPStartXfer+0x4ae>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	653b      	str	r3, [r7, #80]	@ 0x50
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007760:	b29b      	uxth	r3, r3
 8007762:	461a      	mov	r2, r3
 8007764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007766:	4413      	add	r3, r2
 8007768:	653b      	str	r3, [r7, #80]	@ 0x50
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	00da      	lsls	r2, r3, #3
 8007770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007772:	4413      	add	r3, r2
 8007774:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007778:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800777a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800777e:	b29a      	uxth	r2, r3
 8007780:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007782:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	891b      	ldrh	r3, [r3, #8]
 8007788:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	6959      	ldr	r1, [r3, #20]
 8007790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007794:	b29b      	uxth	r3, r3
 8007796:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fc7f 	bl	800809e <USB_WritePMA>
            ep->xfer_buff += len;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	695a      	ldr	r2, [r3, #20]
 80077a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077a8:	441a      	add	r2, r3
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	6a1a      	ldr	r2, [r3, #32]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d907      	bls.n	80077ca <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	6a1a      	ldr	r2, [r3, #32]
 80077be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077c2:	1ad2      	subs	r2, r2, r3
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	621a      	str	r2, [r3, #32]
 80077c8:	e006      	b.n	80077d8 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2200      	movs	r2, #0
 80077d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	643b      	str	r3, [r7, #64]	@ 0x40
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	785b      	ldrb	r3, [r3, #1]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d16b      	bne.n	80078bc <USB_EPStartXfer+0x5e6>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f4:	4413      	add	r3, r2
 80077f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	00da      	lsls	r2, r3, #3
 80077fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007800:	4413      	add	r3, r2
 8007802:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007806:	637b      	str	r3, [r7, #52]	@ 0x34
 8007808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	b29b      	uxth	r3, r3
 800780e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007812:	b29a      	uxth	r2, r3
 8007814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007816:	801a      	strh	r2, [r3, #0]
 8007818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10a      	bne.n	8007836 <USB_EPStartXfer+0x560>
 8007820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	b29b      	uxth	r3, r3
 8007826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800782a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800782e:	b29a      	uxth	r2, r3
 8007830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007832:	801a      	strh	r2, [r3, #0]
 8007834:	e05b      	b.n	80078ee <USB_EPStartXfer+0x618>
 8007836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800783a:	2b3e      	cmp	r3, #62	@ 0x3e
 800783c:	d81c      	bhi.n	8007878 <USB_EPStartXfer+0x5a2>
 800783e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007842:	085b      	lsrs	r3, r3, #1
 8007844:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d004      	beq.n	800785e <USB_EPStartXfer+0x588>
 8007854:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007858:	3301      	adds	r3, #1
 800785a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800785e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	b29a      	uxth	r2, r3
 8007864:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007868:	b29b      	uxth	r3, r3
 800786a:	029b      	lsls	r3, r3, #10
 800786c:	b29b      	uxth	r3, r3
 800786e:	4313      	orrs	r3, r2
 8007870:	b29a      	uxth	r2, r3
 8007872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007874:	801a      	strh	r2, [r3, #0]
 8007876:	e03a      	b.n	80078ee <USB_EPStartXfer+0x618>
 8007878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800787c:	095b      	lsrs	r3, r3, #5
 800787e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007886:	f003 031f 	and.w	r3, r3, #31
 800788a:	2b00      	cmp	r3, #0
 800788c:	d104      	bne.n	8007898 <USB_EPStartXfer+0x5c2>
 800788e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007892:	3b01      	subs	r3, #1
 8007894:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29a      	uxth	r2, r3
 800789e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	029b      	lsls	r3, r3, #10
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	4313      	orrs	r3, r2
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b8:	801a      	strh	r2, [r3, #0]
 80078ba:	e018      	b.n	80078ee <USB_EPStartXfer+0x618>
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	785b      	ldrb	r3, [r3, #1]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d114      	bne.n	80078ee <USB_EPStartXfer+0x618>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	461a      	mov	r2, r3
 80078ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078d0:	4413      	add	r3, r2
 80078d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	00da      	lsls	r2, r3, #3
 80078da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078dc:	4413      	add	r3, r2
 80078de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	895b      	ldrh	r3, [r3, #10]
 80078f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	6959      	ldr	r1, [r3, #20]
 80078fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fbca 	bl	800809e <USB_WritePMA>
 800790a:	e193      	b.n	8007c34 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	b29b      	uxth	r3, r3
 8007922:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800792a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	441a      	add	r2, r3
 8007938:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800793c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800794c:	b29b      	uxth	r3, r3
 800794e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800795a:	b29b      	uxth	r3, r3
 800795c:	461a      	mov	r2, r3
 800795e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007960:	4413      	add	r3, r2
 8007962:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	00da      	lsls	r2, r3, #3
 800796a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800796c:	4413      	add	r3, r2
 800796e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007972:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007978:	b29a      	uxth	r2, r3
 800797a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800797c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	891b      	ldrh	r3, [r3, #8]
 8007982:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	6959      	ldr	r1, [r3, #20]
 800798a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800798e:	b29b      	uxth	r3, r3
 8007990:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fb82 	bl	800809e <USB_WritePMA>
 800799a:	e14b      	b.n	8007c34 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	6a1a      	ldr	r2, [r3, #32]
 80079a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079a4:	1ad2      	subs	r2, r2, r3
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 809a 	beq.w	8007af6 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	785b      	ldrb	r3, [r3, #1]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d16b      	bne.n	8007aa6 <USB_EPStartXfer+0x7d0>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079d8:	b29b      	uxth	r3, r3
 80079da:	461a      	mov	r2, r3
 80079dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079de:	4413      	add	r3, r2
 80079e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	00da      	lsls	r2, r3, #3
 80079e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079ea:	4413      	add	r3, r2
 80079ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80079f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80079f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10a      	bne.n	8007a20 <USB_EPStartXfer+0x74a>
 8007a0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a1c:	801a      	strh	r2, [r3, #0]
 8007a1e:	e05b      	b.n	8007ad8 <USB_EPStartXfer+0x802>
 8007a20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a24:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a26:	d81c      	bhi.n	8007a62 <USB_EPStartXfer+0x78c>
 8007a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a2c:	085b      	lsrs	r3, r3, #1
 8007a2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d004      	beq.n	8007a48 <USB_EPStartXfer+0x772>
 8007a3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a42:	3301      	adds	r3, #1
 8007a44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	029b      	lsls	r3, r3, #10
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a5e:	801a      	strh	r2, [r3, #0]
 8007a60:	e03a      	b.n	8007ad8 <USB_EPStartXfer+0x802>
 8007a62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a66:	095b      	lsrs	r3, r3, #5
 8007a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a70:	f003 031f 	and.w	r3, r3, #31
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d104      	bne.n	8007a82 <USB_EPStartXfer+0x7ac>
 8007a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	029b      	lsls	r3, r3, #10
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	4313      	orrs	r3, r2
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007aa2:	801a      	strh	r2, [r3, #0]
 8007aa4:	e018      	b.n	8007ad8 <USB_EPStartXfer+0x802>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d114      	bne.n	8007ad8 <USB_EPStartXfer+0x802>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007aba:	4413      	add	r3, r2
 8007abc:	673b      	str	r3, [r7, #112]	@ 0x70
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	00da      	lsls	r2, r3, #3
 8007ac4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007acc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ad6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	895b      	ldrh	r3, [r3, #10]
 8007adc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	6959      	ldr	r1, [r3, #20]
 8007ae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fad5 	bl	800809e <USB_WritePMA>
 8007af4:	e09e      	b.n	8007c34 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	785b      	ldrb	r3, [r3, #1]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d16b      	bne.n	8007bd6 <USB_EPStartXfer+0x900>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007b0e:	4413      	add	r3, r2
 8007b10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	00da      	lsls	r2, r3, #3
 8007b18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b30:	801a      	strh	r2, [r3, #0]
 8007b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10a      	bne.n	8007b50 <USB_EPStartXfer+0x87a>
 8007b3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b4c:	801a      	strh	r2, [r3, #0]
 8007b4e:	e063      	b.n	8007c18 <USB_EPStartXfer+0x942>
 8007b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b54:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b56:	d81c      	bhi.n	8007b92 <USB_EPStartXfer+0x8bc>
 8007b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b5c:	085b      	lsrs	r3, r3, #1
 8007b5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d004      	beq.n	8007b78 <USB_EPStartXfer+0x8a2>
 8007b6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007b72:	3301      	adds	r3, #1
 8007b74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	029b      	lsls	r3, r3, #10
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b8e:	801a      	strh	r2, [r3, #0]
 8007b90:	e042      	b.n	8007c18 <USB_EPStartXfer+0x942>
 8007b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b96:	095b      	lsrs	r3, r3, #5
 8007b98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ba0:	f003 031f 	and.w	r3, r3, #31
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d104      	bne.n	8007bb2 <USB_EPStartXfer+0x8dc>
 8007ba8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007bac:	3b01      	subs	r3, #1
 8007bae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	029b      	lsls	r3, r3, #10
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bd2:	801a      	strh	r2, [r3, #0]
 8007bd4:	e020      	b.n	8007c18 <USB_EPStartXfer+0x942>
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	785b      	ldrb	r3, [r3, #1]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d11c      	bne.n	8007c18 <USB_EPStartXfer+0x942>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	461a      	mov	r2, r3
 8007bee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	00da      	lsls	r2, r3, #3
 8007bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c02:	4413      	add	r3, r2
 8007c04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007c16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	891b      	ldrh	r3, [r3, #8]
 8007c1c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	6959      	ldr	r1, [r3, #20]
 8007c24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fa35 	bl	800809e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c4a:	817b      	strh	r3, [r7, #10]
 8007c4c:	897b      	ldrh	r3, [r7, #10]
 8007c4e:	f083 0310 	eor.w	r3, r3, #16
 8007c52:	817b      	strh	r3, [r7, #10]
 8007c54:	897b      	ldrh	r3, [r7, #10]
 8007c56:	f083 0320 	eor.w	r3, r3, #32
 8007c5a:	817b      	strh	r3, [r7, #10]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	441a      	add	r2, r3
 8007c66:	897b      	ldrh	r3, [r7, #10]
 8007c68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	8013      	strh	r3, [r2, #0]
 8007c7c:	e0d5      	b.n	8007e2a <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	7b1b      	ldrb	r3, [r3, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d156      	bne.n	8007d34 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d122      	bne.n	8007cd4 <USB_EPStartXfer+0x9fe>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	78db      	ldrb	r3, [r3, #3]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d11e      	bne.n	8007cd4 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cac:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	441a      	add	r2, r3
 8007cba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007cbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cc6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	8013      	strh	r3, [r2, #0]
 8007cd2:	e01d      	b.n	8007d10 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cea:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	441a      	add	r2, r3
 8007cf8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8007cfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	699a      	ldr	r2, [r3, #24]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d907      	bls.n	8007d2c <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	699a      	ldr	r2, [r3, #24]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	1ad2      	subs	r2, r2, r3
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	619a      	str	r2, [r3, #24]
 8007d2a:	e054      	b.n	8007dd6 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	619a      	str	r2, [r3, #24]
 8007d32:	e050      	b.n	8007dd6 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	78db      	ldrb	r3, [r3, #3]
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d142      	bne.n	8007dc2 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d048      	beq.n	8007dd6 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	881b      	ldrh	r3, [r3, #0]
 8007d50:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d54:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007d58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d005      	beq.n	8007d6c <USB_EPStartXfer+0xa96>
 8007d60:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10b      	bne.n	8007d84 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d6c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007d70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d12e      	bne.n	8007dd6 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d78:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d128      	bne.n	8007dd6 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d9a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	441a      	add	r2, r3
 8007da8:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007dac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007db0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007db4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007db8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	8013      	strh	r3, [r2, #0]
 8007dc0:	e009      	b.n	8007dd6 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	78db      	ldrb	r3, [r3, #3]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d103      	bne.n	8007dd2 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	619a      	str	r2, [r3, #24]
 8007dd0:	e001      	b.n	8007dd6 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e02a      	b.n	8007e2c <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007df0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007df4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007df8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007dfc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007e00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e04:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	441a      	add	r2, r3
 8007e12:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	37b0      	adds	r7, #176	@ 0xb0
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	785b      	ldrb	r3, [r3, #1]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d020      	beq.n	8007e88 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e5c:	81bb      	strh	r3, [r7, #12]
 8007e5e:	89bb      	ldrh	r3, [r7, #12]
 8007e60:	f083 0310 	eor.w	r3, r3, #16
 8007e64:	81bb      	strh	r3, [r7, #12]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	441a      	add	r2, r3
 8007e70:	89bb      	ldrh	r3, [r7, #12]
 8007e72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	8013      	strh	r3, [r2, #0]
 8007e86:	e01f      	b.n	8007ec8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e9e:	81fb      	strh	r3, [r7, #14]
 8007ea0:	89fb      	ldrh	r3, [r7, #14]
 8007ea2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007ea6:	81fb      	strh	r3, [r7, #14]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	441a      	add	r2, r3
 8007eb2:	89fb      	ldrh	r3, [r7, #14]
 8007eb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ebc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b087      	sub	sp, #28
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	785b      	ldrb	r3, [r3, #1]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d04c      	beq.n	8007f82 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	823b      	strh	r3, [r7, #16]
 8007ef6:	8a3b      	ldrh	r3, [r7, #16]
 8007ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01b      	beq.n	8007f38 <USB_EPClearStall+0x62>
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f16:	81fb      	strh	r3, [r7, #14]
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	441a      	add	r2, r3
 8007f22:	89fb      	ldrh	r3, [r7, #14]
 8007f24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	78db      	ldrb	r3, [r3, #3]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d06c      	beq.n	800801a <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f56:	81bb      	strh	r3, [r7, #12]
 8007f58:	89bb      	ldrh	r3, [r7, #12]
 8007f5a:	f083 0320 	eor.w	r3, r3, #32
 8007f5e:	81bb      	strh	r3, [r7, #12]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	441a      	add	r2, r3
 8007f6a:	89bb      	ldrh	r3, [r7, #12]
 8007f6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	8013      	strh	r3, [r2, #0]
 8007f80:	e04b      	b.n	800801a <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	82fb      	strh	r3, [r7, #22]
 8007f90:	8afb      	ldrh	r3, [r7, #22]
 8007f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d01b      	beq.n	8007fd2 <USB_EPClearStall+0xfc>
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb0:	82bb      	strh	r3, [r7, #20]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	441a      	add	r2, r3
 8007fbc:	8abb      	ldrh	r3, [r7, #20]
 8007fbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fe8:	827b      	strh	r3, [r7, #18]
 8007fea:	8a7b      	ldrh	r3, [r7, #18]
 8007fec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007ff0:	827b      	strh	r3, [r7, #18]
 8007ff2:	8a7b      	ldrh	r3, [r7, #18]
 8007ff4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ff8:	827b      	strh	r3, [r7, #18]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	441a      	add	r2, r3
 8008004:	8a7b      	ldrh	r3, [r7, #18]
 8008006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800800a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800800e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008016:	b29b      	uxth	r3, r3
 8008018:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	371c      	adds	r7, #28
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d103      	bne.n	8008042 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2280      	movs	r2, #128	@ 0x80
 800803e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800805e:	b29b      	uxth	r3, r3
 8008060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008068:	b29a      	uxth	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800808c:	b29b      	uxth	r3, r3
 800808e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008090:	68fb      	ldr	r3, [r7, #12]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800809e:	b480      	push	{r7}
 80080a0:	b08b      	sub	sp, #44	@ 0x2c
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	4611      	mov	r1, r2
 80080aa:	461a      	mov	r2, r3
 80080ac:	460b      	mov	r3, r1
 80080ae:	80fb      	strh	r3, [r7, #6]
 80080b0:	4613      	mov	r3, r2
 80080b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80080b4:	88bb      	ldrh	r3, [r7, #4]
 80080b6:	3301      	adds	r3, #1
 80080b8:	085b      	lsrs	r3, r3, #1
 80080ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080c4:	88fa      	ldrh	r2, [r7, #6]
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080ce:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80080d4:	e01b      	b.n	800810e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	3301      	adds	r3, #1
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	021b      	lsls	r3, r3, #8
 80080e4:	b21a      	sxth	r2, r3
 80080e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	b21b      	sxth	r3, r3
 80080ee:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	8a7a      	ldrh	r2, [r7, #18]
 80080f4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	3302      	adds	r3, #2
 80080fa:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	3301      	adds	r3, #1
 8008100:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	3301      	adds	r3, #1
 8008106:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810a:	3b01      	subs	r3, #1
 800810c:	627b      	str	r3, [r7, #36]	@ 0x24
 800810e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1e0      	bne.n	80080d6 <USB_WritePMA+0x38>
  }
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop
 8008118:	372c      	adds	r7, #44	@ 0x2c
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008122:	b480      	push	{r7}
 8008124:	b08b      	sub	sp, #44	@ 0x2c
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	4611      	mov	r1, r2
 800812e:	461a      	mov	r2, r3
 8008130:	460b      	mov	r3, r1
 8008132:	80fb      	strh	r3, [r7, #6]
 8008134:	4613      	mov	r3, r2
 8008136:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008138:	88bb      	ldrh	r3, [r7, #4]
 800813a:	085b      	lsrs	r3, r3, #1
 800813c:	b29b      	uxth	r3, r3
 800813e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008148:	88fa      	ldrh	r2, [r7, #6]
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	4413      	add	r3, r2
 800814e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008152:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	627b      	str	r3, [r7, #36]	@ 0x24
 8008158:	e018      	b.n	800818c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	b29b      	uxth	r3, r3
 8008160:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	3302      	adds	r3, #2
 8008166:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	b2da      	uxtb	r2, r3
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	3301      	adds	r3, #1
 8008174:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	0a1b      	lsrs	r3, r3, #8
 800817a:	b2da      	uxtb	r2, r3
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	3301      	adds	r3, #1
 8008184:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008188:	3b01      	subs	r3, #1
 800818a:	627b      	str	r3, [r7, #36]	@ 0x24
 800818c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1e3      	bne.n	800815a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008192:	88bb      	ldrh	r3, [r7, #4]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	b29b      	uxth	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d007      	beq.n	80081ae <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	701a      	strb	r2, [r3, #0]
  }
}
 80081ae:	bf00      	nop
 80081b0:	372c      	adds	r7, #44	@ 0x2c
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	460b      	mov	r3, r1
 80081c4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80081c6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80081ca:	f004 feed 	bl	800cfa8 <USBD_static_malloc>
 80081ce:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d105      	bne.n	80081e2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80081de:	2302      	movs	r3, #2
 80081e0:	e066      	b.n	80082b0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	7c1b      	ldrb	r3, [r3, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d119      	bne.n	8008226 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081f6:	2202      	movs	r2, #2
 80081f8:	2181      	movs	r1, #129	@ 0x81
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f004 fd7b 	bl	800ccf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008206:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800820a:	2202      	movs	r2, #2
 800820c:	2101      	movs	r1, #1
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f004 fd71 	bl	800ccf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2210      	movs	r2, #16
 8008220:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8008224:	e016      	b.n	8008254 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008226:	2340      	movs	r3, #64	@ 0x40
 8008228:	2202      	movs	r2, #2
 800822a:	2181      	movs	r1, #129	@ 0x81
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f004 fd62 	bl	800ccf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008238:	2340      	movs	r3, #64	@ 0x40
 800823a:	2202      	movs	r2, #2
 800823c:	2101      	movs	r1, #1
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f004 fd59 	bl	800ccf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2210      	movs	r2, #16
 8008250:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008254:	2308      	movs	r3, #8
 8008256:	2203      	movs	r2, #3
 8008258:	2182      	movs	r1, #130	@ 0x82
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f004 fd4b 	bl	800ccf6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	7c1b      	ldrb	r3, [r3, #16]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d109      	bne.n	800829e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008290:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008294:	2101      	movs	r1, #1
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f004 fe1c 	bl	800ced4 <USBD_LL_PrepareReceive>
 800829c:	e007      	b.n	80082ae <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082a4:	2340      	movs	r3, #64	@ 0x40
 80082a6:	2101      	movs	r1, #1
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f004 fe13 	bl	800ced4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80082c4:	2181      	movs	r1, #129	@ 0x81
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f004 fd3b 	bl	800cd42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80082d2:	2101      	movs	r1, #1
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f004 fd34 	bl	800cd42 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80082e2:	2182      	movs	r1, #130	@ 0x82
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f004 fd2c 	bl	800cd42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00e      	beq.n	8008322 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008314:	4618      	mov	r0, r3
 8008316:	f004 fe55 	bl	800cfc4 <USBD_static_free>
    pdev->pClassData = NULL;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800833c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800833e:	2300      	movs	r3, #0
 8008340:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008350:	2303      	movs	r3, #3
 8008352:	e0af      	b.n	80084b4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800835c:	2b00      	cmp	r3, #0
 800835e:	d03f      	beq.n	80083e0 <USBD_CDC_Setup+0xb4>
 8008360:	2b20      	cmp	r3, #32
 8008362:	f040 809f 	bne.w	80084a4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	88db      	ldrh	r3, [r3, #6]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d02e      	beq.n	80083cc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	b25b      	sxtb	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	da16      	bge.n	80083a6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008384:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	88d2      	ldrh	r2, [r2, #6]
 800838a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	88db      	ldrh	r3, [r3, #6]
 8008390:	2b07      	cmp	r3, #7
 8008392:	bf28      	it	cs
 8008394:	2307      	movcs	r3, #7
 8008396:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	89fa      	ldrh	r2, [r7, #14]
 800839c:	4619      	mov	r1, r3
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 facd 	bl	800993e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80083a4:	e085      	b.n	80084b2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	785a      	ldrb	r2, [r3, #1]
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	88db      	ldrh	r3, [r3, #6]
 80083b4:	b2da      	uxtb	r2, r3
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80083bc:	6939      	ldr	r1, [r7, #16]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	88db      	ldrh	r3, [r3, #6]
 80083c2:	461a      	mov	r2, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 fae6 	bl	8009996 <USBD_CtlPrepareRx>
      break;
 80083ca:	e072      	b.n	80084b2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	7850      	ldrb	r0, [r2, #1]
 80083d8:	2200      	movs	r2, #0
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	4798      	blx	r3
      break;
 80083de:	e068      	b.n	80084b2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	785b      	ldrb	r3, [r3, #1]
 80083e4:	2b0b      	cmp	r3, #11
 80083e6:	d852      	bhi.n	800848e <USBD_CDC_Setup+0x162>
 80083e8:	a201      	add	r2, pc, #4	@ (adr r2, 80083f0 <USBD_CDC_Setup+0xc4>)
 80083ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ee:	bf00      	nop
 80083f0:	08008421 	.word	0x08008421
 80083f4:	0800849d 	.word	0x0800849d
 80083f8:	0800848f 	.word	0x0800848f
 80083fc:	0800848f 	.word	0x0800848f
 8008400:	0800848f 	.word	0x0800848f
 8008404:	0800848f 	.word	0x0800848f
 8008408:	0800848f 	.word	0x0800848f
 800840c:	0800848f 	.word	0x0800848f
 8008410:	0800848f 	.word	0x0800848f
 8008414:	0800848f 	.word	0x0800848f
 8008418:	0800844b 	.word	0x0800844b
 800841c:	08008475 	.word	0x08008475
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b03      	cmp	r3, #3
 800842a:	d107      	bne.n	800843c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800842c:	f107 030a 	add.w	r3, r7, #10
 8008430:	2202      	movs	r2, #2
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 fa82 	bl	800993e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800843a:	e032      	b.n	80084a2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f001 fa0c 	bl	800985c <USBD_CtlError>
            ret = USBD_FAIL;
 8008444:	2303      	movs	r3, #3
 8008446:	75fb      	strb	r3, [r7, #23]
          break;
 8008448:	e02b      	b.n	80084a2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b03      	cmp	r3, #3
 8008454:	d107      	bne.n	8008466 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008456:	f107 030d 	add.w	r3, r7, #13
 800845a:	2201      	movs	r2, #1
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 fa6d 	bl	800993e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008464:	e01d      	b.n	80084a2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f001 f9f7 	bl	800985c <USBD_CtlError>
            ret = USBD_FAIL;
 800846e:	2303      	movs	r3, #3
 8008470:	75fb      	strb	r3, [r7, #23]
          break;
 8008472:	e016      	b.n	80084a2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b03      	cmp	r3, #3
 800847e:	d00f      	beq.n	80084a0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f001 f9ea 	bl	800985c <USBD_CtlError>
            ret = USBD_FAIL;
 8008488:	2303      	movs	r3, #3
 800848a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800848c:	e008      	b.n	80084a0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f001 f9e3 	bl	800985c <USBD_CtlError>
          ret = USBD_FAIL;
 8008496:	2303      	movs	r3, #3
 8008498:	75fb      	strb	r3, [r7, #23]
          break;
 800849a:	e002      	b.n	80084a2 <USBD_CDC_Setup+0x176>
          break;
 800849c:	bf00      	nop
 800849e:	e008      	b.n	80084b2 <USBD_CDC_Setup+0x186>
          break;
 80084a0:	bf00      	nop
      }
      break;
 80084a2:	e006      	b.n	80084b2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 f9d8 	bl	800985c <USBD_CtlError>
      ret = USBD_FAIL;
 80084ac:	2303      	movs	r3, #3
 80084ae:	75fb      	strb	r3, [r7, #23]
      break;
 80084b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80084ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80084da:	2303      	movs	r3, #3
 80084dc:	e04f      	b.n	800857e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80084e6:	78fa      	ldrb	r2, [r7, #3]
 80084e8:	6879      	ldr	r1, [r7, #4]
 80084ea:	4613      	mov	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	440b      	add	r3, r1
 80084f4:	3318      	adds	r3, #24
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d029      	beq.n	8008550 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80084fc:	78fa      	ldrb	r2, [r7, #3]
 80084fe:	6879      	ldr	r1, [r7, #4]
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	440b      	add	r3, r1
 800850a:	3318      	adds	r3, #24
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	78f9      	ldrb	r1, [r7, #3]
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	460b      	mov	r3, r1
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	440b      	add	r3, r1
 8008518:	00db      	lsls	r3, r3, #3
 800851a:	4403      	add	r3, r0
 800851c:	3320      	adds	r3, #32
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	fbb2 f1f3 	udiv	r1, r2, r3
 8008524:	fb01 f303 	mul.w	r3, r1, r3
 8008528:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800852a:	2b00      	cmp	r3, #0
 800852c:	d110      	bne.n	8008550 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800852e:	78fa      	ldrb	r2, [r7, #3]
 8008530:	6879      	ldr	r1, [r7, #4]
 8008532:	4613      	mov	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	440b      	add	r3, r1
 800853c:	3318      	adds	r3, #24
 800853e:	2200      	movs	r2, #0
 8008540:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008542:	78f9      	ldrb	r1, [r7, #3]
 8008544:	2300      	movs	r3, #0
 8008546:	2200      	movs	r2, #0
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f004 fca2 	bl	800ce92 <USBD_LL_Transmit>
 800854e:	e015      	b.n	800857c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2200      	movs	r2, #0
 8008554:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00b      	beq.n	800857c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008578:	78fa      	ldrb	r2, [r7, #3]
 800857a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	460b      	mov	r3, r1
 8008590:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008598:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e015      	b.n	80085d4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80085a8:	78fb      	ldrb	r3, [r7, #3]
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f004 fcb2 	bl	800cf16 <USBD_LL_GetRxDataSize>
 80085b2:	4602      	mov	r2, r0
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80085ce:	4611      	mov	r1, r2
 80085d0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085ea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e01a      	b.n	800862c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d014      	beq.n	800862a <USBD_CDC_EP0_RxReady+0x4e>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008606:	2bff      	cmp	r3, #255	@ 0xff
 8008608:	d00f      	beq.n	800862a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8008618:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008620:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	22ff      	movs	r2, #255	@ 0xff
 8008626:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2243      	movs	r2, #67	@ 0x43
 8008640:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008642:	4b03      	ldr	r3, [pc, #12]	@ (8008650 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	20000094 	.word	0x20000094

08008654 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2243      	movs	r2, #67	@ 0x43
 8008660:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008662:	4b03      	ldr	r3, [pc, #12]	@ (8008670 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	20000050 	.word	0x20000050

08008674 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2243      	movs	r2, #67	@ 0x43
 8008680:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008682:	4b03      	ldr	r3, [pc, #12]	@ (8008690 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008684:	4618      	mov	r0, r3
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	200000d8 	.word	0x200000d8

08008694 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	220a      	movs	r2, #10
 80086a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80086a2:	4b03      	ldr	r3, [pc, #12]	@ (80086b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	2000000c 	.word	0x2000000c

080086b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e004      	b.n	80086d2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80086de:	b480      	push	{r7}
 80086e0:	b087      	sub	sp, #28
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	60b9      	str	r1, [r7, #8]
 80086e8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086f0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e008      	b.n	800870e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	371c      	adds	r7, #28
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800871a:	b480      	push	{r7}
 800871c:	b085      	sub	sp, #20
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800872a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008732:	2303      	movs	r3, #3
 8008734:	e004      	b.n	8008740 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	683a      	ldr	r2, [r7, #0]
 800873a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800875a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800875c:	2301      	movs	r3, #1
 800875e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008766:	2b00      	cmp	r3, #0
 8008768:	d101      	bne.n	800876e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800876a:	2303      	movs	r3, #3
 800876c:	e01a      	b.n	80087a4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008774:	2b00      	cmp	r3, #0
 8008776:	d114      	bne.n	80087a2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2201      	movs	r2, #1
 800877c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008796:	2181      	movs	r1, #129	@ 0x81
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f004 fb7a 	bl	800ce92 <USBD_LL_Transmit>

    ret = USBD_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e016      	b.n	80087f8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	7c1b      	ldrb	r3, [r3, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d109      	bne.n	80087e6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087dc:	2101      	movs	r1, #1
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f004 fb78 	bl	800ced4 <USBD_LL_PrepareReceive>
 80087e4:	e007      	b.n	80087f6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087ec:	2340      	movs	r3, #64	@ 0x40
 80087ee:	2101      	movs	r1, #1
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f004 fb6f 	bl	800ced4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	4613      	mov	r3, r2
 800880c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008814:	2303      	movs	r3, #3
 8008816:	e01f      	b.n	8008858 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d003      	beq.n	800883e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2201      	movs	r2, #1
 8008842:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	79fa      	ldrb	r2, [r7, #7]
 800884a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f004 f9d7 	bl	800cc00 <USBD_LL_Init>
 8008852:	4603      	mov	r3, r0
 8008854:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008856:	7dfb      	ldrb	r3, [r7, #23]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3718      	adds	r7, #24
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008874:	2303      	movs	r3, #3
 8008876:	e016      	b.n	80088a6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00b      	beq.n	80088a4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008894:	f107 020e 	add.w	r2, r7, #14
 8008898:	4610      	mov	r0, r2
 800889a:	4798      	blx	r3
 800889c:	4602      	mov	r2, r0
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f004 fa02 	bl	800ccc0 <USBD_LL_Start>
 80088bc:	4603      	mov	r3, r0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b083      	sub	sp, #12
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80088e8:	2303      	movs	r3, #3
 80088ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d009      	beq.n	800890a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	78fa      	ldrb	r2, [r7, #3]
 8008900:	4611      	mov	r1, r2
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	4798      	blx	r3
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800890a:	7bfb      	ldrb	r3, [r7, #15]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008926:	2b00      	cmp	r3, #0
 8008928:	d007      	beq.n	800893a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	78fa      	ldrb	r2, [r7, #3]
 8008934:	4611      	mov	r1, r2
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	4798      	blx	r3
  }

  return USBD_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	4618      	mov	r0, r3
 8008958:	f000 ff46 	bl	80097e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800896a:	461a      	mov	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008978:	f003 031f 	and.w	r3, r3, #31
 800897c:	2b02      	cmp	r3, #2
 800897e:	d01a      	beq.n	80089b6 <USBD_LL_SetupStage+0x72>
 8008980:	2b02      	cmp	r3, #2
 8008982:	d822      	bhi.n	80089ca <USBD_LL_SetupStage+0x86>
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <USBD_LL_SetupStage+0x4a>
 8008988:	2b01      	cmp	r3, #1
 800898a:	d00a      	beq.n	80089a2 <USBD_LL_SetupStage+0x5e>
 800898c:	e01d      	b.n	80089ca <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f9ee 	bl	8008d78 <USBD_StdDevReq>
 800899c:	4603      	mov	r3, r0
 800899e:	73fb      	strb	r3, [r7, #15]
      break;
 80089a0:	e020      	b.n	80089e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fa52 	bl	8008e54 <USBD_StdItfReq>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]
      break;
 80089b4:	e016      	b.n	80089e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fa91 	bl	8008ee6 <USBD_StdEPReq>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73fb      	strb	r3, [r7, #15]
      break;
 80089c8:	e00c      	b.n	80089e4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80089d0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f004 f9d1 	bl	800cd80 <USBD_LL_StallEP>
 80089de:	4603      	mov	r3, r0
 80089e0:	73fb      	strb	r3, [r7, #15]
      break;
 80089e2:	bf00      	nop
  }

  return ret;
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b086      	sub	sp, #24
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	460b      	mov	r3, r1
 80089f8:	607a      	str	r2, [r7, #4]
 80089fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80089fc:	7afb      	ldrb	r3, [r7, #11]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d138      	bne.n	8008a74 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008a08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d14a      	bne.n	8008aaa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	689a      	ldr	r2, [r3, #8]
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d913      	bls.n	8008a48 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	689a      	ldr	r2, [r3, #8]
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	1ad2      	subs	r2, r2, r3
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	68da      	ldr	r2, [r3, #12]
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	4293      	cmp	r3, r2
 8008a38:	bf28      	it	cs
 8008a3a:	4613      	movcs	r3, r2
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 ffc5 	bl	80099d0 <USBD_CtlContinueRx>
 8008a46:	e030      	b.n	8008aaa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b03      	cmp	r3, #3
 8008a52:	d10b      	bne.n	8008a6c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 ffc0 	bl	80099f2 <USBD_CtlSendStatus>
 8008a72:	e01a      	b.n	8008aaa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d114      	bne.n	8008aaa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00e      	beq.n	8008aaa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	7afa      	ldrb	r2, [r7, #11]
 8008a96:	4611      	mov	r1, r2
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	4798      	blx	r3
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008aa0:	7dfb      	ldrb	r3, [r7, #23]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008aa6:	7dfb      	ldrb	r3, [r7, #23]
 8008aa8:	e000      	b.n	8008aac <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	460b      	mov	r3, r1
 8008abe:	607a      	str	r2, [r7, #4]
 8008ac0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008ac2:	7afb      	ldrb	r3, [r7, #11]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d16b      	bne.n	8008ba0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3314      	adds	r3, #20
 8008acc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d156      	bne.n	8008b86 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	689a      	ldr	r2, [r3, #8]
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d914      	bls.n	8008b0e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	689a      	ldr	r2, [r3, #8]
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	1ad2      	subs	r2, r2, r3
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	461a      	mov	r2, r3
 8008af8:	6879      	ldr	r1, [r7, #4]
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 ff3a 	bl	8009974 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b00:	2300      	movs	r3, #0
 8008b02:	2200      	movs	r2, #0
 8008b04:	2100      	movs	r1, #0
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f004 f9e4 	bl	800ced4 <USBD_LL_PrepareReceive>
 8008b0c:	e03b      	b.n	8008b86 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	68da      	ldr	r2, [r3, #12]
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d11c      	bne.n	8008b54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d316      	bcc.n	8008b54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d20f      	bcs.n	8008b54 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b34:	2200      	movs	r2, #0
 8008b36:	2100      	movs	r1, #0
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 ff1b 	bl	8009974 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b46:	2300      	movs	r3, #0
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f004 f9c1 	bl	800ced4 <USBD_LL_PrepareReceive>
 8008b52:	e018      	b.n	8008b86 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	d10b      	bne.n	8008b78 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d005      	beq.n	8008b78 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b78:	2180      	movs	r1, #128	@ 0x80
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f004 f900 	bl	800cd80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 ff49 	bl	8009a18 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d122      	bne.n	8008bd6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f7ff fe98 	bl	80088c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008b9e:	e01a      	b.n	8008bd6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d114      	bne.n	8008bd6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bb2:	695b      	ldr	r3, [r3, #20]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00e      	beq.n	8008bd6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bbe:	695b      	ldr	r3, [r3, #20]
 8008bc0:	7afa      	ldrb	r2, [r7, #11]
 8008bc2:	4611      	mov	r1, r2
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	4798      	blx	r3
 8008bc8:	4603      	mov	r3, r0
 8008bca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	e000      	b.n	8008bd8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3718      	adds	r7, #24
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e02f      	b.n	8008c74 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00f      	beq.n	8008c3e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d009      	beq.n	8008c3e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	6852      	ldr	r2, [r2, #4]
 8008c36:	b2d2      	uxtb	r2, r2
 8008c38:	4611      	mov	r1, r2
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c3e:	2340      	movs	r3, #64	@ 0x40
 8008c40:	2200      	movs	r2, #0
 8008c42:	2100      	movs	r1, #0
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f004 f856 	bl	800ccf6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2240      	movs	r2, #64	@ 0x40
 8008c56:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c5a:	2340      	movs	r3, #64	@ 0x40
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	2180      	movs	r1, #128	@ 0x80
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f004 f848 	bl	800ccf6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2240      	movs	r2, #64	@ 0x40
 8008c70:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	78fa      	ldrb	r2, [r7, #3]
 8008c8c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2204      	movs	r2, #4
 8008cb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	2b04      	cmp	r3, #4
 8008cda:	d106      	bne.n	8008cea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008ce2:	b2da      	uxtb	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	e012      	b.n	8008d34 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	d10b      	bne.n	8008d32 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d005      	beq.n	8008d32 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d2c:	69db      	ldr	r3, [r3, #28]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	3301      	adds	r3, #1
 8008d52:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d5a:	8a3b      	ldrh	r3, [r7, #16]
 8008d5c:	021b      	lsls	r3, r3, #8
 8008d5e:	b21a      	sxth	r2, r3
 8008d60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	b21b      	sxth	r3, r3
 8008d68:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d6a:	89fb      	ldrh	r3, [r7, #14]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	371c      	adds	r7, #28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d8e:	2b40      	cmp	r3, #64	@ 0x40
 8008d90:	d005      	beq.n	8008d9e <USBD_StdDevReq+0x26>
 8008d92:	2b40      	cmp	r3, #64	@ 0x40
 8008d94:	d853      	bhi.n	8008e3e <USBD_StdDevReq+0xc6>
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00b      	beq.n	8008db2 <USBD_StdDevReq+0x3a>
 8008d9a:	2b20      	cmp	r3, #32
 8008d9c:	d14f      	bne.n	8008e3e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	4798      	blx	r3
 8008dac:	4603      	mov	r3, r0
 8008dae:	73fb      	strb	r3, [r7, #15]
      break;
 8008db0:	e04a      	b.n	8008e48 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	785b      	ldrb	r3, [r3, #1]
 8008db6:	2b09      	cmp	r3, #9
 8008db8:	d83b      	bhi.n	8008e32 <USBD_StdDevReq+0xba>
 8008dba:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc0 <USBD_StdDevReq+0x48>)
 8008dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc0:	08008e15 	.word	0x08008e15
 8008dc4:	08008e29 	.word	0x08008e29
 8008dc8:	08008e33 	.word	0x08008e33
 8008dcc:	08008e1f 	.word	0x08008e1f
 8008dd0:	08008e33 	.word	0x08008e33
 8008dd4:	08008df3 	.word	0x08008df3
 8008dd8:	08008de9 	.word	0x08008de9
 8008ddc:	08008e33 	.word	0x08008e33
 8008de0:	08008e0b 	.word	0x08008e0b
 8008de4:	08008dfd 	.word	0x08008dfd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f9de 	bl	80091ac <USBD_GetDescriptor>
          break;
 8008df0:	e024      	b.n	8008e3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fb6d 	bl	80094d4 <USBD_SetAddress>
          break;
 8008dfa:	e01f      	b.n	8008e3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fbac 	bl	800955c <USBD_SetConfig>
 8008e04:	4603      	mov	r3, r0
 8008e06:	73fb      	strb	r3, [r7, #15]
          break;
 8008e08:	e018      	b.n	8008e3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fc4b 	bl	80096a8 <USBD_GetConfig>
          break;
 8008e12:	e013      	b.n	8008e3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fc7c 	bl	8009714 <USBD_GetStatus>
          break;
 8008e1c:	e00e      	b.n	8008e3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fcab 	bl	800977c <USBD_SetFeature>
          break;
 8008e26:	e009      	b.n	8008e3c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fcba 	bl	80097a4 <USBD_ClrFeature>
          break;
 8008e30:	e004      	b.n	8008e3c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fd11 	bl	800985c <USBD_CtlError>
          break;
 8008e3a:	bf00      	nop
      }
      break;
 8008e3c:	e004      	b.n	8008e48 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fd0b 	bl	800985c <USBD_CtlError>
      break;
 8008e46:	bf00      	nop
  }

  return ret;
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop

08008e54 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e6a:	2b40      	cmp	r3, #64	@ 0x40
 8008e6c:	d005      	beq.n	8008e7a <USBD_StdItfReq+0x26>
 8008e6e:	2b40      	cmp	r3, #64	@ 0x40
 8008e70:	d82f      	bhi.n	8008ed2 <USBD_StdItfReq+0x7e>
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d001      	beq.n	8008e7a <USBD_StdItfReq+0x26>
 8008e76:	2b20      	cmp	r3, #32
 8008e78:	d12b      	bne.n	8008ed2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	3b01      	subs	r3, #1
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d81d      	bhi.n	8008ec4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	889b      	ldrh	r3, [r3, #4]
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d813      	bhi.n	8008eba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	4798      	blx	r3
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	88db      	ldrh	r3, [r3, #6]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d110      	bne.n	8008ece <USBD_StdItfReq+0x7a>
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10d      	bne.n	8008ece <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fd9d 	bl	80099f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008eb8:	e009      	b.n	8008ece <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 fccd 	bl	800985c <USBD_CtlError>
          break;
 8008ec2:	e004      	b.n	8008ece <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fcc8 	bl	800985c <USBD_CtlError>
          break;
 8008ecc:	e000      	b.n	8008ed0 <USBD_StdItfReq+0x7c>
          break;
 8008ece:	bf00      	nop
      }
      break;
 8008ed0:	e004      	b.n	8008edc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fcc1 	bl	800985c <USBD_CtlError>
      break;
 8008eda:	bf00      	nop
  }

  return ret;
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b084      	sub	sp, #16
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	889b      	ldrh	r3, [r3, #4]
 8008ef8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f02:	2b40      	cmp	r3, #64	@ 0x40
 8008f04:	d007      	beq.n	8008f16 <USBD_StdEPReq+0x30>
 8008f06:	2b40      	cmp	r3, #64	@ 0x40
 8008f08:	f200 8145 	bhi.w	8009196 <USBD_StdEPReq+0x2b0>
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00c      	beq.n	8008f2a <USBD_StdEPReq+0x44>
 8008f10:	2b20      	cmp	r3, #32
 8008f12:	f040 8140 	bne.w	8009196 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	4798      	blx	r3
 8008f24:	4603      	mov	r3, r0
 8008f26:	73fb      	strb	r3, [r7, #15]
      break;
 8008f28:	e13a      	b.n	80091a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	785b      	ldrb	r3, [r3, #1]
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d007      	beq.n	8008f42 <USBD_StdEPReq+0x5c>
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	f300 8129 	bgt.w	800918a <USBD_StdEPReq+0x2a4>
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d07f      	beq.n	800903c <USBD_StdEPReq+0x156>
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d03c      	beq.n	8008fba <USBD_StdEPReq+0xd4>
 8008f40:	e123      	b.n	800918a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d002      	beq.n	8008f54 <USBD_StdEPReq+0x6e>
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	d016      	beq.n	8008f80 <USBD_StdEPReq+0x9a>
 8008f52:	e02c      	b.n	8008fae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00d      	beq.n	8008f76 <USBD_StdEPReq+0x90>
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	2b80      	cmp	r3, #128	@ 0x80
 8008f5e:	d00a      	beq.n	8008f76 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f60:	7bbb      	ldrb	r3, [r7, #14]
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f003 ff0b 	bl	800cd80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f6a:	2180      	movs	r1, #128	@ 0x80
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f003 ff07 	bl	800cd80 <USBD_LL_StallEP>
 8008f72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f74:	e020      	b.n	8008fb8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fc6f 	bl	800985c <USBD_CtlError>
              break;
 8008f7e:	e01b      	b.n	8008fb8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	885b      	ldrh	r3, [r3, #2]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10e      	bne.n	8008fa6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f88:	7bbb      	ldrb	r3, [r7, #14]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00b      	beq.n	8008fa6 <USBD_StdEPReq+0xc0>
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	2b80      	cmp	r3, #128	@ 0x80
 8008f92:	d008      	beq.n	8008fa6 <USBD_StdEPReq+0xc0>
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	88db      	ldrh	r3, [r3, #6]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d104      	bne.n	8008fa6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f003 feed 	bl	800cd80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fd23 	bl	80099f2 <USBD_CtlSendStatus>

              break;
 8008fac:	e004      	b.n	8008fb8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fc53 	bl	800985c <USBD_CtlError>
              break;
 8008fb6:	bf00      	nop
          }
          break;
 8008fb8:	e0ec      	b.n	8009194 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d002      	beq.n	8008fcc <USBD_StdEPReq+0xe6>
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	d016      	beq.n	8008ff8 <USBD_StdEPReq+0x112>
 8008fca:	e030      	b.n	800902e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fcc:	7bbb      	ldrb	r3, [r7, #14]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00d      	beq.n	8008fee <USBD_StdEPReq+0x108>
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	2b80      	cmp	r3, #128	@ 0x80
 8008fd6:	d00a      	beq.n	8008fee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f003 fecf 	bl	800cd80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fe2:	2180      	movs	r1, #128	@ 0x80
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f003 fecb 	bl	800cd80 <USBD_LL_StallEP>
 8008fea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fec:	e025      	b.n	800903a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fc33 	bl	800985c <USBD_CtlError>
              break;
 8008ff6:	e020      	b.n	800903a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	885b      	ldrh	r3, [r3, #2]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d11b      	bne.n	8009038 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009000:	7bbb      	ldrb	r3, [r7, #14]
 8009002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009006:	2b00      	cmp	r3, #0
 8009008:	d004      	beq.n	8009014 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800900a:	7bbb      	ldrb	r3, [r7, #14]
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f003 fed5 	bl	800cdbe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fcec 	bl	80099f2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	6839      	ldr	r1, [r7, #0]
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	4798      	blx	r3
 8009028:	4603      	mov	r3, r0
 800902a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800902c:	e004      	b.n	8009038 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fc13 	bl	800985c <USBD_CtlError>
              break;
 8009036:	e000      	b.n	800903a <USBD_StdEPReq+0x154>
              break;
 8009038:	bf00      	nop
          }
          break;
 800903a:	e0ab      	b.n	8009194 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b02      	cmp	r3, #2
 8009046:	d002      	beq.n	800904e <USBD_StdEPReq+0x168>
 8009048:	2b03      	cmp	r3, #3
 800904a:	d032      	beq.n	80090b2 <USBD_StdEPReq+0x1cc>
 800904c:	e097      	b.n	800917e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800904e:	7bbb      	ldrb	r3, [r7, #14]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d007      	beq.n	8009064 <USBD_StdEPReq+0x17e>
 8009054:	7bbb      	ldrb	r3, [r7, #14]
 8009056:	2b80      	cmp	r3, #128	@ 0x80
 8009058:	d004      	beq.n	8009064 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fbfd 	bl	800985c <USBD_CtlError>
                break;
 8009062:	e091      	b.n	8009188 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009068:	2b00      	cmp	r3, #0
 800906a:	da0b      	bge.n	8009084 <USBD_StdEPReq+0x19e>
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009072:	4613      	mov	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	3310      	adds	r3, #16
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	4413      	add	r3, r2
 8009080:	3304      	adds	r3, #4
 8009082:	e00b      	b.n	800909c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009084:	7bbb      	ldrb	r3, [r7, #14]
 8009086:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800908a:	4613      	mov	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	4413      	add	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	4413      	add	r3, r2
 800909a:	3304      	adds	r3, #4
 800909c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2200      	movs	r2, #0
 80090a2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	2202      	movs	r2, #2
 80090a8:	4619      	mov	r1, r3
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fc47 	bl	800993e <USBD_CtlSendData>
              break;
 80090b0:	e06a      	b.n	8009188 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	da11      	bge.n	80090de <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
 80090bc:	f003 020f 	and.w	r2, r3, #15
 80090c0:	6879      	ldr	r1, [r7, #4]
 80090c2:	4613      	mov	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	440b      	add	r3, r1
 80090cc:	3324      	adds	r3, #36	@ 0x24
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d117      	bne.n	8009104 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80090d4:	6839      	ldr	r1, [r7, #0]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fbc0 	bl	800985c <USBD_CtlError>
                  break;
 80090dc:	e054      	b.n	8009188 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090de:	7bbb      	ldrb	r3, [r7, #14]
 80090e0:	f003 020f 	and.w	r2, r3, #15
 80090e4:	6879      	ldr	r1, [r7, #4]
 80090e6:	4613      	mov	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4413      	add	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	440b      	add	r3, r1
 80090f0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d104      	bne.n	8009104 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fbad 	bl	800985c <USBD_CtlError>
                  break;
 8009102:	e041      	b.n	8009188 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009104:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009108:	2b00      	cmp	r3, #0
 800910a:	da0b      	bge.n	8009124 <USBD_StdEPReq+0x23e>
 800910c:	7bbb      	ldrb	r3, [r7, #14]
 800910e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009112:	4613      	mov	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	4413      	add	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	3310      	adds	r3, #16
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	4413      	add	r3, r2
 8009120:	3304      	adds	r3, #4
 8009122:	e00b      	b.n	800913c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009124:	7bbb      	ldrb	r3, [r7, #14]
 8009126:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800912a:	4613      	mov	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	4413      	add	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	4413      	add	r3, r2
 800913a:	3304      	adds	r3, #4
 800913c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800913e:	7bbb      	ldrb	r3, [r7, #14]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d002      	beq.n	800914a <USBD_StdEPReq+0x264>
 8009144:	7bbb      	ldrb	r3, [r7, #14]
 8009146:	2b80      	cmp	r3, #128	@ 0x80
 8009148:	d103      	bne.n	8009152 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	2200      	movs	r2, #0
 800914e:	601a      	str	r2, [r3, #0]
 8009150:	e00e      	b.n	8009170 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f003 fe50 	bl	800cdfc <USBD_LL_IsStallEP>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	2201      	movs	r2, #1
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	e002      	b.n	8009170 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2200      	movs	r2, #0
 800916e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2202      	movs	r2, #2
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fbe1 	bl	800993e <USBD_CtlSendData>
              break;
 800917c:	e004      	b.n	8009188 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fb6b 	bl	800985c <USBD_CtlError>
              break;
 8009186:	bf00      	nop
          }
          break;
 8009188:	e004      	b.n	8009194 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fb65 	bl	800985c <USBD_CtlError>
          break;
 8009192:	bf00      	nop
      }
      break;
 8009194:	e004      	b.n	80091a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fb5f 	bl	800985c <USBD_CtlError>
      break;
 800919e:	bf00      	nop
  }

  return ret;
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
	...

080091ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091b6:	2300      	movs	r3, #0
 80091b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091ba:	2300      	movs	r3, #0
 80091bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80091be:	2300      	movs	r3, #0
 80091c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	885b      	ldrh	r3, [r3, #2]
 80091c6:	0a1b      	lsrs	r3, r3, #8
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	3b01      	subs	r3, #1
 80091cc:	2b0e      	cmp	r3, #14
 80091ce:	f200 8152 	bhi.w	8009476 <USBD_GetDescriptor+0x2ca>
 80091d2:	a201      	add	r2, pc, #4	@ (adr r2, 80091d8 <USBD_GetDescriptor+0x2c>)
 80091d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d8:	08009249 	.word	0x08009249
 80091dc:	08009261 	.word	0x08009261
 80091e0:	080092a1 	.word	0x080092a1
 80091e4:	08009477 	.word	0x08009477
 80091e8:	08009477 	.word	0x08009477
 80091ec:	08009417 	.word	0x08009417
 80091f0:	08009443 	.word	0x08009443
 80091f4:	08009477 	.word	0x08009477
 80091f8:	08009477 	.word	0x08009477
 80091fc:	08009477 	.word	0x08009477
 8009200:	08009477 	.word	0x08009477
 8009204:	08009477 	.word	0x08009477
 8009208:	08009477 	.word	0x08009477
 800920c:	08009477 	.word	0x08009477
 8009210:	08009215 	.word	0x08009215
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00b      	beq.n	8009238 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009226:	69db      	ldr	r3, [r3, #28]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	7c12      	ldrb	r2, [r2, #16]
 800922c:	f107 0108 	add.w	r1, r7, #8
 8009230:	4610      	mov	r0, r2
 8009232:	4798      	blx	r3
 8009234:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009236:	e126      	b.n	8009486 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fb0e 	bl	800985c <USBD_CtlError>
        err++;
 8009240:	7afb      	ldrb	r3, [r7, #11]
 8009242:	3301      	adds	r3, #1
 8009244:	72fb      	strb	r3, [r7, #11]
      break;
 8009246:	e11e      	b.n	8009486 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	7c12      	ldrb	r2, [r2, #16]
 8009254:	f107 0108 	add.w	r1, r7, #8
 8009258:	4610      	mov	r0, r2
 800925a:	4798      	blx	r3
 800925c:	60f8      	str	r0, [r7, #12]
      break;
 800925e:	e112      	b.n	8009486 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	7c1b      	ldrb	r3, [r3, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10d      	bne.n	8009284 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800926e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009270:	f107 0208 	add.w	r2, r7, #8
 8009274:	4610      	mov	r0, r2
 8009276:	4798      	blx	r3
 8009278:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3301      	adds	r3, #1
 800927e:	2202      	movs	r2, #2
 8009280:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009282:	e100      	b.n	8009486 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800928a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928c:	f107 0208 	add.w	r2, r7, #8
 8009290:	4610      	mov	r0, r2
 8009292:	4798      	blx	r3
 8009294:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3301      	adds	r3, #1
 800929a:	2202      	movs	r2, #2
 800929c:	701a      	strb	r2, [r3, #0]
      break;
 800929e:	e0f2      	b.n	8009486 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	885b      	ldrh	r3, [r3, #2]
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b05      	cmp	r3, #5
 80092a8:	f200 80ac 	bhi.w	8009404 <USBD_GetDescriptor+0x258>
 80092ac:	a201      	add	r2, pc, #4	@ (adr r2, 80092b4 <USBD_GetDescriptor+0x108>)
 80092ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b2:	bf00      	nop
 80092b4:	080092cd 	.word	0x080092cd
 80092b8:	08009301 	.word	0x08009301
 80092bc:	08009335 	.word	0x08009335
 80092c0:	08009369 	.word	0x08009369
 80092c4:	0800939d 	.word	0x0800939d
 80092c8:	080093d1 	.word	0x080093d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00b      	beq.n	80092f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	7c12      	ldrb	r2, [r2, #16]
 80092e4:	f107 0108 	add.w	r1, r7, #8
 80092e8:	4610      	mov	r0, r2
 80092ea:	4798      	blx	r3
 80092ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ee:	e091      	b.n	8009414 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fab2 	bl	800985c <USBD_CtlError>
            err++;
 80092f8:	7afb      	ldrb	r3, [r7, #11]
 80092fa:	3301      	adds	r3, #1
 80092fc:	72fb      	strb	r3, [r7, #11]
          break;
 80092fe:	e089      	b.n	8009414 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00b      	beq.n	8009324 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	7c12      	ldrb	r2, [r2, #16]
 8009318:	f107 0108 	add.w	r1, r7, #8
 800931c:	4610      	mov	r0, r2
 800931e:	4798      	blx	r3
 8009320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009322:	e077      	b.n	8009414 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fa98 	bl	800985c <USBD_CtlError>
            err++;
 800932c:	7afb      	ldrb	r3, [r7, #11]
 800932e:	3301      	adds	r3, #1
 8009330:	72fb      	strb	r3, [r7, #11]
          break;
 8009332:	e06f      	b.n	8009414 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00b      	beq.n	8009358 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	7c12      	ldrb	r2, [r2, #16]
 800934c:	f107 0108 	add.w	r1, r7, #8
 8009350:	4610      	mov	r0, r2
 8009352:	4798      	blx	r3
 8009354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009356:	e05d      	b.n	8009414 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fa7e 	bl	800985c <USBD_CtlError>
            err++;
 8009360:	7afb      	ldrb	r3, [r7, #11]
 8009362:	3301      	adds	r3, #1
 8009364:	72fb      	strb	r3, [r7, #11]
          break;
 8009366:	e055      	b.n	8009414 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00b      	beq.n	800938c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	7c12      	ldrb	r2, [r2, #16]
 8009380:	f107 0108 	add.w	r1, r7, #8
 8009384:	4610      	mov	r0, r2
 8009386:	4798      	blx	r3
 8009388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800938a:	e043      	b.n	8009414 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fa64 	bl	800985c <USBD_CtlError>
            err++;
 8009394:	7afb      	ldrb	r3, [r7, #11]
 8009396:	3301      	adds	r3, #1
 8009398:	72fb      	strb	r3, [r7, #11]
          break;
 800939a:	e03b      	b.n	8009414 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00b      	beq.n	80093c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ae:	695b      	ldr	r3, [r3, #20]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	7c12      	ldrb	r2, [r2, #16]
 80093b4:	f107 0108 	add.w	r1, r7, #8
 80093b8:	4610      	mov	r0, r2
 80093ba:	4798      	blx	r3
 80093bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093be:	e029      	b.n	8009414 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fa4a 	bl	800985c <USBD_CtlError>
            err++;
 80093c8:	7afb      	ldrb	r3, [r7, #11]
 80093ca:	3301      	adds	r3, #1
 80093cc:	72fb      	strb	r3, [r7, #11]
          break;
 80093ce:	e021      	b.n	8009414 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00b      	beq.n	80093f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	7c12      	ldrb	r2, [r2, #16]
 80093e8:	f107 0108 	add.w	r1, r7, #8
 80093ec:	4610      	mov	r0, r2
 80093ee:	4798      	blx	r3
 80093f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093f2:	e00f      	b.n	8009414 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fa30 	bl	800985c <USBD_CtlError>
            err++;
 80093fc:	7afb      	ldrb	r3, [r7, #11]
 80093fe:	3301      	adds	r3, #1
 8009400:	72fb      	strb	r3, [r7, #11]
          break;
 8009402:	e007      	b.n	8009414 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fa28 	bl	800985c <USBD_CtlError>
          err++;
 800940c:	7afb      	ldrb	r3, [r7, #11]
 800940e:	3301      	adds	r3, #1
 8009410:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009412:	bf00      	nop
      }
      break;
 8009414:	e037      	b.n	8009486 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	7c1b      	ldrb	r3, [r3, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d109      	bne.n	8009432 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009426:	f107 0208 	add.w	r2, r7, #8
 800942a:	4610      	mov	r0, r2
 800942c:	4798      	blx	r3
 800942e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009430:	e029      	b.n	8009486 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fa11 	bl	800985c <USBD_CtlError>
        err++;
 800943a:	7afb      	ldrb	r3, [r7, #11]
 800943c:	3301      	adds	r3, #1
 800943e:	72fb      	strb	r3, [r7, #11]
      break;
 8009440:	e021      	b.n	8009486 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	7c1b      	ldrb	r3, [r3, #16]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10d      	bne.n	8009466 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009452:	f107 0208 	add.w	r2, r7, #8
 8009456:	4610      	mov	r0, r2
 8009458:	4798      	blx	r3
 800945a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	3301      	adds	r3, #1
 8009460:	2207      	movs	r2, #7
 8009462:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009464:	e00f      	b.n	8009486 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f9f7 	bl	800985c <USBD_CtlError>
        err++;
 800946e:	7afb      	ldrb	r3, [r7, #11]
 8009470:	3301      	adds	r3, #1
 8009472:	72fb      	strb	r3, [r7, #11]
      break;
 8009474:	e007      	b.n	8009486 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f9ef 	bl	800985c <USBD_CtlError>
      err++;
 800947e:	7afb      	ldrb	r3, [r7, #11]
 8009480:	3301      	adds	r3, #1
 8009482:	72fb      	strb	r3, [r7, #11]
      break;
 8009484:	bf00      	nop
  }

  if (err != 0U)
 8009486:	7afb      	ldrb	r3, [r7, #11]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d11e      	bne.n	80094ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	88db      	ldrh	r3, [r3, #6]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d016      	beq.n	80094c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009494:	893b      	ldrh	r3, [r7, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00e      	beq.n	80094b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	88da      	ldrh	r2, [r3, #6]
 800949e:	893b      	ldrh	r3, [r7, #8]
 80094a0:	4293      	cmp	r3, r2
 80094a2:	bf28      	it	cs
 80094a4:	4613      	movcs	r3, r2
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80094aa:	893b      	ldrh	r3, [r7, #8]
 80094ac:	461a      	mov	r2, r3
 80094ae:	68f9      	ldr	r1, [r7, #12]
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 fa44 	bl	800993e <USBD_CtlSendData>
 80094b6:	e009      	b.n	80094cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f9ce 	bl	800985c <USBD_CtlError>
 80094c0:	e004      	b.n	80094cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fa95 	bl	80099f2 <USBD_CtlSendStatus>
 80094c8:	e000      	b.n	80094cc <USBD_GetDescriptor+0x320>
    return;
 80094ca:	bf00      	nop
  }
}
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop

080094d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	889b      	ldrh	r3, [r3, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d131      	bne.n	800954a <USBD_SetAddress+0x76>
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	88db      	ldrh	r3, [r3, #6]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d12d      	bne.n	800954a <USBD_SetAddress+0x76>
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	885b      	ldrh	r3, [r3, #2]
 80094f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80094f4:	d829      	bhi.n	800954a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	885b      	ldrh	r3, [r3, #2]
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009500:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b03      	cmp	r3, #3
 800950c:	d104      	bne.n	8009518 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f9a3 	bl	800985c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009516:	e01d      	b.n	8009554 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	7bfa      	ldrb	r2, [r7, #15]
 800951c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f003 fc95 	bl	800ce54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fa61 	bl	80099f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d004      	beq.n	8009540 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2202      	movs	r2, #2
 800953a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953e:	e009      	b.n	8009554 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009548:	e004      	b.n	8009554 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f985 	bl	800985c <USBD_CtlError>
  }
}
 8009552:	bf00      	nop
 8009554:	bf00      	nop
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	885b      	ldrh	r3, [r3, #2]
 800956e:	b2da      	uxtb	r2, r3
 8009570:	4b4c      	ldr	r3, [pc, #304]	@ (80096a4 <USBD_SetConfig+0x148>)
 8009572:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009574:	4b4b      	ldr	r3, [pc, #300]	@ (80096a4 <USBD_SetConfig+0x148>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d905      	bls.n	8009588 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800957c:	6839      	ldr	r1, [r7, #0]
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f96c 	bl	800985c <USBD_CtlError>
    return USBD_FAIL;
 8009584:	2303      	movs	r3, #3
 8009586:	e088      	b.n	800969a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b02      	cmp	r3, #2
 8009592:	d002      	beq.n	800959a <USBD_SetConfig+0x3e>
 8009594:	2b03      	cmp	r3, #3
 8009596:	d025      	beq.n	80095e4 <USBD_SetConfig+0x88>
 8009598:	e071      	b.n	800967e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800959a:	4b42      	ldr	r3, [pc, #264]	@ (80096a4 <USBD_SetConfig+0x148>)
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d01c      	beq.n	80095dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80095a2:	4b40      	ldr	r3, [pc, #256]	@ (80096a4 <USBD_SetConfig+0x148>)
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	461a      	mov	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095ac:	4b3d      	ldr	r3, [pc, #244]	@ (80096a4 <USBD_SetConfig+0x148>)
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7ff f992 	bl	80088dc <USBD_SetClassConfig>
 80095b8:	4603      	mov	r3, r0
 80095ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d004      	beq.n	80095cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f949 	bl	800985c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095ca:	e065      	b.n	8009698 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fa10 	bl	80099f2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2203      	movs	r2, #3
 80095d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80095da:	e05d      	b.n	8009698 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fa08 	bl	80099f2 <USBD_CtlSendStatus>
      break;
 80095e2:	e059      	b.n	8009698 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095e4:	4b2f      	ldr	r3, [pc, #188]	@ (80096a4 <USBD_SetConfig+0x148>)
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d112      	bne.n	8009612 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2202      	movs	r2, #2
 80095f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80095f4:	4b2b      	ldr	r3, [pc, #172]	@ (80096a4 <USBD_SetConfig+0x148>)
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	461a      	mov	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095fe:	4b29      	ldr	r3, [pc, #164]	@ (80096a4 <USBD_SetConfig+0x148>)
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7ff f985 	bl	8008914 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f9f1 	bl	80099f2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009610:	e042      	b.n	8009698 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009612:	4b24      	ldr	r3, [pc, #144]	@ (80096a4 <USBD_SetConfig+0x148>)
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	429a      	cmp	r2, r3
 800961e:	d02a      	beq.n	8009676 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	b2db      	uxtb	r3, r3
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7ff f973 	bl	8008914 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800962e:	4b1d      	ldr	r3, [pc, #116]	@ (80096a4 <USBD_SetConfig+0x148>)
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009638:	4b1a      	ldr	r3, [pc, #104]	@ (80096a4 <USBD_SetConfig+0x148>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	4619      	mov	r1, r3
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7ff f94c 	bl	80088dc <USBD_SetClassConfig>
 8009644:	4603      	mov	r3, r0
 8009646:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00f      	beq.n	800966e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f903 	bl	800985c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	b2db      	uxtb	r3, r3
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7ff f958 	bl	8008914 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2202      	movs	r2, #2
 8009668:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800966c:	e014      	b.n	8009698 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f9bf 	bl	80099f2 <USBD_CtlSendStatus>
      break;
 8009674:	e010      	b.n	8009698 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f9bb 	bl	80099f2 <USBD_CtlSendStatus>
      break;
 800967c:	e00c      	b.n	8009698 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f8eb 	bl	800985c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009686:	4b07      	ldr	r3, [pc, #28]	@ (80096a4 <USBD_SetConfig+0x148>)
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7ff f941 	bl	8008914 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009692:	2303      	movs	r3, #3
 8009694:	73fb      	strb	r3, [r7, #15]
      break;
 8009696:	bf00      	nop
  }

  return ret;
 8009698:	7bfb      	ldrb	r3, [r7, #15]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20000520 	.word	0x20000520

080096a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	88db      	ldrh	r3, [r3, #6]
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d004      	beq.n	80096c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096ba:	6839      	ldr	r1, [r7, #0]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f8cd 	bl	800985c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096c2:	e023      	b.n	800970c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	dc02      	bgt.n	80096d6 <USBD_GetConfig+0x2e>
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	dc03      	bgt.n	80096dc <USBD_GetConfig+0x34>
 80096d4:	e015      	b.n	8009702 <USBD_GetConfig+0x5a>
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d00b      	beq.n	80096f2 <USBD_GetConfig+0x4a>
 80096da:	e012      	b.n	8009702 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3308      	adds	r3, #8
 80096e6:	2201      	movs	r2, #1
 80096e8:	4619      	mov	r1, r3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f927 	bl	800993e <USBD_CtlSendData>
        break;
 80096f0:	e00c      	b.n	800970c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3304      	adds	r3, #4
 80096f6:	2201      	movs	r2, #1
 80096f8:	4619      	mov	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f91f 	bl	800993e <USBD_CtlSendData>
        break;
 8009700:	e004      	b.n	800970c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f8a9 	bl	800985c <USBD_CtlError>
        break;
 800970a:	bf00      	nop
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009724:	b2db      	uxtb	r3, r3
 8009726:	3b01      	subs	r3, #1
 8009728:	2b02      	cmp	r3, #2
 800972a:	d81e      	bhi.n	800976a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	88db      	ldrh	r3, [r3, #6]
 8009730:	2b02      	cmp	r3, #2
 8009732:	d004      	beq.n	800973e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f890 	bl	800985c <USBD_CtlError>
        break;
 800973c:	e01a      	b.n	8009774 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800974a:	2b00      	cmp	r3, #0
 800974c:	d005      	beq.n	800975a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f043 0202 	orr.w	r2, r3, #2
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	330c      	adds	r3, #12
 800975e:	2202      	movs	r2, #2
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f8eb 	bl	800993e <USBD_CtlSendData>
      break;
 8009768:	e004      	b.n	8009774 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800976a:	6839      	ldr	r1, [r7, #0]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f875 	bl	800985c <USBD_CtlError>
      break;
 8009772:	bf00      	nop
  }
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	885b      	ldrh	r3, [r3, #2]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d106      	bne.n	800979c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f92b 	bl	80099f2 <USBD_CtlSendStatus>
  }
}
 800979c:	bf00      	nop
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	3b01      	subs	r3, #1
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d80b      	bhi.n	80097d4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	885b      	ldrh	r3, [r3, #2]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d10c      	bne.n	80097de <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 f910 	bl	80099f2 <USBD_CtlSendStatus>
      }
      break;
 80097d2:	e004      	b.n	80097de <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f840 	bl	800985c <USBD_CtlError>
      break;
 80097dc:	e000      	b.n	80097e0 <USBD_ClrFeature+0x3c>
      break;
 80097de:	bf00      	nop
  }
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	781a      	ldrb	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3301      	adds	r3, #1
 8009802:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	781a      	ldrb	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	3301      	adds	r3, #1
 8009810:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f7ff fa92 	bl	8008d3c <SWAPBYTE>
 8009818:	4603      	mov	r3, r0
 800981a:	461a      	mov	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	3301      	adds	r3, #1
 8009824:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3301      	adds	r3, #1
 800982a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f7ff fa85 	bl	8008d3c <SWAPBYTE>
 8009832:	4603      	mov	r3, r0
 8009834:	461a      	mov	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3301      	adds	r3, #1
 800983e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	3301      	adds	r3, #1
 8009844:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f7ff fa78 	bl	8008d3c <SWAPBYTE>
 800984c:	4603      	mov	r3, r0
 800984e:	461a      	mov	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	80da      	strh	r2, [r3, #6]
}
 8009854:	bf00      	nop
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009866:	2180      	movs	r1, #128	@ 0x80
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f003 fa89 	bl	800cd80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800986e:	2100      	movs	r1, #0
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f003 fa85 	bl	800cd80 <USBD_LL_StallEP>
}
 8009876:	bf00      	nop
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b086      	sub	sp, #24
 8009882:	af00      	add	r7, sp, #0
 8009884:	60f8      	str	r0, [r7, #12]
 8009886:	60b9      	str	r1, [r7, #8]
 8009888:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800988a:	2300      	movs	r3, #0
 800988c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d036      	beq.n	8009902 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009898:	6938      	ldr	r0, [r7, #16]
 800989a:	f000 f836 	bl	800990a <USBD_GetLen>
 800989e:	4603      	mov	r3, r0
 80098a0:	3301      	adds	r3, #1
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098ac:	7dfb      	ldrb	r3, [r7, #23]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	4413      	add	r3, r2
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	7812      	ldrb	r2, [r2, #0]
 80098b6:	701a      	strb	r2, [r3, #0]
  idx++;
 80098b8:	7dfb      	ldrb	r3, [r7, #23]
 80098ba:	3301      	adds	r3, #1
 80098bc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	4413      	add	r3, r2
 80098c4:	2203      	movs	r2, #3
 80098c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80098c8:	7dfb      	ldrb	r3, [r7, #23]
 80098ca:	3301      	adds	r3, #1
 80098cc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80098ce:	e013      	b.n	80098f8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	4413      	add	r3, r2
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	7812      	ldrb	r2, [r2, #0]
 80098da:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	3301      	adds	r3, #1
 80098e0:	613b      	str	r3, [r7, #16]
    idx++;
 80098e2:	7dfb      	ldrb	r3, [r7, #23]
 80098e4:	3301      	adds	r3, #1
 80098e6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80098e8:	7dfb      	ldrb	r3, [r7, #23]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	4413      	add	r3, r2
 80098ee:	2200      	movs	r2, #0
 80098f0:	701a      	strb	r2, [r3, #0]
    idx++;
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	3301      	adds	r3, #1
 80098f6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e7      	bne.n	80098d0 <USBD_GetString+0x52>
 8009900:	e000      	b.n	8009904 <USBD_GetString+0x86>
    return;
 8009902:	bf00      	nop
  }
}
 8009904:	3718      	adds	r7, #24
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800990a:	b480      	push	{r7}
 800990c:	b085      	sub	sp, #20
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009912:	2300      	movs	r3, #0
 8009914:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800991a:	e005      	b.n	8009928 <USBD_GetLen+0x1e>
  {
    len++;
 800991c:	7bfb      	ldrb	r3, [r7, #15]
 800991e:	3301      	adds	r3, #1
 8009920:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	3301      	adds	r3, #1
 8009926:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1f5      	bne.n	800991c <USBD_GetLen+0x12>
  }

  return len;
 8009930:	7bfb      	ldrb	r3, [r7, #15]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	60f8      	str	r0, [r7, #12]
 8009946:	60b9      	str	r1, [r7, #8]
 8009948:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2202      	movs	r2, #2
 800994e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68ba      	ldr	r2, [r7, #8]
 8009962:	2100      	movs	r1, #0
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f003 fa94 	bl	800ce92 <USBD_LL_Transmit>

  return USBD_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	68ba      	ldr	r2, [r7, #8]
 8009984:	2100      	movs	r1, #0
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f003 fa83 	bl	800ce92 <USBD_LL_Transmit>

  return USBD_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b084      	sub	sp, #16
 800999a:	af00      	add	r7, sp, #0
 800999c:	60f8      	str	r0, [r7, #12]
 800999e:	60b9      	str	r1, [r7, #8]
 80099a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2203      	movs	r2, #3
 80099a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	2100      	movs	r1, #0
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f003 fa87 	bl	800ced4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	2100      	movs	r1, #0
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f003 fa76 	bl	800ced4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b082      	sub	sp, #8
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2204      	movs	r2, #4
 80099fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a02:	2300      	movs	r3, #0
 8009a04:	2200      	movs	r2, #0
 8009a06:	2100      	movs	r1, #0
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f003 fa42 	bl	800ce92 <USBD_LL_Transmit>

  return USBD_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2205      	movs	r2, #5
 8009a24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f003 fa50 	bl	800ced4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <__NVIC_SetPriority>:
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	4603      	mov	r3, r0
 8009a48:	6039      	str	r1, [r7, #0]
 8009a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	db0a      	blt.n	8009a6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	b2da      	uxtb	r2, r3
 8009a58:	490c      	ldr	r1, [pc, #48]	@ (8009a8c <__NVIC_SetPriority+0x4c>)
 8009a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a5e:	0112      	lsls	r2, r2, #4
 8009a60:	b2d2      	uxtb	r2, r2
 8009a62:	440b      	add	r3, r1
 8009a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009a68:	e00a      	b.n	8009a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	b2da      	uxtb	r2, r3
 8009a6e:	4908      	ldr	r1, [pc, #32]	@ (8009a90 <__NVIC_SetPriority+0x50>)
 8009a70:	79fb      	ldrb	r3, [r7, #7]
 8009a72:	f003 030f 	and.w	r3, r3, #15
 8009a76:	3b04      	subs	r3, #4
 8009a78:	0112      	lsls	r2, r2, #4
 8009a7a:	b2d2      	uxtb	r2, r2
 8009a7c:	440b      	add	r3, r1
 8009a7e:	761a      	strb	r2, [r3, #24]
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	e000e100 	.word	0xe000e100
 8009a90:	e000ed00 	.word	0xe000ed00

08009a94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a94:	b580      	push	{r7, lr}
 8009a96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a98:	4b05      	ldr	r3, [pc, #20]	@ (8009ab0 <SysTick_Handler+0x1c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a9c:	f001 fd46 	bl	800b52c <xTaskGetSchedulerState>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d001      	beq.n	8009aaa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009aa6:	f002 fb3f 	bl	800c128 <xPortSysTickHandler>
  }
}
 8009aaa:	bf00      	nop
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	e000e010 	.word	0xe000e010

08009ab4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009ab8:	2100      	movs	r1, #0
 8009aba:	f06f 0004 	mvn.w	r0, #4
 8009abe:	f7ff ffbf 	bl	8009a40 <__NVIC_SetPriority>
#endif
}
 8009ac2:	bf00      	nop
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ace:	f3ef 8305 	mrs	r3, IPSR
 8009ad2:	603b      	str	r3, [r7, #0]
  return(result);
 8009ad4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009ada:	f06f 0305 	mvn.w	r3, #5
 8009ade:	607b      	str	r3, [r7, #4]
 8009ae0:	e00c      	b.n	8009afc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8009b0c <osKernelInitialize+0x44>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d105      	bne.n	8009af6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009aea:	4b08      	ldr	r3, [pc, #32]	@ (8009b0c <osKernelInitialize+0x44>)
 8009aec:	2201      	movs	r2, #1
 8009aee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009af0:	2300      	movs	r3, #0
 8009af2:	607b      	str	r3, [r7, #4]
 8009af4:	e002      	b.n	8009afc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009af6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009afa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009afc:	687b      	ldr	r3, [r7, #4]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	20000524 	.word	0x20000524

08009b10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b16:	f3ef 8305 	mrs	r3, IPSR
 8009b1a:	603b      	str	r3, [r7, #0]
  return(result);
 8009b1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d003      	beq.n	8009b2a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009b22:	f06f 0305 	mvn.w	r3, #5
 8009b26:	607b      	str	r3, [r7, #4]
 8009b28:	e010      	b.n	8009b4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8009b58 <osKernelStart+0x48>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d109      	bne.n	8009b46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b32:	f7ff ffbf 	bl	8009ab4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b36:	4b08      	ldr	r3, [pc, #32]	@ (8009b58 <osKernelStart+0x48>)
 8009b38:	2202      	movs	r2, #2
 8009b3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b3c:	f001 f892 	bl	800ac64 <vTaskStartScheduler>
      stat = osOK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	607b      	str	r3, [r7, #4]
 8009b44:	e002      	b.n	8009b4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009b4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b4c:	687b      	ldr	r3, [r7, #4]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20000524 	.word	0x20000524

08009b5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b08e      	sub	sp, #56	@ 0x38
 8009b60:	af04      	add	r7, sp, #16
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b6c:	f3ef 8305 	mrs	r3, IPSR
 8009b70:	617b      	str	r3, [r7, #20]
  return(result);
 8009b72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d17e      	bne.n	8009c76 <osThreadNew+0x11a>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d07b      	beq.n	8009c76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009b7e:	2380      	movs	r3, #128	@ 0x80
 8009b80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009b82:	2318      	movs	r3, #24
 8009b84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009b8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009b8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d045      	beq.n	8009c22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d002      	beq.n	8009ba4 <osThreadNew+0x48>
        name = attr->name;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d008      	beq.n	8009bca <osThreadNew+0x6e>
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	2b38      	cmp	r3, #56	@ 0x38
 8009bbc:	d805      	bhi.n	8009bca <osThreadNew+0x6e>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <osThreadNew+0x72>
        return (NULL);
 8009bca:	2300      	movs	r3, #0
 8009bcc:	e054      	b.n	8009c78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	695b      	ldr	r3, [r3, #20]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	089b      	lsrs	r3, r3, #2
 8009bdc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00e      	beq.n	8009c04 <osThreadNew+0xa8>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	2ba7      	cmp	r3, #167	@ 0xa7
 8009bec:	d90a      	bls.n	8009c04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d006      	beq.n	8009c04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d002      	beq.n	8009c04 <osThreadNew+0xa8>
        mem = 1;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	61bb      	str	r3, [r7, #24]
 8009c02:	e010      	b.n	8009c26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10c      	bne.n	8009c26 <osThreadNew+0xca>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d108      	bne.n	8009c26 <osThreadNew+0xca>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d104      	bne.n	8009c26 <osThreadNew+0xca>
          mem = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	61bb      	str	r3, [r7, #24]
 8009c20:	e001      	b.n	8009c26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009c22:	2300      	movs	r3, #0
 8009c24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d110      	bne.n	8009c4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c34:	9202      	str	r2, [sp, #8]
 8009c36:	9301      	str	r3, [sp, #4]
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	6a3a      	ldr	r2, [r7, #32]
 8009c40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f000 fe1a 	bl	800a87c <xTaskCreateStatic>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	613b      	str	r3, [r7, #16]
 8009c4c:	e013      	b.n	8009c76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d110      	bne.n	8009c76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	f107 0310 	add.w	r3, r7, #16
 8009c5c:	9301      	str	r3, [sp, #4]
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 fe68 	bl	800a93c <xTaskCreate>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d001      	beq.n	8009c76 <osThreadNew+0x11a>
            hTask = NULL;
 8009c72:	2300      	movs	r3, #0
 8009c74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c76:	693b      	ldr	r3, [r7, #16]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3728      	adds	r7, #40	@ 0x28
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c88:	f3ef 8305 	mrs	r3, IPSR
 8009c8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d003      	beq.n	8009c9c <osDelay+0x1c>
    stat = osErrorISR;
 8009c94:	f06f 0305 	mvn.w	r3, #5
 8009c98:	60fb      	str	r3, [r7, #12]
 8009c9a:	e007      	b.n	8009cac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <osDelay+0x2c>
      vTaskDelay(ticks);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 ffa6 	bl	800abf8 <vTaskDelay>
    }
  }

  return (stat);
 8009cac:	68fb      	ldr	r3, [r7, #12]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
	...

08009cb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	4a07      	ldr	r2, [pc, #28]	@ (8009ce4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009cc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	4a06      	ldr	r2, [pc, #24]	@ (8009ce8 <vApplicationGetIdleTaskMemory+0x30>)
 8009cce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2280      	movs	r2, #128	@ 0x80
 8009cd4:	601a      	str	r2, [r3, #0]
}
 8009cd6:	bf00      	nop
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	20000528 	.word	0x20000528
 8009ce8:	200005d0 	.word	0x200005d0

08009cec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	4a07      	ldr	r2, [pc, #28]	@ (8009d18 <vApplicationGetTimerTaskMemory+0x2c>)
 8009cfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	4a06      	ldr	r2, [pc, #24]	@ (8009d1c <vApplicationGetTimerTaskMemory+0x30>)
 8009d02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d0a:	601a      	str	r2, [r3, #0]
}
 8009d0c:	bf00      	nop
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	200007d0 	.word	0x200007d0
 8009d1c:	20000878 	.word	0x20000878

08009d20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f103 0208 	add.w	r2, r3, #8
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f103 0208 	add.w	r2, r3, #8
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f103 0208 	add.w	r2, r3, #8
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d6e:	bf00      	nop
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b085      	sub	sp, #20
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	689a      	ldr	r2, [r3, #8]
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	601a      	str	r2, [r3, #0]
}
 8009db6:	bf00      	nop
 8009db8:	3714      	adds	r7, #20
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b085      	sub	sp, #20
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009dd8:	d103      	bne.n	8009de2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	e00c      	b.n	8009dfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	3308      	adds	r3, #8
 8009de6:	60fb      	str	r3, [r7, #12]
 8009de8:	e002      	b.n	8009df0 <vListInsert+0x2e>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	60fb      	str	r3, [r7, #12]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d2f6      	bcs.n	8009dea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	685a      	ldr	r2, [r3, #4]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	1c5a      	adds	r2, r3, #1
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	601a      	str	r2, [r3, #0]
}
 8009e28:	bf00      	nop
 8009e2a:	3714      	adds	r7, #20
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	6892      	ldr	r2, [r2, #8]
 8009e4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	6852      	ldr	r2, [r2, #4]
 8009e54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d103      	bne.n	8009e68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	689a      	ldr	r2, [r3, #8]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	1e5a      	subs	r2, r3, #1
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3714      	adds	r7, #20
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10b      	bne.n	8009eb4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009eae:	bf00      	nop
 8009eb0:	bf00      	nop
 8009eb2:	e7fd      	b.n	8009eb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009eb4:	f002 f8a8 	bl	800c008 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec0:	68f9      	ldr	r1, [r7, #12]
 8009ec2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009ec4:	fb01 f303 	mul.w	r3, r1, r3
 8009ec8:	441a      	add	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	68f9      	ldr	r1, [r7, #12]
 8009ee8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009eea:	fb01 f303 	mul.w	r3, r1, r3
 8009eee:	441a      	add	r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	22ff      	movs	r2, #255	@ 0xff
 8009ef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	22ff      	movs	r2, #255	@ 0xff
 8009f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d114      	bne.n	8009f34 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d01a      	beq.n	8009f48 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3310      	adds	r3, #16
 8009f16:	4618      	mov	r0, r3
 8009f18:	f001 f942 	bl	800b1a0 <xTaskRemoveFromEventList>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d012      	beq.n	8009f48 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f22:	4b0d      	ldr	r3, [pc, #52]	@ (8009f58 <xQueueGenericReset+0xd0>)
 8009f24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	e009      	b.n	8009f48 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3310      	adds	r3, #16
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7ff fef1 	bl	8009d20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	3324      	adds	r3, #36	@ 0x24
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7ff feec 	bl	8009d20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f48:	f002 f890 	bl	800c06c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f4c:	2301      	movs	r3, #1
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	e000ed04 	.word	0xe000ed04

08009f5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08e      	sub	sp, #56	@ 0x38
 8009f60:	af02      	add	r7, sp, #8
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d10b      	bne.n	8009f88 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f82:	bf00      	nop
 8009f84:	bf00      	nop
 8009f86:	e7fd      	b.n	8009f84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10b      	bne.n	8009fa6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009fa0:	bf00      	nop
 8009fa2:	bf00      	nop
 8009fa4:	e7fd      	b.n	8009fa2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <xQueueGenericCreateStatic+0x56>
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <xQueueGenericCreateStatic+0x5a>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e000      	b.n	8009fb8 <xQueueGenericCreateStatic+0x5c>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10b      	bne.n	8009fd4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	623b      	str	r3, [r7, #32]
}
 8009fce:	bf00      	nop
 8009fd0:	bf00      	nop
 8009fd2:	e7fd      	b.n	8009fd0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d102      	bne.n	8009fe0 <xQueueGenericCreateStatic+0x84>
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d101      	bne.n	8009fe4 <xQueueGenericCreateStatic+0x88>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e000      	b.n	8009fe6 <xQueueGenericCreateStatic+0x8a>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10b      	bne.n	800a002 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	61fb      	str	r3, [r7, #28]
}
 8009ffc:	bf00      	nop
 8009ffe:	bf00      	nop
 800a000:	e7fd      	b.n	8009ffe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a002:	2350      	movs	r3, #80	@ 0x50
 800a004:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2b50      	cmp	r3, #80	@ 0x50
 800a00a:	d00b      	beq.n	800a024 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	61bb      	str	r3, [r7, #24]
}
 800a01e:	bf00      	nop
 800a020:	bf00      	nop
 800a022:	e7fd      	b.n	800a020 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a024:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a02a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00d      	beq.n	800a04c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a032:	2201      	movs	r2, #1
 800a034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a038:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	4613      	mov	r3, r2
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	68b9      	ldr	r1, [r7, #8]
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f000 f805 	bl	800a056 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a04e:	4618      	mov	r0, r3
 800a050:	3730      	adds	r7, #48	@ 0x30
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	60f8      	str	r0, [r7, #12]
 800a05e:	60b9      	str	r1, [r7, #8]
 800a060:	607a      	str	r2, [r7, #4]
 800a062:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d103      	bne.n	800a072 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	69ba      	ldr	r2, [r7, #24]
 800a06e:	601a      	str	r2, [r3, #0]
 800a070:	e002      	b.n	800a078 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a084:	2101      	movs	r1, #1
 800a086:	69b8      	ldr	r0, [r7, #24]
 800a088:	f7ff fefe 	bl	8009e88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	78fa      	ldrb	r2, [r7, #3]
 800a090:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a094:	bf00      	nop
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b08e      	sub	sp, #56	@ 0x38
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
 800a0a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10b      	bne.n	800a0d0 <xQueueGenericSend+0x34>
	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a0ca:	bf00      	nop
 800a0cc:	bf00      	nop
 800a0ce:	e7fd      	b.n	800a0cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d103      	bne.n	800a0de <xQueueGenericSend+0x42>
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <xQueueGenericSend+0x46>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e000      	b.n	800a0e4 <xQueueGenericSend+0x48>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10b      	bne.n	800a100 <xQueueGenericSend+0x64>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a0fa:	bf00      	nop
 800a0fc:	bf00      	nop
 800a0fe:	e7fd      	b.n	800a0fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	2b02      	cmp	r3, #2
 800a104:	d103      	bne.n	800a10e <xQueueGenericSend+0x72>
 800a106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d101      	bne.n	800a112 <xQueueGenericSend+0x76>
 800a10e:	2301      	movs	r3, #1
 800a110:	e000      	b.n	800a114 <xQueueGenericSend+0x78>
 800a112:	2300      	movs	r3, #0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10b      	bne.n	800a130 <xQueueGenericSend+0x94>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	623b      	str	r3, [r7, #32]
}
 800a12a:	bf00      	nop
 800a12c:	bf00      	nop
 800a12e:	e7fd      	b.n	800a12c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a130:	f001 f9fc 	bl	800b52c <xTaskGetSchedulerState>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d102      	bne.n	800a140 <xQueueGenericSend+0xa4>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d101      	bne.n	800a144 <xQueueGenericSend+0xa8>
 800a140:	2301      	movs	r3, #1
 800a142:	e000      	b.n	800a146 <xQueueGenericSend+0xaa>
 800a144:	2300      	movs	r3, #0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10b      	bne.n	800a162 <xQueueGenericSend+0xc6>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	61fb      	str	r3, [r7, #28]
}
 800a15c:	bf00      	nop
 800a15e:	bf00      	nop
 800a160:	e7fd      	b.n	800a15e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a162:	f001 ff51 	bl	800c008 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a168:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a16e:	429a      	cmp	r2, r3
 800a170:	d302      	bcc.n	800a178 <xQueueGenericSend+0xdc>
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b02      	cmp	r3, #2
 800a176:	d129      	bne.n	800a1cc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	68b9      	ldr	r1, [r7, #8]
 800a17c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a17e:	f000 fa0f 	bl	800a5a0 <prvCopyDataToQueue>
 800a182:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d010      	beq.n	800a1ae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18e:	3324      	adds	r3, #36	@ 0x24
 800a190:	4618      	mov	r0, r3
 800a192:	f001 f805 	bl	800b1a0 <xTaskRemoveFromEventList>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d013      	beq.n	800a1c4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a19c:	4b3f      	ldr	r3, [pc, #252]	@ (800a29c <xQueueGenericSend+0x200>)
 800a19e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	f3bf 8f6f 	isb	sy
 800a1ac:	e00a      	b.n	800a1c4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d007      	beq.n	800a1c4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a1b4:	4b39      	ldr	r3, [pc, #228]	@ (800a29c <xQueueGenericSend+0x200>)
 800a1b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a1c4:	f001 ff52 	bl	800c06c <vPortExitCritical>
				return pdPASS;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e063      	b.n	800a294 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d103      	bne.n	800a1da <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1d2:	f001 ff4b 	bl	800c06c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	e05c      	b.n	800a294 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d106      	bne.n	800a1ee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1e0:	f107 0314 	add.w	r3, r7, #20
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f001 f83f 	bl	800b268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1ee:	f001 ff3d 	bl	800c06c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1f2:	f000 fda7 	bl	800ad44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1f6:	f001 ff07 	bl	800c008 <vPortEnterCritical>
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a200:	b25b      	sxtb	r3, r3
 800a202:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a206:	d103      	bne.n	800a210 <xQueueGenericSend+0x174>
 800a208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20a:	2200      	movs	r2, #0
 800a20c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a212:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a216:	b25b      	sxtb	r3, r3
 800a218:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a21c:	d103      	bne.n	800a226 <xQueueGenericSend+0x18a>
 800a21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a220:	2200      	movs	r2, #0
 800a222:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a226:	f001 ff21 	bl	800c06c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a22a:	1d3a      	adds	r2, r7, #4
 800a22c:	f107 0314 	add.w	r3, r7, #20
 800a230:	4611      	mov	r1, r2
 800a232:	4618      	mov	r0, r3
 800a234:	f001 f82e 	bl	800b294 <xTaskCheckForTimeOut>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d124      	bne.n	800a288 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a23e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a240:	f000 faa6 	bl	800a790 <prvIsQueueFull>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d018      	beq.n	800a27c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24c:	3310      	adds	r3, #16
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	4611      	mov	r1, r2
 800a252:	4618      	mov	r0, r3
 800a254:	f000 ff52 	bl	800b0fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a258:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a25a:	f000 fa31 	bl	800a6c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a25e:	f000 fd7f 	bl	800ad60 <xTaskResumeAll>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	f47f af7c 	bne.w	800a162 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a26a:	4b0c      	ldr	r3, [pc, #48]	@ (800a29c <xQueueGenericSend+0x200>)
 800a26c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a270:	601a      	str	r2, [r3, #0]
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	e772      	b.n	800a162 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a27c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a27e:	f000 fa1f 	bl	800a6c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a282:	f000 fd6d 	bl	800ad60 <xTaskResumeAll>
 800a286:	e76c      	b.n	800a162 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a288:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a28a:	f000 fa19 	bl	800a6c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a28e:	f000 fd67 	bl	800ad60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a292:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a294:	4618      	mov	r0, r3
 800a296:	3738      	adds	r7, #56	@ 0x38
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	e000ed04 	.word	0xe000ed04

0800a2a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b090      	sub	sp, #64	@ 0x40
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	607a      	str	r2, [r7, #4]
 800a2ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10b      	bne.n	800a2d0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2bc:	f383 8811 	msr	BASEPRI, r3
 800a2c0:	f3bf 8f6f 	isb	sy
 800a2c4:	f3bf 8f4f 	dsb	sy
 800a2c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a2ca:	bf00      	nop
 800a2cc:	bf00      	nop
 800a2ce:	e7fd      	b.n	800a2cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d103      	bne.n	800a2de <xQueueGenericSendFromISR+0x3e>
 800a2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d101      	bne.n	800a2e2 <xQueueGenericSendFromISR+0x42>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e000      	b.n	800a2e4 <xQueueGenericSendFromISR+0x44>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10b      	bne.n	800a300 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ec:	f383 8811 	msr	BASEPRI, r3
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a2fa:	bf00      	nop
 800a2fc:	bf00      	nop
 800a2fe:	e7fd      	b.n	800a2fc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	2b02      	cmp	r3, #2
 800a304:	d103      	bne.n	800a30e <xQueueGenericSendFromISR+0x6e>
 800a306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d101      	bne.n	800a312 <xQueueGenericSendFromISR+0x72>
 800a30e:	2301      	movs	r3, #1
 800a310:	e000      	b.n	800a314 <xQueueGenericSendFromISR+0x74>
 800a312:	2300      	movs	r3, #0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10b      	bne.n	800a330 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	623b      	str	r3, [r7, #32]
}
 800a32a:	bf00      	nop
 800a32c:	bf00      	nop
 800a32e:	e7fd      	b.n	800a32c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a330:	f001 ff4a 	bl	800c1c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a334:	f3ef 8211 	mrs	r2, BASEPRI
 800a338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	61fa      	str	r2, [r7, #28]
 800a34a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a34c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a34e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a352:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a358:	429a      	cmp	r2, r3
 800a35a:	d302      	bcc.n	800a362 <xQueueGenericSendFromISR+0xc2>
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d12f      	bne.n	800a3c2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a364:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a368:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a370:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	68b9      	ldr	r1, [r7, #8]
 800a376:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a378:	f000 f912 	bl	800a5a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a37c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a380:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a384:	d112      	bne.n	800a3ac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d016      	beq.n	800a3bc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a390:	3324      	adds	r3, #36	@ 0x24
 800a392:	4618      	mov	r0, r3
 800a394:	f000 ff04 	bl	800b1a0 <xTaskRemoveFromEventList>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00e      	beq.n	800a3bc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00b      	beq.n	800a3bc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	601a      	str	r2, [r3, #0]
 800a3aa:	e007      	b.n	800a3bc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	b25a      	sxtb	r2, r3
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a3c0:	e001      	b.n	800a3c6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a3d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3740      	adds	r7, #64	@ 0x40
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b08c      	sub	sp, #48	@ 0x30
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10b      	bne.n	800a40e <xQueueReceive+0x32>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	623b      	str	r3, [r7, #32]
}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	e7fd      	b.n	800a40a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d103      	bne.n	800a41c <xQueueReceive+0x40>
 800a414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d101      	bne.n	800a420 <xQueueReceive+0x44>
 800a41c:	2301      	movs	r3, #1
 800a41e:	e000      	b.n	800a422 <xQueueReceive+0x46>
 800a420:	2300      	movs	r3, #0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10b      	bne.n	800a43e <xQueueReceive+0x62>
	__asm volatile
 800a426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a42a:	f383 8811 	msr	BASEPRI, r3
 800a42e:	f3bf 8f6f 	isb	sy
 800a432:	f3bf 8f4f 	dsb	sy
 800a436:	61fb      	str	r3, [r7, #28]
}
 800a438:	bf00      	nop
 800a43a:	bf00      	nop
 800a43c:	e7fd      	b.n	800a43a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a43e:	f001 f875 	bl	800b52c <xTaskGetSchedulerState>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d102      	bne.n	800a44e <xQueueReceive+0x72>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d101      	bne.n	800a452 <xQueueReceive+0x76>
 800a44e:	2301      	movs	r3, #1
 800a450:	e000      	b.n	800a454 <xQueueReceive+0x78>
 800a452:	2300      	movs	r3, #0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10b      	bne.n	800a470 <xQueueReceive+0x94>
	__asm volatile
 800a458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	61bb      	str	r3, [r7, #24]
}
 800a46a:	bf00      	nop
 800a46c:	bf00      	nop
 800a46e:	e7fd      	b.n	800a46c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a470:	f001 fdca 	bl	800c008 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a478:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d01f      	beq.n	800a4c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a480:	68b9      	ldr	r1, [r7, #8]
 800a482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a484:	f000 f8f6 	bl	800a674 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48a:	1e5a      	subs	r2, r3, #1
 800a48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00f      	beq.n	800a4b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a49a:	3310      	adds	r3, #16
 800a49c:	4618      	mov	r0, r3
 800a49e:	f000 fe7f 	bl	800b1a0 <xTaskRemoveFromEventList>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d007      	beq.n	800a4b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4a8:	4b3c      	ldr	r3, [pc, #240]	@ (800a59c <xQueueReceive+0x1c0>)
 800a4aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4ae:	601a      	str	r2, [r3, #0]
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4b8:	f001 fdd8 	bl	800c06c <vPortExitCritical>
				return pdPASS;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e069      	b.n	800a594 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d103      	bne.n	800a4ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4c6:	f001 fdd1 	bl	800c06c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	e062      	b.n	800a594 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d106      	bne.n	800a4e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4d4:	f107 0310 	add.w	r3, r7, #16
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 fec5 	bl	800b268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4e2:	f001 fdc3 	bl	800c06c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4e6:	f000 fc2d 	bl	800ad44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4ea:	f001 fd8d 	bl	800c008 <vPortEnterCritical>
 800a4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4f4:	b25b      	sxtb	r3, r3
 800a4f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4fa:	d103      	bne.n	800a504 <xQueueReceive+0x128>
 800a4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a506:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a50a:	b25b      	sxtb	r3, r3
 800a50c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a510:	d103      	bne.n	800a51a <xQueueReceive+0x13e>
 800a512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a514:	2200      	movs	r2, #0
 800a516:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a51a:	f001 fda7 	bl	800c06c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a51e:	1d3a      	adds	r2, r7, #4
 800a520:	f107 0310 	add.w	r3, r7, #16
 800a524:	4611      	mov	r1, r2
 800a526:	4618      	mov	r0, r3
 800a528:	f000 feb4 	bl	800b294 <xTaskCheckForTimeOut>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d123      	bne.n	800a57a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a534:	f000 f916 	bl	800a764 <prvIsQueueEmpty>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d017      	beq.n	800a56e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a540:	3324      	adds	r3, #36	@ 0x24
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	4611      	mov	r1, r2
 800a546:	4618      	mov	r0, r3
 800a548:	f000 fdd8 	bl	800b0fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a54c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a54e:	f000 f8b7 	bl	800a6c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a552:	f000 fc05 	bl	800ad60 <xTaskResumeAll>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d189      	bne.n	800a470 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a55c:	4b0f      	ldr	r3, [pc, #60]	@ (800a59c <xQueueReceive+0x1c0>)
 800a55e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a562:	601a      	str	r2, [r3, #0]
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	e780      	b.n	800a470 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a56e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a570:	f000 f8a6 	bl	800a6c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a574:	f000 fbf4 	bl	800ad60 <xTaskResumeAll>
 800a578:	e77a      	b.n	800a470 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a57a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a57c:	f000 f8a0 	bl	800a6c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a580:	f000 fbee 	bl	800ad60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a584:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a586:	f000 f8ed 	bl	800a764 <prvIsQueueEmpty>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f43f af6f 	beq.w	800a470 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a592:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a594:	4618      	mov	r0, r3
 800a596:	3730      	adds	r7, #48	@ 0x30
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	e000ed04 	.word	0xe000ed04

0800a5a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10d      	bne.n	800a5da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d14d      	bne.n	800a662 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f000 ffcc 	bl	800b568 <xTaskPriorityDisinherit>
 800a5d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	609a      	str	r2, [r3, #8]
 800a5d8:	e043      	b.n	800a662 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d119      	bne.n	800a614 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6858      	ldr	r0, [r3, #4]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	68b9      	ldr	r1, [r7, #8]
 800a5ec:	f003 fb09 	bl	800dc02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	685a      	ldr	r2, [r3, #4]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5f8:	441a      	add	r2, r3
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	685a      	ldr	r2, [r3, #4]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	429a      	cmp	r2, r3
 800a608:	d32b      	bcc.n	800a662 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	605a      	str	r2, [r3, #4]
 800a612:	e026      	b.n	800a662 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	68d8      	ldr	r0, [r3, #12]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a61c:	461a      	mov	r2, r3
 800a61e:	68b9      	ldr	r1, [r7, #8]
 800a620:	f003 faef 	bl	800dc02 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	68da      	ldr	r2, [r3, #12]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a62c:	425b      	negs	r3, r3
 800a62e:	441a      	add	r2, r3
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	68da      	ldr	r2, [r3, #12]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d207      	bcs.n	800a650 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	689a      	ldr	r2, [r3, #8]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a648:	425b      	negs	r3, r3
 800a64a:	441a      	add	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2b02      	cmp	r3, #2
 800a654:	d105      	bne.n	800a662 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	3b01      	subs	r3, #1
 800a660:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	1c5a      	adds	r2, r3, #1
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a66a:	697b      	ldr	r3, [r7, #20]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3718      	adds	r7, #24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a682:	2b00      	cmp	r3, #0
 800a684:	d018      	beq.n	800a6b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68da      	ldr	r2, [r3, #12]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a68e:	441a      	add	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	68da      	ldr	r2, [r3, #12]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d303      	bcc.n	800a6a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68d9      	ldr	r1, [r3, #12]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	6838      	ldr	r0, [r7, #0]
 800a6b4:	f003 faa5 	bl	800dc02 <memcpy>
	}
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a6c8:	f001 fc9e 	bl	800c008 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6d4:	e011      	b.n	800a6fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d012      	beq.n	800a704 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	3324      	adds	r3, #36	@ 0x24
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f000 fd5c 	bl	800b1a0 <xTaskRemoveFromEventList>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d001      	beq.n	800a6f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a6ee:	f000 fe35 	bl	800b35c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	dce9      	bgt.n	800a6d6 <prvUnlockQueue+0x16>
 800a702:	e000      	b.n	800a706 <prvUnlockQueue+0x46>
					break;
 800a704:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	22ff      	movs	r2, #255	@ 0xff
 800a70a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a70e:	f001 fcad 	bl	800c06c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a712:	f001 fc79 	bl	800c008 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a71c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a71e:	e011      	b.n	800a744 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d012      	beq.n	800a74e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	3310      	adds	r3, #16
 800a72c:	4618      	mov	r0, r3
 800a72e:	f000 fd37 	bl	800b1a0 <xTaskRemoveFromEventList>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a738:	f000 fe10 	bl	800b35c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	3b01      	subs	r3, #1
 800a740:	b2db      	uxtb	r3, r3
 800a742:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a744:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	dce9      	bgt.n	800a720 <prvUnlockQueue+0x60>
 800a74c:	e000      	b.n	800a750 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a74e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	22ff      	movs	r2, #255	@ 0xff
 800a754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a758:	f001 fc88 	bl	800c06c <vPortExitCritical>
}
 800a75c:	bf00      	nop
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a76c:	f001 fc4c 	bl	800c008 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a774:	2b00      	cmp	r3, #0
 800a776:	d102      	bne.n	800a77e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a778:	2301      	movs	r3, #1
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	e001      	b.n	800a782 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a77e:	2300      	movs	r3, #0
 800a780:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a782:	f001 fc73 	bl	800c06c <vPortExitCritical>

	return xReturn;
 800a786:	68fb      	ldr	r3, [r7, #12]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a798:	f001 fc36 	bl	800c008 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d102      	bne.n	800a7ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	60fb      	str	r3, [r7, #12]
 800a7ac:	e001      	b.n	800a7b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7b2:	f001 fc5b 	bl	800c06c <vPortExitCritical>

	return xReturn;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	60fb      	str	r3, [r7, #12]
 800a7ce:	e014      	b.n	800a7fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a7d0:	4a0f      	ldr	r2, [pc, #60]	@ (800a810 <vQueueAddToRegistry+0x50>)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10b      	bne.n	800a7f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a7dc:	490c      	ldr	r1, [pc, #48]	@ (800a810 <vQueueAddToRegistry+0x50>)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a7e6:	4a0a      	ldr	r2, [pc, #40]	@ (800a810 <vQueueAddToRegistry+0x50>)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	00db      	lsls	r3, r3, #3
 800a7ec:	4413      	add	r3, r2
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a7f2:	e006      	b.n	800a802 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	60fb      	str	r3, [r7, #12]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2b07      	cmp	r3, #7
 800a7fe:	d9e7      	bls.n	800a7d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a800:	bf00      	nop
 800a802:	bf00      	nop
 800a804:	3714      	adds	r7, #20
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	20000c78 	.word	0x20000c78

0800a814 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a824:	f001 fbf0 	bl	800c008 <vPortEnterCritical>
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a82e:	b25b      	sxtb	r3, r3
 800a830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a834:	d103      	bne.n	800a83e <vQueueWaitForMessageRestricted+0x2a>
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a844:	b25b      	sxtb	r3, r3
 800a846:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a84a:	d103      	bne.n	800a854 <vQueueWaitForMessageRestricted+0x40>
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a854:	f001 fc0a 	bl	800c06c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d106      	bne.n	800a86e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	3324      	adds	r3, #36	@ 0x24
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	68b9      	ldr	r1, [r7, #8]
 800a868:	4618      	mov	r0, r3
 800a86a:	f000 fc6d 	bl	800b148 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a86e:	6978      	ldr	r0, [r7, #20]
 800a870:	f7ff ff26 	bl	800a6c0 <prvUnlockQueue>
	}
 800a874:	bf00      	nop
 800a876:	3718      	adds	r7, #24
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b08e      	sub	sp, #56	@ 0x38
 800a880:	af04      	add	r7, sp, #16
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
 800a888:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a88a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d10b      	bne.n	800a8a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a894:	f383 8811 	msr	BASEPRI, r3
 800a898:	f3bf 8f6f 	isb	sy
 800a89c:	f3bf 8f4f 	dsb	sy
 800a8a0:	623b      	str	r3, [r7, #32]
}
 800a8a2:	bf00      	nop
 800a8a4:	bf00      	nop
 800a8a6:	e7fd      	b.n	800a8a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10b      	bne.n	800a8c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	61fb      	str	r3, [r7, #28]
}
 800a8c0:	bf00      	nop
 800a8c2:	bf00      	nop
 800a8c4:	e7fd      	b.n	800a8c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a8c6:	23a8      	movs	r3, #168	@ 0xa8
 800a8c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	2ba8      	cmp	r3, #168	@ 0xa8
 800a8ce:	d00b      	beq.n	800a8e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	61bb      	str	r3, [r7, #24]
}
 800a8e2:	bf00      	nop
 800a8e4:	bf00      	nop
 800a8e6:	e7fd      	b.n	800a8e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a8e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d01e      	beq.n	800a92e <xTaskCreateStatic+0xb2>
 800a8f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d01b      	beq.n	800a92e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a902:	2202      	movs	r2, #2
 800a904:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a908:	2300      	movs	r3, #0
 800a90a:	9303      	str	r3, [sp, #12]
 800a90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90e:	9302      	str	r3, [sp, #8]
 800a910:	f107 0314 	add.w	r3, r7, #20
 800a914:	9301      	str	r3, [sp, #4]
 800a916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	68b9      	ldr	r1, [r7, #8]
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f000 f851 	bl	800a9c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a926:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a928:	f000 f8f6 	bl	800ab18 <prvAddNewTaskToReadyList>
 800a92c:	e001      	b.n	800a932 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a92e:	2300      	movs	r3, #0
 800a930:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a932:	697b      	ldr	r3, [r7, #20]
	}
 800a934:	4618      	mov	r0, r3
 800a936:	3728      	adds	r7, #40	@ 0x28
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b08c      	sub	sp, #48	@ 0x30
 800a940:	af04      	add	r7, sp, #16
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	603b      	str	r3, [r7, #0]
 800a948:	4613      	mov	r3, r2
 800a94a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a94c:	88fb      	ldrh	r3, [r7, #6]
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4618      	mov	r0, r3
 800a952:	f001 fc7b 	bl	800c24c <pvPortMalloc>
 800a956:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00e      	beq.n	800a97c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a95e:	20a8      	movs	r0, #168	@ 0xa8
 800a960:	f001 fc74 	bl	800c24c <pvPortMalloc>
 800a964:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d003      	beq.n	800a974 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	631a      	str	r2, [r3, #48]	@ 0x30
 800a972:	e005      	b.n	800a980 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a974:	6978      	ldr	r0, [r7, #20]
 800a976:	f001 fd37 	bl	800c3e8 <vPortFree>
 800a97a:	e001      	b.n	800a980 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a97c:	2300      	movs	r3, #0
 800a97e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d017      	beq.n	800a9b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a98e:	88fa      	ldrh	r2, [r7, #6]
 800a990:	2300      	movs	r3, #0
 800a992:	9303      	str	r3, [sp, #12]
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	9302      	str	r3, [sp, #8]
 800a998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a99a:	9301      	str	r3, [sp, #4]
 800a99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	68b9      	ldr	r1, [r7, #8]
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f000 f80f 	bl	800a9c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9aa:	69f8      	ldr	r0, [r7, #28]
 800a9ac:	f000 f8b4 	bl	800ab18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	61bb      	str	r3, [r7, #24]
 800a9b4:	e002      	b.n	800a9bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a9b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a9bc:	69bb      	ldr	r3, [r7, #24]
	}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3720      	adds	r7, #32
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
	...

0800a9c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	461a      	mov	r2, r3
 800a9e0:	21a5      	movs	r1, #165	@ 0xa5
 800a9e2:	f003 f87f 	bl	800dae4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	f023 0307 	bic.w	r3, r3, #7
 800a9fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	f003 0307 	and.w	r3, r3, #7
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00b      	beq.n	800aa22 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800aa0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	617b      	str	r3, [r7, #20]
}
 800aa1c:	bf00      	nop
 800aa1e:	bf00      	nop
 800aa20:	e7fd      	b.n	800aa1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d01f      	beq.n	800aa68 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa28:	2300      	movs	r3, #0
 800aa2a:	61fb      	str	r3, [r7, #28]
 800aa2c:	e012      	b.n	800aa54 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	4413      	add	r3, r2
 800aa34:	7819      	ldrb	r1, [r3, #0]
 800aa36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	3334      	adds	r3, #52	@ 0x34
 800aa3e:	460a      	mov	r2, r1
 800aa40:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	4413      	add	r3, r2
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d006      	beq.n	800aa5c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	3301      	adds	r3, #1
 800aa52:	61fb      	str	r3, [r7, #28]
 800aa54:	69fb      	ldr	r3, [r7, #28]
 800aa56:	2b0f      	cmp	r3, #15
 800aa58:	d9e9      	bls.n	800aa2e <prvInitialiseNewTask+0x66>
 800aa5a:	e000      	b.n	800aa5e <prvInitialiseNewTask+0x96>
			{
				break;
 800aa5c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aa66:	e003      	b.n	800aa70 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa72:	2b37      	cmp	r3, #55	@ 0x37
 800aa74:	d901      	bls.n	800aa7a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa76:	2337      	movs	r3, #55	@ 0x37
 800aa78:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa88:	2200      	movs	r2, #0
 800aa8a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa8e:	3304      	adds	r3, #4
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7ff f965 	bl	8009d60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa98:	3318      	adds	r3, #24
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7ff f960 	bl	8009d60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aaa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaa4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aaac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aab4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab8:	2200      	movs	r2, #0
 800aaba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac8:	3354      	adds	r3, #84	@ 0x54
 800aaca:	224c      	movs	r2, #76	@ 0x4c
 800aacc:	2100      	movs	r1, #0
 800aace:	4618      	mov	r0, r3
 800aad0:	f003 f808 	bl	800dae4 <memset>
 800aad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad6:	4a0d      	ldr	r2, [pc, #52]	@ (800ab0c <prvInitialiseNewTask+0x144>)
 800aad8:	659a      	str	r2, [r3, #88]	@ 0x58
 800aada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aadc:	4a0c      	ldr	r2, [pc, #48]	@ (800ab10 <prvInitialiseNewTask+0x148>)
 800aade:	65da      	str	r2, [r3, #92]	@ 0x5c
 800aae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae2:	4a0c      	ldr	r2, [pc, #48]	@ (800ab14 <prvInitialiseNewTask+0x14c>)
 800aae4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	68f9      	ldr	r1, [r7, #12]
 800aaea:	69b8      	ldr	r0, [r7, #24]
 800aaec:	f001 f95a 	bl	800bda4 <pxPortInitialiseStack>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aaf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d002      	beq.n	800ab02 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aafe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab02:	bf00      	nop
 800ab04:	3720      	adds	r7, #32
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	200126d8 	.word	0x200126d8
 800ab10:	20012740 	.word	0x20012740
 800ab14:	200127a8 	.word	0x200127a8

0800ab18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab20:	f001 fa72 	bl	800c008 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab24:	4b2d      	ldr	r3, [pc, #180]	@ (800abdc <prvAddNewTaskToReadyList+0xc4>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	4a2c      	ldr	r2, [pc, #176]	@ (800abdc <prvAddNewTaskToReadyList+0xc4>)
 800ab2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab2e:	4b2c      	ldr	r3, [pc, #176]	@ (800abe0 <prvAddNewTaskToReadyList+0xc8>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d109      	bne.n	800ab4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab36:	4a2a      	ldr	r2, [pc, #168]	@ (800abe0 <prvAddNewTaskToReadyList+0xc8>)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab3c:	4b27      	ldr	r3, [pc, #156]	@ (800abdc <prvAddNewTaskToReadyList+0xc4>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d110      	bne.n	800ab66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab44:	f000 fc2e 	bl	800b3a4 <prvInitialiseTaskLists>
 800ab48:	e00d      	b.n	800ab66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab4a:	4b26      	ldr	r3, [pc, #152]	@ (800abe4 <prvAddNewTaskToReadyList+0xcc>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d109      	bne.n	800ab66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab52:	4b23      	ldr	r3, [pc, #140]	@ (800abe0 <prvAddNewTaskToReadyList+0xc8>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d802      	bhi.n	800ab66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab60:	4a1f      	ldr	r2, [pc, #124]	@ (800abe0 <prvAddNewTaskToReadyList+0xc8>)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab66:	4b20      	ldr	r3, [pc, #128]	@ (800abe8 <prvAddNewTaskToReadyList+0xd0>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	4a1e      	ldr	r2, [pc, #120]	@ (800abe8 <prvAddNewTaskToReadyList+0xd0>)
 800ab6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab70:	4b1d      	ldr	r3, [pc, #116]	@ (800abe8 <prvAddNewTaskToReadyList+0xd0>)
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab7c:	4b1b      	ldr	r3, [pc, #108]	@ (800abec <prvAddNewTaskToReadyList+0xd4>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d903      	bls.n	800ab8c <prvAddNewTaskToReadyList+0x74>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab88:	4a18      	ldr	r2, [pc, #96]	@ (800abec <prvAddNewTaskToReadyList+0xd4>)
 800ab8a:	6013      	str	r3, [r2, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab90:	4613      	mov	r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	4413      	add	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4a15      	ldr	r2, [pc, #84]	@ (800abf0 <prvAddNewTaskToReadyList+0xd8>)
 800ab9a:	441a      	add	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	3304      	adds	r3, #4
 800aba0:	4619      	mov	r1, r3
 800aba2:	4610      	mov	r0, r2
 800aba4:	f7ff f8e9 	bl	8009d7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aba8:	f001 fa60 	bl	800c06c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800abac:	4b0d      	ldr	r3, [pc, #52]	@ (800abe4 <prvAddNewTaskToReadyList+0xcc>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00e      	beq.n	800abd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800abb4:	4b0a      	ldr	r3, [pc, #40]	@ (800abe0 <prvAddNewTaskToReadyList+0xc8>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d207      	bcs.n	800abd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800abc2:	4b0c      	ldr	r3, [pc, #48]	@ (800abf4 <prvAddNewTaskToReadyList+0xdc>)
 800abc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abc8:	601a      	str	r2, [r3, #0]
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abd2:	bf00      	nop
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	2000118c 	.word	0x2000118c
 800abe0:	20000cb8 	.word	0x20000cb8
 800abe4:	20001198 	.word	0x20001198
 800abe8:	200011a8 	.word	0x200011a8
 800abec:	20001194 	.word	0x20001194
 800abf0:	20000cbc 	.word	0x20000cbc
 800abf4:	e000ed04 	.word	0xe000ed04

0800abf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac00:	2300      	movs	r3, #0
 800ac02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d018      	beq.n	800ac3c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac0a:	4b14      	ldr	r3, [pc, #80]	@ (800ac5c <vTaskDelay+0x64>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00b      	beq.n	800ac2a <vTaskDelay+0x32>
	__asm volatile
 800ac12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	60bb      	str	r3, [r7, #8]
}
 800ac24:	bf00      	nop
 800ac26:	bf00      	nop
 800ac28:	e7fd      	b.n	800ac26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ac2a:	f000 f88b 	bl	800ad44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac2e:	2100      	movs	r1, #0
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fd09 	bl	800b648 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac36:	f000 f893 	bl	800ad60 <xTaskResumeAll>
 800ac3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d107      	bne.n	800ac52 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ac42:	4b07      	ldr	r3, [pc, #28]	@ (800ac60 <vTaskDelay+0x68>)
 800ac44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac48:	601a      	str	r2, [r3, #0]
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac52:	bf00      	nop
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	200011b4 	.word	0x200011b4
 800ac60:	e000ed04 	.word	0xe000ed04

0800ac64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b08a      	sub	sp, #40	@ 0x28
 800ac68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac72:	463a      	mov	r2, r7
 800ac74:	1d39      	adds	r1, r7, #4
 800ac76:	f107 0308 	add.w	r3, r7, #8
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7ff f81c 	bl	8009cb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac80:	6839      	ldr	r1, [r7, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	68ba      	ldr	r2, [r7, #8]
 800ac86:	9202      	str	r2, [sp, #8]
 800ac88:	9301      	str	r3, [sp, #4]
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	2300      	movs	r3, #0
 800ac90:	460a      	mov	r2, r1
 800ac92:	4924      	ldr	r1, [pc, #144]	@ (800ad24 <vTaskStartScheduler+0xc0>)
 800ac94:	4824      	ldr	r0, [pc, #144]	@ (800ad28 <vTaskStartScheduler+0xc4>)
 800ac96:	f7ff fdf1 	bl	800a87c <xTaskCreateStatic>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	4a23      	ldr	r2, [pc, #140]	@ (800ad2c <vTaskStartScheduler+0xc8>)
 800ac9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aca0:	4b22      	ldr	r3, [pc, #136]	@ (800ad2c <vTaskStartScheduler+0xc8>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d002      	beq.n	800acae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aca8:	2301      	movs	r3, #1
 800acaa:	617b      	str	r3, [r7, #20]
 800acac:	e001      	b.n	800acb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800acae:	2300      	movs	r3, #0
 800acb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d102      	bne.n	800acbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800acb8:	f000 fd1a 	bl	800b6f0 <xTimerCreateTimerTask>
 800acbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d11b      	bne.n	800acfc <vTaskStartScheduler+0x98>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	613b      	str	r3, [r7, #16]
}
 800acd6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800acd8:	4b15      	ldr	r3, [pc, #84]	@ (800ad30 <vTaskStartScheduler+0xcc>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	3354      	adds	r3, #84	@ 0x54
 800acde:	4a15      	ldr	r2, [pc, #84]	@ (800ad34 <vTaskStartScheduler+0xd0>)
 800ace0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ace2:	4b15      	ldr	r3, [pc, #84]	@ (800ad38 <vTaskStartScheduler+0xd4>)
 800ace4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ace8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800acea:	4b14      	ldr	r3, [pc, #80]	@ (800ad3c <vTaskStartScheduler+0xd8>)
 800acec:	2201      	movs	r2, #1
 800acee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800acf0:	4b13      	ldr	r3, [pc, #76]	@ (800ad40 <vTaskStartScheduler+0xdc>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800acf6:	f001 f8e3 	bl	800bec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800acfa:	e00f      	b.n	800ad1c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad02:	d10b      	bne.n	800ad1c <vTaskStartScheduler+0xb8>
	__asm volatile
 800ad04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad08:	f383 8811 	msr	BASEPRI, r3
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	60fb      	str	r3, [r7, #12]
}
 800ad16:	bf00      	nop
 800ad18:	bf00      	nop
 800ad1a:	e7fd      	b.n	800ad18 <vTaskStartScheduler+0xb4>
}
 800ad1c:	bf00      	nop
 800ad1e:	3718      	adds	r7, #24
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	0800fe08 	.word	0x0800fe08
 800ad28:	0800b375 	.word	0x0800b375
 800ad2c:	200011b0 	.word	0x200011b0
 800ad30:	20000cb8 	.word	0x20000cb8
 800ad34:	20000194 	.word	0x20000194
 800ad38:	200011ac 	.word	0x200011ac
 800ad3c:	20001198 	.word	0x20001198
 800ad40:	20001190 	.word	0x20001190

0800ad44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad44:	b480      	push	{r7}
 800ad46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ad48:	4b04      	ldr	r3, [pc, #16]	@ (800ad5c <vTaskSuspendAll+0x18>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	4a03      	ldr	r2, [pc, #12]	@ (800ad5c <vTaskSuspendAll+0x18>)
 800ad50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ad52:	bf00      	nop
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	200011b4 	.word	0x200011b4

0800ad60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad6e:	4b42      	ldr	r3, [pc, #264]	@ (800ae78 <xTaskResumeAll+0x118>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d10b      	bne.n	800ad8e <xTaskResumeAll+0x2e>
	__asm volatile
 800ad76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	603b      	str	r3, [r7, #0]
}
 800ad88:	bf00      	nop
 800ad8a:	bf00      	nop
 800ad8c:	e7fd      	b.n	800ad8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad8e:	f001 f93b 	bl	800c008 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad92:	4b39      	ldr	r3, [pc, #228]	@ (800ae78 <xTaskResumeAll+0x118>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	3b01      	subs	r3, #1
 800ad98:	4a37      	ldr	r2, [pc, #220]	@ (800ae78 <xTaskResumeAll+0x118>)
 800ad9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad9c:	4b36      	ldr	r3, [pc, #216]	@ (800ae78 <xTaskResumeAll+0x118>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d162      	bne.n	800ae6a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ada4:	4b35      	ldr	r3, [pc, #212]	@ (800ae7c <xTaskResumeAll+0x11c>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d05e      	beq.n	800ae6a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adac:	e02f      	b.n	800ae0e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adae:	4b34      	ldr	r3, [pc, #208]	@ (800ae80 <xTaskResumeAll+0x120>)
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	3318      	adds	r3, #24
 800adba:	4618      	mov	r0, r3
 800adbc:	f7ff f83a 	bl	8009e34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	3304      	adds	r3, #4
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7ff f835 	bl	8009e34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adce:	4b2d      	ldr	r3, [pc, #180]	@ (800ae84 <xTaskResumeAll+0x124>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	429a      	cmp	r2, r3
 800add4:	d903      	bls.n	800adde <xTaskResumeAll+0x7e>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adda:	4a2a      	ldr	r2, [pc, #168]	@ (800ae84 <xTaskResumeAll+0x124>)
 800addc:	6013      	str	r3, [r2, #0]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ade2:	4613      	mov	r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4413      	add	r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4a27      	ldr	r2, [pc, #156]	@ (800ae88 <xTaskResumeAll+0x128>)
 800adec:	441a      	add	r2, r3
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	3304      	adds	r3, #4
 800adf2:	4619      	mov	r1, r3
 800adf4:	4610      	mov	r0, r2
 800adf6:	f7fe ffc0 	bl	8009d7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adfe:	4b23      	ldr	r3, [pc, #140]	@ (800ae8c <xTaskResumeAll+0x12c>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d302      	bcc.n	800ae0e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ae08:	4b21      	ldr	r3, [pc, #132]	@ (800ae90 <xTaskResumeAll+0x130>)
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae0e:	4b1c      	ldr	r3, [pc, #112]	@ (800ae80 <xTaskResumeAll+0x120>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d1cb      	bne.n	800adae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d001      	beq.n	800ae20 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae1c:	f000 fb66 	bl	800b4ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ae20:	4b1c      	ldr	r3, [pc, #112]	@ (800ae94 <xTaskResumeAll+0x134>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d010      	beq.n	800ae4e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae2c:	f000 f846 	bl	800aebc <xTaskIncrementTick>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d002      	beq.n	800ae3c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ae36:	4b16      	ldr	r3, [pc, #88]	@ (800ae90 <xTaskResumeAll+0x130>)
 800ae38:	2201      	movs	r2, #1
 800ae3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d1f1      	bne.n	800ae2c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ae48:	4b12      	ldr	r3, [pc, #72]	@ (800ae94 <xTaskResumeAll+0x134>)
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae4e:	4b10      	ldr	r3, [pc, #64]	@ (800ae90 <xTaskResumeAll+0x130>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d009      	beq.n	800ae6a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae56:	2301      	movs	r3, #1
 800ae58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae5a:	4b0f      	ldr	r3, [pc, #60]	@ (800ae98 <xTaskResumeAll+0x138>)
 800ae5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae60:	601a      	str	r2, [r3, #0]
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae6a:	f001 f8ff 	bl	800c06c <vPortExitCritical>

	return xAlreadyYielded;
 800ae6e:	68bb      	ldr	r3, [r7, #8]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	200011b4 	.word	0x200011b4
 800ae7c:	2000118c 	.word	0x2000118c
 800ae80:	2000114c 	.word	0x2000114c
 800ae84:	20001194 	.word	0x20001194
 800ae88:	20000cbc 	.word	0x20000cbc
 800ae8c:	20000cb8 	.word	0x20000cb8
 800ae90:	200011a0 	.word	0x200011a0
 800ae94:	2000119c 	.word	0x2000119c
 800ae98:	e000ed04 	.word	0xe000ed04

0800ae9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aea2:	4b05      	ldr	r3, [pc, #20]	@ (800aeb8 <xTaskGetTickCount+0x1c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aea8:	687b      	ldr	r3, [r7, #4]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	370c      	adds	r7, #12
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	20001190 	.word	0x20001190

0800aebc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aec2:	2300      	movs	r3, #0
 800aec4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aec6:	4b4f      	ldr	r3, [pc, #316]	@ (800b004 <xTaskIncrementTick+0x148>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f040 8090 	bne.w	800aff0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aed0:	4b4d      	ldr	r3, [pc, #308]	@ (800b008 <xTaskIncrementTick+0x14c>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	3301      	adds	r3, #1
 800aed6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aed8:	4a4b      	ldr	r2, [pc, #300]	@ (800b008 <xTaskIncrementTick+0x14c>)
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d121      	bne.n	800af28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800aee4:	4b49      	ldr	r3, [pc, #292]	@ (800b00c <xTaskIncrementTick+0x150>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00b      	beq.n	800af06 <xTaskIncrementTick+0x4a>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	603b      	str	r3, [r7, #0]
}
 800af00:	bf00      	nop
 800af02:	bf00      	nop
 800af04:	e7fd      	b.n	800af02 <xTaskIncrementTick+0x46>
 800af06:	4b41      	ldr	r3, [pc, #260]	@ (800b00c <xTaskIncrementTick+0x150>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	4b40      	ldr	r3, [pc, #256]	@ (800b010 <xTaskIncrementTick+0x154>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a3e      	ldr	r2, [pc, #248]	@ (800b00c <xTaskIncrementTick+0x150>)
 800af12:	6013      	str	r3, [r2, #0]
 800af14:	4a3e      	ldr	r2, [pc, #248]	@ (800b010 <xTaskIncrementTick+0x154>)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6013      	str	r3, [r2, #0]
 800af1a:	4b3e      	ldr	r3, [pc, #248]	@ (800b014 <xTaskIncrementTick+0x158>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	3301      	adds	r3, #1
 800af20:	4a3c      	ldr	r2, [pc, #240]	@ (800b014 <xTaskIncrementTick+0x158>)
 800af22:	6013      	str	r3, [r2, #0]
 800af24:	f000 fae2 	bl	800b4ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af28:	4b3b      	ldr	r3, [pc, #236]	@ (800b018 <xTaskIncrementTick+0x15c>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	693a      	ldr	r2, [r7, #16]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d349      	bcc.n	800afc6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af32:	4b36      	ldr	r3, [pc, #216]	@ (800b00c <xTaskIncrementTick+0x150>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d104      	bne.n	800af46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af3c:	4b36      	ldr	r3, [pc, #216]	@ (800b018 <xTaskIncrementTick+0x15c>)
 800af3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af42:	601a      	str	r2, [r3, #0]
					break;
 800af44:	e03f      	b.n	800afc6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af46:	4b31      	ldr	r3, [pc, #196]	@ (800b00c <xTaskIncrementTick+0x150>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af56:	693a      	ldr	r2, [r7, #16]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d203      	bcs.n	800af66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af5e:	4a2e      	ldr	r2, [pc, #184]	@ (800b018 <xTaskIncrementTick+0x15c>)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af64:	e02f      	b.n	800afc6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	3304      	adds	r3, #4
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fe ff62 	bl	8009e34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af74:	2b00      	cmp	r3, #0
 800af76:	d004      	beq.n	800af82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	3318      	adds	r3, #24
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7fe ff59 	bl	8009e34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af86:	4b25      	ldr	r3, [pc, #148]	@ (800b01c <xTaskIncrementTick+0x160>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d903      	bls.n	800af96 <xTaskIncrementTick+0xda>
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af92:	4a22      	ldr	r2, [pc, #136]	@ (800b01c <xTaskIncrementTick+0x160>)
 800af94:	6013      	str	r3, [r2, #0]
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af9a:	4613      	mov	r3, r2
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4413      	add	r3, r2
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4a1f      	ldr	r2, [pc, #124]	@ (800b020 <xTaskIncrementTick+0x164>)
 800afa4:	441a      	add	r2, r3
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	3304      	adds	r3, #4
 800afaa:	4619      	mov	r1, r3
 800afac:	4610      	mov	r0, r2
 800afae:	f7fe fee4 	bl	8009d7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afb6:	4b1b      	ldr	r3, [pc, #108]	@ (800b024 <xTaskIncrementTick+0x168>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d3b8      	bcc.n	800af32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800afc0:	2301      	movs	r3, #1
 800afc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afc4:	e7b5      	b.n	800af32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800afc6:	4b17      	ldr	r3, [pc, #92]	@ (800b024 <xTaskIncrementTick+0x168>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afcc:	4914      	ldr	r1, [pc, #80]	@ (800b020 <xTaskIncrementTick+0x164>)
 800afce:	4613      	mov	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	4413      	add	r3, r2
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	440b      	add	r3, r1
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d901      	bls.n	800afe2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800afde:	2301      	movs	r3, #1
 800afe0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800afe2:	4b11      	ldr	r3, [pc, #68]	@ (800b028 <xTaskIncrementTick+0x16c>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d007      	beq.n	800affa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800afea:	2301      	movs	r3, #1
 800afec:	617b      	str	r3, [r7, #20]
 800afee:	e004      	b.n	800affa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aff0:	4b0e      	ldr	r3, [pc, #56]	@ (800b02c <xTaskIncrementTick+0x170>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	3301      	adds	r3, #1
 800aff6:	4a0d      	ldr	r2, [pc, #52]	@ (800b02c <xTaskIncrementTick+0x170>)
 800aff8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800affa:	697b      	ldr	r3, [r7, #20]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3718      	adds	r7, #24
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	200011b4 	.word	0x200011b4
 800b008:	20001190 	.word	0x20001190
 800b00c:	20001144 	.word	0x20001144
 800b010:	20001148 	.word	0x20001148
 800b014:	200011a4 	.word	0x200011a4
 800b018:	200011ac 	.word	0x200011ac
 800b01c:	20001194 	.word	0x20001194
 800b020:	20000cbc 	.word	0x20000cbc
 800b024:	20000cb8 	.word	0x20000cb8
 800b028:	200011a0 	.word	0x200011a0
 800b02c:	2000119c 	.word	0x2000119c

0800b030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b036:	4b2b      	ldr	r3, [pc, #172]	@ (800b0e4 <vTaskSwitchContext+0xb4>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d003      	beq.n	800b046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b03e:	4b2a      	ldr	r3, [pc, #168]	@ (800b0e8 <vTaskSwitchContext+0xb8>)
 800b040:	2201      	movs	r2, #1
 800b042:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b044:	e047      	b.n	800b0d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b046:	4b28      	ldr	r3, [pc, #160]	@ (800b0e8 <vTaskSwitchContext+0xb8>)
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b04c:	4b27      	ldr	r3, [pc, #156]	@ (800b0ec <vTaskSwitchContext+0xbc>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	60fb      	str	r3, [r7, #12]
 800b052:	e011      	b.n	800b078 <vTaskSwitchContext+0x48>
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10b      	bne.n	800b072 <vTaskSwitchContext+0x42>
	__asm volatile
 800b05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	607b      	str	r3, [r7, #4]
}
 800b06c:	bf00      	nop
 800b06e:	bf00      	nop
 800b070:	e7fd      	b.n	800b06e <vTaskSwitchContext+0x3e>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	3b01      	subs	r3, #1
 800b076:	60fb      	str	r3, [r7, #12]
 800b078:	491d      	ldr	r1, [pc, #116]	@ (800b0f0 <vTaskSwitchContext+0xc0>)
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	4613      	mov	r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	4413      	add	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	440b      	add	r3, r1
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d0e3      	beq.n	800b054 <vTaskSwitchContext+0x24>
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	4613      	mov	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4a16      	ldr	r2, [pc, #88]	@ (800b0f0 <vTaskSwitchContext+0xc0>)
 800b098:	4413      	add	r3, r2
 800b09a:	60bb      	str	r3, [r7, #8]
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	685a      	ldr	r2, [r3, #4]
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	605a      	str	r2, [r3, #4]
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	685a      	ldr	r2, [r3, #4]
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	3308      	adds	r3, #8
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d104      	bne.n	800b0bc <vTaskSwitchContext+0x8c>
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	685a      	ldr	r2, [r3, #4]
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	605a      	str	r2, [r3, #4]
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	4a0c      	ldr	r2, [pc, #48]	@ (800b0f4 <vTaskSwitchContext+0xc4>)
 800b0c4:	6013      	str	r3, [r2, #0]
 800b0c6:	4a09      	ldr	r2, [pc, #36]	@ (800b0ec <vTaskSwitchContext+0xbc>)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0cc:	4b09      	ldr	r3, [pc, #36]	@ (800b0f4 <vTaskSwitchContext+0xc4>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	3354      	adds	r3, #84	@ 0x54
 800b0d2:	4a09      	ldr	r2, [pc, #36]	@ (800b0f8 <vTaskSwitchContext+0xc8>)
 800b0d4:	6013      	str	r3, [r2, #0]
}
 800b0d6:	bf00      	nop
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	200011b4 	.word	0x200011b4
 800b0e8:	200011a0 	.word	0x200011a0
 800b0ec:	20001194 	.word	0x20001194
 800b0f0:	20000cbc 	.word	0x20000cbc
 800b0f4:	20000cb8 	.word	0x20000cb8
 800b0f8:	20000194 	.word	0x20000194

0800b0fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10b      	bne.n	800b124 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b110:	f383 8811 	msr	BASEPRI, r3
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	60fb      	str	r3, [r7, #12]
}
 800b11e:	bf00      	nop
 800b120:	bf00      	nop
 800b122:	e7fd      	b.n	800b120 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b124:	4b07      	ldr	r3, [pc, #28]	@ (800b144 <vTaskPlaceOnEventList+0x48>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	3318      	adds	r3, #24
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f7fe fe48 	bl	8009dc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b132:	2101      	movs	r1, #1
 800b134:	6838      	ldr	r0, [r7, #0]
 800b136:	f000 fa87 	bl	800b648 <prvAddCurrentTaskToDelayedList>
}
 800b13a:	bf00      	nop
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	20000cb8 	.word	0x20000cb8

0800b148 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10b      	bne.n	800b172 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	617b      	str	r3, [r7, #20]
}
 800b16c:	bf00      	nop
 800b16e:	bf00      	nop
 800b170:	e7fd      	b.n	800b16e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b172:	4b0a      	ldr	r3, [pc, #40]	@ (800b19c <vTaskPlaceOnEventListRestricted+0x54>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3318      	adds	r3, #24
 800b178:	4619      	mov	r1, r3
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f7fe fdfd 	bl	8009d7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d002      	beq.n	800b18c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b18a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b18c:	6879      	ldr	r1, [r7, #4]
 800b18e:	68b8      	ldr	r0, [r7, #8]
 800b190:	f000 fa5a 	bl	800b648 <prvAddCurrentTaskToDelayedList>
	}
 800b194:	bf00      	nop
 800b196:	3718      	adds	r7, #24
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}
 800b19c:	20000cb8 	.word	0x20000cb8

0800b1a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10b      	bne.n	800b1ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	60fb      	str	r3, [r7, #12]
}
 800b1c8:	bf00      	nop
 800b1ca:	bf00      	nop
 800b1cc:	e7fd      	b.n	800b1ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	3318      	adds	r3, #24
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fe fe2e 	bl	8009e34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1d8:	4b1d      	ldr	r3, [pc, #116]	@ (800b250 <xTaskRemoveFromEventList+0xb0>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d11d      	bne.n	800b21c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	3304      	adds	r3, #4
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7fe fe25 	bl	8009e34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ee:	4b19      	ldr	r3, [pc, #100]	@ (800b254 <xTaskRemoveFromEventList+0xb4>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d903      	bls.n	800b1fe <xTaskRemoveFromEventList+0x5e>
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1fa:	4a16      	ldr	r2, [pc, #88]	@ (800b254 <xTaskRemoveFromEventList+0xb4>)
 800b1fc:	6013      	str	r3, [r2, #0]
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b202:	4613      	mov	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	4a13      	ldr	r2, [pc, #76]	@ (800b258 <xTaskRemoveFromEventList+0xb8>)
 800b20c:	441a      	add	r2, r3
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	3304      	adds	r3, #4
 800b212:	4619      	mov	r1, r3
 800b214:	4610      	mov	r0, r2
 800b216:	f7fe fdb0 	bl	8009d7a <vListInsertEnd>
 800b21a:	e005      	b.n	800b228 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	3318      	adds	r3, #24
 800b220:	4619      	mov	r1, r3
 800b222:	480e      	ldr	r0, [pc, #56]	@ (800b25c <xTaskRemoveFromEventList+0xbc>)
 800b224:	f7fe fda9 	bl	8009d7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b22c:	4b0c      	ldr	r3, [pc, #48]	@ (800b260 <xTaskRemoveFromEventList+0xc0>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b232:	429a      	cmp	r2, r3
 800b234:	d905      	bls.n	800b242 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b236:	2301      	movs	r3, #1
 800b238:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b23a:	4b0a      	ldr	r3, [pc, #40]	@ (800b264 <xTaskRemoveFromEventList+0xc4>)
 800b23c:	2201      	movs	r2, #1
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	e001      	b.n	800b246 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b242:	2300      	movs	r3, #0
 800b244:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b246:	697b      	ldr	r3, [r7, #20]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3718      	adds	r7, #24
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	200011b4 	.word	0x200011b4
 800b254:	20001194 	.word	0x20001194
 800b258:	20000cbc 	.word	0x20000cbc
 800b25c:	2000114c 	.word	0x2000114c
 800b260:	20000cb8 	.word	0x20000cb8
 800b264:	200011a0 	.word	0x200011a0

0800b268 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b270:	4b06      	ldr	r3, [pc, #24]	@ (800b28c <vTaskInternalSetTimeOutState+0x24>)
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b278:	4b05      	ldr	r3, [pc, #20]	@ (800b290 <vTaskInternalSetTimeOutState+0x28>)
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	605a      	str	r2, [r3, #4]
}
 800b280:	bf00      	nop
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr
 800b28c:	200011a4 	.word	0x200011a4
 800b290:	20001190 	.word	0x20001190

0800b294 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b088      	sub	sp, #32
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10b      	bne.n	800b2bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	613b      	str	r3, [r7, #16]
}
 800b2b6:	bf00      	nop
 800b2b8:	bf00      	nop
 800b2ba:	e7fd      	b.n	800b2b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10b      	bne.n	800b2da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	60fb      	str	r3, [r7, #12]
}
 800b2d4:	bf00      	nop
 800b2d6:	bf00      	nop
 800b2d8:	e7fd      	b.n	800b2d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b2da:	f000 fe95 	bl	800c008 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b2de:	4b1d      	ldr	r3, [pc, #116]	@ (800b354 <xTaskCheckForTimeOut+0xc0>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	69ba      	ldr	r2, [r7, #24]
 800b2ea:	1ad3      	subs	r3, r2, r3
 800b2ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2f6:	d102      	bne.n	800b2fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	61fb      	str	r3, [r7, #28]
 800b2fc:	e023      	b.n	800b346 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	4b15      	ldr	r3, [pc, #84]	@ (800b358 <xTaskCheckForTimeOut+0xc4>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	429a      	cmp	r2, r3
 800b308:	d007      	beq.n	800b31a <xTaskCheckForTimeOut+0x86>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	69ba      	ldr	r2, [r7, #24]
 800b310:	429a      	cmp	r2, r3
 800b312:	d302      	bcc.n	800b31a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b314:	2301      	movs	r3, #1
 800b316:	61fb      	str	r3, [r7, #28]
 800b318:	e015      	b.n	800b346 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	429a      	cmp	r2, r3
 800b322:	d20b      	bcs.n	800b33c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	1ad2      	subs	r2, r2, r3
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f7ff ff99 	bl	800b268 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b336:	2300      	movs	r3, #0
 800b338:	61fb      	str	r3, [r7, #28]
 800b33a:	e004      	b.n	800b346 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	2200      	movs	r2, #0
 800b340:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b342:	2301      	movs	r3, #1
 800b344:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b346:	f000 fe91 	bl	800c06c <vPortExitCritical>

	return xReturn;
 800b34a:	69fb      	ldr	r3, [r7, #28]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3720      	adds	r7, #32
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	20001190 	.word	0x20001190
 800b358:	200011a4 	.word	0x200011a4

0800b35c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b35c:	b480      	push	{r7}
 800b35e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b360:	4b03      	ldr	r3, [pc, #12]	@ (800b370 <vTaskMissedYield+0x14>)
 800b362:	2201      	movs	r2, #1
 800b364:	601a      	str	r2, [r3, #0]
}
 800b366:	bf00      	nop
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr
 800b370:	200011a0 	.word	0x200011a0

0800b374 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b37c:	f000 f852 	bl	800b424 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b380:	4b06      	ldr	r3, [pc, #24]	@ (800b39c <prvIdleTask+0x28>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d9f9      	bls.n	800b37c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b388:	4b05      	ldr	r3, [pc, #20]	@ (800b3a0 <prvIdleTask+0x2c>)
 800b38a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b38e:	601a      	str	r2, [r3, #0]
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b398:	e7f0      	b.n	800b37c <prvIdleTask+0x8>
 800b39a:	bf00      	nop
 800b39c:	20000cbc 	.word	0x20000cbc
 800b3a0:	e000ed04 	.word	0xe000ed04

0800b3a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	607b      	str	r3, [r7, #4]
 800b3ae:	e00c      	b.n	800b3ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	4a12      	ldr	r2, [pc, #72]	@ (800b404 <prvInitialiseTaskLists+0x60>)
 800b3bc:	4413      	add	r3, r2
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fe fcae 	bl	8009d20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	607b      	str	r3, [r7, #4]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b37      	cmp	r3, #55	@ 0x37
 800b3ce:	d9ef      	bls.n	800b3b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b3d0:	480d      	ldr	r0, [pc, #52]	@ (800b408 <prvInitialiseTaskLists+0x64>)
 800b3d2:	f7fe fca5 	bl	8009d20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b3d6:	480d      	ldr	r0, [pc, #52]	@ (800b40c <prvInitialiseTaskLists+0x68>)
 800b3d8:	f7fe fca2 	bl	8009d20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b3dc:	480c      	ldr	r0, [pc, #48]	@ (800b410 <prvInitialiseTaskLists+0x6c>)
 800b3de:	f7fe fc9f 	bl	8009d20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b3e2:	480c      	ldr	r0, [pc, #48]	@ (800b414 <prvInitialiseTaskLists+0x70>)
 800b3e4:	f7fe fc9c 	bl	8009d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b3e8:	480b      	ldr	r0, [pc, #44]	@ (800b418 <prvInitialiseTaskLists+0x74>)
 800b3ea:	f7fe fc99 	bl	8009d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b3ee:	4b0b      	ldr	r3, [pc, #44]	@ (800b41c <prvInitialiseTaskLists+0x78>)
 800b3f0:	4a05      	ldr	r2, [pc, #20]	@ (800b408 <prvInitialiseTaskLists+0x64>)
 800b3f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b3f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b420 <prvInitialiseTaskLists+0x7c>)
 800b3f6:	4a05      	ldr	r2, [pc, #20]	@ (800b40c <prvInitialiseTaskLists+0x68>)
 800b3f8:	601a      	str	r2, [r3, #0]
}
 800b3fa:	bf00      	nop
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	20000cbc 	.word	0x20000cbc
 800b408:	2000111c 	.word	0x2000111c
 800b40c:	20001130 	.word	0x20001130
 800b410:	2000114c 	.word	0x2000114c
 800b414:	20001160 	.word	0x20001160
 800b418:	20001178 	.word	0x20001178
 800b41c:	20001144 	.word	0x20001144
 800b420:	20001148 	.word	0x20001148

0800b424 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b42a:	e019      	b.n	800b460 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b42c:	f000 fdec 	bl	800c008 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b430:	4b10      	ldr	r3, [pc, #64]	@ (800b474 <prvCheckTasksWaitingTermination+0x50>)
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	3304      	adds	r3, #4
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fe fcf9 	bl	8009e34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b442:	4b0d      	ldr	r3, [pc, #52]	@ (800b478 <prvCheckTasksWaitingTermination+0x54>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	3b01      	subs	r3, #1
 800b448:	4a0b      	ldr	r2, [pc, #44]	@ (800b478 <prvCheckTasksWaitingTermination+0x54>)
 800b44a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b44c:	4b0b      	ldr	r3, [pc, #44]	@ (800b47c <prvCheckTasksWaitingTermination+0x58>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	3b01      	subs	r3, #1
 800b452:	4a0a      	ldr	r2, [pc, #40]	@ (800b47c <prvCheckTasksWaitingTermination+0x58>)
 800b454:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b456:	f000 fe09 	bl	800c06c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f810 	bl	800b480 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b460:	4b06      	ldr	r3, [pc, #24]	@ (800b47c <prvCheckTasksWaitingTermination+0x58>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1e1      	bne.n	800b42c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b468:	bf00      	nop
 800b46a:	bf00      	nop
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	20001160 	.word	0x20001160
 800b478:	2000118c 	.word	0x2000118c
 800b47c:	20001174 	.word	0x20001174

0800b480 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	3354      	adds	r3, #84	@ 0x54
 800b48c:	4618      	mov	r0, r3
 800b48e:	f002 fb35 	bl	800dafc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d108      	bne.n	800b4ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f000 ffa1 	bl	800c3e8 <vPortFree>
				vPortFree( pxTCB );
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 ff9e 	bl	800c3e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b4ac:	e019      	b.n	800b4e2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d103      	bne.n	800b4c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 ff95 	bl	800c3e8 <vPortFree>
	}
 800b4be:	e010      	b.n	800b4e2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d00b      	beq.n	800b4e2 <prvDeleteTCB+0x62>
	__asm volatile
 800b4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ce:	f383 8811 	msr	BASEPRI, r3
 800b4d2:	f3bf 8f6f 	isb	sy
 800b4d6:	f3bf 8f4f 	dsb	sy
 800b4da:	60fb      	str	r3, [r7, #12]
}
 800b4dc:	bf00      	nop
 800b4de:	bf00      	nop
 800b4e0:	e7fd      	b.n	800b4de <prvDeleteTCB+0x5e>
	}
 800b4e2:	bf00      	nop
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
	...

0800b4ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b524 <prvResetNextTaskUnblockTime+0x38>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d104      	bne.n	800b506 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b4fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b528 <prvResetNextTaskUnblockTime+0x3c>)
 800b4fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b502:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b504:	e008      	b.n	800b518 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b506:	4b07      	ldr	r3, [pc, #28]	@ (800b524 <prvResetNextTaskUnblockTime+0x38>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	4a04      	ldr	r2, [pc, #16]	@ (800b528 <prvResetNextTaskUnblockTime+0x3c>)
 800b516:	6013      	str	r3, [r2, #0]
}
 800b518:	bf00      	nop
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr
 800b524:	20001144 	.word	0x20001144
 800b528:	200011ac 	.word	0x200011ac

0800b52c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b532:	4b0b      	ldr	r3, [pc, #44]	@ (800b560 <xTaskGetSchedulerState+0x34>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d102      	bne.n	800b540 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b53a:	2301      	movs	r3, #1
 800b53c:	607b      	str	r3, [r7, #4]
 800b53e:	e008      	b.n	800b552 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b540:	4b08      	ldr	r3, [pc, #32]	@ (800b564 <xTaskGetSchedulerState+0x38>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d102      	bne.n	800b54e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b548:	2302      	movs	r3, #2
 800b54a:	607b      	str	r3, [r7, #4]
 800b54c:	e001      	b.n	800b552 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b54e:	2300      	movs	r3, #0
 800b550:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b552:	687b      	ldr	r3, [r7, #4]
	}
 800b554:	4618      	mov	r0, r3
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr
 800b560:	20001198 	.word	0x20001198
 800b564:	200011b4 	.word	0x200011b4

0800b568 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b574:	2300      	movs	r3, #0
 800b576:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d058      	beq.n	800b630 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b57e:	4b2f      	ldr	r3, [pc, #188]	@ (800b63c <xTaskPriorityDisinherit+0xd4>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	693a      	ldr	r2, [r7, #16]
 800b584:	429a      	cmp	r2, r3
 800b586:	d00b      	beq.n	800b5a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b58c:	f383 8811 	msr	BASEPRI, r3
 800b590:	f3bf 8f6f 	isb	sy
 800b594:	f3bf 8f4f 	dsb	sy
 800b598:	60fb      	str	r3, [r7, #12]
}
 800b59a:	bf00      	nop
 800b59c:	bf00      	nop
 800b59e:	e7fd      	b.n	800b59c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10b      	bne.n	800b5c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ac:	f383 8811 	msr	BASEPRI, r3
 800b5b0:	f3bf 8f6f 	isb	sy
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	60bb      	str	r3, [r7, #8]
}
 800b5ba:	bf00      	nop
 800b5bc:	bf00      	nop
 800b5be:	e7fd      	b.n	800b5bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5c4:	1e5a      	subs	r2, r3, #1
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d02c      	beq.n	800b630 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d128      	bne.n	800b630 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7fe fc26 	bl	8009e34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b600:	4b0f      	ldr	r3, [pc, #60]	@ (800b640 <xTaskPriorityDisinherit+0xd8>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	429a      	cmp	r2, r3
 800b606:	d903      	bls.n	800b610 <xTaskPriorityDisinherit+0xa8>
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b60c:	4a0c      	ldr	r2, [pc, #48]	@ (800b640 <xTaskPriorityDisinherit+0xd8>)
 800b60e:	6013      	str	r3, [r2, #0]
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b614:	4613      	mov	r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	4413      	add	r3, r2
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4a09      	ldr	r2, [pc, #36]	@ (800b644 <xTaskPriorityDisinherit+0xdc>)
 800b61e:	441a      	add	r2, r3
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	3304      	adds	r3, #4
 800b624:	4619      	mov	r1, r3
 800b626:	4610      	mov	r0, r2
 800b628:	f7fe fba7 	bl	8009d7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b62c:	2301      	movs	r3, #1
 800b62e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b630:	697b      	ldr	r3, [r7, #20]
	}
 800b632:	4618      	mov	r0, r3
 800b634:	3718      	adds	r7, #24
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	20000cb8 	.word	0x20000cb8
 800b640:	20001194 	.word	0x20001194
 800b644:	20000cbc 	.word	0x20000cbc

0800b648 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b652:	4b21      	ldr	r3, [pc, #132]	@ (800b6d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b658:	4b20      	ldr	r3, [pc, #128]	@ (800b6dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3304      	adds	r3, #4
 800b65e:	4618      	mov	r0, r3
 800b660:	f7fe fbe8 	bl	8009e34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b66a:	d10a      	bne.n	800b682 <prvAddCurrentTaskToDelayedList+0x3a>
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d007      	beq.n	800b682 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b672:	4b1a      	ldr	r3, [pc, #104]	@ (800b6dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	3304      	adds	r3, #4
 800b678:	4619      	mov	r1, r3
 800b67a:	4819      	ldr	r0, [pc, #100]	@ (800b6e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b67c:	f7fe fb7d 	bl	8009d7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b680:	e026      	b.n	800b6d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4413      	add	r3, r2
 800b688:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b68a:	4b14      	ldr	r3, [pc, #80]	@ (800b6dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	68ba      	ldr	r2, [r7, #8]
 800b690:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	429a      	cmp	r2, r3
 800b698:	d209      	bcs.n	800b6ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b69a:	4b12      	ldr	r3, [pc, #72]	@ (800b6e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	4b0f      	ldr	r3, [pc, #60]	@ (800b6dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3304      	adds	r3, #4
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	4610      	mov	r0, r2
 800b6a8:	f7fe fb8b 	bl	8009dc2 <vListInsert>
}
 800b6ac:	e010      	b.n	800b6d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b6e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b6dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	3304      	adds	r3, #4
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	4610      	mov	r0, r2
 800b6bc:	f7fe fb81 	bl	8009dc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b6c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b6ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d202      	bcs.n	800b6d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b6ca:	4a08      	ldr	r2, [pc, #32]	@ (800b6ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	6013      	str	r3, [r2, #0]
}
 800b6d0:	bf00      	nop
 800b6d2:	3710      	adds	r7, #16
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	20001190 	.word	0x20001190
 800b6dc:	20000cb8 	.word	0x20000cb8
 800b6e0:	20001178 	.word	0x20001178
 800b6e4:	20001148 	.word	0x20001148
 800b6e8:	20001144 	.word	0x20001144
 800b6ec:	200011ac 	.word	0x200011ac

0800b6f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b08a      	sub	sp, #40	@ 0x28
 800b6f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b6fa:	f000 fb13 	bl	800bd24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b6fe:	4b1d      	ldr	r3, [pc, #116]	@ (800b774 <xTimerCreateTimerTask+0x84>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d021      	beq.n	800b74a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b706:	2300      	movs	r3, #0
 800b708:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b70a:	2300      	movs	r3, #0
 800b70c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b70e:	1d3a      	adds	r2, r7, #4
 800b710:	f107 0108 	add.w	r1, r7, #8
 800b714:	f107 030c 	add.w	r3, r7, #12
 800b718:	4618      	mov	r0, r3
 800b71a:	f7fe fae7 	bl	8009cec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b71e:	6879      	ldr	r1, [r7, #4]
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	9202      	str	r2, [sp, #8]
 800b726:	9301      	str	r3, [sp, #4]
 800b728:	2302      	movs	r3, #2
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	2300      	movs	r3, #0
 800b72e:	460a      	mov	r2, r1
 800b730:	4911      	ldr	r1, [pc, #68]	@ (800b778 <xTimerCreateTimerTask+0x88>)
 800b732:	4812      	ldr	r0, [pc, #72]	@ (800b77c <xTimerCreateTimerTask+0x8c>)
 800b734:	f7ff f8a2 	bl	800a87c <xTaskCreateStatic>
 800b738:	4603      	mov	r3, r0
 800b73a:	4a11      	ldr	r2, [pc, #68]	@ (800b780 <xTimerCreateTimerTask+0x90>)
 800b73c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b73e:	4b10      	ldr	r3, [pc, #64]	@ (800b780 <xTimerCreateTimerTask+0x90>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b746:	2301      	movs	r3, #1
 800b748:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d10b      	bne.n	800b768 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b754:	f383 8811 	msr	BASEPRI, r3
 800b758:	f3bf 8f6f 	isb	sy
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	613b      	str	r3, [r7, #16]
}
 800b762:	bf00      	nop
 800b764:	bf00      	nop
 800b766:	e7fd      	b.n	800b764 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b768:	697b      	ldr	r3, [r7, #20]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3718      	adds	r7, #24
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	200011e8 	.word	0x200011e8
 800b778:	0800fe10 	.word	0x0800fe10
 800b77c:	0800b8bd 	.word	0x0800b8bd
 800b780:	200011ec 	.word	0x200011ec

0800b784 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b08a      	sub	sp, #40	@ 0x28
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
 800b790:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b792:	2300      	movs	r3, #0
 800b794:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10b      	bne.n	800b7b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800b79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	623b      	str	r3, [r7, #32]
}
 800b7ae:	bf00      	nop
 800b7b0:	bf00      	nop
 800b7b2:	e7fd      	b.n	800b7b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b7b4:	4b19      	ldr	r3, [pc, #100]	@ (800b81c <xTimerGenericCommand+0x98>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d02a      	beq.n	800b812 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	2b05      	cmp	r3, #5
 800b7cc:	dc18      	bgt.n	800b800 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b7ce:	f7ff fead 	bl	800b52c <xTaskGetSchedulerState>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b02      	cmp	r3, #2
 800b7d6:	d109      	bne.n	800b7ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b7d8:	4b10      	ldr	r3, [pc, #64]	@ (800b81c <xTimerGenericCommand+0x98>)
 800b7da:	6818      	ldr	r0, [r3, #0]
 800b7dc:	f107 0110 	add.w	r1, r7, #16
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7e4:	f7fe fc5a 	bl	800a09c <xQueueGenericSend>
 800b7e8:	6278      	str	r0, [r7, #36]	@ 0x24
 800b7ea:	e012      	b.n	800b812 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b7ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b81c <xTimerGenericCommand+0x98>)
 800b7ee:	6818      	ldr	r0, [r3, #0]
 800b7f0:	f107 0110 	add.w	r1, r7, #16
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f7fe fc50 	bl	800a09c <xQueueGenericSend>
 800b7fc:	6278      	str	r0, [r7, #36]	@ 0x24
 800b7fe:	e008      	b.n	800b812 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b800:	4b06      	ldr	r3, [pc, #24]	@ (800b81c <xTimerGenericCommand+0x98>)
 800b802:	6818      	ldr	r0, [r3, #0]
 800b804:	f107 0110 	add.w	r1, r7, #16
 800b808:	2300      	movs	r3, #0
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	f7fe fd48 	bl	800a2a0 <xQueueGenericSendFromISR>
 800b810:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b814:	4618      	mov	r0, r3
 800b816:	3728      	adds	r7, #40	@ 0x28
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	200011e8 	.word	0x200011e8

0800b820 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b088      	sub	sp, #32
 800b824:	af02      	add	r7, sp, #8
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b82a:	4b23      	ldr	r3, [pc, #140]	@ (800b8b8 <prvProcessExpiredTimer+0x98>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	3304      	adds	r3, #4
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fe fafb 	bl	8009e34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b844:	f003 0304 	and.w	r3, r3, #4
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d023      	beq.n	800b894 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	699a      	ldr	r2, [r3, #24]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	18d1      	adds	r1, r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	6978      	ldr	r0, [r7, #20]
 800b85a:	f000 f8d5 	bl	800ba08 <prvInsertTimerInActiveList>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d020      	beq.n	800b8a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b864:	2300      	movs	r3, #0
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	2300      	movs	r3, #0
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	2100      	movs	r1, #0
 800b86e:	6978      	ldr	r0, [r7, #20]
 800b870:	f7ff ff88 	bl	800b784 <xTimerGenericCommand>
 800b874:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d114      	bne.n	800b8a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b87c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b880:	f383 8811 	msr	BASEPRI, r3
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	60fb      	str	r3, [r7, #12]
}
 800b88e:	bf00      	nop
 800b890:	bf00      	nop
 800b892:	e7fd      	b.n	800b890 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b89a:	f023 0301 	bic.w	r3, r3, #1
 800b89e:	b2da      	uxtb	r2, r3
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	6978      	ldr	r0, [r7, #20]
 800b8ac:	4798      	blx	r3
}
 800b8ae:	bf00      	nop
 800b8b0:	3718      	adds	r7, #24
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	200011e0 	.word	0x200011e0

0800b8bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8c4:	f107 0308 	add.w	r3, r7, #8
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f000 f859 	bl	800b980 <prvGetNextExpireTime>
 800b8ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f000 f805 	bl	800b8e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b8da:	f000 f8d7 	bl	800ba8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8de:	bf00      	nop
 800b8e0:	e7f0      	b.n	800b8c4 <prvTimerTask+0x8>
	...

0800b8e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b8ee:	f7ff fa29 	bl	800ad44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8f2:	f107 0308 	add.w	r3, r7, #8
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f000 f866 	bl	800b9c8 <prvSampleTimeNow>
 800b8fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d130      	bne.n	800b966 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10a      	bne.n	800b920 <prvProcessTimerOrBlockTask+0x3c>
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d806      	bhi.n	800b920 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b912:	f7ff fa25 	bl	800ad60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b916:	68f9      	ldr	r1, [r7, #12]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7ff ff81 	bl	800b820 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b91e:	e024      	b.n	800b96a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d008      	beq.n	800b938 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b926:	4b13      	ldr	r3, [pc, #76]	@ (800b974 <prvProcessTimerOrBlockTask+0x90>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d101      	bne.n	800b934 <prvProcessTimerOrBlockTask+0x50>
 800b930:	2301      	movs	r3, #1
 800b932:	e000      	b.n	800b936 <prvProcessTimerOrBlockTask+0x52>
 800b934:	2300      	movs	r3, #0
 800b936:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b938:	4b0f      	ldr	r3, [pc, #60]	@ (800b978 <prvProcessTimerOrBlockTask+0x94>)
 800b93a:	6818      	ldr	r0, [r3, #0]
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	1ad3      	subs	r3, r2, r3
 800b942:	683a      	ldr	r2, [r7, #0]
 800b944:	4619      	mov	r1, r3
 800b946:	f7fe ff65 	bl	800a814 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b94a:	f7ff fa09 	bl	800ad60 <xTaskResumeAll>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d10a      	bne.n	800b96a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b954:	4b09      	ldr	r3, [pc, #36]	@ (800b97c <prvProcessTimerOrBlockTask+0x98>)
 800b956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b95a:	601a      	str	r2, [r3, #0]
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	f3bf 8f6f 	isb	sy
}
 800b964:	e001      	b.n	800b96a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b966:	f7ff f9fb 	bl	800ad60 <xTaskResumeAll>
}
 800b96a:	bf00      	nop
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	200011e4 	.word	0x200011e4
 800b978:	200011e8 	.word	0x200011e8
 800b97c:	e000ed04 	.word	0xe000ed04

0800b980 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b980:	b480      	push	{r7}
 800b982:	b085      	sub	sp, #20
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b988:	4b0e      	ldr	r3, [pc, #56]	@ (800b9c4 <prvGetNextExpireTime+0x44>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d101      	bne.n	800b996 <prvGetNextExpireTime+0x16>
 800b992:	2201      	movs	r2, #1
 800b994:	e000      	b.n	800b998 <prvGetNextExpireTime+0x18>
 800b996:	2200      	movs	r2, #0
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d105      	bne.n	800b9b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9a4:	4b07      	ldr	r3, [pc, #28]	@ (800b9c4 <prvGetNextExpireTime+0x44>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	60fb      	str	r3, [r7, #12]
 800b9ae:	e001      	b.n	800b9b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3714      	adds	r7, #20
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop
 800b9c4:	200011e0 	.word	0x200011e0

0800b9c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b9d0:	f7ff fa64 	bl	800ae9c <xTaskGetTickCount>
 800b9d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800ba04 <prvSampleTimeNow+0x3c>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d205      	bcs.n	800b9ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b9e0:	f000 f93a 	bl	800bc58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	601a      	str	r2, [r3, #0]
 800b9ea:	e002      	b.n	800b9f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b9f2:	4a04      	ldr	r2, [pc, #16]	@ (800ba04 <prvSampleTimeNow+0x3c>)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3710      	adds	r7, #16
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	200011f0 	.word	0x200011f0

0800ba08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b086      	sub	sp, #24
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
 800ba14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ba16:	2300      	movs	r3, #0
 800ba18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d812      	bhi.n	800ba54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	1ad2      	subs	r2, r2, r3
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	699b      	ldr	r3, [r3, #24]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d302      	bcc.n	800ba42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	617b      	str	r3, [r7, #20]
 800ba40:	e01b      	b.n	800ba7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba42:	4b10      	ldr	r3, [pc, #64]	@ (800ba84 <prvInsertTimerInActiveList+0x7c>)
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	3304      	adds	r3, #4
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	f7fe f9b8 	bl	8009dc2 <vListInsert>
 800ba52:	e012      	b.n	800ba7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d206      	bcs.n	800ba6a <prvInsertTimerInActiveList+0x62>
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d302      	bcc.n	800ba6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ba64:	2301      	movs	r3, #1
 800ba66:	617b      	str	r3, [r7, #20]
 800ba68:	e007      	b.n	800ba7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba6a:	4b07      	ldr	r3, [pc, #28]	@ (800ba88 <prvInsertTimerInActiveList+0x80>)
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	3304      	adds	r3, #4
 800ba72:	4619      	mov	r1, r3
 800ba74:	4610      	mov	r0, r2
 800ba76:	f7fe f9a4 	bl	8009dc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba7a:	697b      	ldr	r3, [r7, #20]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	200011e4 	.word	0x200011e4
 800ba88:	200011e0 	.word	0x200011e0

0800ba8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b08e      	sub	sp, #56	@ 0x38
 800ba90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba92:	e0ce      	b.n	800bc32 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	da19      	bge.n	800bace <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ba9a:	1d3b      	adds	r3, r7, #4
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800baa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10b      	bne.n	800babe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800baa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baaa:	f383 8811 	msr	BASEPRI, r3
 800baae:	f3bf 8f6f 	isb	sy
 800bab2:	f3bf 8f4f 	dsb	sy
 800bab6:	61fb      	str	r3, [r7, #28]
}
 800bab8:	bf00      	nop
 800baba:	bf00      	nop
 800babc:	e7fd      	b.n	800baba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800babe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bac4:	6850      	ldr	r0, [r2, #4]
 800bac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bac8:	6892      	ldr	r2, [r2, #8]
 800baca:	4611      	mov	r1, r2
 800bacc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f2c0 80ae 	blt.w	800bc32 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800badc:	695b      	ldr	r3, [r3, #20]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d004      	beq.n	800baec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae4:	3304      	adds	r3, #4
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fe f9a4 	bl	8009e34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800baec:	463b      	mov	r3, r7
 800baee:	4618      	mov	r0, r3
 800baf0:	f7ff ff6a 	bl	800b9c8 <prvSampleTimeNow>
 800baf4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2b09      	cmp	r3, #9
 800bafa:	f200 8097 	bhi.w	800bc2c <prvProcessReceivedCommands+0x1a0>
 800bafe:	a201      	add	r2, pc, #4	@ (adr r2, 800bb04 <prvProcessReceivedCommands+0x78>)
 800bb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb04:	0800bb2d 	.word	0x0800bb2d
 800bb08:	0800bb2d 	.word	0x0800bb2d
 800bb0c:	0800bb2d 	.word	0x0800bb2d
 800bb10:	0800bba3 	.word	0x0800bba3
 800bb14:	0800bbb7 	.word	0x0800bbb7
 800bb18:	0800bc03 	.word	0x0800bc03
 800bb1c:	0800bb2d 	.word	0x0800bb2d
 800bb20:	0800bb2d 	.word	0x0800bb2d
 800bb24:	0800bba3 	.word	0x0800bba3
 800bb28:	0800bbb7 	.word	0x0800bbb7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb32:	f043 0301 	orr.w	r3, r3, #1
 800bb36:	b2da      	uxtb	r2, r3
 800bb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb3e:	68ba      	ldr	r2, [r7, #8]
 800bb40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb42:	699b      	ldr	r3, [r3, #24]
 800bb44:	18d1      	adds	r1, r2, r3
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb4c:	f7ff ff5c 	bl	800ba08 <prvInsertTimerInActiveList>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d06c      	beq.n	800bc30 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb58:	6a1b      	ldr	r3, [r3, #32]
 800bb5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb64:	f003 0304 	and.w	r3, r3, #4
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d061      	beq.n	800bc30 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bb6c:	68ba      	ldr	r2, [r7, #8]
 800bb6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	441a      	add	r2, r3
 800bb74:	2300      	movs	r3, #0
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	2300      	movs	r3, #0
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb7e:	f7ff fe01 	bl	800b784 <xTimerGenericCommand>
 800bb82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb84:	6a3b      	ldr	r3, [r7, #32]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d152      	bne.n	800bc30 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bb8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb8e:	f383 8811 	msr	BASEPRI, r3
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	61bb      	str	r3, [r7, #24]
}
 800bb9c:	bf00      	nop
 800bb9e:	bf00      	nop
 800bba0:	e7fd      	b.n	800bb9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bba8:	f023 0301 	bic.w	r3, r3, #1
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bbb4:	e03d      	b.n	800bc32 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbbc:	f043 0301 	orr.w	r3, r3, #1
 800bbc0:	b2da      	uxtb	r2, r3
 800bbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbcc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd0:	699b      	ldr	r3, [r3, #24]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d10b      	bne.n	800bbee <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	617b      	str	r3, [r7, #20]
}
 800bbe8:	bf00      	nop
 800bbea:	bf00      	nop
 800bbec:	e7fd      	b.n	800bbea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf0:	699a      	ldr	r2, [r3, #24]
 800bbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf4:	18d1      	adds	r1, r2, r3
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbfc:	f7ff ff04 	bl	800ba08 <prvInsertTimerInActiveList>
					break;
 800bc00:	e017      	b.n	800bc32 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bc02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc08:	f003 0302 	and.w	r3, r3, #2
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d103      	bne.n	800bc18 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bc10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc12:	f000 fbe9 	bl	800c3e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bc16:	e00c      	b.n	800bc32 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc1e:	f023 0301 	bic.w	r3, r3, #1
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bc2a:	e002      	b.n	800bc32 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bc2c:	bf00      	nop
 800bc2e:	e000      	b.n	800bc32 <prvProcessReceivedCommands+0x1a6>
					break;
 800bc30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc32:	4b08      	ldr	r3, [pc, #32]	@ (800bc54 <prvProcessReceivedCommands+0x1c8>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	1d39      	adds	r1, r7, #4
 800bc38:	2200      	movs	r2, #0
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fe fbce 	bl	800a3dc <xQueueReceive>
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f47f af26 	bne.w	800ba94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bc48:	bf00      	nop
 800bc4a:	bf00      	nop
 800bc4c:	3730      	adds	r7, #48	@ 0x30
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	200011e8 	.word	0x200011e8

0800bc58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b088      	sub	sp, #32
 800bc5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc5e:	e049      	b.n	800bcf4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc60:	4b2e      	ldr	r3, [pc, #184]	@ (800bd1c <prvSwitchTimerLists+0xc4>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc6a:	4b2c      	ldr	r3, [pc, #176]	@ (800bd1c <prvSwitchTimerLists+0xc4>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	68db      	ldr	r3, [r3, #12]
 800bc72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	3304      	adds	r3, #4
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7fe f8db 	bl	8009e34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc8c:	f003 0304 	and.w	r3, r3, #4
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d02f      	beq.n	800bcf4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	699b      	ldr	r3, [r3, #24]
 800bc98:	693a      	ldr	r2, [r7, #16]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d90e      	bls.n	800bcc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bcb2:	4b1a      	ldr	r3, [pc, #104]	@ (800bd1c <prvSwitchTimerLists+0xc4>)
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	3304      	adds	r3, #4
 800bcba:	4619      	mov	r1, r3
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	f7fe f880 	bl	8009dc2 <vListInsert>
 800bcc2:	e017      	b.n	800bcf4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	2300      	movs	r3, #0
 800bcca:	693a      	ldr	r2, [r7, #16]
 800bccc:	2100      	movs	r1, #0
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f7ff fd58 	bl	800b784 <xTimerGenericCommand>
 800bcd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10b      	bne.n	800bcf4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bcdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	603b      	str	r3, [r7, #0]
}
 800bcee:	bf00      	nop
 800bcf0:	bf00      	nop
 800bcf2:	e7fd      	b.n	800bcf0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcf4:	4b09      	ldr	r3, [pc, #36]	@ (800bd1c <prvSwitchTimerLists+0xc4>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1b0      	bne.n	800bc60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bcfe:	4b07      	ldr	r3, [pc, #28]	@ (800bd1c <prvSwitchTimerLists+0xc4>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bd04:	4b06      	ldr	r3, [pc, #24]	@ (800bd20 <prvSwitchTimerLists+0xc8>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a04      	ldr	r2, [pc, #16]	@ (800bd1c <prvSwitchTimerLists+0xc4>)
 800bd0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bd0c:	4a04      	ldr	r2, [pc, #16]	@ (800bd20 <prvSwitchTimerLists+0xc8>)
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	6013      	str	r3, [r2, #0]
}
 800bd12:	bf00      	nop
 800bd14:	3718      	adds	r7, #24
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	200011e0 	.word	0x200011e0
 800bd20:	200011e4 	.word	0x200011e4

0800bd24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bd2a:	f000 f96d 	bl	800c008 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bd2e:	4b15      	ldr	r3, [pc, #84]	@ (800bd84 <prvCheckForValidListAndQueue+0x60>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d120      	bne.n	800bd78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bd36:	4814      	ldr	r0, [pc, #80]	@ (800bd88 <prvCheckForValidListAndQueue+0x64>)
 800bd38:	f7fd fff2 	bl	8009d20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bd3c:	4813      	ldr	r0, [pc, #76]	@ (800bd8c <prvCheckForValidListAndQueue+0x68>)
 800bd3e:	f7fd ffef 	bl	8009d20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bd42:	4b13      	ldr	r3, [pc, #76]	@ (800bd90 <prvCheckForValidListAndQueue+0x6c>)
 800bd44:	4a10      	ldr	r2, [pc, #64]	@ (800bd88 <prvCheckForValidListAndQueue+0x64>)
 800bd46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bd48:	4b12      	ldr	r3, [pc, #72]	@ (800bd94 <prvCheckForValidListAndQueue+0x70>)
 800bd4a:	4a10      	ldr	r2, [pc, #64]	@ (800bd8c <prvCheckForValidListAndQueue+0x68>)
 800bd4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bd4e:	2300      	movs	r3, #0
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	4b11      	ldr	r3, [pc, #68]	@ (800bd98 <prvCheckForValidListAndQueue+0x74>)
 800bd54:	4a11      	ldr	r2, [pc, #68]	@ (800bd9c <prvCheckForValidListAndQueue+0x78>)
 800bd56:	2110      	movs	r1, #16
 800bd58:	200a      	movs	r0, #10
 800bd5a:	f7fe f8ff 	bl	8009f5c <xQueueGenericCreateStatic>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	4a08      	ldr	r2, [pc, #32]	@ (800bd84 <prvCheckForValidListAndQueue+0x60>)
 800bd62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bd64:	4b07      	ldr	r3, [pc, #28]	@ (800bd84 <prvCheckForValidListAndQueue+0x60>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d005      	beq.n	800bd78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bd6c:	4b05      	ldr	r3, [pc, #20]	@ (800bd84 <prvCheckForValidListAndQueue+0x60>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	490b      	ldr	r1, [pc, #44]	@ (800bda0 <prvCheckForValidListAndQueue+0x7c>)
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7fe fd24 	bl	800a7c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd78:	f000 f978 	bl	800c06c <vPortExitCritical>
}
 800bd7c:	bf00      	nop
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	200011e8 	.word	0x200011e8
 800bd88:	200011b8 	.word	0x200011b8
 800bd8c:	200011cc 	.word	0x200011cc
 800bd90:	200011e0 	.word	0x200011e0
 800bd94:	200011e4 	.word	0x200011e4
 800bd98:	20001294 	.word	0x20001294
 800bd9c:	200011f4 	.word	0x200011f4
 800bda0:	0800fe18 	.word	0x0800fe18

0800bda4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	3b04      	subs	r3, #4
 800bdb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bdbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	3b04      	subs	r3, #4
 800bdc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	f023 0201 	bic.w	r2, r3, #1
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	3b04      	subs	r3, #4
 800bdd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bdd4:	4a0c      	ldr	r2, [pc, #48]	@ (800be08 <pxPortInitialiseStack+0x64>)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	3b14      	subs	r3, #20
 800bdde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	3b04      	subs	r3, #4
 800bdea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f06f 0202 	mvn.w	r2, #2
 800bdf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	3b20      	subs	r3, #32
 800bdf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3714      	adds	r7, #20
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr
 800be08:	0800be0d 	.word	0x0800be0d

0800be0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be0c:	b480      	push	{r7}
 800be0e:	b085      	sub	sp, #20
 800be10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800be12:	2300      	movs	r3, #0
 800be14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be16:	4b13      	ldr	r3, [pc, #76]	@ (800be64 <prvTaskExitError+0x58>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be1e:	d00b      	beq.n	800be38 <prvTaskExitError+0x2c>
	__asm volatile
 800be20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	60fb      	str	r3, [r7, #12]
}
 800be32:	bf00      	nop
 800be34:	bf00      	nop
 800be36:	e7fd      	b.n	800be34 <prvTaskExitError+0x28>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	60bb      	str	r3, [r7, #8]
}
 800be4a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be4c:	bf00      	nop
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d0fc      	beq.n	800be4e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be54:	bf00      	nop
 800be56:	bf00      	nop
 800be58:	3714      	adds	r7, #20
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	2000011c 	.word	0x2000011c
	...

0800be70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be70:	4b07      	ldr	r3, [pc, #28]	@ (800be90 <pxCurrentTCBConst2>)
 800be72:	6819      	ldr	r1, [r3, #0]
 800be74:	6808      	ldr	r0, [r1, #0]
 800be76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7a:	f380 8809 	msr	PSP, r0
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	f04f 0000 	mov.w	r0, #0
 800be86:	f380 8811 	msr	BASEPRI, r0
 800be8a:	4770      	bx	lr
 800be8c:	f3af 8000 	nop.w

0800be90 <pxCurrentTCBConst2>:
 800be90:	20000cb8 	.word	0x20000cb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be94:	bf00      	nop
 800be96:	bf00      	nop

0800be98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be98:	4808      	ldr	r0, [pc, #32]	@ (800bebc <prvPortStartFirstTask+0x24>)
 800be9a:	6800      	ldr	r0, [r0, #0]
 800be9c:	6800      	ldr	r0, [r0, #0]
 800be9e:	f380 8808 	msr	MSP, r0
 800bea2:	f04f 0000 	mov.w	r0, #0
 800bea6:	f380 8814 	msr	CONTROL, r0
 800beaa:	b662      	cpsie	i
 800beac:	b661      	cpsie	f
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	df00      	svc	0
 800beb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800beba:	bf00      	nop
 800bebc:	e000ed08 	.word	0xe000ed08

0800bec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b086      	sub	sp, #24
 800bec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bec6:	4b47      	ldr	r3, [pc, #284]	@ (800bfe4 <xPortStartScheduler+0x124>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4a47      	ldr	r2, [pc, #284]	@ (800bfe8 <xPortStartScheduler+0x128>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d10b      	bne.n	800bee8 <xPortStartScheduler+0x28>
	__asm volatile
 800bed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed4:	f383 8811 	msr	BASEPRI, r3
 800bed8:	f3bf 8f6f 	isb	sy
 800bedc:	f3bf 8f4f 	dsb	sy
 800bee0:	613b      	str	r3, [r7, #16]
}
 800bee2:	bf00      	nop
 800bee4:	bf00      	nop
 800bee6:	e7fd      	b.n	800bee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bee8:	4b3e      	ldr	r3, [pc, #248]	@ (800bfe4 <xPortStartScheduler+0x124>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a3f      	ldr	r2, [pc, #252]	@ (800bfec <xPortStartScheduler+0x12c>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d10b      	bne.n	800bf0a <xPortStartScheduler+0x4a>
	__asm volatile
 800bef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	60fb      	str	r3, [r7, #12]
}
 800bf04:	bf00      	nop
 800bf06:	bf00      	nop
 800bf08:	e7fd      	b.n	800bf06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf0a:	4b39      	ldr	r3, [pc, #228]	@ (800bff0 <xPortStartScheduler+0x130>)
 800bf0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	22ff      	movs	r2, #255	@ 0xff
 800bf1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf24:	78fb      	ldrb	r3, [r7, #3]
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	4b31      	ldr	r3, [pc, #196]	@ (800bff4 <xPortStartScheduler+0x134>)
 800bf30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf32:	4b31      	ldr	r3, [pc, #196]	@ (800bff8 <xPortStartScheduler+0x138>)
 800bf34:	2207      	movs	r2, #7
 800bf36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf38:	e009      	b.n	800bf4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bf3a:	4b2f      	ldr	r3, [pc, #188]	@ (800bff8 <xPortStartScheduler+0x138>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	4a2d      	ldr	r2, [pc, #180]	@ (800bff8 <xPortStartScheduler+0x138>)
 800bf42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf44:	78fb      	ldrb	r3, [r7, #3]
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	005b      	lsls	r3, r3, #1
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf4e:	78fb      	ldrb	r3, [r7, #3]
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf56:	2b80      	cmp	r3, #128	@ 0x80
 800bf58:	d0ef      	beq.n	800bf3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf5a:	4b27      	ldr	r3, [pc, #156]	@ (800bff8 <xPortStartScheduler+0x138>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f1c3 0307 	rsb	r3, r3, #7
 800bf62:	2b04      	cmp	r3, #4
 800bf64:	d00b      	beq.n	800bf7e <xPortStartScheduler+0xbe>
	__asm volatile
 800bf66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf6a:	f383 8811 	msr	BASEPRI, r3
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	f3bf 8f4f 	dsb	sy
 800bf76:	60bb      	str	r3, [r7, #8]
}
 800bf78:	bf00      	nop
 800bf7a:	bf00      	nop
 800bf7c:	e7fd      	b.n	800bf7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf7e:	4b1e      	ldr	r3, [pc, #120]	@ (800bff8 <xPortStartScheduler+0x138>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	021b      	lsls	r3, r3, #8
 800bf84:	4a1c      	ldr	r2, [pc, #112]	@ (800bff8 <xPortStartScheduler+0x138>)
 800bf86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf88:	4b1b      	ldr	r3, [pc, #108]	@ (800bff8 <xPortStartScheduler+0x138>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bf90:	4a19      	ldr	r2, [pc, #100]	@ (800bff8 <xPortStartScheduler+0x138>)
 800bf92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf9c:	4b17      	ldr	r3, [pc, #92]	@ (800bffc <xPortStartScheduler+0x13c>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a16      	ldr	r2, [pc, #88]	@ (800bffc <xPortStartScheduler+0x13c>)
 800bfa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bfa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bfa8:	4b14      	ldr	r3, [pc, #80]	@ (800bffc <xPortStartScheduler+0x13c>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a13      	ldr	r2, [pc, #76]	@ (800bffc <xPortStartScheduler+0x13c>)
 800bfae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bfb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bfb4:	f000 f8da 	bl	800c16c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bfb8:	4b11      	ldr	r3, [pc, #68]	@ (800c000 <xPortStartScheduler+0x140>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bfbe:	f000 f8f9 	bl	800c1b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bfc2:	4b10      	ldr	r3, [pc, #64]	@ (800c004 <xPortStartScheduler+0x144>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4a0f      	ldr	r2, [pc, #60]	@ (800c004 <xPortStartScheduler+0x144>)
 800bfc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bfcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bfce:	f7ff ff63 	bl	800be98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bfd2:	f7ff f82d 	bl	800b030 <vTaskSwitchContext>
	prvTaskExitError();
 800bfd6:	f7ff ff19 	bl	800be0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bfda:	2300      	movs	r3, #0
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3718      	adds	r7, #24
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	e000ed00 	.word	0xe000ed00
 800bfe8:	410fc271 	.word	0x410fc271
 800bfec:	410fc270 	.word	0x410fc270
 800bff0:	e000e400 	.word	0xe000e400
 800bff4:	200012e4 	.word	0x200012e4
 800bff8:	200012e8 	.word	0x200012e8
 800bffc:	e000ed20 	.word	0xe000ed20
 800c000:	2000011c 	.word	0x2000011c
 800c004:	e000ef34 	.word	0xe000ef34

0800c008 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	607b      	str	r3, [r7, #4]
}
 800c020:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c022:	4b10      	ldr	r3, [pc, #64]	@ (800c064 <vPortEnterCritical+0x5c>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	3301      	adds	r3, #1
 800c028:	4a0e      	ldr	r2, [pc, #56]	@ (800c064 <vPortEnterCritical+0x5c>)
 800c02a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c02c:	4b0d      	ldr	r3, [pc, #52]	@ (800c064 <vPortEnterCritical+0x5c>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2b01      	cmp	r3, #1
 800c032:	d110      	bne.n	800c056 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c034:	4b0c      	ldr	r3, [pc, #48]	@ (800c068 <vPortEnterCritical+0x60>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00b      	beq.n	800c056 <vPortEnterCritical+0x4e>
	__asm volatile
 800c03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c042:	f383 8811 	msr	BASEPRI, r3
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	603b      	str	r3, [r7, #0]
}
 800c050:	bf00      	nop
 800c052:	bf00      	nop
 800c054:	e7fd      	b.n	800c052 <vPortEnterCritical+0x4a>
	}
}
 800c056:	bf00      	nop
 800c058:	370c      	adds	r7, #12
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	2000011c 	.word	0x2000011c
 800c068:	e000ed04 	.word	0xe000ed04

0800c06c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c072:	4b12      	ldr	r3, [pc, #72]	@ (800c0bc <vPortExitCritical+0x50>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d10b      	bne.n	800c092 <vPortExitCritical+0x26>
	__asm volatile
 800c07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	607b      	str	r3, [r7, #4]
}
 800c08c:	bf00      	nop
 800c08e:	bf00      	nop
 800c090:	e7fd      	b.n	800c08e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c092:	4b0a      	ldr	r3, [pc, #40]	@ (800c0bc <vPortExitCritical+0x50>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	3b01      	subs	r3, #1
 800c098:	4a08      	ldr	r2, [pc, #32]	@ (800c0bc <vPortExitCritical+0x50>)
 800c09a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c09c:	4b07      	ldr	r3, [pc, #28]	@ (800c0bc <vPortExitCritical+0x50>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d105      	bne.n	800c0b0 <vPortExitCritical+0x44>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	f383 8811 	msr	BASEPRI, r3
}
 800c0ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c0b0:	bf00      	nop
 800c0b2:	370c      	adds	r7, #12
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr
 800c0bc:	2000011c 	.word	0x2000011c

0800c0c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c0c0:	f3ef 8009 	mrs	r0, PSP
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	4b15      	ldr	r3, [pc, #84]	@ (800c120 <pxCurrentTCBConst>)
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	f01e 0f10 	tst.w	lr, #16
 800c0d0:	bf08      	it	eq
 800c0d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c0d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0da:	6010      	str	r0, [r2, #0]
 800c0dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c0e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c0e4:	f380 8811 	msr	BASEPRI, r0
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	f3bf 8f6f 	isb	sy
 800c0f0:	f7fe ff9e 	bl	800b030 <vTaskSwitchContext>
 800c0f4:	f04f 0000 	mov.w	r0, #0
 800c0f8:	f380 8811 	msr	BASEPRI, r0
 800c0fc:	bc09      	pop	{r0, r3}
 800c0fe:	6819      	ldr	r1, [r3, #0]
 800c100:	6808      	ldr	r0, [r1, #0]
 800c102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c106:	f01e 0f10 	tst.w	lr, #16
 800c10a:	bf08      	it	eq
 800c10c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c110:	f380 8809 	msr	PSP, r0
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop
 800c11c:	f3af 8000 	nop.w

0800c120 <pxCurrentTCBConst>:
 800c120:	20000cb8 	.word	0x20000cb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c124:	bf00      	nop
 800c126:	bf00      	nop

0800c128 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
	__asm volatile
 800c12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c132:	f383 8811 	msr	BASEPRI, r3
 800c136:	f3bf 8f6f 	isb	sy
 800c13a:	f3bf 8f4f 	dsb	sy
 800c13e:	607b      	str	r3, [r7, #4]
}
 800c140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c142:	f7fe febb 	bl	800aebc <xTaskIncrementTick>
 800c146:	4603      	mov	r3, r0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d003      	beq.n	800c154 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c14c:	4b06      	ldr	r3, [pc, #24]	@ (800c168 <xPortSysTickHandler+0x40>)
 800c14e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c152:	601a      	str	r2, [r3, #0]
 800c154:	2300      	movs	r3, #0
 800c156:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	f383 8811 	msr	BASEPRI, r3
}
 800c15e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c160:	bf00      	nop
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	e000ed04 	.word	0xe000ed04

0800c16c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c16c:	b480      	push	{r7}
 800c16e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c170:	4b0b      	ldr	r3, [pc, #44]	@ (800c1a0 <vPortSetupTimerInterrupt+0x34>)
 800c172:	2200      	movs	r2, #0
 800c174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c176:	4b0b      	ldr	r3, [pc, #44]	@ (800c1a4 <vPortSetupTimerInterrupt+0x38>)
 800c178:	2200      	movs	r2, #0
 800c17a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c17c:	4b0a      	ldr	r3, [pc, #40]	@ (800c1a8 <vPortSetupTimerInterrupt+0x3c>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a0a      	ldr	r2, [pc, #40]	@ (800c1ac <vPortSetupTimerInterrupt+0x40>)
 800c182:	fba2 2303 	umull	r2, r3, r2, r3
 800c186:	099b      	lsrs	r3, r3, #6
 800c188:	4a09      	ldr	r2, [pc, #36]	@ (800c1b0 <vPortSetupTimerInterrupt+0x44>)
 800c18a:	3b01      	subs	r3, #1
 800c18c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c18e:	4b04      	ldr	r3, [pc, #16]	@ (800c1a0 <vPortSetupTimerInterrupt+0x34>)
 800c190:	2207      	movs	r2, #7
 800c192:	601a      	str	r2, [r3, #0]
}
 800c194:	bf00      	nop
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	e000e010 	.word	0xe000e010
 800c1a4:	e000e018 	.word	0xe000e018
 800c1a8:	20000000 	.word	0x20000000
 800c1ac:	10624dd3 	.word	0x10624dd3
 800c1b0:	e000e014 	.word	0xe000e014

0800c1b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c1b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c1c4 <vPortEnableVFP+0x10>
 800c1b8:	6801      	ldr	r1, [r0, #0]
 800c1ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c1be:	6001      	str	r1, [r0, #0]
 800c1c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c1c2:	bf00      	nop
 800c1c4:	e000ed88 	.word	0xe000ed88

0800c1c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c1ce:	f3ef 8305 	mrs	r3, IPSR
 800c1d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2b0f      	cmp	r3, #15
 800c1d8:	d915      	bls.n	800c206 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1da:	4a18      	ldr	r2, [pc, #96]	@ (800c23c <vPortValidateInterruptPriority+0x74>)
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	4413      	add	r3, r2
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1e4:	4b16      	ldr	r3, [pc, #88]	@ (800c240 <vPortValidateInterruptPriority+0x78>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	7afa      	ldrb	r2, [r7, #11]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d20b      	bcs.n	800c206 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	607b      	str	r3, [r7, #4]
}
 800c200:	bf00      	nop
 800c202:	bf00      	nop
 800c204:	e7fd      	b.n	800c202 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c206:	4b0f      	ldr	r3, [pc, #60]	@ (800c244 <vPortValidateInterruptPriority+0x7c>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c20e:	4b0e      	ldr	r3, [pc, #56]	@ (800c248 <vPortValidateInterruptPriority+0x80>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	429a      	cmp	r2, r3
 800c214:	d90b      	bls.n	800c22e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c21a:	f383 8811 	msr	BASEPRI, r3
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	f3bf 8f4f 	dsb	sy
 800c226:	603b      	str	r3, [r7, #0]
}
 800c228:	bf00      	nop
 800c22a:	bf00      	nop
 800c22c:	e7fd      	b.n	800c22a <vPortValidateInterruptPriority+0x62>
	}
 800c22e:	bf00      	nop
 800c230:	3714      	adds	r7, #20
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	e000e3f0 	.word	0xe000e3f0
 800c240:	200012e4 	.word	0x200012e4
 800c244:	e000ed0c 	.word	0xe000ed0c
 800c248:	200012e8 	.word	0x200012e8

0800c24c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b08a      	sub	sp, #40	@ 0x28
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c254:	2300      	movs	r3, #0
 800c256:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c258:	f7fe fd74 	bl	800ad44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c25c:	4b5c      	ldr	r3, [pc, #368]	@ (800c3d0 <pvPortMalloc+0x184>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d101      	bne.n	800c268 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c264:	f000 f924 	bl	800c4b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c268:	4b5a      	ldr	r3, [pc, #360]	@ (800c3d4 <pvPortMalloc+0x188>)
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4013      	ands	r3, r2
 800c270:	2b00      	cmp	r3, #0
 800c272:	f040 8095 	bne.w	800c3a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d01e      	beq.n	800c2ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c27c:	2208      	movs	r2, #8
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4413      	add	r3, r2
 800c282:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f003 0307 	and.w	r3, r3, #7
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d015      	beq.n	800c2ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f023 0307 	bic.w	r3, r3, #7
 800c294:	3308      	adds	r3, #8
 800c296:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f003 0307 	and.w	r3, r3, #7
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00b      	beq.n	800c2ba <pvPortMalloc+0x6e>
	__asm volatile
 800c2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	617b      	str	r3, [r7, #20]
}
 800c2b4:	bf00      	nop
 800c2b6:	bf00      	nop
 800c2b8:	e7fd      	b.n	800c2b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d06f      	beq.n	800c3a0 <pvPortMalloc+0x154>
 800c2c0:	4b45      	ldr	r3, [pc, #276]	@ (800c3d8 <pvPortMalloc+0x18c>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d86a      	bhi.n	800c3a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2ca:	4b44      	ldr	r3, [pc, #272]	@ (800c3dc <pvPortMalloc+0x190>)
 800c2cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c2ce:	4b43      	ldr	r3, [pc, #268]	@ (800c3dc <pvPortMalloc+0x190>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2d4:	e004      	b.n	800c2e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d903      	bls.n	800c2f2 <pvPortMalloc+0xa6>
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1f1      	bne.n	800c2d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2f2:	4b37      	ldr	r3, [pc, #220]	@ (800c3d0 <pvPortMalloc+0x184>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d051      	beq.n	800c3a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2fc:	6a3b      	ldr	r3, [r7, #32]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2208      	movs	r2, #8
 800c302:	4413      	add	r3, r2
 800c304:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	6a3b      	ldr	r3, [r7, #32]
 800c30c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c310:	685a      	ldr	r2, [r3, #4]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	1ad2      	subs	r2, r2, r3
 800c316:	2308      	movs	r3, #8
 800c318:	005b      	lsls	r3, r3, #1
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d920      	bls.n	800c360 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c31e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	4413      	add	r3, r2
 800c324:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c326:	69bb      	ldr	r3, [r7, #24]
 800c328:	f003 0307 	and.w	r3, r3, #7
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00b      	beq.n	800c348 <pvPortMalloc+0xfc>
	__asm volatile
 800c330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c334:	f383 8811 	msr	BASEPRI, r3
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	613b      	str	r3, [r7, #16]
}
 800c342:	bf00      	nop
 800c344:	bf00      	nop
 800c346:	e7fd      	b.n	800c344 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34a:	685a      	ldr	r2, [r3, #4]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	1ad2      	subs	r2, r2, r3
 800c350:	69bb      	ldr	r3, [r7, #24]
 800c352:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c35a:	69b8      	ldr	r0, [r7, #24]
 800c35c:	f000 f90a 	bl	800c574 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c360:	4b1d      	ldr	r3, [pc, #116]	@ (800c3d8 <pvPortMalloc+0x18c>)
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	1ad3      	subs	r3, r2, r3
 800c36a:	4a1b      	ldr	r2, [pc, #108]	@ (800c3d8 <pvPortMalloc+0x18c>)
 800c36c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c36e:	4b1a      	ldr	r3, [pc, #104]	@ (800c3d8 <pvPortMalloc+0x18c>)
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	4b1b      	ldr	r3, [pc, #108]	@ (800c3e0 <pvPortMalloc+0x194>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	429a      	cmp	r2, r3
 800c378:	d203      	bcs.n	800c382 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c37a:	4b17      	ldr	r3, [pc, #92]	@ (800c3d8 <pvPortMalloc+0x18c>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a18      	ldr	r2, [pc, #96]	@ (800c3e0 <pvPortMalloc+0x194>)
 800c380:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c384:	685a      	ldr	r2, [r3, #4]
 800c386:	4b13      	ldr	r3, [pc, #76]	@ (800c3d4 <pvPortMalloc+0x188>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	431a      	orrs	r2, r3
 800c38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c392:	2200      	movs	r2, #0
 800c394:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c396:	4b13      	ldr	r3, [pc, #76]	@ (800c3e4 <pvPortMalloc+0x198>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	3301      	adds	r3, #1
 800c39c:	4a11      	ldr	r2, [pc, #68]	@ (800c3e4 <pvPortMalloc+0x198>)
 800c39e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c3a0:	f7fe fcde 	bl	800ad60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	f003 0307 	and.w	r3, r3, #7
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00b      	beq.n	800c3c6 <pvPortMalloc+0x17a>
	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	60fb      	str	r3, [r7, #12]
}
 800c3c0:	bf00      	nop
 800c3c2:	bf00      	nop
 800c3c4:	e7fd      	b.n	800c3c2 <pvPortMalloc+0x176>
	return pvReturn;
 800c3c6:	69fb      	ldr	r3, [r7, #28]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3728      	adds	r7, #40	@ 0x28
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	20010cf4 	.word	0x20010cf4
 800c3d4:	20010d08 	.word	0x20010d08
 800c3d8:	20010cf8 	.word	0x20010cf8
 800c3dc:	20010cec 	.word	0x20010cec
 800c3e0:	20010cfc 	.word	0x20010cfc
 800c3e4:	20010d00 	.word	0x20010d00

0800c3e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d04f      	beq.n	800c49a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3fa:	2308      	movs	r3, #8
 800c3fc:	425b      	negs	r3, r3
 800c3fe:	697a      	ldr	r2, [r7, #20]
 800c400:	4413      	add	r3, r2
 800c402:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	685a      	ldr	r2, [r3, #4]
 800c40c:	4b25      	ldr	r3, [pc, #148]	@ (800c4a4 <vPortFree+0xbc>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4013      	ands	r3, r2
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10b      	bne.n	800c42e <vPortFree+0x46>
	__asm volatile
 800c416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41a:	f383 8811 	msr	BASEPRI, r3
 800c41e:	f3bf 8f6f 	isb	sy
 800c422:	f3bf 8f4f 	dsb	sy
 800c426:	60fb      	str	r3, [r7, #12]
}
 800c428:	bf00      	nop
 800c42a:	bf00      	nop
 800c42c:	e7fd      	b.n	800c42a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00b      	beq.n	800c44e <vPortFree+0x66>
	__asm volatile
 800c436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c43a:	f383 8811 	msr	BASEPRI, r3
 800c43e:	f3bf 8f6f 	isb	sy
 800c442:	f3bf 8f4f 	dsb	sy
 800c446:	60bb      	str	r3, [r7, #8]
}
 800c448:	bf00      	nop
 800c44a:	bf00      	nop
 800c44c:	e7fd      	b.n	800c44a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	685a      	ldr	r2, [r3, #4]
 800c452:	4b14      	ldr	r3, [pc, #80]	@ (800c4a4 <vPortFree+0xbc>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4013      	ands	r3, r2
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d01e      	beq.n	800c49a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d11a      	bne.n	800c49a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	685a      	ldr	r2, [r3, #4]
 800c468:	4b0e      	ldr	r3, [pc, #56]	@ (800c4a4 <vPortFree+0xbc>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	43db      	mvns	r3, r3
 800c46e:	401a      	ands	r2, r3
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c474:	f7fe fc66 	bl	800ad44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	685a      	ldr	r2, [r3, #4]
 800c47c:	4b0a      	ldr	r3, [pc, #40]	@ (800c4a8 <vPortFree+0xc0>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4413      	add	r3, r2
 800c482:	4a09      	ldr	r2, [pc, #36]	@ (800c4a8 <vPortFree+0xc0>)
 800c484:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c486:	6938      	ldr	r0, [r7, #16]
 800c488:	f000 f874 	bl	800c574 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c48c:	4b07      	ldr	r3, [pc, #28]	@ (800c4ac <vPortFree+0xc4>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	3301      	adds	r3, #1
 800c492:	4a06      	ldr	r2, [pc, #24]	@ (800c4ac <vPortFree+0xc4>)
 800c494:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c496:	f7fe fc63 	bl	800ad60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c49a:	bf00      	nop
 800c49c:	3718      	adds	r7, #24
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	20010d08 	.word	0x20010d08
 800c4a8:	20010cf8 	.word	0x20010cf8
 800c4ac:	20010d04 	.word	0x20010d04

0800c4b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c4b6:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 800c4ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c4bc:	4b27      	ldr	r3, [pc, #156]	@ (800c55c <prvHeapInit+0xac>)
 800c4be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f003 0307 	and.w	r3, r3, #7
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00c      	beq.n	800c4e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3307      	adds	r3, #7
 800c4ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f023 0307 	bic.w	r3, r3, #7
 800c4d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	1ad3      	subs	r3, r2, r3
 800c4de:	4a1f      	ldr	r2, [pc, #124]	@ (800c55c <prvHeapInit+0xac>)
 800c4e0:	4413      	add	r3, r2
 800c4e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c560 <prvHeapInit+0xb0>)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4ee:	4b1c      	ldr	r3, [pc, #112]	@ (800c560 <prvHeapInit+0xb0>)
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4fc:	2208      	movs	r2, #8
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	1a9b      	subs	r3, r3, r2
 800c502:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f023 0307 	bic.w	r3, r3, #7
 800c50a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	4a15      	ldr	r2, [pc, #84]	@ (800c564 <prvHeapInit+0xb4>)
 800c510:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c512:	4b14      	ldr	r3, [pc, #80]	@ (800c564 <prvHeapInit+0xb4>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2200      	movs	r2, #0
 800c518:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c51a:	4b12      	ldr	r3, [pc, #72]	@ (800c564 <prvHeapInit+0xb4>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2200      	movs	r2, #0
 800c520:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	1ad2      	subs	r2, r2, r3
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c530:	4b0c      	ldr	r3, [pc, #48]	@ (800c564 <prvHeapInit+0xb4>)
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	4a0a      	ldr	r2, [pc, #40]	@ (800c568 <prvHeapInit+0xb8>)
 800c53e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	4a09      	ldr	r2, [pc, #36]	@ (800c56c <prvHeapInit+0xbc>)
 800c546:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c548:	4b09      	ldr	r3, [pc, #36]	@ (800c570 <prvHeapInit+0xc0>)
 800c54a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c54e:	601a      	str	r2, [r3, #0]
}
 800c550:	bf00      	nop
 800c552:	3714      	adds	r7, #20
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr
 800c55c:	200012ec 	.word	0x200012ec
 800c560:	20010cec 	.word	0x20010cec
 800c564:	20010cf4 	.word	0x20010cf4
 800c568:	20010cfc 	.word	0x20010cfc
 800c56c:	20010cf8 	.word	0x20010cf8
 800c570:	20010d08 	.word	0x20010d08

0800c574 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c574:	b480      	push	{r7}
 800c576:	b085      	sub	sp, #20
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c57c:	4b28      	ldr	r3, [pc, #160]	@ (800c620 <prvInsertBlockIntoFreeList+0xac>)
 800c57e:	60fb      	str	r3, [r7, #12]
 800c580:	e002      	b.n	800c588 <prvInsertBlockIntoFreeList+0x14>
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	60fb      	str	r3, [r7, #12]
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d8f7      	bhi.n	800c582 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	68ba      	ldr	r2, [r7, #8]
 800c59c:	4413      	add	r3, r2
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d108      	bne.n	800c5b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	685a      	ldr	r2, [r3, #4]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	441a      	add	r2, r3
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	68ba      	ldr	r2, [r7, #8]
 800c5c0:	441a      	add	r2, r3
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d118      	bne.n	800c5fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	4b15      	ldr	r3, [pc, #84]	@ (800c624 <prvInsertBlockIntoFreeList+0xb0>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d00d      	beq.n	800c5f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	685a      	ldr	r2, [r3, #4]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	441a      	add	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	601a      	str	r2, [r3, #0]
 800c5f0:	e008      	b.n	800c604 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5f2:	4b0c      	ldr	r3, [pc, #48]	@ (800c624 <prvInsertBlockIntoFreeList+0xb0>)
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	601a      	str	r2, [r3, #0]
 800c5fa:	e003      	b.n	800c604 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	429a      	cmp	r2, r3
 800c60a:	d002      	beq.n	800c612 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c612:	bf00      	nop
 800c614:	3714      	adds	r7, #20
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	20010cec 	.word	0x20010cec
 800c624:	20010cf4 	.word	0x20010cf4

0800c628 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c62c:	2200      	movs	r2, #0
 800c62e:	4912      	ldr	r1, [pc, #72]	@ (800c678 <MX_USB_Device_Init+0x50>)
 800c630:	4812      	ldr	r0, [pc, #72]	@ (800c67c <MX_USB_Device_Init+0x54>)
 800c632:	f7fc f8e5 	bl	8008800 <USBD_Init>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d001      	beq.n	800c640 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c63c:	f7f4 feaa 	bl	8001394 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c640:	490f      	ldr	r1, [pc, #60]	@ (800c680 <MX_USB_Device_Init+0x58>)
 800c642:	480e      	ldr	r0, [pc, #56]	@ (800c67c <MX_USB_Device_Init+0x54>)
 800c644:	f7fc f90c 	bl	8008860 <USBD_RegisterClass>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d001      	beq.n	800c652 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c64e:	f7f4 fea1 	bl	8001394 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c652:	490c      	ldr	r1, [pc, #48]	@ (800c684 <MX_USB_Device_Init+0x5c>)
 800c654:	4809      	ldr	r0, [pc, #36]	@ (800c67c <MX_USB_Device_Init+0x54>)
 800c656:	f7fc f82d 	bl	80086b4 <USBD_CDC_RegisterInterface>
 800c65a:	4603      	mov	r3, r0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d001      	beq.n	800c664 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c660:	f7f4 fe98 	bl	8001394 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c664:	4805      	ldr	r0, [pc, #20]	@ (800c67c <MX_USB_Device_Init+0x54>)
 800c666:	f7fc f922 	bl	80088ae <USBD_Start>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d001      	beq.n	800c674 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c670:	f7f4 fe90 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c674:	bf00      	nop
 800c676:	bd80      	pop	{r7, pc}
 800c678:	20000134 	.word	0x20000134
 800c67c:	20010d0c 	.word	0x20010d0c
 800c680:	20000018 	.word	0x20000018
 800c684:	20000120 	.word	0x20000120

0800c688 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c68c:	2200      	movs	r2, #0
 800c68e:	4905      	ldr	r1, [pc, #20]	@ (800c6a4 <CDC_Init_FS+0x1c>)
 800c690:	4805      	ldr	r0, [pc, #20]	@ (800c6a8 <CDC_Init_FS+0x20>)
 800c692:	f7fc f824 	bl	80086de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c696:	4905      	ldr	r1, [pc, #20]	@ (800c6ac <CDC_Init_FS+0x24>)
 800c698:	4803      	ldr	r0, [pc, #12]	@ (800c6a8 <CDC_Init_FS+0x20>)
 800c69a:	f7fc f83e 	bl	800871a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c69e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	200117dc 	.word	0x200117dc
 800c6a8:	20010d0c 	.word	0x20010d0c
 800c6ac:	20010fdc 	.word	0x20010fdc

0800c6b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c6b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr

0800c6c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b083      	sub	sp, #12
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	6039      	str	r1, [r7, #0]
 800c6ca:	71fb      	strb	r3, [r7, #7]
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c6d0:	79fb      	ldrb	r3, [r7, #7]
 800c6d2:	2b23      	cmp	r3, #35	@ 0x23
 800c6d4:	d84a      	bhi.n	800c76c <CDC_Control_FS+0xac>
 800c6d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c6dc <CDC_Control_FS+0x1c>)
 800c6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6dc:	0800c76d 	.word	0x0800c76d
 800c6e0:	0800c76d 	.word	0x0800c76d
 800c6e4:	0800c76d 	.word	0x0800c76d
 800c6e8:	0800c76d 	.word	0x0800c76d
 800c6ec:	0800c76d 	.word	0x0800c76d
 800c6f0:	0800c76d 	.word	0x0800c76d
 800c6f4:	0800c76d 	.word	0x0800c76d
 800c6f8:	0800c76d 	.word	0x0800c76d
 800c6fc:	0800c76d 	.word	0x0800c76d
 800c700:	0800c76d 	.word	0x0800c76d
 800c704:	0800c76d 	.word	0x0800c76d
 800c708:	0800c76d 	.word	0x0800c76d
 800c70c:	0800c76d 	.word	0x0800c76d
 800c710:	0800c76d 	.word	0x0800c76d
 800c714:	0800c76d 	.word	0x0800c76d
 800c718:	0800c76d 	.word	0x0800c76d
 800c71c:	0800c76d 	.word	0x0800c76d
 800c720:	0800c76d 	.word	0x0800c76d
 800c724:	0800c76d 	.word	0x0800c76d
 800c728:	0800c76d 	.word	0x0800c76d
 800c72c:	0800c76d 	.word	0x0800c76d
 800c730:	0800c76d 	.word	0x0800c76d
 800c734:	0800c76d 	.word	0x0800c76d
 800c738:	0800c76d 	.word	0x0800c76d
 800c73c:	0800c76d 	.word	0x0800c76d
 800c740:	0800c76d 	.word	0x0800c76d
 800c744:	0800c76d 	.word	0x0800c76d
 800c748:	0800c76d 	.word	0x0800c76d
 800c74c:	0800c76d 	.word	0x0800c76d
 800c750:	0800c76d 	.word	0x0800c76d
 800c754:	0800c76d 	.word	0x0800c76d
 800c758:	0800c76d 	.word	0x0800c76d
 800c75c:	0800c76d 	.word	0x0800c76d
 800c760:	0800c76d 	.word	0x0800c76d
 800c764:	0800c76d 	.word	0x0800c76d
 800c768:	0800c76d 	.word	0x0800c76d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c76c:	bf00      	nop
  }

  return (USBD_OK);
 800c76e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c770:	4618      	mov	r0, r3
 800c772:	370c      	adds	r7, #12
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c786:	6879      	ldr	r1, [r7, #4]
 800c788:	4805      	ldr	r0, [pc, #20]	@ (800c7a0 <CDC_Receive_FS+0x24>)
 800c78a:	f7fb ffc6 	bl	800871a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c78e:	4804      	ldr	r0, [pc, #16]	@ (800c7a0 <CDC_Receive_FS+0x24>)
 800c790:	f7fc f80c 	bl	80087ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c794:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c796:	4618      	mov	r0, r3
 800c798:	3708      	adds	r7, #8
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	20010d0c 	.word	0x20010d0c

0800c7a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c7b4:	4b0d      	ldr	r3, [pc, #52]	@ (800c7ec <CDC_Transmit_FS+0x48>)
 800c7b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c7ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d001      	beq.n	800c7ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e00b      	b.n	800c7e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c7ca:	887b      	ldrh	r3, [r7, #2]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	6879      	ldr	r1, [r7, #4]
 800c7d0:	4806      	ldr	r0, [pc, #24]	@ (800c7ec <CDC_Transmit_FS+0x48>)
 800c7d2:	f7fb ff84 	bl	80086de <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c7d6:	4805      	ldr	r0, [pc, #20]	@ (800c7ec <CDC_Transmit_FS+0x48>)
 800c7d8:	f7fb ffb8 	bl	800874c <USBD_CDC_TransmitPacket>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	20010d0c 	.word	0x20010d0c

0800c7f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b087      	sub	sp, #28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	4613      	mov	r3, r2
 800c7fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c7fe:	2300      	movs	r3, #0
 800c800:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c802:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c806:	4618      	mov	r0, r3
 800c808:	371c      	adds	r7, #28
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
	...

0800c814 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	4603      	mov	r3, r0
 800c81c:	6039      	str	r1, [r7, #0]
 800c81e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	2212      	movs	r2, #18
 800c824:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c826:	4b03      	ldr	r3, [pc, #12]	@ (800c834 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c828:	4618      	mov	r0, r3
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr
 800c834:	20000154 	.word	0x20000154

0800c838 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	4603      	mov	r3, r0
 800c840:	6039      	str	r1, [r7, #0]
 800c842:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	2204      	movs	r2, #4
 800c848:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c84a:	4b03      	ldr	r3, [pc, #12]	@ (800c858 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	370c      	adds	r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr
 800c858:	20000168 	.word	0x20000168

0800c85c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	4603      	mov	r3, r0
 800c864:	6039      	str	r1, [r7, #0]
 800c866:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c868:	79fb      	ldrb	r3, [r7, #7]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d105      	bne.n	800c87a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c86e:	683a      	ldr	r2, [r7, #0]
 800c870:	4907      	ldr	r1, [pc, #28]	@ (800c890 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c872:	4808      	ldr	r0, [pc, #32]	@ (800c894 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c874:	f7fd f803 	bl	800987e <USBD_GetString>
 800c878:	e004      	b.n	800c884 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c87a:	683a      	ldr	r2, [r7, #0]
 800c87c:	4904      	ldr	r1, [pc, #16]	@ (800c890 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c87e:	4805      	ldr	r0, [pc, #20]	@ (800c894 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c880:	f7fc fffd 	bl	800987e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c884:	4b02      	ldr	r3, [pc, #8]	@ (800c890 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c886:	4618      	mov	r0, r3
 800c888:	3708      	adds	r7, #8
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	20011fdc 	.word	0x20011fdc
 800c894:	0800fe20 	.word	0x0800fe20

0800c898 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	4603      	mov	r3, r0
 800c8a0:	6039      	str	r1, [r7, #0]
 800c8a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c8a4:	683a      	ldr	r2, [r7, #0]
 800c8a6:	4904      	ldr	r1, [pc, #16]	@ (800c8b8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c8a8:	4804      	ldr	r0, [pc, #16]	@ (800c8bc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c8aa:	f7fc ffe8 	bl	800987e <USBD_GetString>
  return USBD_StrDesc;
 800c8ae:	4b02      	ldr	r3, [pc, #8]	@ (800c8b8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	20011fdc 	.word	0x20011fdc
 800c8bc:	0800fe38 	.word	0x0800fe38

0800c8c0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	6039      	str	r1, [r7, #0]
 800c8ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	221a      	movs	r2, #26
 800c8d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c8d2:	f000 f843 	bl	800c95c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c8d6:	4b02      	ldr	r3, [pc, #8]	@ (800c8e0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	2000016c 	.word	0x2000016c

0800c8e4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	6039      	str	r1, [r7, #0]
 800c8ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c8f0:	79fb      	ldrb	r3, [r7, #7]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d105      	bne.n	800c902 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c8f6:	683a      	ldr	r2, [r7, #0]
 800c8f8:	4907      	ldr	r1, [pc, #28]	@ (800c918 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c8fa:	4808      	ldr	r0, [pc, #32]	@ (800c91c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c8fc:	f7fc ffbf 	bl	800987e <USBD_GetString>
 800c900:	e004      	b.n	800c90c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c902:	683a      	ldr	r2, [r7, #0]
 800c904:	4904      	ldr	r1, [pc, #16]	@ (800c918 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c906:	4805      	ldr	r0, [pc, #20]	@ (800c91c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c908:	f7fc ffb9 	bl	800987e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c90c:	4b02      	ldr	r3, [pc, #8]	@ (800c918 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3708      	adds	r7, #8
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	20011fdc 	.word	0x20011fdc
 800c91c:	0800fe4c 	.word	0x0800fe4c

0800c920 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	4603      	mov	r3, r0
 800c928:	6039      	str	r1, [r7, #0]
 800c92a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c92c:	79fb      	ldrb	r3, [r7, #7]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d105      	bne.n	800c93e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c932:	683a      	ldr	r2, [r7, #0]
 800c934:	4907      	ldr	r1, [pc, #28]	@ (800c954 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c936:	4808      	ldr	r0, [pc, #32]	@ (800c958 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c938:	f7fc ffa1 	bl	800987e <USBD_GetString>
 800c93c:	e004      	b.n	800c948 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c93e:	683a      	ldr	r2, [r7, #0]
 800c940:	4904      	ldr	r1, [pc, #16]	@ (800c954 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c942:	4805      	ldr	r0, [pc, #20]	@ (800c958 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c944:	f7fc ff9b 	bl	800987e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c948:	4b02      	ldr	r3, [pc, #8]	@ (800c954 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	20011fdc 	.word	0x20011fdc
 800c958:	0800fe58 	.word	0x0800fe58

0800c95c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c962:	4b0f      	ldr	r3, [pc, #60]	@ (800c9a0 <Get_SerialNum+0x44>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c968:	4b0e      	ldr	r3, [pc, #56]	@ (800c9a4 <Get_SerialNum+0x48>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c96e:	4b0e      	ldr	r3, [pc, #56]	@ (800c9a8 <Get_SerialNum+0x4c>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4413      	add	r3, r2
 800c97a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d009      	beq.n	800c996 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c982:	2208      	movs	r2, #8
 800c984:	4909      	ldr	r1, [pc, #36]	@ (800c9ac <Get_SerialNum+0x50>)
 800c986:	68f8      	ldr	r0, [r7, #12]
 800c988:	f000 f814 	bl	800c9b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c98c:	2204      	movs	r2, #4
 800c98e:	4908      	ldr	r1, [pc, #32]	@ (800c9b0 <Get_SerialNum+0x54>)
 800c990:	68b8      	ldr	r0, [r7, #8]
 800c992:	f000 f80f 	bl	800c9b4 <IntToUnicode>
  }
}
 800c996:	bf00      	nop
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	1fff7590 	.word	0x1fff7590
 800c9a4:	1fff7594 	.word	0x1fff7594
 800c9a8:	1fff7598 	.word	0x1fff7598
 800c9ac:	2000016e 	.word	0x2000016e
 800c9b0:	2000017e 	.word	0x2000017e

0800c9b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b087      	sub	sp, #28
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	75fb      	strb	r3, [r7, #23]
 800c9ca:	e027      	b.n	800ca1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	0f1b      	lsrs	r3, r3, #28
 800c9d0:	2b09      	cmp	r3, #9
 800c9d2:	d80b      	bhi.n	800c9ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	0f1b      	lsrs	r3, r3, #28
 800c9d8:	b2da      	uxtb	r2, r3
 800c9da:	7dfb      	ldrb	r3, [r7, #23]
 800c9dc:	005b      	lsls	r3, r3, #1
 800c9de:	4619      	mov	r1, r3
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	440b      	add	r3, r1
 800c9e4:	3230      	adds	r2, #48	@ 0x30
 800c9e6:	b2d2      	uxtb	r2, r2
 800c9e8:	701a      	strb	r2, [r3, #0]
 800c9ea:	e00a      	b.n	800ca02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	0f1b      	lsrs	r3, r3, #28
 800c9f0:	b2da      	uxtb	r2, r3
 800c9f2:	7dfb      	ldrb	r3, [r7, #23]
 800c9f4:	005b      	lsls	r3, r3, #1
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	440b      	add	r3, r1
 800c9fc:	3237      	adds	r2, #55	@ 0x37
 800c9fe:	b2d2      	uxtb	r2, r2
 800ca00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	011b      	lsls	r3, r3, #4
 800ca06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ca08:	7dfb      	ldrb	r3, [r7, #23]
 800ca0a:	005b      	lsls	r3, r3, #1
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	4413      	add	r3, r2
 800ca12:	2200      	movs	r2, #0
 800ca14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ca16:	7dfb      	ldrb	r3, [r7, #23]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	75fb      	strb	r3, [r7, #23]
 800ca1c:	7dfa      	ldrb	r2, [r7, #23]
 800ca1e:	79fb      	ldrb	r3, [r7, #7]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d3d3      	bcc.n	800c9cc <IntToUnicode+0x18>
  }
}
 800ca24:	bf00      	nop
 800ca26:	bf00      	nop
 800ca28:	371c      	adds	r7, #28
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
	...

0800ca34 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b098      	sub	sp, #96	@ 0x60
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ca3c:	f107 0310 	add.w	r3, r7, #16
 800ca40:	2250      	movs	r2, #80	@ 0x50
 800ca42:	2100      	movs	r1, #0
 800ca44:	4618      	mov	r0, r3
 800ca46:	f001 f84d 	bl	800dae4 <memset>
  if(pcdHandle->Instance==USB)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a15      	ldr	r2, [pc, #84]	@ (800caa4 <HAL_PCD_MspInit+0x70>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d122      	bne.n	800ca9a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ca54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ca58:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ca5e:	f107 0310 	add.w	r3, r7, #16
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7f8 f884 	bl	8004b70 <HAL_RCCEx_PeriphCLKConfig>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d001      	beq.n	800ca72 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800ca6e:	f7f4 fc91 	bl	8001394 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ca72:	4b0d      	ldr	r3, [pc, #52]	@ (800caa8 <HAL_PCD_MspInit+0x74>)
 800ca74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca76:	4a0c      	ldr	r2, [pc, #48]	@ (800caa8 <HAL_PCD_MspInit+0x74>)
 800ca78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ca7c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ca7e:	4b0a      	ldr	r3, [pc, #40]	@ (800caa8 <HAL_PCD_MspInit+0x74>)
 800ca80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca86:	60fb      	str	r3, [r7, #12]
 800ca88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	2105      	movs	r1, #5
 800ca8e:	2014      	movs	r0, #20
 800ca90:	f7f5 f832 	bl	8001af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ca94:	2014      	movs	r0, #20
 800ca96:	f7f5 f849 	bl	8001b2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ca9a:	bf00      	nop
 800ca9c:	3760      	adds	r7, #96	@ 0x60
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	40005c00 	.word	0x40005c00
 800caa8:	40021000 	.word	0x40021000

0800caac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800cac0:	4619      	mov	r1, r3
 800cac2:	4610      	mov	r0, r2
 800cac4:	f7fb ff3e 	bl	8008944 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800cac8:	bf00      	nop
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	460b      	mov	r3, r1
 800cada:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cae2:	78fa      	ldrb	r2, [r7, #3]
 800cae4:	6879      	ldr	r1, [r7, #4]
 800cae6:	4613      	mov	r3, r2
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	4413      	add	r3, r2
 800caec:	00db      	lsls	r3, r3, #3
 800caee:	440b      	add	r3, r1
 800caf0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	78fb      	ldrb	r3, [r7, #3]
 800caf8:	4619      	mov	r1, r3
 800cafa:	f7fb ff78 	bl	80089ee <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800cafe:	bf00      	nop
 800cb00:	3708      	adds	r7, #8
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b082      	sub	sp, #8
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
 800cb0e:	460b      	mov	r3, r1
 800cb10:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cb18:	78fa      	ldrb	r2, [r7, #3]
 800cb1a:	6879      	ldr	r1, [r7, #4]
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	4413      	add	r3, r2
 800cb22:	00db      	lsls	r3, r3, #3
 800cb24:	440b      	add	r3, r1
 800cb26:	3324      	adds	r3, #36	@ 0x24
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	78fb      	ldrb	r3, [r7, #3]
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	f7fb ffc1 	bl	8008ab4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800cb32:	bf00      	nop
 800cb34:	3708      	adds	r7, #8
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}

0800cb3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb3a:	b580      	push	{r7, lr}
 800cb3c:	b082      	sub	sp, #8
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7fc f8d5 	bl	8008cf8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800cb4e:	bf00      	nop
 800cb50:	3708      	adds	r7, #8
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b084      	sub	sp, #16
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	795b      	ldrb	r3, [r3, #5]
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d001      	beq.n	800cb6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cb6a:	f7f4 fc13 	bl	8001394 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cb74:	7bfa      	ldrb	r2, [r7, #15]
 800cb76:	4611      	mov	r1, r2
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fc f87f 	bl	8008c7c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7fc f82b 	bl	8008be0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cb8a:	bf00      	nop
 800cb8c:	3710      	adds	r7, #16
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
	...

0800cb94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fc f87a 	bl	8008c9c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	7a5b      	ldrb	r3, [r3, #9]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d005      	beq.n	800cbbc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cbb0:	4b04      	ldr	r3, [pc, #16]	@ (800cbc4 <HAL_PCD_SuspendCallback+0x30>)
 800cbb2:	691b      	ldr	r3, [r3, #16]
 800cbb4:	4a03      	ldr	r2, [pc, #12]	@ (800cbc4 <HAL_PCD_SuspendCallback+0x30>)
 800cbb6:	f043 0306 	orr.w	r3, r3, #6
 800cbba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cbbc:	bf00      	nop
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	e000ed00 	.word	0xe000ed00

0800cbc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	7a5b      	ldrb	r3, [r3, #9]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d007      	beq.n	800cbe8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cbd8:	4b08      	ldr	r3, [pc, #32]	@ (800cbfc <HAL_PCD_ResumeCallback+0x34>)
 800cbda:	691b      	ldr	r3, [r3, #16]
 800cbdc:	4a07      	ldr	r2, [pc, #28]	@ (800cbfc <HAL_PCD_ResumeCallback+0x34>)
 800cbde:	f023 0306 	bic.w	r3, r3, #6
 800cbe2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cbe4:	f000 f9f8 	bl	800cfd8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7fc f86a 	bl	8008cc8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800cbf4:	bf00      	nop
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	e000ed00 	.word	0xe000ed00

0800cc00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800cc08:	4a2b      	ldr	r2, [pc, #172]	@ (800ccb8 <USBD_LL_Init+0xb8>)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	4a29      	ldr	r2, [pc, #164]	@ (800ccb8 <USBD_LL_Init+0xb8>)
 800cc14:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800cc18:	4b27      	ldr	r3, [pc, #156]	@ (800ccb8 <USBD_LL_Init+0xb8>)
 800cc1a:	4a28      	ldr	r2, [pc, #160]	@ (800ccbc <USBD_LL_Init+0xbc>)
 800cc1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cc1e:	4b26      	ldr	r3, [pc, #152]	@ (800ccb8 <USBD_LL_Init+0xb8>)
 800cc20:	2208      	movs	r2, #8
 800cc22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cc24:	4b24      	ldr	r3, [pc, #144]	@ (800ccb8 <USBD_LL_Init+0xb8>)
 800cc26:	2202      	movs	r2, #2
 800cc28:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cc2a:	4b23      	ldr	r3, [pc, #140]	@ (800ccb8 <USBD_LL_Init+0xb8>)
 800cc2c:	2202      	movs	r2, #2
 800cc2e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cc30:	4b21      	ldr	r3, [pc, #132]	@ (800ccb8 <USBD_LL_Init+0xb8>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cc36:	4b20      	ldr	r3, [pc, #128]	@ (800ccb8 <USBD_LL_Init+0xb8>)
 800cc38:	2200      	movs	r2, #0
 800cc3a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cc3c:	4b1e      	ldr	r3, [pc, #120]	@ (800ccb8 <USBD_LL_Init+0xb8>)
 800cc3e:	2200      	movs	r2, #0
 800cc40:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cc42:	4b1d      	ldr	r3, [pc, #116]	@ (800ccb8 <USBD_LL_Init+0xb8>)
 800cc44:	2200      	movs	r2, #0
 800cc46:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cc48:	481b      	ldr	r0, [pc, #108]	@ (800ccb8 <USBD_LL_Init+0xb8>)
 800cc4a:	f7f5 fc7b 	bl	8002544 <HAL_PCD_Init>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d001      	beq.n	800cc58 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800cc54:	f7f4 fb9e 	bl	8001394 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cc5e:	2318      	movs	r3, #24
 800cc60:	2200      	movs	r2, #0
 800cc62:	2100      	movs	r1, #0
 800cc64:	f7f7 f902 	bl	8003e6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cc6e:	2358      	movs	r3, #88	@ 0x58
 800cc70:	2200      	movs	r2, #0
 800cc72:	2180      	movs	r1, #128	@ 0x80
 800cc74:	f7f7 f8fa 	bl	8003e6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cc7e:	23c0      	movs	r3, #192	@ 0xc0
 800cc80:	2200      	movs	r2, #0
 800cc82:	2181      	movs	r1, #129	@ 0x81
 800cc84:	f7f7 f8f2 	bl	8003e6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cc8e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cc92:	2200      	movs	r2, #0
 800cc94:	2101      	movs	r1, #1
 800cc96:	f7f7 f8e9 	bl	8003e6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cca0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cca4:	2200      	movs	r2, #0
 800cca6:	2182      	movs	r1, #130	@ 0x82
 800cca8:	f7f7 f8e0 	bl	8003e6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ccac:	2300      	movs	r3, #0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	200121dc 	.word	0x200121dc
 800ccbc:	40005c00 	.word	0x40005c00

0800ccc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cccc:	2300      	movs	r3, #0
 800ccce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7f5 fd02 	bl	80026e0 <HAL_PCD_Start>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cce0:	7bfb      	ldrb	r3, [r7, #15]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f000 f97e 	bl	800cfe4 <USBD_Get_USB_Status>
 800cce8:	4603      	mov	r3, r0
 800ccea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccec:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b084      	sub	sp, #16
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
 800ccfe:	4608      	mov	r0, r1
 800cd00:	4611      	mov	r1, r2
 800cd02:	461a      	mov	r2, r3
 800cd04:	4603      	mov	r3, r0
 800cd06:	70fb      	strb	r3, [r7, #3]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	70bb      	strb	r3, [r7, #2]
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cd1e:	78bb      	ldrb	r3, [r7, #2]
 800cd20:	883a      	ldrh	r2, [r7, #0]
 800cd22:	78f9      	ldrb	r1, [r7, #3]
 800cd24:	f7f5 fe49 	bl	80029ba <HAL_PCD_EP_Open>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd2c:	7bfb      	ldrb	r3, [r7, #15]
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f000 f958 	bl	800cfe4 <USBD_Get_USB_Status>
 800cd34:	4603      	mov	r3, r0
 800cd36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd38:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3710      	adds	r7, #16
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b084      	sub	sp, #16
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd52:	2300      	movs	r3, #0
 800cd54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cd5c:	78fa      	ldrb	r2, [r7, #3]
 800cd5e:	4611      	mov	r1, r2
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7f5 fe89 	bl	8002a78 <HAL_PCD_EP_Close>
 800cd66:	4603      	mov	r3, r0
 800cd68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f000 f939 	bl	800cfe4 <USBD_Get_USB_Status>
 800cd72:	4603      	mov	r3, r0
 800cd74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd76:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	460b      	mov	r3, r1
 800cd8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd90:	2300      	movs	r3, #0
 800cd92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cd9a:	78fa      	ldrb	r2, [r7, #3]
 800cd9c:	4611      	mov	r1, r2
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7f5 ff32 	bl	8002c08 <HAL_PCD_EP_SetStall>
 800cda4:	4603      	mov	r3, r0
 800cda6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cda8:	7bfb      	ldrb	r3, [r7, #15]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f000 f91a 	bl	800cfe4 <USBD_Get_USB_Status>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b084      	sub	sp, #16
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cdd8:	78fa      	ldrb	r2, [r7, #3]
 800cdda:	4611      	mov	r1, r2
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7f5 ff65 	bl	8002cac <HAL_PCD_EP_ClrStall>
 800cde2:	4603      	mov	r3, r0
 800cde4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cde6:	7bfb      	ldrb	r3, [r7, #15]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f000 f8fb 	bl	800cfe4 <USBD_Get_USB_Status>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	460b      	mov	r3, r1
 800ce06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ce0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ce10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	da0b      	bge.n	800ce30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ce18:	78fb      	ldrb	r3, [r7, #3]
 800ce1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce1e:	68f9      	ldr	r1, [r7, #12]
 800ce20:	4613      	mov	r3, r2
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	4413      	add	r3, r2
 800ce26:	00db      	lsls	r3, r3, #3
 800ce28:	440b      	add	r3, r1
 800ce2a:	3312      	adds	r3, #18
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	e00b      	b.n	800ce48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ce30:	78fb      	ldrb	r3, [r7, #3]
 800ce32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce36:	68f9      	ldr	r1, [r7, #12]
 800ce38:	4613      	mov	r3, r2
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	4413      	add	r3, r2
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	440b      	add	r3, r1
 800ce42:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ce46:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3714      	adds	r7, #20
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr

0800ce54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce60:	2300      	movs	r3, #0
 800ce62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce64:	2300      	movs	r3, #0
 800ce66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ce6e:	78fa      	ldrb	r2, [r7, #3]
 800ce70:	4611      	mov	r1, r2
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7f5 fd7d 	bl	8002972 <HAL_PCD_SetAddress>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce7c:	7bfb      	ldrb	r3, [r7, #15]
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f000 f8b0 	bl	800cfe4 <USBD_Get_USB_Status>
 800ce84:	4603      	mov	r3, r0
 800ce86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce88:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3710      	adds	r7, #16
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b086      	sub	sp, #24
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	60f8      	str	r0, [r7, #12]
 800ce9a:	607a      	str	r2, [r7, #4]
 800ce9c:	603b      	str	r3, [r7, #0]
 800ce9e:	460b      	mov	r3, r1
 800cea0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cea2:	2300      	movs	r3, #0
 800cea4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cea6:	2300      	movs	r3, #0
 800cea8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ceb0:	7af9      	ldrb	r1, [r7, #11]
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	f7f5 fe70 	bl	8002b9a <HAL_PCD_EP_Transmit>
 800ceba:	4603      	mov	r3, r0
 800cebc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cebe:	7dfb      	ldrb	r3, [r7, #23]
 800cec0:	4618      	mov	r0, r3
 800cec2:	f000 f88f 	bl	800cfe4 <USBD_Get_USB_Status>
 800cec6:	4603      	mov	r3, r0
 800cec8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ceca:	7dbb      	ldrb	r3, [r7, #22]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3718      	adds	r7, #24
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	607a      	str	r2, [r7, #4]
 800cede:	603b      	str	r3, [r7, #0]
 800cee0:	460b      	mov	r3, r1
 800cee2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cee4:	2300      	movs	r3, #0
 800cee6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cee8:	2300      	movs	r3, #0
 800ceea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cef2:	7af9      	ldrb	r1, [r7, #11]
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	f7f5 fe06 	bl	8002b08 <HAL_PCD_EP_Receive>
 800cefc:	4603      	mov	r3, r0
 800cefe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf00:	7dfb      	ldrb	r3, [r7, #23]
 800cf02:	4618      	mov	r0, r3
 800cf04:	f000 f86e 	bl	800cfe4 <USBD_Get_USB_Status>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf0c:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b082      	sub	sp, #8
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
 800cf1e:	460b      	mov	r3, r1
 800cf20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cf28:	78fa      	ldrb	r2, [r7, #3]
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7f5 fe1c 	bl	8002b6a <HAL_PCD_EP_GetRxCount>
 800cf32:	4603      	mov	r3, r0
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3708      	adds	r7, #8
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	460b      	mov	r3, r1
 800cf46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800cf48:	78fb      	ldrb	r3, [r7, #3]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d002      	beq.n	800cf54 <HAL_PCDEx_LPM_Callback+0x18>
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	d013      	beq.n	800cf7a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800cf52:	e023      	b.n	800cf9c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	7a5b      	ldrb	r3, [r3, #9]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d007      	beq.n	800cf6c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cf5c:	f000 f83c 	bl	800cfd8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf60:	4b10      	ldr	r3, [pc, #64]	@ (800cfa4 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf62:	691b      	ldr	r3, [r3, #16]
 800cf64:	4a0f      	ldr	r2, [pc, #60]	@ (800cfa4 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf66:	f023 0306 	bic.w	r3, r3, #6
 800cf6a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fb fea8 	bl	8008cc8 <USBD_LL_Resume>
    break;
 800cf78:	e010      	b.n	800cf9c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7fb fe8b 	bl	8008c9c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	7a5b      	ldrb	r3, [r3, #9]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d005      	beq.n	800cf9a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf8e:	4b05      	ldr	r3, [pc, #20]	@ (800cfa4 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf90:	691b      	ldr	r3, [r3, #16]
 800cf92:	4a04      	ldr	r2, [pc, #16]	@ (800cfa4 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf94:	f043 0306 	orr.w	r3, r3, #6
 800cf98:	6113      	str	r3, [r2, #16]
    break;
 800cf9a:	bf00      	nop
}
 800cf9c:	bf00      	nop
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	e000ed00 	.word	0xe000ed00

0800cfa8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cfb0:	4b03      	ldr	r3, [pc, #12]	@ (800cfc0 <USBD_static_malloc+0x18>)
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	370c      	adds	r7, #12
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	200124b8 	.word	0x200124b8

0800cfc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]

}
 800cfcc:	bf00      	nop
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cfdc:	f7f4 f804 	bl	8000fe8 <SystemClock_Config>
}
 800cfe0:	bf00      	nop
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b085      	sub	sp, #20
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	4603      	mov	r3, r0
 800cfec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfee:	2300      	movs	r3, #0
 800cff0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cff2:	79fb      	ldrb	r3, [r7, #7]
 800cff4:	2b03      	cmp	r3, #3
 800cff6:	d817      	bhi.n	800d028 <USBD_Get_USB_Status+0x44>
 800cff8:	a201      	add	r2, pc, #4	@ (adr r2, 800d000 <USBD_Get_USB_Status+0x1c>)
 800cffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cffe:	bf00      	nop
 800d000:	0800d011 	.word	0x0800d011
 800d004:	0800d017 	.word	0x0800d017
 800d008:	0800d01d 	.word	0x0800d01d
 800d00c:	0800d023 	.word	0x0800d023
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d010:	2300      	movs	r3, #0
 800d012:	73fb      	strb	r3, [r7, #15]
    break;
 800d014:	e00b      	b.n	800d02e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d016:	2303      	movs	r3, #3
 800d018:	73fb      	strb	r3, [r7, #15]
    break;
 800d01a:	e008      	b.n	800d02e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d01c:	2301      	movs	r3, #1
 800d01e:	73fb      	strb	r3, [r7, #15]
    break;
 800d020:	e005      	b.n	800d02e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d022:	2303      	movs	r3, #3
 800d024:	73fb      	strb	r3, [r7, #15]
    break;
 800d026:	e002      	b.n	800d02e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d028:	2303      	movs	r3, #3
 800d02a:	73fb      	strb	r3, [r7, #15]
    break;
 800d02c:	bf00      	nop
  }
  return usb_status;
 800d02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d030:	4618      	mov	r0, r3
 800d032:	3714      	adds	r7, #20
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <__cvt>:
 800d03c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d040:	ec57 6b10 	vmov	r6, r7, d0
 800d044:	2f00      	cmp	r7, #0
 800d046:	460c      	mov	r4, r1
 800d048:	4619      	mov	r1, r3
 800d04a:	463b      	mov	r3, r7
 800d04c:	bfbb      	ittet	lt
 800d04e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d052:	461f      	movlt	r7, r3
 800d054:	2300      	movge	r3, #0
 800d056:	232d      	movlt	r3, #45	@ 0x2d
 800d058:	700b      	strb	r3, [r1, #0]
 800d05a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d05c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d060:	4691      	mov	r9, r2
 800d062:	f023 0820 	bic.w	r8, r3, #32
 800d066:	bfbc      	itt	lt
 800d068:	4632      	movlt	r2, r6
 800d06a:	4616      	movlt	r6, r2
 800d06c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d070:	d005      	beq.n	800d07e <__cvt+0x42>
 800d072:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d076:	d100      	bne.n	800d07a <__cvt+0x3e>
 800d078:	3401      	adds	r4, #1
 800d07a:	2102      	movs	r1, #2
 800d07c:	e000      	b.n	800d080 <__cvt+0x44>
 800d07e:	2103      	movs	r1, #3
 800d080:	ab03      	add	r3, sp, #12
 800d082:	9301      	str	r3, [sp, #4]
 800d084:	ab02      	add	r3, sp, #8
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	ec47 6b10 	vmov	d0, r6, r7
 800d08c:	4653      	mov	r3, sl
 800d08e:	4622      	mov	r2, r4
 800d090:	f000 fe4e 	bl	800dd30 <_dtoa_r>
 800d094:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d098:	4605      	mov	r5, r0
 800d09a:	d119      	bne.n	800d0d0 <__cvt+0x94>
 800d09c:	f019 0f01 	tst.w	r9, #1
 800d0a0:	d00e      	beq.n	800d0c0 <__cvt+0x84>
 800d0a2:	eb00 0904 	add.w	r9, r0, r4
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	4630      	mov	r0, r6
 800d0ac:	4639      	mov	r1, r7
 800d0ae:	f7f3 fd33 	bl	8000b18 <__aeabi_dcmpeq>
 800d0b2:	b108      	cbz	r0, 800d0b8 <__cvt+0x7c>
 800d0b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800d0b8:	2230      	movs	r2, #48	@ 0x30
 800d0ba:	9b03      	ldr	r3, [sp, #12]
 800d0bc:	454b      	cmp	r3, r9
 800d0be:	d31e      	bcc.n	800d0fe <__cvt+0xc2>
 800d0c0:	9b03      	ldr	r3, [sp, #12]
 800d0c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0c4:	1b5b      	subs	r3, r3, r5
 800d0c6:	4628      	mov	r0, r5
 800d0c8:	6013      	str	r3, [r2, #0]
 800d0ca:	b004      	add	sp, #16
 800d0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d0d4:	eb00 0904 	add.w	r9, r0, r4
 800d0d8:	d1e5      	bne.n	800d0a6 <__cvt+0x6a>
 800d0da:	7803      	ldrb	r3, [r0, #0]
 800d0dc:	2b30      	cmp	r3, #48	@ 0x30
 800d0de:	d10a      	bne.n	800d0f6 <__cvt+0xba>
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	4630      	mov	r0, r6
 800d0e6:	4639      	mov	r1, r7
 800d0e8:	f7f3 fd16 	bl	8000b18 <__aeabi_dcmpeq>
 800d0ec:	b918      	cbnz	r0, 800d0f6 <__cvt+0xba>
 800d0ee:	f1c4 0401 	rsb	r4, r4, #1
 800d0f2:	f8ca 4000 	str.w	r4, [sl]
 800d0f6:	f8da 3000 	ldr.w	r3, [sl]
 800d0fa:	4499      	add	r9, r3
 800d0fc:	e7d3      	b.n	800d0a6 <__cvt+0x6a>
 800d0fe:	1c59      	adds	r1, r3, #1
 800d100:	9103      	str	r1, [sp, #12]
 800d102:	701a      	strb	r2, [r3, #0]
 800d104:	e7d9      	b.n	800d0ba <__cvt+0x7e>

0800d106 <__exponent>:
 800d106:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d108:	2900      	cmp	r1, #0
 800d10a:	bfba      	itte	lt
 800d10c:	4249      	neglt	r1, r1
 800d10e:	232d      	movlt	r3, #45	@ 0x2d
 800d110:	232b      	movge	r3, #43	@ 0x2b
 800d112:	2909      	cmp	r1, #9
 800d114:	7002      	strb	r2, [r0, #0]
 800d116:	7043      	strb	r3, [r0, #1]
 800d118:	dd29      	ble.n	800d16e <__exponent+0x68>
 800d11a:	f10d 0307 	add.w	r3, sp, #7
 800d11e:	461d      	mov	r5, r3
 800d120:	270a      	movs	r7, #10
 800d122:	461a      	mov	r2, r3
 800d124:	fbb1 f6f7 	udiv	r6, r1, r7
 800d128:	fb07 1416 	mls	r4, r7, r6, r1
 800d12c:	3430      	adds	r4, #48	@ 0x30
 800d12e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d132:	460c      	mov	r4, r1
 800d134:	2c63      	cmp	r4, #99	@ 0x63
 800d136:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d13a:	4631      	mov	r1, r6
 800d13c:	dcf1      	bgt.n	800d122 <__exponent+0x1c>
 800d13e:	3130      	adds	r1, #48	@ 0x30
 800d140:	1e94      	subs	r4, r2, #2
 800d142:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d146:	1c41      	adds	r1, r0, #1
 800d148:	4623      	mov	r3, r4
 800d14a:	42ab      	cmp	r3, r5
 800d14c:	d30a      	bcc.n	800d164 <__exponent+0x5e>
 800d14e:	f10d 0309 	add.w	r3, sp, #9
 800d152:	1a9b      	subs	r3, r3, r2
 800d154:	42ac      	cmp	r4, r5
 800d156:	bf88      	it	hi
 800d158:	2300      	movhi	r3, #0
 800d15a:	3302      	adds	r3, #2
 800d15c:	4403      	add	r3, r0
 800d15e:	1a18      	subs	r0, r3, r0
 800d160:	b003      	add	sp, #12
 800d162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d164:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d168:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d16c:	e7ed      	b.n	800d14a <__exponent+0x44>
 800d16e:	2330      	movs	r3, #48	@ 0x30
 800d170:	3130      	adds	r1, #48	@ 0x30
 800d172:	7083      	strb	r3, [r0, #2]
 800d174:	70c1      	strb	r1, [r0, #3]
 800d176:	1d03      	adds	r3, r0, #4
 800d178:	e7f1      	b.n	800d15e <__exponent+0x58>
	...

0800d17c <_printf_float>:
 800d17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d180:	b08d      	sub	sp, #52	@ 0x34
 800d182:	460c      	mov	r4, r1
 800d184:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d188:	4616      	mov	r6, r2
 800d18a:	461f      	mov	r7, r3
 800d18c:	4605      	mov	r5, r0
 800d18e:	f000 fcb1 	bl	800daf4 <_localeconv_r>
 800d192:	6803      	ldr	r3, [r0, #0]
 800d194:	9304      	str	r3, [sp, #16]
 800d196:	4618      	mov	r0, r3
 800d198:	f7f3 f892 	bl	80002c0 <strlen>
 800d19c:	2300      	movs	r3, #0
 800d19e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1a0:	f8d8 3000 	ldr.w	r3, [r8]
 800d1a4:	9005      	str	r0, [sp, #20]
 800d1a6:	3307      	adds	r3, #7
 800d1a8:	f023 0307 	bic.w	r3, r3, #7
 800d1ac:	f103 0208 	add.w	r2, r3, #8
 800d1b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d1b4:	f8d4 b000 	ldr.w	fp, [r4]
 800d1b8:	f8c8 2000 	str.w	r2, [r8]
 800d1bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d1c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d1c4:	9307      	str	r3, [sp, #28]
 800d1c6:	f8cd 8018 	str.w	r8, [sp, #24]
 800d1ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d1ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1d2:	4b9c      	ldr	r3, [pc, #624]	@ (800d444 <_printf_float+0x2c8>)
 800d1d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d1d8:	f7f3 fcd0 	bl	8000b7c <__aeabi_dcmpun>
 800d1dc:	bb70      	cbnz	r0, 800d23c <_printf_float+0xc0>
 800d1de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1e2:	4b98      	ldr	r3, [pc, #608]	@ (800d444 <_printf_float+0x2c8>)
 800d1e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d1e8:	f7f3 fcaa 	bl	8000b40 <__aeabi_dcmple>
 800d1ec:	bb30      	cbnz	r0, 800d23c <_printf_float+0xc0>
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	4640      	mov	r0, r8
 800d1f4:	4649      	mov	r1, r9
 800d1f6:	f7f3 fc99 	bl	8000b2c <__aeabi_dcmplt>
 800d1fa:	b110      	cbz	r0, 800d202 <_printf_float+0x86>
 800d1fc:	232d      	movs	r3, #45	@ 0x2d
 800d1fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d202:	4a91      	ldr	r2, [pc, #580]	@ (800d448 <_printf_float+0x2cc>)
 800d204:	4b91      	ldr	r3, [pc, #580]	@ (800d44c <_printf_float+0x2d0>)
 800d206:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d20a:	bf94      	ite	ls
 800d20c:	4690      	movls	r8, r2
 800d20e:	4698      	movhi	r8, r3
 800d210:	2303      	movs	r3, #3
 800d212:	6123      	str	r3, [r4, #16]
 800d214:	f02b 0304 	bic.w	r3, fp, #4
 800d218:	6023      	str	r3, [r4, #0]
 800d21a:	f04f 0900 	mov.w	r9, #0
 800d21e:	9700      	str	r7, [sp, #0]
 800d220:	4633      	mov	r3, r6
 800d222:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d224:	4621      	mov	r1, r4
 800d226:	4628      	mov	r0, r5
 800d228:	f000 f9d2 	bl	800d5d0 <_printf_common>
 800d22c:	3001      	adds	r0, #1
 800d22e:	f040 808d 	bne.w	800d34c <_printf_float+0x1d0>
 800d232:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d236:	b00d      	add	sp, #52	@ 0x34
 800d238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23c:	4642      	mov	r2, r8
 800d23e:	464b      	mov	r3, r9
 800d240:	4640      	mov	r0, r8
 800d242:	4649      	mov	r1, r9
 800d244:	f7f3 fc9a 	bl	8000b7c <__aeabi_dcmpun>
 800d248:	b140      	cbz	r0, 800d25c <_printf_float+0xe0>
 800d24a:	464b      	mov	r3, r9
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	bfbc      	itt	lt
 800d250:	232d      	movlt	r3, #45	@ 0x2d
 800d252:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d256:	4a7e      	ldr	r2, [pc, #504]	@ (800d450 <_printf_float+0x2d4>)
 800d258:	4b7e      	ldr	r3, [pc, #504]	@ (800d454 <_printf_float+0x2d8>)
 800d25a:	e7d4      	b.n	800d206 <_printf_float+0x8a>
 800d25c:	6863      	ldr	r3, [r4, #4]
 800d25e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d262:	9206      	str	r2, [sp, #24]
 800d264:	1c5a      	adds	r2, r3, #1
 800d266:	d13b      	bne.n	800d2e0 <_printf_float+0x164>
 800d268:	2306      	movs	r3, #6
 800d26a:	6063      	str	r3, [r4, #4]
 800d26c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d270:	2300      	movs	r3, #0
 800d272:	6022      	str	r2, [r4, #0]
 800d274:	9303      	str	r3, [sp, #12]
 800d276:	ab0a      	add	r3, sp, #40	@ 0x28
 800d278:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d27c:	ab09      	add	r3, sp, #36	@ 0x24
 800d27e:	9300      	str	r3, [sp, #0]
 800d280:	6861      	ldr	r1, [r4, #4]
 800d282:	ec49 8b10 	vmov	d0, r8, r9
 800d286:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d28a:	4628      	mov	r0, r5
 800d28c:	f7ff fed6 	bl	800d03c <__cvt>
 800d290:	9b06      	ldr	r3, [sp, #24]
 800d292:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d294:	2b47      	cmp	r3, #71	@ 0x47
 800d296:	4680      	mov	r8, r0
 800d298:	d129      	bne.n	800d2ee <_printf_float+0x172>
 800d29a:	1cc8      	adds	r0, r1, #3
 800d29c:	db02      	blt.n	800d2a4 <_printf_float+0x128>
 800d29e:	6863      	ldr	r3, [r4, #4]
 800d2a0:	4299      	cmp	r1, r3
 800d2a2:	dd41      	ble.n	800d328 <_printf_float+0x1ac>
 800d2a4:	f1aa 0a02 	sub.w	sl, sl, #2
 800d2a8:	fa5f fa8a 	uxtb.w	sl, sl
 800d2ac:	3901      	subs	r1, #1
 800d2ae:	4652      	mov	r2, sl
 800d2b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d2b4:	9109      	str	r1, [sp, #36]	@ 0x24
 800d2b6:	f7ff ff26 	bl	800d106 <__exponent>
 800d2ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d2bc:	1813      	adds	r3, r2, r0
 800d2be:	2a01      	cmp	r2, #1
 800d2c0:	4681      	mov	r9, r0
 800d2c2:	6123      	str	r3, [r4, #16]
 800d2c4:	dc02      	bgt.n	800d2cc <_printf_float+0x150>
 800d2c6:	6822      	ldr	r2, [r4, #0]
 800d2c8:	07d2      	lsls	r2, r2, #31
 800d2ca:	d501      	bpl.n	800d2d0 <_printf_float+0x154>
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	6123      	str	r3, [r4, #16]
 800d2d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d0a2      	beq.n	800d21e <_printf_float+0xa2>
 800d2d8:	232d      	movs	r3, #45	@ 0x2d
 800d2da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2de:	e79e      	b.n	800d21e <_printf_float+0xa2>
 800d2e0:	9a06      	ldr	r2, [sp, #24]
 800d2e2:	2a47      	cmp	r2, #71	@ 0x47
 800d2e4:	d1c2      	bne.n	800d26c <_printf_float+0xf0>
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d1c0      	bne.n	800d26c <_printf_float+0xf0>
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	e7bd      	b.n	800d26a <_printf_float+0xee>
 800d2ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d2f2:	d9db      	bls.n	800d2ac <_printf_float+0x130>
 800d2f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d2f8:	d118      	bne.n	800d32c <_printf_float+0x1b0>
 800d2fa:	2900      	cmp	r1, #0
 800d2fc:	6863      	ldr	r3, [r4, #4]
 800d2fe:	dd0b      	ble.n	800d318 <_printf_float+0x19c>
 800d300:	6121      	str	r1, [r4, #16]
 800d302:	b913      	cbnz	r3, 800d30a <_printf_float+0x18e>
 800d304:	6822      	ldr	r2, [r4, #0]
 800d306:	07d0      	lsls	r0, r2, #31
 800d308:	d502      	bpl.n	800d310 <_printf_float+0x194>
 800d30a:	3301      	adds	r3, #1
 800d30c:	440b      	add	r3, r1
 800d30e:	6123      	str	r3, [r4, #16]
 800d310:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d312:	f04f 0900 	mov.w	r9, #0
 800d316:	e7db      	b.n	800d2d0 <_printf_float+0x154>
 800d318:	b913      	cbnz	r3, 800d320 <_printf_float+0x1a4>
 800d31a:	6822      	ldr	r2, [r4, #0]
 800d31c:	07d2      	lsls	r2, r2, #31
 800d31e:	d501      	bpl.n	800d324 <_printf_float+0x1a8>
 800d320:	3302      	adds	r3, #2
 800d322:	e7f4      	b.n	800d30e <_printf_float+0x192>
 800d324:	2301      	movs	r3, #1
 800d326:	e7f2      	b.n	800d30e <_printf_float+0x192>
 800d328:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d32c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d32e:	4299      	cmp	r1, r3
 800d330:	db05      	blt.n	800d33e <_printf_float+0x1c2>
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	6121      	str	r1, [r4, #16]
 800d336:	07d8      	lsls	r0, r3, #31
 800d338:	d5ea      	bpl.n	800d310 <_printf_float+0x194>
 800d33a:	1c4b      	adds	r3, r1, #1
 800d33c:	e7e7      	b.n	800d30e <_printf_float+0x192>
 800d33e:	2900      	cmp	r1, #0
 800d340:	bfd4      	ite	le
 800d342:	f1c1 0202 	rsble	r2, r1, #2
 800d346:	2201      	movgt	r2, #1
 800d348:	4413      	add	r3, r2
 800d34a:	e7e0      	b.n	800d30e <_printf_float+0x192>
 800d34c:	6823      	ldr	r3, [r4, #0]
 800d34e:	055a      	lsls	r2, r3, #21
 800d350:	d407      	bmi.n	800d362 <_printf_float+0x1e6>
 800d352:	6923      	ldr	r3, [r4, #16]
 800d354:	4642      	mov	r2, r8
 800d356:	4631      	mov	r1, r6
 800d358:	4628      	mov	r0, r5
 800d35a:	47b8      	blx	r7
 800d35c:	3001      	adds	r0, #1
 800d35e:	d12b      	bne.n	800d3b8 <_printf_float+0x23c>
 800d360:	e767      	b.n	800d232 <_printf_float+0xb6>
 800d362:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d366:	f240 80dd 	bls.w	800d524 <_printf_float+0x3a8>
 800d36a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d36e:	2200      	movs	r2, #0
 800d370:	2300      	movs	r3, #0
 800d372:	f7f3 fbd1 	bl	8000b18 <__aeabi_dcmpeq>
 800d376:	2800      	cmp	r0, #0
 800d378:	d033      	beq.n	800d3e2 <_printf_float+0x266>
 800d37a:	4a37      	ldr	r2, [pc, #220]	@ (800d458 <_printf_float+0x2dc>)
 800d37c:	2301      	movs	r3, #1
 800d37e:	4631      	mov	r1, r6
 800d380:	4628      	mov	r0, r5
 800d382:	47b8      	blx	r7
 800d384:	3001      	adds	r0, #1
 800d386:	f43f af54 	beq.w	800d232 <_printf_float+0xb6>
 800d38a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d38e:	4543      	cmp	r3, r8
 800d390:	db02      	blt.n	800d398 <_printf_float+0x21c>
 800d392:	6823      	ldr	r3, [r4, #0]
 800d394:	07d8      	lsls	r0, r3, #31
 800d396:	d50f      	bpl.n	800d3b8 <_printf_float+0x23c>
 800d398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d39c:	4631      	mov	r1, r6
 800d39e:	4628      	mov	r0, r5
 800d3a0:	47b8      	blx	r7
 800d3a2:	3001      	adds	r0, #1
 800d3a4:	f43f af45 	beq.w	800d232 <_printf_float+0xb6>
 800d3a8:	f04f 0900 	mov.w	r9, #0
 800d3ac:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d3b0:	f104 0a1a 	add.w	sl, r4, #26
 800d3b4:	45c8      	cmp	r8, r9
 800d3b6:	dc09      	bgt.n	800d3cc <_printf_float+0x250>
 800d3b8:	6823      	ldr	r3, [r4, #0]
 800d3ba:	079b      	lsls	r3, r3, #30
 800d3bc:	f100 8103 	bmi.w	800d5c6 <_printf_float+0x44a>
 800d3c0:	68e0      	ldr	r0, [r4, #12]
 800d3c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3c4:	4298      	cmp	r0, r3
 800d3c6:	bfb8      	it	lt
 800d3c8:	4618      	movlt	r0, r3
 800d3ca:	e734      	b.n	800d236 <_printf_float+0xba>
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	4652      	mov	r2, sl
 800d3d0:	4631      	mov	r1, r6
 800d3d2:	4628      	mov	r0, r5
 800d3d4:	47b8      	blx	r7
 800d3d6:	3001      	adds	r0, #1
 800d3d8:	f43f af2b 	beq.w	800d232 <_printf_float+0xb6>
 800d3dc:	f109 0901 	add.w	r9, r9, #1
 800d3e0:	e7e8      	b.n	800d3b4 <_printf_float+0x238>
 800d3e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	dc39      	bgt.n	800d45c <_printf_float+0x2e0>
 800d3e8:	4a1b      	ldr	r2, [pc, #108]	@ (800d458 <_printf_float+0x2dc>)
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	4631      	mov	r1, r6
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	47b8      	blx	r7
 800d3f2:	3001      	adds	r0, #1
 800d3f4:	f43f af1d 	beq.w	800d232 <_printf_float+0xb6>
 800d3f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d3fc:	ea59 0303 	orrs.w	r3, r9, r3
 800d400:	d102      	bne.n	800d408 <_printf_float+0x28c>
 800d402:	6823      	ldr	r3, [r4, #0]
 800d404:	07d9      	lsls	r1, r3, #31
 800d406:	d5d7      	bpl.n	800d3b8 <_printf_float+0x23c>
 800d408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d40c:	4631      	mov	r1, r6
 800d40e:	4628      	mov	r0, r5
 800d410:	47b8      	blx	r7
 800d412:	3001      	adds	r0, #1
 800d414:	f43f af0d 	beq.w	800d232 <_printf_float+0xb6>
 800d418:	f04f 0a00 	mov.w	sl, #0
 800d41c:	f104 0b1a 	add.w	fp, r4, #26
 800d420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d422:	425b      	negs	r3, r3
 800d424:	4553      	cmp	r3, sl
 800d426:	dc01      	bgt.n	800d42c <_printf_float+0x2b0>
 800d428:	464b      	mov	r3, r9
 800d42a:	e793      	b.n	800d354 <_printf_float+0x1d8>
 800d42c:	2301      	movs	r3, #1
 800d42e:	465a      	mov	r2, fp
 800d430:	4631      	mov	r1, r6
 800d432:	4628      	mov	r0, r5
 800d434:	47b8      	blx	r7
 800d436:	3001      	adds	r0, #1
 800d438:	f43f aefb 	beq.w	800d232 <_printf_float+0xb6>
 800d43c:	f10a 0a01 	add.w	sl, sl, #1
 800d440:	e7ee      	b.n	800d420 <_printf_float+0x2a4>
 800d442:	bf00      	nop
 800d444:	7fefffff 	.word	0x7fefffff
 800d448:	0800fedc 	.word	0x0800fedc
 800d44c:	0800fee0 	.word	0x0800fee0
 800d450:	0800fee4 	.word	0x0800fee4
 800d454:	0800fee8 	.word	0x0800fee8
 800d458:	0800feec 	.word	0x0800feec
 800d45c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d45e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d462:	4553      	cmp	r3, sl
 800d464:	bfa8      	it	ge
 800d466:	4653      	movge	r3, sl
 800d468:	2b00      	cmp	r3, #0
 800d46a:	4699      	mov	r9, r3
 800d46c:	dc36      	bgt.n	800d4dc <_printf_float+0x360>
 800d46e:	f04f 0b00 	mov.w	fp, #0
 800d472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d476:	f104 021a 	add.w	r2, r4, #26
 800d47a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d47c:	9306      	str	r3, [sp, #24]
 800d47e:	eba3 0309 	sub.w	r3, r3, r9
 800d482:	455b      	cmp	r3, fp
 800d484:	dc31      	bgt.n	800d4ea <_printf_float+0x36e>
 800d486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d488:	459a      	cmp	sl, r3
 800d48a:	dc3a      	bgt.n	800d502 <_printf_float+0x386>
 800d48c:	6823      	ldr	r3, [r4, #0]
 800d48e:	07da      	lsls	r2, r3, #31
 800d490:	d437      	bmi.n	800d502 <_printf_float+0x386>
 800d492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d494:	ebaa 0903 	sub.w	r9, sl, r3
 800d498:	9b06      	ldr	r3, [sp, #24]
 800d49a:	ebaa 0303 	sub.w	r3, sl, r3
 800d49e:	4599      	cmp	r9, r3
 800d4a0:	bfa8      	it	ge
 800d4a2:	4699      	movge	r9, r3
 800d4a4:	f1b9 0f00 	cmp.w	r9, #0
 800d4a8:	dc33      	bgt.n	800d512 <_printf_float+0x396>
 800d4aa:	f04f 0800 	mov.w	r8, #0
 800d4ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d4b2:	f104 0b1a 	add.w	fp, r4, #26
 800d4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4b8:	ebaa 0303 	sub.w	r3, sl, r3
 800d4bc:	eba3 0309 	sub.w	r3, r3, r9
 800d4c0:	4543      	cmp	r3, r8
 800d4c2:	f77f af79 	ble.w	800d3b8 <_printf_float+0x23c>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	465a      	mov	r2, fp
 800d4ca:	4631      	mov	r1, r6
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	47b8      	blx	r7
 800d4d0:	3001      	adds	r0, #1
 800d4d2:	f43f aeae 	beq.w	800d232 <_printf_float+0xb6>
 800d4d6:	f108 0801 	add.w	r8, r8, #1
 800d4da:	e7ec      	b.n	800d4b6 <_printf_float+0x33a>
 800d4dc:	4642      	mov	r2, r8
 800d4de:	4631      	mov	r1, r6
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	47b8      	blx	r7
 800d4e4:	3001      	adds	r0, #1
 800d4e6:	d1c2      	bne.n	800d46e <_printf_float+0x2f2>
 800d4e8:	e6a3      	b.n	800d232 <_printf_float+0xb6>
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	4631      	mov	r1, r6
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	9206      	str	r2, [sp, #24]
 800d4f2:	47b8      	blx	r7
 800d4f4:	3001      	adds	r0, #1
 800d4f6:	f43f ae9c 	beq.w	800d232 <_printf_float+0xb6>
 800d4fa:	9a06      	ldr	r2, [sp, #24]
 800d4fc:	f10b 0b01 	add.w	fp, fp, #1
 800d500:	e7bb      	b.n	800d47a <_printf_float+0x2fe>
 800d502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d506:	4631      	mov	r1, r6
 800d508:	4628      	mov	r0, r5
 800d50a:	47b8      	blx	r7
 800d50c:	3001      	adds	r0, #1
 800d50e:	d1c0      	bne.n	800d492 <_printf_float+0x316>
 800d510:	e68f      	b.n	800d232 <_printf_float+0xb6>
 800d512:	9a06      	ldr	r2, [sp, #24]
 800d514:	464b      	mov	r3, r9
 800d516:	4442      	add	r2, r8
 800d518:	4631      	mov	r1, r6
 800d51a:	4628      	mov	r0, r5
 800d51c:	47b8      	blx	r7
 800d51e:	3001      	adds	r0, #1
 800d520:	d1c3      	bne.n	800d4aa <_printf_float+0x32e>
 800d522:	e686      	b.n	800d232 <_printf_float+0xb6>
 800d524:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d528:	f1ba 0f01 	cmp.w	sl, #1
 800d52c:	dc01      	bgt.n	800d532 <_printf_float+0x3b6>
 800d52e:	07db      	lsls	r3, r3, #31
 800d530:	d536      	bpl.n	800d5a0 <_printf_float+0x424>
 800d532:	2301      	movs	r3, #1
 800d534:	4642      	mov	r2, r8
 800d536:	4631      	mov	r1, r6
 800d538:	4628      	mov	r0, r5
 800d53a:	47b8      	blx	r7
 800d53c:	3001      	adds	r0, #1
 800d53e:	f43f ae78 	beq.w	800d232 <_printf_float+0xb6>
 800d542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d546:	4631      	mov	r1, r6
 800d548:	4628      	mov	r0, r5
 800d54a:	47b8      	blx	r7
 800d54c:	3001      	adds	r0, #1
 800d54e:	f43f ae70 	beq.w	800d232 <_printf_float+0xb6>
 800d552:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d556:	2200      	movs	r2, #0
 800d558:	2300      	movs	r3, #0
 800d55a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d55e:	f7f3 fadb 	bl	8000b18 <__aeabi_dcmpeq>
 800d562:	b9c0      	cbnz	r0, 800d596 <_printf_float+0x41a>
 800d564:	4653      	mov	r3, sl
 800d566:	f108 0201 	add.w	r2, r8, #1
 800d56a:	4631      	mov	r1, r6
 800d56c:	4628      	mov	r0, r5
 800d56e:	47b8      	blx	r7
 800d570:	3001      	adds	r0, #1
 800d572:	d10c      	bne.n	800d58e <_printf_float+0x412>
 800d574:	e65d      	b.n	800d232 <_printf_float+0xb6>
 800d576:	2301      	movs	r3, #1
 800d578:	465a      	mov	r2, fp
 800d57a:	4631      	mov	r1, r6
 800d57c:	4628      	mov	r0, r5
 800d57e:	47b8      	blx	r7
 800d580:	3001      	adds	r0, #1
 800d582:	f43f ae56 	beq.w	800d232 <_printf_float+0xb6>
 800d586:	f108 0801 	add.w	r8, r8, #1
 800d58a:	45d0      	cmp	r8, sl
 800d58c:	dbf3      	blt.n	800d576 <_printf_float+0x3fa>
 800d58e:	464b      	mov	r3, r9
 800d590:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d594:	e6df      	b.n	800d356 <_printf_float+0x1da>
 800d596:	f04f 0800 	mov.w	r8, #0
 800d59a:	f104 0b1a 	add.w	fp, r4, #26
 800d59e:	e7f4      	b.n	800d58a <_printf_float+0x40e>
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	4642      	mov	r2, r8
 800d5a4:	e7e1      	b.n	800d56a <_printf_float+0x3ee>
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	464a      	mov	r2, r9
 800d5aa:	4631      	mov	r1, r6
 800d5ac:	4628      	mov	r0, r5
 800d5ae:	47b8      	blx	r7
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	f43f ae3e 	beq.w	800d232 <_printf_float+0xb6>
 800d5b6:	f108 0801 	add.w	r8, r8, #1
 800d5ba:	68e3      	ldr	r3, [r4, #12]
 800d5bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d5be:	1a5b      	subs	r3, r3, r1
 800d5c0:	4543      	cmp	r3, r8
 800d5c2:	dcf0      	bgt.n	800d5a6 <_printf_float+0x42a>
 800d5c4:	e6fc      	b.n	800d3c0 <_printf_float+0x244>
 800d5c6:	f04f 0800 	mov.w	r8, #0
 800d5ca:	f104 0919 	add.w	r9, r4, #25
 800d5ce:	e7f4      	b.n	800d5ba <_printf_float+0x43e>

0800d5d0 <_printf_common>:
 800d5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d4:	4616      	mov	r6, r2
 800d5d6:	4698      	mov	r8, r3
 800d5d8:	688a      	ldr	r2, [r1, #8]
 800d5da:	690b      	ldr	r3, [r1, #16]
 800d5dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	bfb8      	it	lt
 800d5e4:	4613      	movlt	r3, r2
 800d5e6:	6033      	str	r3, [r6, #0]
 800d5e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d5ec:	4607      	mov	r7, r0
 800d5ee:	460c      	mov	r4, r1
 800d5f0:	b10a      	cbz	r2, 800d5f6 <_printf_common+0x26>
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	6033      	str	r3, [r6, #0]
 800d5f6:	6823      	ldr	r3, [r4, #0]
 800d5f8:	0699      	lsls	r1, r3, #26
 800d5fa:	bf42      	ittt	mi
 800d5fc:	6833      	ldrmi	r3, [r6, #0]
 800d5fe:	3302      	addmi	r3, #2
 800d600:	6033      	strmi	r3, [r6, #0]
 800d602:	6825      	ldr	r5, [r4, #0]
 800d604:	f015 0506 	ands.w	r5, r5, #6
 800d608:	d106      	bne.n	800d618 <_printf_common+0x48>
 800d60a:	f104 0a19 	add.w	sl, r4, #25
 800d60e:	68e3      	ldr	r3, [r4, #12]
 800d610:	6832      	ldr	r2, [r6, #0]
 800d612:	1a9b      	subs	r3, r3, r2
 800d614:	42ab      	cmp	r3, r5
 800d616:	dc26      	bgt.n	800d666 <_printf_common+0x96>
 800d618:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d61c:	6822      	ldr	r2, [r4, #0]
 800d61e:	3b00      	subs	r3, #0
 800d620:	bf18      	it	ne
 800d622:	2301      	movne	r3, #1
 800d624:	0692      	lsls	r2, r2, #26
 800d626:	d42b      	bmi.n	800d680 <_printf_common+0xb0>
 800d628:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d62c:	4641      	mov	r1, r8
 800d62e:	4638      	mov	r0, r7
 800d630:	47c8      	blx	r9
 800d632:	3001      	adds	r0, #1
 800d634:	d01e      	beq.n	800d674 <_printf_common+0xa4>
 800d636:	6823      	ldr	r3, [r4, #0]
 800d638:	6922      	ldr	r2, [r4, #16]
 800d63a:	f003 0306 	and.w	r3, r3, #6
 800d63e:	2b04      	cmp	r3, #4
 800d640:	bf02      	ittt	eq
 800d642:	68e5      	ldreq	r5, [r4, #12]
 800d644:	6833      	ldreq	r3, [r6, #0]
 800d646:	1aed      	subeq	r5, r5, r3
 800d648:	68a3      	ldr	r3, [r4, #8]
 800d64a:	bf0c      	ite	eq
 800d64c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d650:	2500      	movne	r5, #0
 800d652:	4293      	cmp	r3, r2
 800d654:	bfc4      	itt	gt
 800d656:	1a9b      	subgt	r3, r3, r2
 800d658:	18ed      	addgt	r5, r5, r3
 800d65a:	2600      	movs	r6, #0
 800d65c:	341a      	adds	r4, #26
 800d65e:	42b5      	cmp	r5, r6
 800d660:	d11a      	bne.n	800d698 <_printf_common+0xc8>
 800d662:	2000      	movs	r0, #0
 800d664:	e008      	b.n	800d678 <_printf_common+0xa8>
 800d666:	2301      	movs	r3, #1
 800d668:	4652      	mov	r2, sl
 800d66a:	4641      	mov	r1, r8
 800d66c:	4638      	mov	r0, r7
 800d66e:	47c8      	blx	r9
 800d670:	3001      	adds	r0, #1
 800d672:	d103      	bne.n	800d67c <_printf_common+0xac>
 800d674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d67c:	3501      	adds	r5, #1
 800d67e:	e7c6      	b.n	800d60e <_printf_common+0x3e>
 800d680:	18e1      	adds	r1, r4, r3
 800d682:	1c5a      	adds	r2, r3, #1
 800d684:	2030      	movs	r0, #48	@ 0x30
 800d686:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d68a:	4422      	add	r2, r4
 800d68c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d690:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d694:	3302      	adds	r3, #2
 800d696:	e7c7      	b.n	800d628 <_printf_common+0x58>
 800d698:	2301      	movs	r3, #1
 800d69a:	4622      	mov	r2, r4
 800d69c:	4641      	mov	r1, r8
 800d69e:	4638      	mov	r0, r7
 800d6a0:	47c8      	blx	r9
 800d6a2:	3001      	adds	r0, #1
 800d6a4:	d0e6      	beq.n	800d674 <_printf_common+0xa4>
 800d6a6:	3601      	adds	r6, #1
 800d6a8:	e7d9      	b.n	800d65e <_printf_common+0x8e>
	...

0800d6ac <_printf_i>:
 800d6ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6b0:	7e0f      	ldrb	r7, [r1, #24]
 800d6b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d6b4:	2f78      	cmp	r7, #120	@ 0x78
 800d6b6:	4691      	mov	r9, r2
 800d6b8:	4680      	mov	r8, r0
 800d6ba:	460c      	mov	r4, r1
 800d6bc:	469a      	mov	sl, r3
 800d6be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d6c2:	d807      	bhi.n	800d6d4 <_printf_i+0x28>
 800d6c4:	2f62      	cmp	r7, #98	@ 0x62
 800d6c6:	d80a      	bhi.n	800d6de <_printf_i+0x32>
 800d6c8:	2f00      	cmp	r7, #0
 800d6ca:	f000 80d2 	beq.w	800d872 <_printf_i+0x1c6>
 800d6ce:	2f58      	cmp	r7, #88	@ 0x58
 800d6d0:	f000 80b9 	beq.w	800d846 <_printf_i+0x19a>
 800d6d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d6d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d6dc:	e03a      	b.n	800d754 <_printf_i+0xa8>
 800d6de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d6e2:	2b15      	cmp	r3, #21
 800d6e4:	d8f6      	bhi.n	800d6d4 <_printf_i+0x28>
 800d6e6:	a101      	add	r1, pc, #4	@ (adr r1, 800d6ec <_printf_i+0x40>)
 800d6e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6ec:	0800d745 	.word	0x0800d745
 800d6f0:	0800d759 	.word	0x0800d759
 800d6f4:	0800d6d5 	.word	0x0800d6d5
 800d6f8:	0800d6d5 	.word	0x0800d6d5
 800d6fc:	0800d6d5 	.word	0x0800d6d5
 800d700:	0800d6d5 	.word	0x0800d6d5
 800d704:	0800d759 	.word	0x0800d759
 800d708:	0800d6d5 	.word	0x0800d6d5
 800d70c:	0800d6d5 	.word	0x0800d6d5
 800d710:	0800d6d5 	.word	0x0800d6d5
 800d714:	0800d6d5 	.word	0x0800d6d5
 800d718:	0800d859 	.word	0x0800d859
 800d71c:	0800d783 	.word	0x0800d783
 800d720:	0800d813 	.word	0x0800d813
 800d724:	0800d6d5 	.word	0x0800d6d5
 800d728:	0800d6d5 	.word	0x0800d6d5
 800d72c:	0800d87b 	.word	0x0800d87b
 800d730:	0800d6d5 	.word	0x0800d6d5
 800d734:	0800d783 	.word	0x0800d783
 800d738:	0800d6d5 	.word	0x0800d6d5
 800d73c:	0800d6d5 	.word	0x0800d6d5
 800d740:	0800d81b 	.word	0x0800d81b
 800d744:	6833      	ldr	r3, [r6, #0]
 800d746:	1d1a      	adds	r2, r3, #4
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	6032      	str	r2, [r6, #0]
 800d74c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d750:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d754:	2301      	movs	r3, #1
 800d756:	e09d      	b.n	800d894 <_printf_i+0x1e8>
 800d758:	6833      	ldr	r3, [r6, #0]
 800d75a:	6820      	ldr	r0, [r4, #0]
 800d75c:	1d19      	adds	r1, r3, #4
 800d75e:	6031      	str	r1, [r6, #0]
 800d760:	0606      	lsls	r6, r0, #24
 800d762:	d501      	bpl.n	800d768 <_printf_i+0xbc>
 800d764:	681d      	ldr	r5, [r3, #0]
 800d766:	e003      	b.n	800d770 <_printf_i+0xc4>
 800d768:	0645      	lsls	r5, r0, #25
 800d76a:	d5fb      	bpl.n	800d764 <_printf_i+0xb8>
 800d76c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d770:	2d00      	cmp	r5, #0
 800d772:	da03      	bge.n	800d77c <_printf_i+0xd0>
 800d774:	232d      	movs	r3, #45	@ 0x2d
 800d776:	426d      	negs	r5, r5
 800d778:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d77c:	4859      	ldr	r0, [pc, #356]	@ (800d8e4 <_printf_i+0x238>)
 800d77e:	230a      	movs	r3, #10
 800d780:	e011      	b.n	800d7a6 <_printf_i+0xfa>
 800d782:	6821      	ldr	r1, [r4, #0]
 800d784:	6833      	ldr	r3, [r6, #0]
 800d786:	0608      	lsls	r0, r1, #24
 800d788:	f853 5b04 	ldr.w	r5, [r3], #4
 800d78c:	d402      	bmi.n	800d794 <_printf_i+0xe8>
 800d78e:	0649      	lsls	r1, r1, #25
 800d790:	bf48      	it	mi
 800d792:	b2ad      	uxthmi	r5, r5
 800d794:	2f6f      	cmp	r7, #111	@ 0x6f
 800d796:	4853      	ldr	r0, [pc, #332]	@ (800d8e4 <_printf_i+0x238>)
 800d798:	6033      	str	r3, [r6, #0]
 800d79a:	bf14      	ite	ne
 800d79c:	230a      	movne	r3, #10
 800d79e:	2308      	moveq	r3, #8
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d7a6:	6866      	ldr	r6, [r4, #4]
 800d7a8:	60a6      	str	r6, [r4, #8]
 800d7aa:	2e00      	cmp	r6, #0
 800d7ac:	bfa2      	ittt	ge
 800d7ae:	6821      	ldrge	r1, [r4, #0]
 800d7b0:	f021 0104 	bicge.w	r1, r1, #4
 800d7b4:	6021      	strge	r1, [r4, #0]
 800d7b6:	b90d      	cbnz	r5, 800d7bc <_printf_i+0x110>
 800d7b8:	2e00      	cmp	r6, #0
 800d7ba:	d04b      	beq.n	800d854 <_printf_i+0x1a8>
 800d7bc:	4616      	mov	r6, r2
 800d7be:	fbb5 f1f3 	udiv	r1, r5, r3
 800d7c2:	fb03 5711 	mls	r7, r3, r1, r5
 800d7c6:	5dc7      	ldrb	r7, [r0, r7]
 800d7c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d7cc:	462f      	mov	r7, r5
 800d7ce:	42bb      	cmp	r3, r7
 800d7d0:	460d      	mov	r5, r1
 800d7d2:	d9f4      	bls.n	800d7be <_printf_i+0x112>
 800d7d4:	2b08      	cmp	r3, #8
 800d7d6:	d10b      	bne.n	800d7f0 <_printf_i+0x144>
 800d7d8:	6823      	ldr	r3, [r4, #0]
 800d7da:	07df      	lsls	r7, r3, #31
 800d7dc:	d508      	bpl.n	800d7f0 <_printf_i+0x144>
 800d7de:	6923      	ldr	r3, [r4, #16]
 800d7e0:	6861      	ldr	r1, [r4, #4]
 800d7e2:	4299      	cmp	r1, r3
 800d7e4:	bfde      	ittt	le
 800d7e6:	2330      	movle	r3, #48	@ 0x30
 800d7e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d7ec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d7f0:	1b92      	subs	r2, r2, r6
 800d7f2:	6122      	str	r2, [r4, #16]
 800d7f4:	f8cd a000 	str.w	sl, [sp]
 800d7f8:	464b      	mov	r3, r9
 800d7fa:	aa03      	add	r2, sp, #12
 800d7fc:	4621      	mov	r1, r4
 800d7fe:	4640      	mov	r0, r8
 800d800:	f7ff fee6 	bl	800d5d0 <_printf_common>
 800d804:	3001      	adds	r0, #1
 800d806:	d14a      	bne.n	800d89e <_printf_i+0x1f2>
 800d808:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d80c:	b004      	add	sp, #16
 800d80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d812:	6823      	ldr	r3, [r4, #0]
 800d814:	f043 0320 	orr.w	r3, r3, #32
 800d818:	6023      	str	r3, [r4, #0]
 800d81a:	4833      	ldr	r0, [pc, #204]	@ (800d8e8 <_printf_i+0x23c>)
 800d81c:	2778      	movs	r7, #120	@ 0x78
 800d81e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d822:	6823      	ldr	r3, [r4, #0]
 800d824:	6831      	ldr	r1, [r6, #0]
 800d826:	061f      	lsls	r7, r3, #24
 800d828:	f851 5b04 	ldr.w	r5, [r1], #4
 800d82c:	d402      	bmi.n	800d834 <_printf_i+0x188>
 800d82e:	065f      	lsls	r7, r3, #25
 800d830:	bf48      	it	mi
 800d832:	b2ad      	uxthmi	r5, r5
 800d834:	6031      	str	r1, [r6, #0]
 800d836:	07d9      	lsls	r1, r3, #31
 800d838:	bf44      	itt	mi
 800d83a:	f043 0320 	orrmi.w	r3, r3, #32
 800d83e:	6023      	strmi	r3, [r4, #0]
 800d840:	b11d      	cbz	r5, 800d84a <_printf_i+0x19e>
 800d842:	2310      	movs	r3, #16
 800d844:	e7ac      	b.n	800d7a0 <_printf_i+0xf4>
 800d846:	4827      	ldr	r0, [pc, #156]	@ (800d8e4 <_printf_i+0x238>)
 800d848:	e7e9      	b.n	800d81e <_printf_i+0x172>
 800d84a:	6823      	ldr	r3, [r4, #0]
 800d84c:	f023 0320 	bic.w	r3, r3, #32
 800d850:	6023      	str	r3, [r4, #0]
 800d852:	e7f6      	b.n	800d842 <_printf_i+0x196>
 800d854:	4616      	mov	r6, r2
 800d856:	e7bd      	b.n	800d7d4 <_printf_i+0x128>
 800d858:	6833      	ldr	r3, [r6, #0]
 800d85a:	6825      	ldr	r5, [r4, #0]
 800d85c:	6961      	ldr	r1, [r4, #20]
 800d85e:	1d18      	adds	r0, r3, #4
 800d860:	6030      	str	r0, [r6, #0]
 800d862:	062e      	lsls	r6, r5, #24
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	d501      	bpl.n	800d86c <_printf_i+0x1c0>
 800d868:	6019      	str	r1, [r3, #0]
 800d86a:	e002      	b.n	800d872 <_printf_i+0x1c6>
 800d86c:	0668      	lsls	r0, r5, #25
 800d86e:	d5fb      	bpl.n	800d868 <_printf_i+0x1bc>
 800d870:	8019      	strh	r1, [r3, #0]
 800d872:	2300      	movs	r3, #0
 800d874:	6123      	str	r3, [r4, #16]
 800d876:	4616      	mov	r6, r2
 800d878:	e7bc      	b.n	800d7f4 <_printf_i+0x148>
 800d87a:	6833      	ldr	r3, [r6, #0]
 800d87c:	1d1a      	adds	r2, r3, #4
 800d87e:	6032      	str	r2, [r6, #0]
 800d880:	681e      	ldr	r6, [r3, #0]
 800d882:	6862      	ldr	r2, [r4, #4]
 800d884:	2100      	movs	r1, #0
 800d886:	4630      	mov	r0, r6
 800d888:	f7f2 fcca 	bl	8000220 <memchr>
 800d88c:	b108      	cbz	r0, 800d892 <_printf_i+0x1e6>
 800d88e:	1b80      	subs	r0, r0, r6
 800d890:	6060      	str	r0, [r4, #4]
 800d892:	6863      	ldr	r3, [r4, #4]
 800d894:	6123      	str	r3, [r4, #16]
 800d896:	2300      	movs	r3, #0
 800d898:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d89c:	e7aa      	b.n	800d7f4 <_printf_i+0x148>
 800d89e:	6923      	ldr	r3, [r4, #16]
 800d8a0:	4632      	mov	r2, r6
 800d8a2:	4649      	mov	r1, r9
 800d8a4:	4640      	mov	r0, r8
 800d8a6:	47d0      	blx	sl
 800d8a8:	3001      	adds	r0, #1
 800d8aa:	d0ad      	beq.n	800d808 <_printf_i+0x15c>
 800d8ac:	6823      	ldr	r3, [r4, #0]
 800d8ae:	079b      	lsls	r3, r3, #30
 800d8b0:	d413      	bmi.n	800d8da <_printf_i+0x22e>
 800d8b2:	68e0      	ldr	r0, [r4, #12]
 800d8b4:	9b03      	ldr	r3, [sp, #12]
 800d8b6:	4298      	cmp	r0, r3
 800d8b8:	bfb8      	it	lt
 800d8ba:	4618      	movlt	r0, r3
 800d8bc:	e7a6      	b.n	800d80c <_printf_i+0x160>
 800d8be:	2301      	movs	r3, #1
 800d8c0:	4632      	mov	r2, r6
 800d8c2:	4649      	mov	r1, r9
 800d8c4:	4640      	mov	r0, r8
 800d8c6:	47d0      	blx	sl
 800d8c8:	3001      	adds	r0, #1
 800d8ca:	d09d      	beq.n	800d808 <_printf_i+0x15c>
 800d8cc:	3501      	adds	r5, #1
 800d8ce:	68e3      	ldr	r3, [r4, #12]
 800d8d0:	9903      	ldr	r1, [sp, #12]
 800d8d2:	1a5b      	subs	r3, r3, r1
 800d8d4:	42ab      	cmp	r3, r5
 800d8d6:	dcf2      	bgt.n	800d8be <_printf_i+0x212>
 800d8d8:	e7eb      	b.n	800d8b2 <_printf_i+0x206>
 800d8da:	2500      	movs	r5, #0
 800d8dc:	f104 0619 	add.w	r6, r4, #25
 800d8e0:	e7f5      	b.n	800d8ce <_printf_i+0x222>
 800d8e2:	bf00      	nop
 800d8e4:	0800feee 	.word	0x0800feee
 800d8e8:	0800feff 	.word	0x0800feff

0800d8ec <std>:
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	b510      	push	{r4, lr}
 800d8f0:	4604      	mov	r4, r0
 800d8f2:	e9c0 3300 	strd	r3, r3, [r0]
 800d8f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8fa:	6083      	str	r3, [r0, #8]
 800d8fc:	8181      	strh	r1, [r0, #12]
 800d8fe:	6643      	str	r3, [r0, #100]	@ 0x64
 800d900:	81c2      	strh	r2, [r0, #14]
 800d902:	6183      	str	r3, [r0, #24]
 800d904:	4619      	mov	r1, r3
 800d906:	2208      	movs	r2, #8
 800d908:	305c      	adds	r0, #92	@ 0x5c
 800d90a:	f000 f8eb 	bl	800dae4 <memset>
 800d90e:	4b0d      	ldr	r3, [pc, #52]	@ (800d944 <std+0x58>)
 800d910:	6263      	str	r3, [r4, #36]	@ 0x24
 800d912:	4b0d      	ldr	r3, [pc, #52]	@ (800d948 <std+0x5c>)
 800d914:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d916:	4b0d      	ldr	r3, [pc, #52]	@ (800d94c <std+0x60>)
 800d918:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d91a:	4b0d      	ldr	r3, [pc, #52]	@ (800d950 <std+0x64>)
 800d91c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d91e:	4b0d      	ldr	r3, [pc, #52]	@ (800d954 <std+0x68>)
 800d920:	6224      	str	r4, [r4, #32]
 800d922:	429c      	cmp	r4, r3
 800d924:	d006      	beq.n	800d934 <std+0x48>
 800d926:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d92a:	4294      	cmp	r4, r2
 800d92c:	d002      	beq.n	800d934 <std+0x48>
 800d92e:	33d0      	adds	r3, #208	@ 0xd0
 800d930:	429c      	cmp	r4, r3
 800d932:	d105      	bne.n	800d940 <std+0x54>
 800d934:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d93c:	f000 b95e 	b.w	800dbfc <__retarget_lock_init_recursive>
 800d940:	bd10      	pop	{r4, pc}
 800d942:	bf00      	nop
 800d944:	0800f5c5 	.word	0x0800f5c5
 800d948:	0800f5e7 	.word	0x0800f5e7
 800d94c:	0800f61f 	.word	0x0800f61f
 800d950:	0800f643 	.word	0x0800f643
 800d954:	200126d8 	.word	0x200126d8

0800d958 <stdio_exit_handler>:
 800d958:	4a02      	ldr	r2, [pc, #8]	@ (800d964 <stdio_exit_handler+0xc>)
 800d95a:	4903      	ldr	r1, [pc, #12]	@ (800d968 <stdio_exit_handler+0x10>)
 800d95c:	4803      	ldr	r0, [pc, #12]	@ (800d96c <stdio_exit_handler+0x14>)
 800d95e:	f000 b869 	b.w	800da34 <_fwalk_sglue>
 800d962:	bf00      	nop
 800d964:	20000188 	.word	0x20000188
 800d968:	0800ee59 	.word	0x0800ee59
 800d96c:	20000198 	.word	0x20000198

0800d970 <cleanup_stdio>:
 800d970:	6841      	ldr	r1, [r0, #4]
 800d972:	4b0c      	ldr	r3, [pc, #48]	@ (800d9a4 <cleanup_stdio+0x34>)
 800d974:	4299      	cmp	r1, r3
 800d976:	b510      	push	{r4, lr}
 800d978:	4604      	mov	r4, r0
 800d97a:	d001      	beq.n	800d980 <cleanup_stdio+0x10>
 800d97c:	f001 fa6c 	bl	800ee58 <_fflush_r>
 800d980:	68a1      	ldr	r1, [r4, #8]
 800d982:	4b09      	ldr	r3, [pc, #36]	@ (800d9a8 <cleanup_stdio+0x38>)
 800d984:	4299      	cmp	r1, r3
 800d986:	d002      	beq.n	800d98e <cleanup_stdio+0x1e>
 800d988:	4620      	mov	r0, r4
 800d98a:	f001 fa65 	bl	800ee58 <_fflush_r>
 800d98e:	68e1      	ldr	r1, [r4, #12]
 800d990:	4b06      	ldr	r3, [pc, #24]	@ (800d9ac <cleanup_stdio+0x3c>)
 800d992:	4299      	cmp	r1, r3
 800d994:	d004      	beq.n	800d9a0 <cleanup_stdio+0x30>
 800d996:	4620      	mov	r0, r4
 800d998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d99c:	f001 ba5c 	b.w	800ee58 <_fflush_r>
 800d9a0:	bd10      	pop	{r4, pc}
 800d9a2:	bf00      	nop
 800d9a4:	200126d8 	.word	0x200126d8
 800d9a8:	20012740 	.word	0x20012740
 800d9ac:	200127a8 	.word	0x200127a8

0800d9b0 <global_stdio_init.part.0>:
 800d9b0:	b510      	push	{r4, lr}
 800d9b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d9e0 <global_stdio_init.part.0+0x30>)
 800d9b4:	4c0b      	ldr	r4, [pc, #44]	@ (800d9e4 <global_stdio_init.part.0+0x34>)
 800d9b6:	4a0c      	ldr	r2, [pc, #48]	@ (800d9e8 <global_stdio_init.part.0+0x38>)
 800d9b8:	601a      	str	r2, [r3, #0]
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	2200      	movs	r2, #0
 800d9be:	2104      	movs	r1, #4
 800d9c0:	f7ff ff94 	bl	800d8ec <std>
 800d9c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	2109      	movs	r1, #9
 800d9cc:	f7ff ff8e 	bl	800d8ec <std>
 800d9d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d9d4:	2202      	movs	r2, #2
 800d9d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9da:	2112      	movs	r1, #18
 800d9dc:	f7ff bf86 	b.w	800d8ec <std>
 800d9e0:	20012810 	.word	0x20012810
 800d9e4:	200126d8 	.word	0x200126d8
 800d9e8:	0800d959 	.word	0x0800d959

0800d9ec <__sfp_lock_acquire>:
 800d9ec:	4801      	ldr	r0, [pc, #4]	@ (800d9f4 <__sfp_lock_acquire+0x8>)
 800d9ee:	f000 b906 	b.w	800dbfe <__retarget_lock_acquire_recursive>
 800d9f2:	bf00      	nop
 800d9f4:	20012819 	.word	0x20012819

0800d9f8 <__sfp_lock_release>:
 800d9f8:	4801      	ldr	r0, [pc, #4]	@ (800da00 <__sfp_lock_release+0x8>)
 800d9fa:	f000 b901 	b.w	800dc00 <__retarget_lock_release_recursive>
 800d9fe:	bf00      	nop
 800da00:	20012819 	.word	0x20012819

0800da04 <__sinit>:
 800da04:	b510      	push	{r4, lr}
 800da06:	4604      	mov	r4, r0
 800da08:	f7ff fff0 	bl	800d9ec <__sfp_lock_acquire>
 800da0c:	6a23      	ldr	r3, [r4, #32]
 800da0e:	b11b      	cbz	r3, 800da18 <__sinit+0x14>
 800da10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da14:	f7ff bff0 	b.w	800d9f8 <__sfp_lock_release>
 800da18:	4b04      	ldr	r3, [pc, #16]	@ (800da2c <__sinit+0x28>)
 800da1a:	6223      	str	r3, [r4, #32]
 800da1c:	4b04      	ldr	r3, [pc, #16]	@ (800da30 <__sinit+0x2c>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d1f5      	bne.n	800da10 <__sinit+0xc>
 800da24:	f7ff ffc4 	bl	800d9b0 <global_stdio_init.part.0>
 800da28:	e7f2      	b.n	800da10 <__sinit+0xc>
 800da2a:	bf00      	nop
 800da2c:	0800d971 	.word	0x0800d971
 800da30:	20012810 	.word	0x20012810

0800da34 <_fwalk_sglue>:
 800da34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da38:	4607      	mov	r7, r0
 800da3a:	4688      	mov	r8, r1
 800da3c:	4614      	mov	r4, r2
 800da3e:	2600      	movs	r6, #0
 800da40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da44:	f1b9 0901 	subs.w	r9, r9, #1
 800da48:	d505      	bpl.n	800da56 <_fwalk_sglue+0x22>
 800da4a:	6824      	ldr	r4, [r4, #0]
 800da4c:	2c00      	cmp	r4, #0
 800da4e:	d1f7      	bne.n	800da40 <_fwalk_sglue+0xc>
 800da50:	4630      	mov	r0, r6
 800da52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da56:	89ab      	ldrh	r3, [r5, #12]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d907      	bls.n	800da6c <_fwalk_sglue+0x38>
 800da5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da60:	3301      	adds	r3, #1
 800da62:	d003      	beq.n	800da6c <_fwalk_sglue+0x38>
 800da64:	4629      	mov	r1, r5
 800da66:	4638      	mov	r0, r7
 800da68:	47c0      	blx	r8
 800da6a:	4306      	orrs	r6, r0
 800da6c:	3568      	adds	r5, #104	@ 0x68
 800da6e:	e7e9      	b.n	800da44 <_fwalk_sglue+0x10>

0800da70 <_vsniprintf_r>:
 800da70:	b530      	push	{r4, r5, lr}
 800da72:	4614      	mov	r4, r2
 800da74:	2c00      	cmp	r4, #0
 800da76:	b09b      	sub	sp, #108	@ 0x6c
 800da78:	4605      	mov	r5, r0
 800da7a:	461a      	mov	r2, r3
 800da7c:	da05      	bge.n	800da8a <_vsniprintf_r+0x1a>
 800da7e:	238b      	movs	r3, #139	@ 0x8b
 800da80:	6003      	str	r3, [r0, #0]
 800da82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da86:	b01b      	add	sp, #108	@ 0x6c
 800da88:	bd30      	pop	{r4, r5, pc}
 800da8a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800da8e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800da92:	bf14      	ite	ne
 800da94:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800da98:	4623      	moveq	r3, r4
 800da9a:	9302      	str	r3, [sp, #8]
 800da9c:	9305      	str	r3, [sp, #20]
 800da9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800daa2:	9100      	str	r1, [sp, #0]
 800daa4:	9104      	str	r1, [sp, #16]
 800daa6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800daaa:	4669      	mov	r1, sp
 800daac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800daae:	f000 ffa9 	bl	800ea04 <_svfiprintf_r>
 800dab2:	1c43      	adds	r3, r0, #1
 800dab4:	bfbc      	itt	lt
 800dab6:	238b      	movlt	r3, #139	@ 0x8b
 800dab8:	602b      	strlt	r3, [r5, #0]
 800daba:	2c00      	cmp	r4, #0
 800dabc:	d0e3      	beq.n	800da86 <_vsniprintf_r+0x16>
 800dabe:	9b00      	ldr	r3, [sp, #0]
 800dac0:	2200      	movs	r2, #0
 800dac2:	701a      	strb	r2, [r3, #0]
 800dac4:	e7df      	b.n	800da86 <_vsniprintf_r+0x16>
	...

0800dac8 <vsniprintf>:
 800dac8:	b507      	push	{r0, r1, r2, lr}
 800daca:	9300      	str	r3, [sp, #0]
 800dacc:	4613      	mov	r3, r2
 800dace:	460a      	mov	r2, r1
 800dad0:	4601      	mov	r1, r0
 800dad2:	4803      	ldr	r0, [pc, #12]	@ (800dae0 <vsniprintf+0x18>)
 800dad4:	6800      	ldr	r0, [r0, #0]
 800dad6:	f7ff ffcb 	bl	800da70 <_vsniprintf_r>
 800dada:	b003      	add	sp, #12
 800dadc:	f85d fb04 	ldr.w	pc, [sp], #4
 800dae0:	20000194 	.word	0x20000194

0800dae4 <memset>:
 800dae4:	4402      	add	r2, r0
 800dae6:	4603      	mov	r3, r0
 800dae8:	4293      	cmp	r3, r2
 800daea:	d100      	bne.n	800daee <memset+0xa>
 800daec:	4770      	bx	lr
 800daee:	f803 1b01 	strb.w	r1, [r3], #1
 800daf2:	e7f9      	b.n	800dae8 <memset+0x4>

0800daf4 <_localeconv_r>:
 800daf4:	4800      	ldr	r0, [pc, #0]	@ (800daf8 <_localeconv_r+0x4>)
 800daf6:	4770      	bx	lr
 800daf8:	200002d4 	.word	0x200002d4

0800dafc <_reclaim_reent>:
 800dafc:	4b29      	ldr	r3, [pc, #164]	@ (800dba4 <_reclaim_reent+0xa8>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4283      	cmp	r3, r0
 800db02:	b570      	push	{r4, r5, r6, lr}
 800db04:	4604      	mov	r4, r0
 800db06:	d04b      	beq.n	800dba0 <_reclaim_reent+0xa4>
 800db08:	69c3      	ldr	r3, [r0, #28]
 800db0a:	b1ab      	cbz	r3, 800db38 <_reclaim_reent+0x3c>
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	b16b      	cbz	r3, 800db2c <_reclaim_reent+0x30>
 800db10:	2500      	movs	r5, #0
 800db12:	69e3      	ldr	r3, [r4, #28]
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	5959      	ldr	r1, [r3, r5]
 800db18:	2900      	cmp	r1, #0
 800db1a:	d13b      	bne.n	800db94 <_reclaim_reent+0x98>
 800db1c:	3504      	adds	r5, #4
 800db1e:	2d80      	cmp	r5, #128	@ 0x80
 800db20:	d1f7      	bne.n	800db12 <_reclaim_reent+0x16>
 800db22:	69e3      	ldr	r3, [r4, #28]
 800db24:	4620      	mov	r0, r4
 800db26:	68d9      	ldr	r1, [r3, #12]
 800db28:	f000 fec6 	bl	800e8b8 <_free_r>
 800db2c:	69e3      	ldr	r3, [r4, #28]
 800db2e:	6819      	ldr	r1, [r3, #0]
 800db30:	b111      	cbz	r1, 800db38 <_reclaim_reent+0x3c>
 800db32:	4620      	mov	r0, r4
 800db34:	f000 fec0 	bl	800e8b8 <_free_r>
 800db38:	6961      	ldr	r1, [r4, #20]
 800db3a:	b111      	cbz	r1, 800db42 <_reclaim_reent+0x46>
 800db3c:	4620      	mov	r0, r4
 800db3e:	f000 febb 	bl	800e8b8 <_free_r>
 800db42:	69e1      	ldr	r1, [r4, #28]
 800db44:	b111      	cbz	r1, 800db4c <_reclaim_reent+0x50>
 800db46:	4620      	mov	r0, r4
 800db48:	f000 feb6 	bl	800e8b8 <_free_r>
 800db4c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800db4e:	b111      	cbz	r1, 800db56 <_reclaim_reent+0x5a>
 800db50:	4620      	mov	r0, r4
 800db52:	f000 feb1 	bl	800e8b8 <_free_r>
 800db56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db58:	b111      	cbz	r1, 800db60 <_reclaim_reent+0x64>
 800db5a:	4620      	mov	r0, r4
 800db5c:	f000 feac 	bl	800e8b8 <_free_r>
 800db60:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800db62:	b111      	cbz	r1, 800db6a <_reclaim_reent+0x6e>
 800db64:	4620      	mov	r0, r4
 800db66:	f000 fea7 	bl	800e8b8 <_free_r>
 800db6a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800db6c:	b111      	cbz	r1, 800db74 <_reclaim_reent+0x78>
 800db6e:	4620      	mov	r0, r4
 800db70:	f000 fea2 	bl	800e8b8 <_free_r>
 800db74:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800db76:	b111      	cbz	r1, 800db7e <_reclaim_reent+0x82>
 800db78:	4620      	mov	r0, r4
 800db7a:	f000 fe9d 	bl	800e8b8 <_free_r>
 800db7e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800db80:	b111      	cbz	r1, 800db88 <_reclaim_reent+0x8c>
 800db82:	4620      	mov	r0, r4
 800db84:	f000 fe98 	bl	800e8b8 <_free_r>
 800db88:	6a23      	ldr	r3, [r4, #32]
 800db8a:	b14b      	cbz	r3, 800dba0 <_reclaim_reent+0xa4>
 800db8c:	4620      	mov	r0, r4
 800db8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db92:	4718      	bx	r3
 800db94:	680e      	ldr	r6, [r1, #0]
 800db96:	4620      	mov	r0, r4
 800db98:	f000 fe8e 	bl	800e8b8 <_free_r>
 800db9c:	4631      	mov	r1, r6
 800db9e:	e7bb      	b.n	800db18 <_reclaim_reent+0x1c>
 800dba0:	bd70      	pop	{r4, r5, r6, pc}
 800dba2:	bf00      	nop
 800dba4:	20000194 	.word	0x20000194

0800dba8 <__errno>:
 800dba8:	4b01      	ldr	r3, [pc, #4]	@ (800dbb0 <__errno+0x8>)
 800dbaa:	6818      	ldr	r0, [r3, #0]
 800dbac:	4770      	bx	lr
 800dbae:	bf00      	nop
 800dbb0:	20000194 	.word	0x20000194

0800dbb4 <__libc_init_array>:
 800dbb4:	b570      	push	{r4, r5, r6, lr}
 800dbb6:	4d0d      	ldr	r5, [pc, #52]	@ (800dbec <__libc_init_array+0x38>)
 800dbb8:	4c0d      	ldr	r4, [pc, #52]	@ (800dbf0 <__libc_init_array+0x3c>)
 800dbba:	1b64      	subs	r4, r4, r5
 800dbbc:	10a4      	asrs	r4, r4, #2
 800dbbe:	2600      	movs	r6, #0
 800dbc0:	42a6      	cmp	r6, r4
 800dbc2:	d109      	bne.n	800dbd8 <__libc_init_array+0x24>
 800dbc4:	4d0b      	ldr	r5, [pc, #44]	@ (800dbf4 <__libc_init_array+0x40>)
 800dbc6:	4c0c      	ldr	r4, [pc, #48]	@ (800dbf8 <__libc_init_array+0x44>)
 800dbc8:	f002 f8ee 	bl	800fda8 <_init>
 800dbcc:	1b64      	subs	r4, r4, r5
 800dbce:	10a4      	asrs	r4, r4, #2
 800dbd0:	2600      	movs	r6, #0
 800dbd2:	42a6      	cmp	r6, r4
 800dbd4:	d105      	bne.n	800dbe2 <__libc_init_array+0x2e>
 800dbd6:	bd70      	pop	{r4, r5, r6, pc}
 800dbd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbdc:	4798      	blx	r3
 800dbde:	3601      	adds	r6, #1
 800dbe0:	e7ee      	b.n	800dbc0 <__libc_init_array+0xc>
 800dbe2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbe6:	4798      	blx	r3
 800dbe8:	3601      	adds	r6, #1
 800dbea:	e7f2      	b.n	800dbd2 <__libc_init_array+0x1e>
 800dbec:	08010258 	.word	0x08010258
 800dbf0:	08010258 	.word	0x08010258
 800dbf4:	08010258 	.word	0x08010258
 800dbf8:	0801025c 	.word	0x0801025c

0800dbfc <__retarget_lock_init_recursive>:
 800dbfc:	4770      	bx	lr

0800dbfe <__retarget_lock_acquire_recursive>:
 800dbfe:	4770      	bx	lr

0800dc00 <__retarget_lock_release_recursive>:
 800dc00:	4770      	bx	lr

0800dc02 <memcpy>:
 800dc02:	440a      	add	r2, r1
 800dc04:	4291      	cmp	r1, r2
 800dc06:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dc0a:	d100      	bne.n	800dc0e <memcpy+0xc>
 800dc0c:	4770      	bx	lr
 800dc0e:	b510      	push	{r4, lr}
 800dc10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc18:	4291      	cmp	r1, r2
 800dc1a:	d1f9      	bne.n	800dc10 <memcpy+0xe>
 800dc1c:	bd10      	pop	{r4, pc}

0800dc1e <quorem>:
 800dc1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc22:	6903      	ldr	r3, [r0, #16]
 800dc24:	690c      	ldr	r4, [r1, #16]
 800dc26:	42a3      	cmp	r3, r4
 800dc28:	4607      	mov	r7, r0
 800dc2a:	db7e      	blt.n	800dd2a <quorem+0x10c>
 800dc2c:	3c01      	subs	r4, #1
 800dc2e:	f101 0814 	add.w	r8, r1, #20
 800dc32:	00a3      	lsls	r3, r4, #2
 800dc34:	f100 0514 	add.w	r5, r0, #20
 800dc38:	9300      	str	r3, [sp, #0]
 800dc3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc3e:	9301      	str	r3, [sp, #4]
 800dc40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc48:	3301      	adds	r3, #1
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc50:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc54:	d32e      	bcc.n	800dcb4 <quorem+0x96>
 800dc56:	f04f 0a00 	mov.w	sl, #0
 800dc5a:	46c4      	mov	ip, r8
 800dc5c:	46ae      	mov	lr, r5
 800dc5e:	46d3      	mov	fp, sl
 800dc60:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dc64:	b298      	uxth	r0, r3
 800dc66:	fb06 a000 	mla	r0, r6, r0, sl
 800dc6a:	0c02      	lsrs	r2, r0, #16
 800dc6c:	0c1b      	lsrs	r3, r3, #16
 800dc6e:	fb06 2303 	mla	r3, r6, r3, r2
 800dc72:	f8de 2000 	ldr.w	r2, [lr]
 800dc76:	b280      	uxth	r0, r0
 800dc78:	b292      	uxth	r2, r2
 800dc7a:	1a12      	subs	r2, r2, r0
 800dc7c:	445a      	add	r2, fp
 800dc7e:	f8de 0000 	ldr.w	r0, [lr]
 800dc82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dc8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dc90:	b292      	uxth	r2, r2
 800dc92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dc96:	45e1      	cmp	r9, ip
 800dc98:	f84e 2b04 	str.w	r2, [lr], #4
 800dc9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dca0:	d2de      	bcs.n	800dc60 <quorem+0x42>
 800dca2:	9b00      	ldr	r3, [sp, #0]
 800dca4:	58eb      	ldr	r3, [r5, r3]
 800dca6:	b92b      	cbnz	r3, 800dcb4 <quorem+0x96>
 800dca8:	9b01      	ldr	r3, [sp, #4]
 800dcaa:	3b04      	subs	r3, #4
 800dcac:	429d      	cmp	r5, r3
 800dcae:	461a      	mov	r2, r3
 800dcb0:	d32f      	bcc.n	800dd12 <quorem+0xf4>
 800dcb2:	613c      	str	r4, [r7, #16]
 800dcb4:	4638      	mov	r0, r7
 800dcb6:	f001 fb7d 	bl	800f3b4 <__mcmp>
 800dcba:	2800      	cmp	r0, #0
 800dcbc:	db25      	blt.n	800dd0a <quorem+0xec>
 800dcbe:	4629      	mov	r1, r5
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	f858 2b04 	ldr.w	r2, [r8], #4
 800dcc6:	f8d1 c000 	ldr.w	ip, [r1]
 800dcca:	fa1f fe82 	uxth.w	lr, r2
 800dcce:	fa1f f38c 	uxth.w	r3, ip
 800dcd2:	eba3 030e 	sub.w	r3, r3, lr
 800dcd6:	4403      	add	r3, r0
 800dcd8:	0c12      	lsrs	r2, r2, #16
 800dcda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dcde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dce8:	45c1      	cmp	r9, r8
 800dcea:	f841 3b04 	str.w	r3, [r1], #4
 800dcee:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dcf2:	d2e6      	bcs.n	800dcc2 <quorem+0xa4>
 800dcf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dcf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcfc:	b922      	cbnz	r2, 800dd08 <quorem+0xea>
 800dcfe:	3b04      	subs	r3, #4
 800dd00:	429d      	cmp	r5, r3
 800dd02:	461a      	mov	r2, r3
 800dd04:	d30b      	bcc.n	800dd1e <quorem+0x100>
 800dd06:	613c      	str	r4, [r7, #16]
 800dd08:	3601      	adds	r6, #1
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	b003      	add	sp, #12
 800dd0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd12:	6812      	ldr	r2, [r2, #0]
 800dd14:	3b04      	subs	r3, #4
 800dd16:	2a00      	cmp	r2, #0
 800dd18:	d1cb      	bne.n	800dcb2 <quorem+0x94>
 800dd1a:	3c01      	subs	r4, #1
 800dd1c:	e7c6      	b.n	800dcac <quorem+0x8e>
 800dd1e:	6812      	ldr	r2, [r2, #0]
 800dd20:	3b04      	subs	r3, #4
 800dd22:	2a00      	cmp	r2, #0
 800dd24:	d1ef      	bne.n	800dd06 <quorem+0xe8>
 800dd26:	3c01      	subs	r4, #1
 800dd28:	e7ea      	b.n	800dd00 <quorem+0xe2>
 800dd2a:	2000      	movs	r0, #0
 800dd2c:	e7ee      	b.n	800dd0c <quorem+0xee>
	...

0800dd30 <_dtoa_r>:
 800dd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd34:	69c7      	ldr	r7, [r0, #28]
 800dd36:	b099      	sub	sp, #100	@ 0x64
 800dd38:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dd3c:	ec55 4b10 	vmov	r4, r5, d0
 800dd40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dd42:	9109      	str	r1, [sp, #36]	@ 0x24
 800dd44:	4683      	mov	fp, r0
 800dd46:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd48:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd4a:	b97f      	cbnz	r7, 800dd6c <_dtoa_r+0x3c>
 800dd4c:	2010      	movs	r0, #16
 800dd4e:	f000 ff55 	bl	800ebfc <malloc>
 800dd52:	4602      	mov	r2, r0
 800dd54:	f8cb 001c 	str.w	r0, [fp, #28]
 800dd58:	b920      	cbnz	r0, 800dd64 <_dtoa_r+0x34>
 800dd5a:	4ba7      	ldr	r3, [pc, #668]	@ (800dff8 <_dtoa_r+0x2c8>)
 800dd5c:	21ef      	movs	r1, #239	@ 0xef
 800dd5e:	48a7      	ldr	r0, [pc, #668]	@ (800dffc <_dtoa_r+0x2cc>)
 800dd60:	f001 fd12 	bl	800f788 <__assert_func>
 800dd64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dd68:	6007      	str	r7, [r0, #0]
 800dd6a:	60c7      	str	r7, [r0, #12]
 800dd6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd70:	6819      	ldr	r1, [r3, #0]
 800dd72:	b159      	cbz	r1, 800dd8c <_dtoa_r+0x5c>
 800dd74:	685a      	ldr	r2, [r3, #4]
 800dd76:	604a      	str	r2, [r1, #4]
 800dd78:	2301      	movs	r3, #1
 800dd7a:	4093      	lsls	r3, r2
 800dd7c:	608b      	str	r3, [r1, #8]
 800dd7e:	4658      	mov	r0, fp
 800dd80:	f001 f8de 	bl	800ef40 <_Bfree>
 800dd84:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	601a      	str	r2, [r3, #0]
 800dd8c:	1e2b      	subs	r3, r5, #0
 800dd8e:	bfb9      	ittee	lt
 800dd90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dd94:	9303      	strlt	r3, [sp, #12]
 800dd96:	2300      	movge	r3, #0
 800dd98:	6033      	strge	r3, [r6, #0]
 800dd9a:	9f03      	ldr	r7, [sp, #12]
 800dd9c:	4b98      	ldr	r3, [pc, #608]	@ (800e000 <_dtoa_r+0x2d0>)
 800dd9e:	bfbc      	itt	lt
 800dda0:	2201      	movlt	r2, #1
 800dda2:	6032      	strlt	r2, [r6, #0]
 800dda4:	43bb      	bics	r3, r7
 800dda6:	d112      	bne.n	800ddce <_dtoa_r+0x9e>
 800dda8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ddaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ddae:	6013      	str	r3, [r2, #0]
 800ddb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ddb4:	4323      	orrs	r3, r4
 800ddb6:	f000 854d 	beq.w	800e854 <_dtoa_r+0xb24>
 800ddba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ddbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e014 <_dtoa_r+0x2e4>
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	f000 854f 	beq.w	800e864 <_dtoa_r+0xb34>
 800ddc6:	f10a 0303 	add.w	r3, sl, #3
 800ddca:	f000 bd49 	b.w	800e860 <_dtoa_r+0xb30>
 800ddce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	ec51 0b17 	vmov	r0, r1, d7
 800ddd8:	2300      	movs	r3, #0
 800ddda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ddde:	f7f2 fe9b 	bl	8000b18 <__aeabi_dcmpeq>
 800dde2:	4680      	mov	r8, r0
 800dde4:	b158      	cbz	r0, 800ddfe <_dtoa_r+0xce>
 800dde6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dde8:	2301      	movs	r3, #1
 800ddea:	6013      	str	r3, [r2, #0]
 800ddec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ddee:	b113      	cbz	r3, 800ddf6 <_dtoa_r+0xc6>
 800ddf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ddf2:	4b84      	ldr	r3, [pc, #528]	@ (800e004 <_dtoa_r+0x2d4>)
 800ddf4:	6013      	str	r3, [r2, #0]
 800ddf6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e018 <_dtoa_r+0x2e8>
 800ddfa:	f000 bd33 	b.w	800e864 <_dtoa_r+0xb34>
 800ddfe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800de02:	aa16      	add	r2, sp, #88	@ 0x58
 800de04:	a917      	add	r1, sp, #92	@ 0x5c
 800de06:	4658      	mov	r0, fp
 800de08:	f001 fb84 	bl	800f514 <__d2b>
 800de0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800de10:	4681      	mov	r9, r0
 800de12:	2e00      	cmp	r6, #0
 800de14:	d077      	beq.n	800df06 <_dtoa_r+0x1d6>
 800de16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800de1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800de28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800de2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800de30:	4619      	mov	r1, r3
 800de32:	2200      	movs	r2, #0
 800de34:	4b74      	ldr	r3, [pc, #464]	@ (800e008 <_dtoa_r+0x2d8>)
 800de36:	f7f2 fa4f 	bl	80002d8 <__aeabi_dsub>
 800de3a:	a369      	add	r3, pc, #420	@ (adr r3, 800dfe0 <_dtoa_r+0x2b0>)
 800de3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de40:	f7f2 fc02 	bl	8000648 <__aeabi_dmul>
 800de44:	a368      	add	r3, pc, #416	@ (adr r3, 800dfe8 <_dtoa_r+0x2b8>)
 800de46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4a:	f7f2 fa47 	bl	80002dc <__adddf3>
 800de4e:	4604      	mov	r4, r0
 800de50:	4630      	mov	r0, r6
 800de52:	460d      	mov	r5, r1
 800de54:	f7f2 fb8e 	bl	8000574 <__aeabi_i2d>
 800de58:	a365      	add	r3, pc, #404	@ (adr r3, 800dff0 <_dtoa_r+0x2c0>)
 800de5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5e:	f7f2 fbf3 	bl	8000648 <__aeabi_dmul>
 800de62:	4602      	mov	r2, r0
 800de64:	460b      	mov	r3, r1
 800de66:	4620      	mov	r0, r4
 800de68:	4629      	mov	r1, r5
 800de6a:	f7f2 fa37 	bl	80002dc <__adddf3>
 800de6e:	4604      	mov	r4, r0
 800de70:	460d      	mov	r5, r1
 800de72:	f7f2 fe99 	bl	8000ba8 <__aeabi_d2iz>
 800de76:	2200      	movs	r2, #0
 800de78:	4607      	mov	r7, r0
 800de7a:	2300      	movs	r3, #0
 800de7c:	4620      	mov	r0, r4
 800de7e:	4629      	mov	r1, r5
 800de80:	f7f2 fe54 	bl	8000b2c <__aeabi_dcmplt>
 800de84:	b140      	cbz	r0, 800de98 <_dtoa_r+0x168>
 800de86:	4638      	mov	r0, r7
 800de88:	f7f2 fb74 	bl	8000574 <__aeabi_i2d>
 800de8c:	4622      	mov	r2, r4
 800de8e:	462b      	mov	r3, r5
 800de90:	f7f2 fe42 	bl	8000b18 <__aeabi_dcmpeq>
 800de94:	b900      	cbnz	r0, 800de98 <_dtoa_r+0x168>
 800de96:	3f01      	subs	r7, #1
 800de98:	2f16      	cmp	r7, #22
 800de9a:	d851      	bhi.n	800df40 <_dtoa_r+0x210>
 800de9c:	4b5b      	ldr	r3, [pc, #364]	@ (800e00c <_dtoa_r+0x2dc>)
 800de9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800deaa:	f7f2 fe3f 	bl	8000b2c <__aeabi_dcmplt>
 800deae:	2800      	cmp	r0, #0
 800deb0:	d048      	beq.n	800df44 <_dtoa_r+0x214>
 800deb2:	3f01      	subs	r7, #1
 800deb4:	2300      	movs	r3, #0
 800deb6:	9312      	str	r3, [sp, #72]	@ 0x48
 800deb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800deba:	1b9b      	subs	r3, r3, r6
 800debc:	1e5a      	subs	r2, r3, #1
 800debe:	bf44      	itt	mi
 800dec0:	f1c3 0801 	rsbmi	r8, r3, #1
 800dec4:	2300      	movmi	r3, #0
 800dec6:	9208      	str	r2, [sp, #32]
 800dec8:	bf54      	ite	pl
 800deca:	f04f 0800 	movpl.w	r8, #0
 800dece:	9308      	strmi	r3, [sp, #32]
 800ded0:	2f00      	cmp	r7, #0
 800ded2:	db39      	blt.n	800df48 <_dtoa_r+0x218>
 800ded4:	9b08      	ldr	r3, [sp, #32]
 800ded6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ded8:	443b      	add	r3, r7
 800deda:	9308      	str	r3, [sp, #32]
 800dedc:	2300      	movs	r3, #0
 800dede:	930a      	str	r3, [sp, #40]	@ 0x28
 800dee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dee2:	2b09      	cmp	r3, #9
 800dee4:	d864      	bhi.n	800dfb0 <_dtoa_r+0x280>
 800dee6:	2b05      	cmp	r3, #5
 800dee8:	bfc4      	itt	gt
 800deea:	3b04      	subgt	r3, #4
 800deec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800deee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800def0:	f1a3 0302 	sub.w	r3, r3, #2
 800def4:	bfcc      	ite	gt
 800def6:	2400      	movgt	r4, #0
 800def8:	2401      	movle	r4, #1
 800defa:	2b03      	cmp	r3, #3
 800defc:	d863      	bhi.n	800dfc6 <_dtoa_r+0x296>
 800defe:	e8df f003 	tbb	[pc, r3]
 800df02:	372a      	.short	0x372a
 800df04:	5535      	.short	0x5535
 800df06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800df0a:	441e      	add	r6, r3
 800df0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800df10:	2b20      	cmp	r3, #32
 800df12:	bfc1      	itttt	gt
 800df14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800df18:	409f      	lslgt	r7, r3
 800df1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800df1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800df22:	bfd6      	itet	le
 800df24:	f1c3 0320 	rsble	r3, r3, #32
 800df28:	ea47 0003 	orrgt.w	r0, r7, r3
 800df2c:	fa04 f003 	lslle.w	r0, r4, r3
 800df30:	f7f2 fb10 	bl	8000554 <__aeabi_ui2d>
 800df34:	2201      	movs	r2, #1
 800df36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800df3a:	3e01      	subs	r6, #1
 800df3c:	9214      	str	r2, [sp, #80]	@ 0x50
 800df3e:	e777      	b.n	800de30 <_dtoa_r+0x100>
 800df40:	2301      	movs	r3, #1
 800df42:	e7b8      	b.n	800deb6 <_dtoa_r+0x186>
 800df44:	9012      	str	r0, [sp, #72]	@ 0x48
 800df46:	e7b7      	b.n	800deb8 <_dtoa_r+0x188>
 800df48:	427b      	negs	r3, r7
 800df4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800df4c:	2300      	movs	r3, #0
 800df4e:	eba8 0807 	sub.w	r8, r8, r7
 800df52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df54:	e7c4      	b.n	800dee0 <_dtoa_r+0x1b0>
 800df56:	2300      	movs	r3, #0
 800df58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	dc35      	bgt.n	800dfcc <_dtoa_r+0x29c>
 800df60:	2301      	movs	r3, #1
 800df62:	9300      	str	r3, [sp, #0]
 800df64:	9307      	str	r3, [sp, #28]
 800df66:	461a      	mov	r2, r3
 800df68:	920e      	str	r2, [sp, #56]	@ 0x38
 800df6a:	e00b      	b.n	800df84 <_dtoa_r+0x254>
 800df6c:	2301      	movs	r3, #1
 800df6e:	e7f3      	b.n	800df58 <_dtoa_r+0x228>
 800df70:	2300      	movs	r3, #0
 800df72:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df76:	18fb      	adds	r3, r7, r3
 800df78:	9300      	str	r3, [sp, #0]
 800df7a:	3301      	adds	r3, #1
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	9307      	str	r3, [sp, #28]
 800df80:	bfb8      	it	lt
 800df82:	2301      	movlt	r3, #1
 800df84:	f8db 001c 	ldr.w	r0, [fp, #28]
 800df88:	2100      	movs	r1, #0
 800df8a:	2204      	movs	r2, #4
 800df8c:	f102 0514 	add.w	r5, r2, #20
 800df90:	429d      	cmp	r5, r3
 800df92:	d91f      	bls.n	800dfd4 <_dtoa_r+0x2a4>
 800df94:	6041      	str	r1, [r0, #4]
 800df96:	4658      	mov	r0, fp
 800df98:	f000 ff92 	bl	800eec0 <_Balloc>
 800df9c:	4682      	mov	sl, r0
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d13c      	bne.n	800e01c <_dtoa_r+0x2ec>
 800dfa2:	4b1b      	ldr	r3, [pc, #108]	@ (800e010 <_dtoa_r+0x2e0>)
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	f240 11af 	movw	r1, #431	@ 0x1af
 800dfaa:	e6d8      	b.n	800dd5e <_dtoa_r+0x2e>
 800dfac:	2301      	movs	r3, #1
 800dfae:	e7e0      	b.n	800df72 <_dtoa_r+0x242>
 800dfb0:	2401      	movs	r4, #1
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dfb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dfbc:	9300      	str	r3, [sp, #0]
 800dfbe:	9307      	str	r3, [sp, #28]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	2312      	movs	r3, #18
 800dfc4:	e7d0      	b.n	800df68 <_dtoa_r+0x238>
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dfca:	e7f5      	b.n	800dfb8 <_dtoa_r+0x288>
 800dfcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfce:	9300      	str	r3, [sp, #0]
 800dfd0:	9307      	str	r3, [sp, #28]
 800dfd2:	e7d7      	b.n	800df84 <_dtoa_r+0x254>
 800dfd4:	3101      	adds	r1, #1
 800dfd6:	0052      	lsls	r2, r2, #1
 800dfd8:	e7d8      	b.n	800df8c <_dtoa_r+0x25c>
 800dfda:	bf00      	nop
 800dfdc:	f3af 8000 	nop.w
 800dfe0:	636f4361 	.word	0x636f4361
 800dfe4:	3fd287a7 	.word	0x3fd287a7
 800dfe8:	8b60c8b3 	.word	0x8b60c8b3
 800dfec:	3fc68a28 	.word	0x3fc68a28
 800dff0:	509f79fb 	.word	0x509f79fb
 800dff4:	3fd34413 	.word	0x3fd34413
 800dff8:	0800ff1d 	.word	0x0800ff1d
 800dffc:	0800ff34 	.word	0x0800ff34
 800e000:	7ff00000 	.word	0x7ff00000
 800e004:	0800feed 	.word	0x0800feed
 800e008:	3ff80000 	.word	0x3ff80000
 800e00c:	08010040 	.word	0x08010040
 800e010:	0800ff8c 	.word	0x0800ff8c
 800e014:	0800ff19 	.word	0x0800ff19
 800e018:	0800feec 	.word	0x0800feec
 800e01c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e020:	6018      	str	r0, [r3, #0]
 800e022:	9b07      	ldr	r3, [sp, #28]
 800e024:	2b0e      	cmp	r3, #14
 800e026:	f200 80a4 	bhi.w	800e172 <_dtoa_r+0x442>
 800e02a:	2c00      	cmp	r4, #0
 800e02c:	f000 80a1 	beq.w	800e172 <_dtoa_r+0x442>
 800e030:	2f00      	cmp	r7, #0
 800e032:	dd33      	ble.n	800e09c <_dtoa_r+0x36c>
 800e034:	4bad      	ldr	r3, [pc, #692]	@ (800e2ec <_dtoa_r+0x5bc>)
 800e036:	f007 020f 	and.w	r2, r7, #15
 800e03a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e03e:	ed93 7b00 	vldr	d7, [r3]
 800e042:	05f8      	lsls	r0, r7, #23
 800e044:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e048:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e04c:	d516      	bpl.n	800e07c <_dtoa_r+0x34c>
 800e04e:	4ba8      	ldr	r3, [pc, #672]	@ (800e2f0 <_dtoa_r+0x5c0>)
 800e050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e054:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e058:	f7f2 fc20 	bl	800089c <__aeabi_ddiv>
 800e05c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e060:	f004 040f 	and.w	r4, r4, #15
 800e064:	2603      	movs	r6, #3
 800e066:	4da2      	ldr	r5, [pc, #648]	@ (800e2f0 <_dtoa_r+0x5c0>)
 800e068:	b954      	cbnz	r4, 800e080 <_dtoa_r+0x350>
 800e06a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e06e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e072:	f7f2 fc13 	bl	800089c <__aeabi_ddiv>
 800e076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e07a:	e028      	b.n	800e0ce <_dtoa_r+0x39e>
 800e07c:	2602      	movs	r6, #2
 800e07e:	e7f2      	b.n	800e066 <_dtoa_r+0x336>
 800e080:	07e1      	lsls	r1, r4, #31
 800e082:	d508      	bpl.n	800e096 <_dtoa_r+0x366>
 800e084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e088:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e08c:	f7f2 fadc 	bl	8000648 <__aeabi_dmul>
 800e090:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e094:	3601      	adds	r6, #1
 800e096:	1064      	asrs	r4, r4, #1
 800e098:	3508      	adds	r5, #8
 800e09a:	e7e5      	b.n	800e068 <_dtoa_r+0x338>
 800e09c:	f000 80d2 	beq.w	800e244 <_dtoa_r+0x514>
 800e0a0:	427c      	negs	r4, r7
 800e0a2:	4b92      	ldr	r3, [pc, #584]	@ (800e2ec <_dtoa_r+0x5bc>)
 800e0a4:	4d92      	ldr	r5, [pc, #584]	@ (800e2f0 <_dtoa_r+0x5c0>)
 800e0a6:	f004 020f 	and.w	r2, r4, #15
 800e0aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0b6:	f7f2 fac7 	bl	8000648 <__aeabi_dmul>
 800e0ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0be:	1124      	asrs	r4, r4, #4
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	2602      	movs	r6, #2
 800e0c4:	2c00      	cmp	r4, #0
 800e0c6:	f040 80b2 	bne.w	800e22e <_dtoa_r+0x4fe>
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d1d3      	bne.n	800e076 <_dtoa_r+0x346>
 800e0ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e0d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f000 80b7 	beq.w	800e248 <_dtoa_r+0x518>
 800e0da:	4b86      	ldr	r3, [pc, #536]	@ (800e2f4 <_dtoa_r+0x5c4>)
 800e0dc:	2200      	movs	r2, #0
 800e0de:	4620      	mov	r0, r4
 800e0e0:	4629      	mov	r1, r5
 800e0e2:	f7f2 fd23 	bl	8000b2c <__aeabi_dcmplt>
 800e0e6:	2800      	cmp	r0, #0
 800e0e8:	f000 80ae 	beq.w	800e248 <_dtoa_r+0x518>
 800e0ec:	9b07      	ldr	r3, [sp, #28]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	f000 80aa 	beq.w	800e248 <_dtoa_r+0x518>
 800e0f4:	9b00      	ldr	r3, [sp, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	dd37      	ble.n	800e16a <_dtoa_r+0x43a>
 800e0fa:	1e7b      	subs	r3, r7, #1
 800e0fc:	9304      	str	r3, [sp, #16]
 800e0fe:	4620      	mov	r0, r4
 800e100:	4b7d      	ldr	r3, [pc, #500]	@ (800e2f8 <_dtoa_r+0x5c8>)
 800e102:	2200      	movs	r2, #0
 800e104:	4629      	mov	r1, r5
 800e106:	f7f2 fa9f 	bl	8000648 <__aeabi_dmul>
 800e10a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e10e:	9c00      	ldr	r4, [sp, #0]
 800e110:	3601      	adds	r6, #1
 800e112:	4630      	mov	r0, r6
 800e114:	f7f2 fa2e 	bl	8000574 <__aeabi_i2d>
 800e118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e11c:	f7f2 fa94 	bl	8000648 <__aeabi_dmul>
 800e120:	4b76      	ldr	r3, [pc, #472]	@ (800e2fc <_dtoa_r+0x5cc>)
 800e122:	2200      	movs	r2, #0
 800e124:	f7f2 f8da 	bl	80002dc <__adddf3>
 800e128:	4605      	mov	r5, r0
 800e12a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e12e:	2c00      	cmp	r4, #0
 800e130:	f040 808d 	bne.w	800e24e <_dtoa_r+0x51e>
 800e134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e138:	4b71      	ldr	r3, [pc, #452]	@ (800e300 <_dtoa_r+0x5d0>)
 800e13a:	2200      	movs	r2, #0
 800e13c:	f7f2 f8cc 	bl	80002d8 <__aeabi_dsub>
 800e140:	4602      	mov	r2, r0
 800e142:	460b      	mov	r3, r1
 800e144:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e148:	462a      	mov	r2, r5
 800e14a:	4633      	mov	r3, r6
 800e14c:	f7f2 fd0c 	bl	8000b68 <__aeabi_dcmpgt>
 800e150:	2800      	cmp	r0, #0
 800e152:	f040 828b 	bne.w	800e66c <_dtoa_r+0x93c>
 800e156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e15a:	462a      	mov	r2, r5
 800e15c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e160:	f7f2 fce4 	bl	8000b2c <__aeabi_dcmplt>
 800e164:	2800      	cmp	r0, #0
 800e166:	f040 8128 	bne.w	800e3ba <_dtoa_r+0x68a>
 800e16a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e16e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e172:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e174:	2b00      	cmp	r3, #0
 800e176:	f2c0 815a 	blt.w	800e42e <_dtoa_r+0x6fe>
 800e17a:	2f0e      	cmp	r7, #14
 800e17c:	f300 8157 	bgt.w	800e42e <_dtoa_r+0x6fe>
 800e180:	4b5a      	ldr	r3, [pc, #360]	@ (800e2ec <_dtoa_r+0x5bc>)
 800e182:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e186:	ed93 7b00 	vldr	d7, [r3]
 800e18a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	ed8d 7b00 	vstr	d7, [sp]
 800e192:	da03      	bge.n	800e19c <_dtoa_r+0x46c>
 800e194:	9b07      	ldr	r3, [sp, #28]
 800e196:	2b00      	cmp	r3, #0
 800e198:	f340 8101 	ble.w	800e39e <_dtoa_r+0x66e>
 800e19c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e1a0:	4656      	mov	r6, sl
 800e1a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	f7f2 fb77 	bl	800089c <__aeabi_ddiv>
 800e1ae:	f7f2 fcfb 	bl	8000ba8 <__aeabi_d2iz>
 800e1b2:	4680      	mov	r8, r0
 800e1b4:	f7f2 f9de 	bl	8000574 <__aeabi_i2d>
 800e1b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1bc:	f7f2 fa44 	bl	8000648 <__aeabi_dmul>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	4629      	mov	r1, r5
 800e1c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e1cc:	f7f2 f884 	bl	80002d8 <__aeabi_dsub>
 800e1d0:	f806 4b01 	strb.w	r4, [r6], #1
 800e1d4:	9d07      	ldr	r5, [sp, #28]
 800e1d6:	eba6 040a 	sub.w	r4, r6, sl
 800e1da:	42a5      	cmp	r5, r4
 800e1dc:	4602      	mov	r2, r0
 800e1de:	460b      	mov	r3, r1
 800e1e0:	f040 8117 	bne.w	800e412 <_dtoa_r+0x6e2>
 800e1e4:	f7f2 f87a 	bl	80002dc <__adddf3>
 800e1e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	460d      	mov	r5, r1
 800e1f0:	f7f2 fcba 	bl	8000b68 <__aeabi_dcmpgt>
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	f040 80f9 	bne.w	800e3ec <_dtoa_r+0x6bc>
 800e1fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1fe:	4620      	mov	r0, r4
 800e200:	4629      	mov	r1, r5
 800e202:	f7f2 fc89 	bl	8000b18 <__aeabi_dcmpeq>
 800e206:	b118      	cbz	r0, 800e210 <_dtoa_r+0x4e0>
 800e208:	f018 0f01 	tst.w	r8, #1
 800e20c:	f040 80ee 	bne.w	800e3ec <_dtoa_r+0x6bc>
 800e210:	4649      	mov	r1, r9
 800e212:	4658      	mov	r0, fp
 800e214:	f000 fe94 	bl	800ef40 <_Bfree>
 800e218:	2300      	movs	r3, #0
 800e21a:	7033      	strb	r3, [r6, #0]
 800e21c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e21e:	3701      	adds	r7, #1
 800e220:	601f      	str	r7, [r3, #0]
 800e222:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e224:	2b00      	cmp	r3, #0
 800e226:	f000 831d 	beq.w	800e864 <_dtoa_r+0xb34>
 800e22a:	601e      	str	r6, [r3, #0]
 800e22c:	e31a      	b.n	800e864 <_dtoa_r+0xb34>
 800e22e:	07e2      	lsls	r2, r4, #31
 800e230:	d505      	bpl.n	800e23e <_dtoa_r+0x50e>
 800e232:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e236:	f7f2 fa07 	bl	8000648 <__aeabi_dmul>
 800e23a:	3601      	adds	r6, #1
 800e23c:	2301      	movs	r3, #1
 800e23e:	1064      	asrs	r4, r4, #1
 800e240:	3508      	adds	r5, #8
 800e242:	e73f      	b.n	800e0c4 <_dtoa_r+0x394>
 800e244:	2602      	movs	r6, #2
 800e246:	e742      	b.n	800e0ce <_dtoa_r+0x39e>
 800e248:	9c07      	ldr	r4, [sp, #28]
 800e24a:	9704      	str	r7, [sp, #16]
 800e24c:	e761      	b.n	800e112 <_dtoa_r+0x3e2>
 800e24e:	4b27      	ldr	r3, [pc, #156]	@ (800e2ec <_dtoa_r+0x5bc>)
 800e250:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e252:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e256:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e25a:	4454      	add	r4, sl
 800e25c:	2900      	cmp	r1, #0
 800e25e:	d053      	beq.n	800e308 <_dtoa_r+0x5d8>
 800e260:	4928      	ldr	r1, [pc, #160]	@ (800e304 <_dtoa_r+0x5d4>)
 800e262:	2000      	movs	r0, #0
 800e264:	f7f2 fb1a 	bl	800089c <__aeabi_ddiv>
 800e268:	4633      	mov	r3, r6
 800e26a:	462a      	mov	r2, r5
 800e26c:	f7f2 f834 	bl	80002d8 <__aeabi_dsub>
 800e270:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e274:	4656      	mov	r6, sl
 800e276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e27a:	f7f2 fc95 	bl	8000ba8 <__aeabi_d2iz>
 800e27e:	4605      	mov	r5, r0
 800e280:	f7f2 f978 	bl	8000574 <__aeabi_i2d>
 800e284:	4602      	mov	r2, r0
 800e286:	460b      	mov	r3, r1
 800e288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e28c:	f7f2 f824 	bl	80002d8 <__aeabi_dsub>
 800e290:	3530      	adds	r5, #48	@ 0x30
 800e292:	4602      	mov	r2, r0
 800e294:	460b      	mov	r3, r1
 800e296:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e29a:	f806 5b01 	strb.w	r5, [r6], #1
 800e29e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e2a2:	f7f2 fc43 	bl	8000b2c <__aeabi_dcmplt>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d171      	bne.n	800e38e <_dtoa_r+0x65e>
 800e2aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2ae:	4911      	ldr	r1, [pc, #68]	@ (800e2f4 <_dtoa_r+0x5c4>)
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	f7f2 f811 	bl	80002d8 <__aeabi_dsub>
 800e2b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e2ba:	f7f2 fc37 	bl	8000b2c <__aeabi_dcmplt>
 800e2be:	2800      	cmp	r0, #0
 800e2c0:	f040 8095 	bne.w	800e3ee <_dtoa_r+0x6be>
 800e2c4:	42a6      	cmp	r6, r4
 800e2c6:	f43f af50 	beq.w	800e16a <_dtoa_r+0x43a>
 800e2ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e2ce:	4b0a      	ldr	r3, [pc, #40]	@ (800e2f8 <_dtoa_r+0x5c8>)
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	f7f2 f9b9 	bl	8000648 <__aeabi_dmul>
 800e2d6:	4b08      	ldr	r3, [pc, #32]	@ (800e2f8 <_dtoa_r+0x5c8>)
 800e2d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e2dc:	2200      	movs	r2, #0
 800e2de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2e2:	f7f2 f9b1 	bl	8000648 <__aeabi_dmul>
 800e2e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2ea:	e7c4      	b.n	800e276 <_dtoa_r+0x546>
 800e2ec:	08010040 	.word	0x08010040
 800e2f0:	08010018 	.word	0x08010018
 800e2f4:	3ff00000 	.word	0x3ff00000
 800e2f8:	40240000 	.word	0x40240000
 800e2fc:	401c0000 	.word	0x401c0000
 800e300:	40140000 	.word	0x40140000
 800e304:	3fe00000 	.word	0x3fe00000
 800e308:	4631      	mov	r1, r6
 800e30a:	4628      	mov	r0, r5
 800e30c:	f7f2 f99c 	bl	8000648 <__aeabi_dmul>
 800e310:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e314:	9415      	str	r4, [sp, #84]	@ 0x54
 800e316:	4656      	mov	r6, sl
 800e318:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e31c:	f7f2 fc44 	bl	8000ba8 <__aeabi_d2iz>
 800e320:	4605      	mov	r5, r0
 800e322:	f7f2 f927 	bl	8000574 <__aeabi_i2d>
 800e326:	4602      	mov	r2, r0
 800e328:	460b      	mov	r3, r1
 800e32a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e32e:	f7f1 ffd3 	bl	80002d8 <__aeabi_dsub>
 800e332:	3530      	adds	r5, #48	@ 0x30
 800e334:	f806 5b01 	strb.w	r5, [r6], #1
 800e338:	4602      	mov	r2, r0
 800e33a:	460b      	mov	r3, r1
 800e33c:	42a6      	cmp	r6, r4
 800e33e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e342:	f04f 0200 	mov.w	r2, #0
 800e346:	d124      	bne.n	800e392 <_dtoa_r+0x662>
 800e348:	4bac      	ldr	r3, [pc, #688]	@ (800e5fc <_dtoa_r+0x8cc>)
 800e34a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e34e:	f7f1 ffc5 	bl	80002dc <__adddf3>
 800e352:	4602      	mov	r2, r0
 800e354:	460b      	mov	r3, r1
 800e356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e35a:	f7f2 fc05 	bl	8000b68 <__aeabi_dcmpgt>
 800e35e:	2800      	cmp	r0, #0
 800e360:	d145      	bne.n	800e3ee <_dtoa_r+0x6be>
 800e362:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e366:	49a5      	ldr	r1, [pc, #660]	@ (800e5fc <_dtoa_r+0x8cc>)
 800e368:	2000      	movs	r0, #0
 800e36a:	f7f1 ffb5 	bl	80002d8 <__aeabi_dsub>
 800e36e:	4602      	mov	r2, r0
 800e370:	460b      	mov	r3, r1
 800e372:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e376:	f7f2 fbd9 	bl	8000b2c <__aeabi_dcmplt>
 800e37a:	2800      	cmp	r0, #0
 800e37c:	f43f aef5 	beq.w	800e16a <_dtoa_r+0x43a>
 800e380:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e382:	1e73      	subs	r3, r6, #1
 800e384:	9315      	str	r3, [sp, #84]	@ 0x54
 800e386:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e38a:	2b30      	cmp	r3, #48	@ 0x30
 800e38c:	d0f8      	beq.n	800e380 <_dtoa_r+0x650>
 800e38e:	9f04      	ldr	r7, [sp, #16]
 800e390:	e73e      	b.n	800e210 <_dtoa_r+0x4e0>
 800e392:	4b9b      	ldr	r3, [pc, #620]	@ (800e600 <_dtoa_r+0x8d0>)
 800e394:	f7f2 f958 	bl	8000648 <__aeabi_dmul>
 800e398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e39c:	e7bc      	b.n	800e318 <_dtoa_r+0x5e8>
 800e39e:	d10c      	bne.n	800e3ba <_dtoa_r+0x68a>
 800e3a0:	4b98      	ldr	r3, [pc, #608]	@ (800e604 <_dtoa_r+0x8d4>)
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3a8:	f7f2 f94e 	bl	8000648 <__aeabi_dmul>
 800e3ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3b0:	f7f2 fbd0 	bl	8000b54 <__aeabi_dcmpge>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	f000 8157 	beq.w	800e668 <_dtoa_r+0x938>
 800e3ba:	2400      	movs	r4, #0
 800e3bc:	4625      	mov	r5, r4
 800e3be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3c0:	43db      	mvns	r3, r3
 800e3c2:	9304      	str	r3, [sp, #16]
 800e3c4:	4656      	mov	r6, sl
 800e3c6:	2700      	movs	r7, #0
 800e3c8:	4621      	mov	r1, r4
 800e3ca:	4658      	mov	r0, fp
 800e3cc:	f000 fdb8 	bl	800ef40 <_Bfree>
 800e3d0:	2d00      	cmp	r5, #0
 800e3d2:	d0dc      	beq.n	800e38e <_dtoa_r+0x65e>
 800e3d4:	b12f      	cbz	r7, 800e3e2 <_dtoa_r+0x6b2>
 800e3d6:	42af      	cmp	r7, r5
 800e3d8:	d003      	beq.n	800e3e2 <_dtoa_r+0x6b2>
 800e3da:	4639      	mov	r1, r7
 800e3dc:	4658      	mov	r0, fp
 800e3de:	f000 fdaf 	bl	800ef40 <_Bfree>
 800e3e2:	4629      	mov	r1, r5
 800e3e4:	4658      	mov	r0, fp
 800e3e6:	f000 fdab 	bl	800ef40 <_Bfree>
 800e3ea:	e7d0      	b.n	800e38e <_dtoa_r+0x65e>
 800e3ec:	9704      	str	r7, [sp, #16]
 800e3ee:	4633      	mov	r3, r6
 800e3f0:	461e      	mov	r6, r3
 800e3f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3f6:	2a39      	cmp	r2, #57	@ 0x39
 800e3f8:	d107      	bne.n	800e40a <_dtoa_r+0x6da>
 800e3fa:	459a      	cmp	sl, r3
 800e3fc:	d1f8      	bne.n	800e3f0 <_dtoa_r+0x6c0>
 800e3fe:	9a04      	ldr	r2, [sp, #16]
 800e400:	3201      	adds	r2, #1
 800e402:	9204      	str	r2, [sp, #16]
 800e404:	2230      	movs	r2, #48	@ 0x30
 800e406:	f88a 2000 	strb.w	r2, [sl]
 800e40a:	781a      	ldrb	r2, [r3, #0]
 800e40c:	3201      	adds	r2, #1
 800e40e:	701a      	strb	r2, [r3, #0]
 800e410:	e7bd      	b.n	800e38e <_dtoa_r+0x65e>
 800e412:	4b7b      	ldr	r3, [pc, #492]	@ (800e600 <_dtoa_r+0x8d0>)
 800e414:	2200      	movs	r2, #0
 800e416:	f7f2 f917 	bl	8000648 <__aeabi_dmul>
 800e41a:	2200      	movs	r2, #0
 800e41c:	2300      	movs	r3, #0
 800e41e:	4604      	mov	r4, r0
 800e420:	460d      	mov	r5, r1
 800e422:	f7f2 fb79 	bl	8000b18 <__aeabi_dcmpeq>
 800e426:	2800      	cmp	r0, #0
 800e428:	f43f aebb 	beq.w	800e1a2 <_dtoa_r+0x472>
 800e42c:	e6f0      	b.n	800e210 <_dtoa_r+0x4e0>
 800e42e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e430:	2a00      	cmp	r2, #0
 800e432:	f000 80db 	beq.w	800e5ec <_dtoa_r+0x8bc>
 800e436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e438:	2a01      	cmp	r2, #1
 800e43a:	f300 80bf 	bgt.w	800e5bc <_dtoa_r+0x88c>
 800e43e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e440:	2a00      	cmp	r2, #0
 800e442:	f000 80b7 	beq.w	800e5b4 <_dtoa_r+0x884>
 800e446:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e44a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e44c:	4646      	mov	r6, r8
 800e44e:	9a08      	ldr	r2, [sp, #32]
 800e450:	2101      	movs	r1, #1
 800e452:	441a      	add	r2, r3
 800e454:	4658      	mov	r0, fp
 800e456:	4498      	add	r8, r3
 800e458:	9208      	str	r2, [sp, #32]
 800e45a:	f000 fe25 	bl	800f0a8 <__i2b>
 800e45e:	4605      	mov	r5, r0
 800e460:	b15e      	cbz	r6, 800e47a <_dtoa_r+0x74a>
 800e462:	9b08      	ldr	r3, [sp, #32]
 800e464:	2b00      	cmp	r3, #0
 800e466:	dd08      	ble.n	800e47a <_dtoa_r+0x74a>
 800e468:	42b3      	cmp	r3, r6
 800e46a:	9a08      	ldr	r2, [sp, #32]
 800e46c:	bfa8      	it	ge
 800e46e:	4633      	movge	r3, r6
 800e470:	eba8 0803 	sub.w	r8, r8, r3
 800e474:	1af6      	subs	r6, r6, r3
 800e476:	1ad3      	subs	r3, r2, r3
 800e478:	9308      	str	r3, [sp, #32]
 800e47a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e47c:	b1f3      	cbz	r3, 800e4bc <_dtoa_r+0x78c>
 800e47e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e480:	2b00      	cmp	r3, #0
 800e482:	f000 80b7 	beq.w	800e5f4 <_dtoa_r+0x8c4>
 800e486:	b18c      	cbz	r4, 800e4ac <_dtoa_r+0x77c>
 800e488:	4629      	mov	r1, r5
 800e48a:	4622      	mov	r2, r4
 800e48c:	4658      	mov	r0, fp
 800e48e:	f000 fecb 	bl	800f228 <__pow5mult>
 800e492:	464a      	mov	r2, r9
 800e494:	4601      	mov	r1, r0
 800e496:	4605      	mov	r5, r0
 800e498:	4658      	mov	r0, fp
 800e49a:	f000 fe1b 	bl	800f0d4 <__multiply>
 800e49e:	4649      	mov	r1, r9
 800e4a0:	9004      	str	r0, [sp, #16]
 800e4a2:	4658      	mov	r0, fp
 800e4a4:	f000 fd4c 	bl	800ef40 <_Bfree>
 800e4a8:	9b04      	ldr	r3, [sp, #16]
 800e4aa:	4699      	mov	r9, r3
 800e4ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4ae:	1b1a      	subs	r2, r3, r4
 800e4b0:	d004      	beq.n	800e4bc <_dtoa_r+0x78c>
 800e4b2:	4649      	mov	r1, r9
 800e4b4:	4658      	mov	r0, fp
 800e4b6:	f000 feb7 	bl	800f228 <__pow5mult>
 800e4ba:	4681      	mov	r9, r0
 800e4bc:	2101      	movs	r1, #1
 800e4be:	4658      	mov	r0, fp
 800e4c0:	f000 fdf2 	bl	800f0a8 <__i2b>
 800e4c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f000 81cf 	beq.w	800e86c <_dtoa_r+0xb3c>
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	4601      	mov	r1, r0
 800e4d2:	4658      	mov	r0, fp
 800e4d4:	f000 fea8 	bl	800f228 <__pow5mult>
 800e4d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	4604      	mov	r4, r0
 800e4de:	f300 8095 	bgt.w	800e60c <_dtoa_r+0x8dc>
 800e4e2:	9b02      	ldr	r3, [sp, #8]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f040 8087 	bne.w	800e5f8 <_dtoa_r+0x8c8>
 800e4ea:	9b03      	ldr	r3, [sp, #12]
 800e4ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	f040 8089 	bne.w	800e608 <_dtoa_r+0x8d8>
 800e4f6:	9b03      	ldr	r3, [sp, #12]
 800e4f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4fc:	0d1b      	lsrs	r3, r3, #20
 800e4fe:	051b      	lsls	r3, r3, #20
 800e500:	b12b      	cbz	r3, 800e50e <_dtoa_r+0x7de>
 800e502:	9b08      	ldr	r3, [sp, #32]
 800e504:	3301      	adds	r3, #1
 800e506:	9308      	str	r3, [sp, #32]
 800e508:	f108 0801 	add.w	r8, r8, #1
 800e50c:	2301      	movs	r3, #1
 800e50e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e510:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e512:	2b00      	cmp	r3, #0
 800e514:	f000 81b0 	beq.w	800e878 <_dtoa_r+0xb48>
 800e518:	6923      	ldr	r3, [r4, #16]
 800e51a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e51e:	6918      	ldr	r0, [r3, #16]
 800e520:	f000 fd76 	bl	800f010 <__hi0bits>
 800e524:	f1c0 0020 	rsb	r0, r0, #32
 800e528:	9b08      	ldr	r3, [sp, #32]
 800e52a:	4418      	add	r0, r3
 800e52c:	f010 001f 	ands.w	r0, r0, #31
 800e530:	d077      	beq.n	800e622 <_dtoa_r+0x8f2>
 800e532:	f1c0 0320 	rsb	r3, r0, #32
 800e536:	2b04      	cmp	r3, #4
 800e538:	dd6b      	ble.n	800e612 <_dtoa_r+0x8e2>
 800e53a:	9b08      	ldr	r3, [sp, #32]
 800e53c:	f1c0 001c 	rsb	r0, r0, #28
 800e540:	4403      	add	r3, r0
 800e542:	4480      	add	r8, r0
 800e544:	4406      	add	r6, r0
 800e546:	9308      	str	r3, [sp, #32]
 800e548:	f1b8 0f00 	cmp.w	r8, #0
 800e54c:	dd05      	ble.n	800e55a <_dtoa_r+0x82a>
 800e54e:	4649      	mov	r1, r9
 800e550:	4642      	mov	r2, r8
 800e552:	4658      	mov	r0, fp
 800e554:	f000 fec2 	bl	800f2dc <__lshift>
 800e558:	4681      	mov	r9, r0
 800e55a:	9b08      	ldr	r3, [sp, #32]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	dd05      	ble.n	800e56c <_dtoa_r+0x83c>
 800e560:	4621      	mov	r1, r4
 800e562:	461a      	mov	r2, r3
 800e564:	4658      	mov	r0, fp
 800e566:	f000 feb9 	bl	800f2dc <__lshift>
 800e56a:	4604      	mov	r4, r0
 800e56c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d059      	beq.n	800e626 <_dtoa_r+0x8f6>
 800e572:	4621      	mov	r1, r4
 800e574:	4648      	mov	r0, r9
 800e576:	f000 ff1d 	bl	800f3b4 <__mcmp>
 800e57a:	2800      	cmp	r0, #0
 800e57c:	da53      	bge.n	800e626 <_dtoa_r+0x8f6>
 800e57e:	1e7b      	subs	r3, r7, #1
 800e580:	9304      	str	r3, [sp, #16]
 800e582:	4649      	mov	r1, r9
 800e584:	2300      	movs	r3, #0
 800e586:	220a      	movs	r2, #10
 800e588:	4658      	mov	r0, fp
 800e58a:	f000 fcfb 	bl	800ef84 <__multadd>
 800e58e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e590:	4681      	mov	r9, r0
 800e592:	2b00      	cmp	r3, #0
 800e594:	f000 8172 	beq.w	800e87c <_dtoa_r+0xb4c>
 800e598:	2300      	movs	r3, #0
 800e59a:	4629      	mov	r1, r5
 800e59c:	220a      	movs	r2, #10
 800e59e:	4658      	mov	r0, fp
 800e5a0:	f000 fcf0 	bl	800ef84 <__multadd>
 800e5a4:	9b00      	ldr	r3, [sp, #0]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	4605      	mov	r5, r0
 800e5aa:	dc67      	bgt.n	800e67c <_dtoa_r+0x94c>
 800e5ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5ae:	2b02      	cmp	r3, #2
 800e5b0:	dc41      	bgt.n	800e636 <_dtoa_r+0x906>
 800e5b2:	e063      	b.n	800e67c <_dtoa_r+0x94c>
 800e5b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e5b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e5ba:	e746      	b.n	800e44a <_dtoa_r+0x71a>
 800e5bc:	9b07      	ldr	r3, [sp, #28]
 800e5be:	1e5c      	subs	r4, r3, #1
 800e5c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5c2:	42a3      	cmp	r3, r4
 800e5c4:	bfbf      	itttt	lt
 800e5c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e5c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e5ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e5cc:	1ae3      	sublt	r3, r4, r3
 800e5ce:	bfb4      	ite	lt
 800e5d0:	18d2      	addlt	r2, r2, r3
 800e5d2:	1b1c      	subge	r4, r3, r4
 800e5d4:	9b07      	ldr	r3, [sp, #28]
 800e5d6:	bfbc      	itt	lt
 800e5d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e5da:	2400      	movlt	r4, #0
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	bfb5      	itete	lt
 800e5e0:	eba8 0603 	sublt.w	r6, r8, r3
 800e5e4:	9b07      	ldrge	r3, [sp, #28]
 800e5e6:	2300      	movlt	r3, #0
 800e5e8:	4646      	movge	r6, r8
 800e5ea:	e730      	b.n	800e44e <_dtoa_r+0x71e>
 800e5ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e5ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e5f0:	4646      	mov	r6, r8
 800e5f2:	e735      	b.n	800e460 <_dtoa_r+0x730>
 800e5f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e5f6:	e75c      	b.n	800e4b2 <_dtoa_r+0x782>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	e788      	b.n	800e50e <_dtoa_r+0x7de>
 800e5fc:	3fe00000 	.word	0x3fe00000
 800e600:	40240000 	.word	0x40240000
 800e604:	40140000 	.word	0x40140000
 800e608:	9b02      	ldr	r3, [sp, #8]
 800e60a:	e780      	b.n	800e50e <_dtoa_r+0x7de>
 800e60c:	2300      	movs	r3, #0
 800e60e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e610:	e782      	b.n	800e518 <_dtoa_r+0x7e8>
 800e612:	d099      	beq.n	800e548 <_dtoa_r+0x818>
 800e614:	9a08      	ldr	r2, [sp, #32]
 800e616:	331c      	adds	r3, #28
 800e618:	441a      	add	r2, r3
 800e61a:	4498      	add	r8, r3
 800e61c:	441e      	add	r6, r3
 800e61e:	9208      	str	r2, [sp, #32]
 800e620:	e792      	b.n	800e548 <_dtoa_r+0x818>
 800e622:	4603      	mov	r3, r0
 800e624:	e7f6      	b.n	800e614 <_dtoa_r+0x8e4>
 800e626:	9b07      	ldr	r3, [sp, #28]
 800e628:	9704      	str	r7, [sp, #16]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	dc20      	bgt.n	800e670 <_dtoa_r+0x940>
 800e62e:	9300      	str	r3, [sp, #0]
 800e630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e632:	2b02      	cmp	r3, #2
 800e634:	dd1e      	ble.n	800e674 <_dtoa_r+0x944>
 800e636:	9b00      	ldr	r3, [sp, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	f47f aec0 	bne.w	800e3be <_dtoa_r+0x68e>
 800e63e:	4621      	mov	r1, r4
 800e640:	2205      	movs	r2, #5
 800e642:	4658      	mov	r0, fp
 800e644:	f000 fc9e 	bl	800ef84 <__multadd>
 800e648:	4601      	mov	r1, r0
 800e64a:	4604      	mov	r4, r0
 800e64c:	4648      	mov	r0, r9
 800e64e:	f000 feb1 	bl	800f3b4 <__mcmp>
 800e652:	2800      	cmp	r0, #0
 800e654:	f77f aeb3 	ble.w	800e3be <_dtoa_r+0x68e>
 800e658:	4656      	mov	r6, sl
 800e65a:	2331      	movs	r3, #49	@ 0x31
 800e65c:	f806 3b01 	strb.w	r3, [r6], #1
 800e660:	9b04      	ldr	r3, [sp, #16]
 800e662:	3301      	adds	r3, #1
 800e664:	9304      	str	r3, [sp, #16]
 800e666:	e6ae      	b.n	800e3c6 <_dtoa_r+0x696>
 800e668:	9c07      	ldr	r4, [sp, #28]
 800e66a:	9704      	str	r7, [sp, #16]
 800e66c:	4625      	mov	r5, r4
 800e66e:	e7f3      	b.n	800e658 <_dtoa_r+0x928>
 800e670:	9b07      	ldr	r3, [sp, #28]
 800e672:	9300      	str	r3, [sp, #0]
 800e674:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e676:	2b00      	cmp	r3, #0
 800e678:	f000 8104 	beq.w	800e884 <_dtoa_r+0xb54>
 800e67c:	2e00      	cmp	r6, #0
 800e67e:	dd05      	ble.n	800e68c <_dtoa_r+0x95c>
 800e680:	4629      	mov	r1, r5
 800e682:	4632      	mov	r2, r6
 800e684:	4658      	mov	r0, fp
 800e686:	f000 fe29 	bl	800f2dc <__lshift>
 800e68a:	4605      	mov	r5, r0
 800e68c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d05a      	beq.n	800e748 <_dtoa_r+0xa18>
 800e692:	6869      	ldr	r1, [r5, #4]
 800e694:	4658      	mov	r0, fp
 800e696:	f000 fc13 	bl	800eec0 <_Balloc>
 800e69a:	4606      	mov	r6, r0
 800e69c:	b928      	cbnz	r0, 800e6aa <_dtoa_r+0x97a>
 800e69e:	4b84      	ldr	r3, [pc, #528]	@ (800e8b0 <_dtoa_r+0xb80>)
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e6a6:	f7ff bb5a 	b.w	800dd5e <_dtoa_r+0x2e>
 800e6aa:	692a      	ldr	r2, [r5, #16]
 800e6ac:	3202      	adds	r2, #2
 800e6ae:	0092      	lsls	r2, r2, #2
 800e6b0:	f105 010c 	add.w	r1, r5, #12
 800e6b4:	300c      	adds	r0, #12
 800e6b6:	f7ff faa4 	bl	800dc02 <memcpy>
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	4631      	mov	r1, r6
 800e6be:	4658      	mov	r0, fp
 800e6c0:	f000 fe0c 	bl	800f2dc <__lshift>
 800e6c4:	f10a 0301 	add.w	r3, sl, #1
 800e6c8:	9307      	str	r3, [sp, #28]
 800e6ca:	9b00      	ldr	r3, [sp, #0]
 800e6cc:	4453      	add	r3, sl
 800e6ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6d0:	9b02      	ldr	r3, [sp, #8]
 800e6d2:	f003 0301 	and.w	r3, r3, #1
 800e6d6:	462f      	mov	r7, r5
 800e6d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6da:	4605      	mov	r5, r0
 800e6dc:	9b07      	ldr	r3, [sp, #28]
 800e6de:	4621      	mov	r1, r4
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	4648      	mov	r0, r9
 800e6e4:	9300      	str	r3, [sp, #0]
 800e6e6:	f7ff fa9a 	bl	800dc1e <quorem>
 800e6ea:	4639      	mov	r1, r7
 800e6ec:	9002      	str	r0, [sp, #8]
 800e6ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e6f2:	4648      	mov	r0, r9
 800e6f4:	f000 fe5e 	bl	800f3b4 <__mcmp>
 800e6f8:	462a      	mov	r2, r5
 800e6fa:	9008      	str	r0, [sp, #32]
 800e6fc:	4621      	mov	r1, r4
 800e6fe:	4658      	mov	r0, fp
 800e700:	f000 fe74 	bl	800f3ec <__mdiff>
 800e704:	68c2      	ldr	r2, [r0, #12]
 800e706:	4606      	mov	r6, r0
 800e708:	bb02      	cbnz	r2, 800e74c <_dtoa_r+0xa1c>
 800e70a:	4601      	mov	r1, r0
 800e70c:	4648      	mov	r0, r9
 800e70e:	f000 fe51 	bl	800f3b4 <__mcmp>
 800e712:	4602      	mov	r2, r0
 800e714:	4631      	mov	r1, r6
 800e716:	4658      	mov	r0, fp
 800e718:	920e      	str	r2, [sp, #56]	@ 0x38
 800e71a:	f000 fc11 	bl	800ef40 <_Bfree>
 800e71e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e720:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e722:	9e07      	ldr	r6, [sp, #28]
 800e724:	ea43 0102 	orr.w	r1, r3, r2
 800e728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e72a:	4319      	orrs	r1, r3
 800e72c:	d110      	bne.n	800e750 <_dtoa_r+0xa20>
 800e72e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e732:	d029      	beq.n	800e788 <_dtoa_r+0xa58>
 800e734:	9b08      	ldr	r3, [sp, #32]
 800e736:	2b00      	cmp	r3, #0
 800e738:	dd02      	ble.n	800e740 <_dtoa_r+0xa10>
 800e73a:	9b02      	ldr	r3, [sp, #8]
 800e73c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e740:	9b00      	ldr	r3, [sp, #0]
 800e742:	f883 8000 	strb.w	r8, [r3]
 800e746:	e63f      	b.n	800e3c8 <_dtoa_r+0x698>
 800e748:	4628      	mov	r0, r5
 800e74a:	e7bb      	b.n	800e6c4 <_dtoa_r+0x994>
 800e74c:	2201      	movs	r2, #1
 800e74e:	e7e1      	b.n	800e714 <_dtoa_r+0x9e4>
 800e750:	9b08      	ldr	r3, [sp, #32]
 800e752:	2b00      	cmp	r3, #0
 800e754:	db04      	blt.n	800e760 <_dtoa_r+0xa30>
 800e756:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e758:	430b      	orrs	r3, r1
 800e75a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e75c:	430b      	orrs	r3, r1
 800e75e:	d120      	bne.n	800e7a2 <_dtoa_r+0xa72>
 800e760:	2a00      	cmp	r2, #0
 800e762:	dded      	ble.n	800e740 <_dtoa_r+0xa10>
 800e764:	4649      	mov	r1, r9
 800e766:	2201      	movs	r2, #1
 800e768:	4658      	mov	r0, fp
 800e76a:	f000 fdb7 	bl	800f2dc <__lshift>
 800e76e:	4621      	mov	r1, r4
 800e770:	4681      	mov	r9, r0
 800e772:	f000 fe1f 	bl	800f3b4 <__mcmp>
 800e776:	2800      	cmp	r0, #0
 800e778:	dc03      	bgt.n	800e782 <_dtoa_r+0xa52>
 800e77a:	d1e1      	bne.n	800e740 <_dtoa_r+0xa10>
 800e77c:	f018 0f01 	tst.w	r8, #1
 800e780:	d0de      	beq.n	800e740 <_dtoa_r+0xa10>
 800e782:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e786:	d1d8      	bne.n	800e73a <_dtoa_r+0xa0a>
 800e788:	9a00      	ldr	r2, [sp, #0]
 800e78a:	2339      	movs	r3, #57	@ 0x39
 800e78c:	7013      	strb	r3, [r2, #0]
 800e78e:	4633      	mov	r3, r6
 800e790:	461e      	mov	r6, r3
 800e792:	3b01      	subs	r3, #1
 800e794:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e798:	2a39      	cmp	r2, #57	@ 0x39
 800e79a:	d052      	beq.n	800e842 <_dtoa_r+0xb12>
 800e79c:	3201      	adds	r2, #1
 800e79e:	701a      	strb	r2, [r3, #0]
 800e7a0:	e612      	b.n	800e3c8 <_dtoa_r+0x698>
 800e7a2:	2a00      	cmp	r2, #0
 800e7a4:	dd07      	ble.n	800e7b6 <_dtoa_r+0xa86>
 800e7a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e7aa:	d0ed      	beq.n	800e788 <_dtoa_r+0xa58>
 800e7ac:	9a00      	ldr	r2, [sp, #0]
 800e7ae:	f108 0301 	add.w	r3, r8, #1
 800e7b2:	7013      	strb	r3, [r2, #0]
 800e7b4:	e608      	b.n	800e3c8 <_dtoa_r+0x698>
 800e7b6:	9b07      	ldr	r3, [sp, #28]
 800e7b8:	9a07      	ldr	r2, [sp, #28]
 800e7ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e7be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d028      	beq.n	800e816 <_dtoa_r+0xae6>
 800e7c4:	4649      	mov	r1, r9
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	220a      	movs	r2, #10
 800e7ca:	4658      	mov	r0, fp
 800e7cc:	f000 fbda 	bl	800ef84 <__multadd>
 800e7d0:	42af      	cmp	r7, r5
 800e7d2:	4681      	mov	r9, r0
 800e7d4:	f04f 0300 	mov.w	r3, #0
 800e7d8:	f04f 020a 	mov.w	r2, #10
 800e7dc:	4639      	mov	r1, r7
 800e7de:	4658      	mov	r0, fp
 800e7e0:	d107      	bne.n	800e7f2 <_dtoa_r+0xac2>
 800e7e2:	f000 fbcf 	bl	800ef84 <__multadd>
 800e7e6:	4607      	mov	r7, r0
 800e7e8:	4605      	mov	r5, r0
 800e7ea:	9b07      	ldr	r3, [sp, #28]
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	9307      	str	r3, [sp, #28]
 800e7f0:	e774      	b.n	800e6dc <_dtoa_r+0x9ac>
 800e7f2:	f000 fbc7 	bl	800ef84 <__multadd>
 800e7f6:	4629      	mov	r1, r5
 800e7f8:	4607      	mov	r7, r0
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	220a      	movs	r2, #10
 800e7fe:	4658      	mov	r0, fp
 800e800:	f000 fbc0 	bl	800ef84 <__multadd>
 800e804:	4605      	mov	r5, r0
 800e806:	e7f0      	b.n	800e7ea <_dtoa_r+0xaba>
 800e808:	9b00      	ldr	r3, [sp, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	bfcc      	ite	gt
 800e80e:	461e      	movgt	r6, r3
 800e810:	2601      	movle	r6, #1
 800e812:	4456      	add	r6, sl
 800e814:	2700      	movs	r7, #0
 800e816:	4649      	mov	r1, r9
 800e818:	2201      	movs	r2, #1
 800e81a:	4658      	mov	r0, fp
 800e81c:	f000 fd5e 	bl	800f2dc <__lshift>
 800e820:	4621      	mov	r1, r4
 800e822:	4681      	mov	r9, r0
 800e824:	f000 fdc6 	bl	800f3b4 <__mcmp>
 800e828:	2800      	cmp	r0, #0
 800e82a:	dcb0      	bgt.n	800e78e <_dtoa_r+0xa5e>
 800e82c:	d102      	bne.n	800e834 <_dtoa_r+0xb04>
 800e82e:	f018 0f01 	tst.w	r8, #1
 800e832:	d1ac      	bne.n	800e78e <_dtoa_r+0xa5e>
 800e834:	4633      	mov	r3, r6
 800e836:	461e      	mov	r6, r3
 800e838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e83c:	2a30      	cmp	r2, #48	@ 0x30
 800e83e:	d0fa      	beq.n	800e836 <_dtoa_r+0xb06>
 800e840:	e5c2      	b.n	800e3c8 <_dtoa_r+0x698>
 800e842:	459a      	cmp	sl, r3
 800e844:	d1a4      	bne.n	800e790 <_dtoa_r+0xa60>
 800e846:	9b04      	ldr	r3, [sp, #16]
 800e848:	3301      	adds	r3, #1
 800e84a:	9304      	str	r3, [sp, #16]
 800e84c:	2331      	movs	r3, #49	@ 0x31
 800e84e:	f88a 3000 	strb.w	r3, [sl]
 800e852:	e5b9      	b.n	800e3c8 <_dtoa_r+0x698>
 800e854:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e856:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e8b4 <_dtoa_r+0xb84>
 800e85a:	b11b      	cbz	r3, 800e864 <_dtoa_r+0xb34>
 800e85c:	f10a 0308 	add.w	r3, sl, #8
 800e860:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e862:	6013      	str	r3, [r2, #0]
 800e864:	4650      	mov	r0, sl
 800e866:	b019      	add	sp, #100	@ 0x64
 800e868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e86c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e86e:	2b01      	cmp	r3, #1
 800e870:	f77f ae37 	ble.w	800e4e2 <_dtoa_r+0x7b2>
 800e874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e876:	930a      	str	r3, [sp, #40]	@ 0x28
 800e878:	2001      	movs	r0, #1
 800e87a:	e655      	b.n	800e528 <_dtoa_r+0x7f8>
 800e87c:	9b00      	ldr	r3, [sp, #0]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	f77f aed6 	ble.w	800e630 <_dtoa_r+0x900>
 800e884:	4656      	mov	r6, sl
 800e886:	4621      	mov	r1, r4
 800e888:	4648      	mov	r0, r9
 800e88a:	f7ff f9c8 	bl	800dc1e <quorem>
 800e88e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e892:	f806 8b01 	strb.w	r8, [r6], #1
 800e896:	9b00      	ldr	r3, [sp, #0]
 800e898:	eba6 020a 	sub.w	r2, r6, sl
 800e89c:	4293      	cmp	r3, r2
 800e89e:	ddb3      	ble.n	800e808 <_dtoa_r+0xad8>
 800e8a0:	4649      	mov	r1, r9
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	220a      	movs	r2, #10
 800e8a6:	4658      	mov	r0, fp
 800e8a8:	f000 fb6c 	bl	800ef84 <__multadd>
 800e8ac:	4681      	mov	r9, r0
 800e8ae:	e7ea      	b.n	800e886 <_dtoa_r+0xb56>
 800e8b0:	0800ff8c 	.word	0x0800ff8c
 800e8b4:	0800ff10 	.word	0x0800ff10

0800e8b8 <_free_r>:
 800e8b8:	b538      	push	{r3, r4, r5, lr}
 800e8ba:	4605      	mov	r5, r0
 800e8bc:	2900      	cmp	r1, #0
 800e8be:	d041      	beq.n	800e944 <_free_r+0x8c>
 800e8c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8c4:	1f0c      	subs	r4, r1, #4
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	bfb8      	it	lt
 800e8ca:	18e4      	addlt	r4, r4, r3
 800e8cc:	f000 faec 	bl	800eea8 <__malloc_lock>
 800e8d0:	4a1d      	ldr	r2, [pc, #116]	@ (800e948 <_free_r+0x90>)
 800e8d2:	6813      	ldr	r3, [r2, #0]
 800e8d4:	b933      	cbnz	r3, 800e8e4 <_free_r+0x2c>
 800e8d6:	6063      	str	r3, [r4, #4]
 800e8d8:	6014      	str	r4, [r2, #0]
 800e8da:	4628      	mov	r0, r5
 800e8dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8e0:	f000 bae8 	b.w	800eeb4 <__malloc_unlock>
 800e8e4:	42a3      	cmp	r3, r4
 800e8e6:	d908      	bls.n	800e8fa <_free_r+0x42>
 800e8e8:	6820      	ldr	r0, [r4, #0]
 800e8ea:	1821      	adds	r1, r4, r0
 800e8ec:	428b      	cmp	r3, r1
 800e8ee:	bf01      	itttt	eq
 800e8f0:	6819      	ldreq	r1, [r3, #0]
 800e8f2:	685b      	ldreq	r3, [r3, #4]
 800e8f4:	1809      	addeq	r1, r1, r0
 800e8f6:	6021      	streq	r1, [r4, #0]
 800e8f8:	e7ed      	b.n	800e8d6 <_free_r+0x1e>
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	b10b      	cbz	r3, 800e904 <_free_r+0x4c>
 800e900:	42a3      	cmp	r3, r4
 800e902:	d9fa      	bls.n	800e8fa <_free_r+0x42>
 800e904:	6811      	ldr	r1, [r2, #0]
 800e906:	1850      	adds	r0, r2, r1
 800e908:	42a0      	cmp	r0, r4
 800e90a:	d10b      	bne.n	800e924 <_free_r+0x6c>
 800e90c:	6820      	ldr	r0, [r4, #0]
 800e90e:	4401      	add	r1, r0
 800e910:	1850      	adds	r0, r2, r1
 800e912:	4283      	cmp	r3, r0
 800e914:	6011      	str	r1, [r2, #0]
 800e916:	d1e0      	bne.n	800e8da <_free_r+0x22>
 800e918:	6818      	ldr	r0, [r3, #0]
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	6053      	str	r3, [r2, #4]
 800e91e:	4408      	add	r0, r1
 800e920:	6010      	str	r0, [r2, #0]
 800e922:	e7da      	b.n	800e8da <_free_r+0x22>
 800e924:	d902      	bls.n	800e92c <_free_r+0x74>
 800e926:	230c      	movs	r3, #12
 800e928:	602b      	str	r3, [r5, #0]
 800e92a:	e7d6      	b.n	800e8da <_free_r+0x22>
 800e92c:	6820      	ldr	r0, [r4, #0]
 800e92e:	1821      	adds	r1, r4, r0
 800e930:	428b      	cmp	r3, r1
 800e932:	bf04      	itt	eq
 800e934:	6819      	ldreq	r1, [r3, #0]
 800e936:	685b      	ldreq	r3, [r3, #4]
 800e938:	6063      	str	r3, [r4, #4]
 800e93a:	bf04      	itt	eq
 800e93c:	1809      	addeq	r1, r1, r0
 800e93e:	6021      	streq	r1, [r4, #0]
 800e940:	6054      	str	r4, [r2, #4]
 800e942:	e7ca      	b.n	800e8da <_free_r+0x22>
 800e944:	bd38      	pop	{r3, r4, r5, pc}
 800e946:	bf00      	nop
 800e948:	20012820 	.word	0x20012820

0800e94c <__ssputs_r>:
 800e94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e950:	688e      	ldr	r6, [r1, #8]
 800e952:	461f      	mov	r7, r3
 800e954:	42be      	cmp	r6, r7
 800e956:	680b      	ldr	r3, [r1, #0]
 800e958:	4682      	mov	sl, r0
 800e95a:	460c      	mov	r4, r1
 800e95c:	4690      	mov	r8, r2
 800e95e:	d82d      	bhi.n	800e9bc <__ssputs_r+0x70>
 800e960:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e964:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e968:	d026      	beq.n	800e9b8 <__ssputs_r+0x6c>
 800e96a:	6965      	ldr	r5, [r4, #20]
 800e96c:	6909      	ldr	r1, [r1, #16]
 800e96e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e972:	eba3 0901 	sub.w	r9, r3, r1
 800e976:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e97a:	1c7b      	adds	r3, r7, #1
 800e97c:	444b      	add	r3, r9
 800e97e:	106d      	asrs	r5, r5, #1
 800e980:	429d      	cmp	r5, r3
 800e982:	bf38      	it	cc
 800e984:	461d      	movcc	r5, r3
 800e986:	0553      	lsls	r3, r2, #21
 800e988:	d527      	bpl.n	800e9da <__ssputs_r+0x8e>
 800e98a:	4629      	mov	r1, r5
 800e98c:	f000 f960 	bl	800ec50 <_malloc_r>
 800e990:	4606      	mov	r6, r0
 800e992:	b360      	cbz	r0, 800e9ee <__ssputs_r+0xa2>
 800e994:	6921      	ldr	r1, [r4, #16]
 800e996:	464a      	mov	r2, r9
 800e998:	f7ff f933 	bl	800dc02 <memcpy>
 800e99c:	89a3      	ldrh	r3, [r4, #12]
 800e99e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e9a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9a6:	81a3      	strh	r3, [r4, #12]
 800e9a8:	6126      	str	r6, [r4, #16]
 800e9aa:	6165      	str	r5, [r4, #20]
 800e9ac:	444e      	add	r6, r9
 800e9ae:	eba5 0509 	sub.w	r5, r5, r9
 800e9b2:	6026      	str	r6, [r4, #0]
 800e9b4:	60a5      	str	r5, [r4, #8]
 800e9b6:	463e      	mov	r6, r7
 800e9b8:	42be      	cmp	r6, r7
 800e9ba:	d900      	bls.n	800e9be <__ssputs_r+0x72>
 800e9bc:	463e      	mov	r6, r7
 800e9be:	6820      	ldr	r0, [r4, #0]
 800e9c0:	4632      	mov	r2, r6
 800e9c2:	4641      	mov	r1, r8
 800e9c4:	f000 fe6f 	bl	800f6a6 <memmove>
 800e9c8:	68a3      	ldr	r3, [r4, #8]
 800e9ca:	1b9b      	subs	r3, r3, r6
 800e9cc:	60a3      	str	r3, [r4, #8]
 800e9ce:	6823      	ldr	r3, [r4, #0]
 800e9d0:	4433      	add	r3, r6
 800e9d2:	6023      	str	r3, [r4, #0]
 800e9d4:	2000      	movs	r0, #0
 800e9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9da:	462a      	mov	r2, r5
 800e9dc:	f000 fe35 	bl	800f64a <_realloc_r>
 800e9e0:	4606      	mov	r6, r0
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	d1e0      	bne.n	800e9a8 <__ssputs_r+0x5c>
 800e9e6:	6921      	ldr	r1, [r4, #16]
 800e9e8:	4650      	mov	r0, sl
 800e9ea:	f7ff ff65 	bl	800e8b8 <_free_r>
 800e9ee:	230c      	movs	r3, #12
 800e9f0:	f8ca 3000 	str.w	r3, [sl]
 800e9f4:	89a3      	ldrh	r3, [r4, #12]
 800e9f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9fa:	81a3      	strh	r3, [r4, #12]
 800e9fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea00:	e7e9      	b.n	800e9d6 <__ssputs_r+0x8a>
	...

0800ea04 <_svfiprintf_r>:
 800ea04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea08:	4698      	mov	r8, r3
 800ea0a:	898b      	ldrh	r3, [r1, #12]
 800ea0c:	061b      	lsls	r3, r3, #24
 800ea0e:	b09d      	sub	sp, #116	@ 0x74
 800ea10:	4607      	mov	r7, r0
 800ea12:	460d      	mov	r5, r1
 800ea14:	4614      	mov	r4, r2
 800ea16:	d510      	bpl.n	800ea3a <_svfiprintf_r+0x36>
 800ea18:	690b      	ldr	r3, [r1, #16]
 800ea1a:	b973      	cbnz	r3, 800ea3a <_svfiprintf_r+0x36>
 800ea1c:	2140      	movs	r1, #64	@ 0x40
 800ea1e:	f000 f917 	bl	800ec50 <_malloc_r>
 800ea22:	6028      	str	r0, [r5, #0]
 800ea24:	6128      	str	r0, [r5, #16]
 800ea26:	b930      	cbnz	r0, 800ea36 <_svfiprintf_r+0x32>
 800ea28:	230c      	movs	r3, #12
 800ea2a:	603b      	str	r3, [r7, #0]
 800ea2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea30:	b01d      	add	sp, #116	@ 0x74
 800ea32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea36:	2340      	movs	r3, #64	@ 0x40
 800ea38:	616b      	str	r3, [r5, #20]
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea3e:	2320      	movs	r3, #32
 800ea40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea44:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea48:	2330      	movs	r3, #48	@ 0x30
 800ea4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ebe8 <_svfiprintf_r+0x1e4>
 800ea4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea52:	f04f 0901 	mov.w	r9, #1
 800ea56:	4623      	mov	r3, r4
 800ea58:	469a      	mov	sl, r3
 800ea5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea5e:	b10a      	cbz	r2, 800ea64 <_svfiprintf_r+0x60>
 800ea60:	2a25      	cmp	r2, #37	@ 0x25
 800ea62:	d1f9      	bne.n	800ea58 <_svfiprintf_r+0x54>
 800ea64:	ebba 0b04 	subs.w	fp, sl, r4
 800ea68:	d00b      	beq.n	800ea82 <_svfiprintf_r+0x7e>
 800ea6a:	465b      	mov	r3, fp
 800ea6c:	4622      	mov	r2, r4
 800ea6e:	4629      	mov	r1, r5
 800ea70:	4638      	mov	r0, r7
 800ea72:	f7ff ff6b 	bl	800e94c <__ssputs_r>
 800ea76:	3001      	adds	r0, #1
 800ea78:	f000 80a7 	beq.w	800ebca <_svfiprintf_r+0x1c6>
 800ea7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea7e:	445a      	add	r2, fp
 800ea80:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea82:	f89a 3000 	ldrb.w	r3, [sl]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	f000 809f 	beq.w	800ebca <_svfiprintf_r+0x1c6>
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ea92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea96:	f10a 0a01 	add.w	sl, sl, #1
 800ea9a:	9304      	str	r3, [sp, #16]
 800ea9c:	9307      	str	r3, [sp, #28]
 800ea9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eaa2:	931a      	str	r3, [sp, #104]	@ 0x68
 800eaa4:	4654      	mov	r4, sl
 800eaa6:	2205      	movs	r2, #5
 800eaa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaac:	484e      	ldr	r0, [pc, #312]	@ (800ebe8 <_svfiprintf_r+0x1e4>)
 800eaae:	f7f1 fbb7 	bl	8000220 <memchr>
 800eab2:	9a04      	ldr	r2, [sp, #16]
 800eab4:	b9d8      	cbnz	r0, 800eaee <_svfiprintf_r+0xea>
 800eab6:	06d0      	lsls	r0, r2, #27
 800eab8:	bf44      	itt	mi
 800eaba:	2320      	movmi	r3, #32
 800eabc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eac0:	0711      	lsls	r1, r2, #28
 800eac2:	bf44      	itt	mi
 800eac4:	232b      	movmi	r3, #43	@ 0x2b
 800eac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eaca:	f89a 3000 	ldrb.w	r3, [sl]
 800eace:	2b2a      	cmp	r3, #42	@ 0x2a
 800ead0:	d015      	beq.n	800eafe <_svfiprintf_r+0xfa>
 800ead2:	9a07      	ldr	r2, [sp, #28]
 800ead4:	4654      	mov	r4, sl
 800ead6:	2000      	movs	r0, #0
 800ead8:	f04f 0c0a 	mov.w	ip, #10
 800eadc:	4621      	mov	r1, r4
 800eade:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eae2:	3b30      	subs	r3, #48	@ 0x30
 800eae4:	2b09      	cmp	r3, #9
 800eae6:	d94b      	bls.n	800eb80 <_svfiprintf_r+0x17c>
 800eae8:	b1b0      	cbz	r0, 800eb18 <_svfiprintf_r+0x114>
 800eaea:	9207      	str	r2, [sp, #28]
 800eaec:	e014      	b.n	800eb18 <_svfiprintf_r+0x114>
 800eaee:	eba0 0308 	sub.w	r3, r0, r8
 800eaf2:	fa09 f303 	lsl.w	r3, r9, r3
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	9304      	str	r3, [sp, #16]
 800eafa:	46a2      	mov	sl, r4
 800eafc:	e7d2      	b.n	800eaa4 <_svfiprintf_r+0xa0>
 800eafe:	9b03      	ldr	r3, [sp, #12]
 800eb00:	1d19      	adds	r1, r3, #4
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	9103      	str	r1, [sp, #12]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	bfbb      	ittet	lt
 800eb0a:	425b      	neglt	r3, r3
 800eb0c:	f042 0202 	orrlt.w	r2, r2, #2
 800eb10:	9307      	strge	r3, [sp, #28]
 800eb12:	9307      	strlt	r3, [sp, #28]
 800eb14:	bfb8      	it	lt
 800eb16:	9204      	strlt	r2, [sp, #16]
 800eb18:	7823      	ldrb	r3, [r4, #0]
 800eb1a:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb1c:	d10a      	bne.n	800eb34 <_svfiprintf_r+0x130>
 800eb1e:	7863      	ldrb	r3, [r4, #1]
 800eb20:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb22:	d132      	bne.n	800eb8a <_svfiprintf_r+0x186>
 800eb24:	9b03      	ldr	r3, [sp, #12]
 800eb26:	1d1a      	adds	r2, r3, #4
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	9203      	str	r2, [sp, #12]
 800eb2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb30:	3402      	adds	r4, #2
 800eb32:	9305      	str	r3, [sp, #20]
 800eb34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ebf8 <_svfiprintf_r+0x1f4>
 800eb38:	7821      	ldrb	r1, [r4, #0]
 800eb3a:	2203      	movs	r2, #3
 800eb3c:	4650      	mov	r0, sl
 800eb3e:	f7f1 fb6f 	bl	8000220 <memchr>
 800eb42:	b138      	cbz	r0, 800eb54 <_svfiprintf_r+0x150>
 800eb44:	9b04      	ldr	r3, [sp, #16]
 800eb46:	eba0 000a 	sub.w	r0, r0, sl
 800eb4a:	2240      	movs	r2, #64	@ 0x40
 800eb4c:	4082      	lsls	r2, r0
 800eb4e:	4313      	orrs	r3, r2
 800eb50:	3401      	adds	r4, #1
 800eb52:	9304      	str	r3, [sp, #16]
 800eb54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb58:	4824      	ldr	r0, [pc, #144]	@ (800ebec <_svfiprintf_r+0x1e8>)
 800eb5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb5e:	2206      	movs	r2, #6
 800eb60:	f7f1 fb5e 	bl	8000220 <memchr>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d036      	beq.n	800ebd6 <_svfiprintf_r+0x1d2>
 800eb68:	4b21      	ldr	r3, [pc, #132]	@ (800ebf0 <_svfiprintf_r+0x1ec>)
 800eb6a:	bb1b      	cbnz	r3, 800ebb4 <_svfiprintf_r+0x1b0>
 800eb6c:	9b03      	ldr	r3, [sp, #12]
 800eb6e:	3307      	adds	r3, #7
 800eb70:	f023 0307 	bic.w	r3, r3, #7
 800eb74:	3308      	adds	r3, #8
 800eb76:	9303      	str	r3, [sp, #12]
 800eb78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb7a:	4433      	add	r3, r6
 800eb7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb7e:	e76a      	b.n	800ea56 <_svfiprintf_r+0x52>
 800eb80:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb84:	460c      	mov	r4, r1
 800eb86:	2001      	movs	r0, #1
 800eb88:	e7a8      	b.n	800eadc <_svfiprintf_r+0xd8>
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	3401      	adds	r4, #1
 800eb8e:	9305      	str	r3, [sp, #20]
 800eb90:	4619      	mov	r1, r3
 800eb92:	f04f 0c0a 	mov.w	ip, #10
 800eb96:	4620      	mov	r0, r4
 800eb98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb9c:	3a30      	subs	r2, #48	@ 0x30
 800eb9e:	2a09      	cmp	r2, #9
 800eba0:	d903      	bls.n	800ebaa <_svfiprintf_r+0x1a6>
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d0c6      	beq.n	800eb34 <_svfiprintf_r+0x130>
 800eba6:	9105      	str	r1, [sp, #20]
 800eba8:	e7c4      	b.n	800eb34 <_svfiprintf_r+0x130>
 800ebaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebae:	4604      	mov	r4, r0
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e7f0      	b.n	800eb96 <_svfiprintf_r+0x192>
 800ebb4:	ab03      	add	r3, sp, #12
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	462a      	mov	r2, r5
 800ebba:	4b0e      	ldr	r3, [pc, #56]	@ (800ebf4 <_svfiprintf_r+0x1f0>)
 800ebbc:	a904      	add	r1, sp, #16
 800ebbe:	4638      	mov	r0, r7
 800ebc0:	f7fe fadc 	bl	800d17c <_printf_float>
 800ebc4:	1c42      	adds	r2, r0, #1
 800ebc6:	4606      	mov	r6, r0
 800ebc8:	d1d6      	bne.n	800eb78 <_svfiprintf_r+0x174>
 800ebca:	89ab      	ldrh	r3, [r5, #12]
 800ebcc:	065b      	lsls	r3, r3, #25
 800ebce:	f53f af2d 	bmi.w	800ea2c <_svfiprintf_r+0x28>
 800ebd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ebd4:	e72c      	b.n	800ea30 <_svfiprintf_r+0x2c>
 800ebd6:	ab03      	add	r3, sp, #12
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	462a      	mov	r2, r5
 800ebdc:	4b05      	ldr	r3, [pc, #20]	@ (800ebf4 <_svfiprintf_r+0x1f0>)
 800ebde:	a904      	add	r1, sp, #16
 800ebe0:	4638      	mov	r0, r7
 800ebe2:	f7fe fd63 	bl	800d6ac <_printf_i>
 800ebe6:	e7ed      	b.n	800ebc4 <_svfiprintf_r+0x1c0>
 800ebe8:	0800ff9d 	.word	0x0800ff9d
 800ebec:	0800ffa7 	.word	0x0800ffa7
 800ebf0:	0800d17d 	.word	0x0800d17d
 800ebf4:	0800e94d 	.word	0x0800e94d
 800ebf8:	0800ffa3 	.word	0x0800ffa3

0800ebfc <malloc>:
 800ebfc:	4b02      	ldr	r3, [pc, #8]	@ (800ec08 <malloc+0xc>)
 800ebfe:	4601      	mov	r1, r0
 800ec00:	6818      	ldr	r0, [r3, #0]
 800ec02:	f000 b825 	b.w	800ec50 <_malloc_r>
 800ec06:	bf00      	nop
 800ec08:	20000194 	.word	0x20000194

0800ec0c <sbrk_aligned>:
 800ec0c:	b570      	push	{r4, r5, r6, lr}
 800ec0e:	4e0f      	ldr	r6, [pc, #60]	@ (800ec4c <sbrk_aligned+0x40>)
 800ec10:	460c      	mov	r4, r1
 800ec12:	6831      	ldr	r1, [r6, #0]
 800ec14:	4605      	mov	r5, r0
 800ec16:	b911      	cbnz	r1, 800ec1e <sbrk_aligned+0x12>
 800ec18:	f000 fd94 	bl	800f744 <_sbrk_r>
 800ec1c:	6030      	str	r0, [r6, #0]
 800ec1e:	4621      	mov	r1, r4
 800ec20:	4628      	mov	r0, r5
 800ec22:	f000 fd8f 	bl	800f744 <_sbrk_r>
 800ec26:	1c43      	adds	r3, r0, #1
 800ec28:	d103      	bne.n	800ec32 <sbrk_aligned+0x26>
 800ec2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ec2e:	4620      	mov	r0, r4
 800ec30:	bd70      	pop	{r4, r5, r6, pc}
 800ec32:	1cc4      	adds	r4, r0, #3
 800ec34:	f024 0403 	bic.w	r4, r4, #3
 800ec38:	42a0      	cmp	r0, r4
 800ec3a:	d0f8      	beq.n	800ec2e <sbrk_aligned+0x22>
 800ec3c:	1a21      	subs	r1, r4, r0
 800ec3e:	4628      	mov	r0, r5
 800ec40:	f000 fd80 	bl	800f744 <_sbrk_r>
 800ec44:	3001      	adds	r0, #1
 800ec46:	d1f2      	bne.n	800ec2e <sbrk_aligned+0x22>
 800ec48:	e7ef      	b.n	800ec2a <sbrk_aligned+0x1e>
 800ec4a:	bf00      	nop
 800ec4c:	2001281c 	.word	0x2001281c

0800ec50 <_malloc_r>:
 800ec50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec54:	1ccd      	adds	r5, r1, #3
 800ec56:	f025 0503 	bic.w	r5, r5, #3
 800ec5a:	3508      	adds	r5, #8
 800ec5c:	2d0c      	cmp	r5, #12
 800ec5e:	bf38      	it	cc
 800ec60:	250c      	movcc	r5, #12
 800ec62:	2d00      	cmp	r5, #0
 800ec64:	4606      	mov	r6, r0
 800ec66:	db01      	blt.n	800ec6c <_malloc_r+0x1c>
 800ec68:	42a9      	cmp	r1, r5
 800ec6a:	d904      	bls.n	800ec76 <_malloc_r+0x26>
 800ec6c:	230c      	movs	r3, #12
 800ec6e:	6033      	str	r3, [r6, #0]
 800ec70:	2000      	movs	r0, #0
 800ec72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ed4c <_malloc_r+0xfc>
 800ec7a:	f000 f915 	bl	800eea8 <__malloc_lock>
 800ec7e:	f8d8 3000 	ldr.w	r3, [r8]
 800ec82:	461c      	mov	r4, r3
 800ec84:	bb44      	cbnz	r4, 800ecd8 <_malloc_r+0x88>
 800ec86:	4629      	mov	r1, r5
 800ec88:	4630      	mov	r0, r6
 800ec8a:	f7ff ffbf 	bl	800ec0c <sbrk_aligned>
 800ec8e:	1c43      	adds	r3, r0, #1
 800ec90:	4604      	mov	r4, r0
 800ec92:	d158      	bne.n	800ed46 <_malloc_r+0xf6>
 800ec94:	f8d8 4000 	ldr.w	r4, [r8]
 800ec98:	4627      	mov	r7, r4
 800ec9a:	2f00      	cmp	r7, #0
 800ec9c:	d143      	bne.n	800ed26 <_malloc_r+0xd6>
 800ec9e:	2c00      	cmp	r4, #0
 800eca0:	d04b      	beq.n	800ed3a <_malloc_r+0xea>
 800eca2:	6823      	ldr	r3, [r4, #0]
 800eca4:	4639      	mov	r1, r7
 800eca6:	4630      	mov	r0, r6
 800eca8:	eb04 0903 	add.w	r9, r4, r3
 800ecac:	f000 fd4a 	bl	800f744 <_sbrk_r>
 800ecb0:	4581      	cmp	r9, r0
 800ecb2:	d142      	bne.n	800ed3a <_malloc_r+0xea>
 800ecb4:	6821      	ldr	r1, [r4, #0]
 800ecb6:	1a6d      	subs	r5, r5, r1
 800ecb8:	4629      	mov	r1, r5
 800ecba:	4630      	mov	r0, r6
 800ecbc:	f7ff ffa6 	bl	800ec0c <sbrk_aligned>
 800ecc0:	3001      	adds	r0, #1
 800ecc2:	d03a      	beq.n	800ed3a <_malloc_r+0xea>
 800ecc4:	6823      	ldr	r3, [r4, #0]
 800ecc6:	442b      	add	r3, r5
 800ecc8:	6023      	str	r3, [r4, #0]
 800ecca:	f8d8 3000 	ldr.w	r3, [r8]
 800ecce:	685a      	ldr	r2, [r3, #4]
 800ecd0:	bb62      	cbnz	r2, 800ed2c <_malloc_r+0xdc>
 800ecd2:	f8c8 7000 	str.w	r7, [r8]
 800ecd6:	e00f      	b.n	800ecf8 <_malloc_r+0xa8>
 800ecd8:	6822      	ldr	r2, [r4, #0]
 800ecda:	1b52      	subs	r2, r2, r5
 800ecdc:	d420      	bmi.n	800ed20 <_malloc_r+0xd0>
 800ecde:	2a0b      	cmp	r2, #11
 800ece0:	d917      	bls.n	800ed12 <_malloc_r+0xc2>
 800ece2:	1961      	adds	r1, r4, r5
 800ece4:	42a3      	cmp	r3, r4
 800ece6:	6025      	str	r5, [r4, #0]
 800ece8:	bf18      	it	ne
 800ecea:	6059      	strne	r1, [r3, #4]
 800ecec:	6863      	ldr	r3, [r4, #4]
 800ecee:	bf08      	it	eq
 800ecf0:	f8c8 1000 	streq.w	r1, [r8]
 800ecf4:	5162      	str	r2, [r4, r5]
 800ecf6:	604b      	str	r3, [r1, #4]
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	f000 f8db 	bl	800eeb4 <__malloc_unlock>
 800ecfe:	f104 000b 	add.w	r0, r4, #11
 800ed02:	1d23      	adds	r3, r4, #4
 800ed04:	f020 0007 	bic.w	r0, r0, #7
 800ed08:	1ac2      	subs	r2, r0, r3
 800ed0a:	bf1c      	itt	ne
 800ed0c:	1a1b      	subne	r3, r3, r0
 800ed0e:	50a3      	strne	r3, [r4, r2]
 800ed10:	e7af      	b.n	800ec72 <_malloc_r+0x22>
 800ed12:	6862      	ldr	r2, [r4, #4]
 800ed14:	42a3      	cmp	r3, r4
 800ed16:	bf0c      	ite	eq
 800ed18:	f8c8 2000 	streq.w	r2, [r8]
 800ed1c:	605a      	strne	r2, [r3, #4]
 800ed1e:	e7eb      	b.n	800ecf8 <_malloc_r+0xa8>
 800ed20:	4623      	mov	r3, r4
 800ed22:	6864      	ldr	r4, [r4, #4]
 800ed24:	e7ae      	b.n	800ec84 <_malloc_r+0x34>
 800ed26:	463c      	mov	r4, r7
 800ed28:	687f      	ldr	r7, [r7, #4]
 800ed2a:	e7b6      	b.n	800ec9a <_malloc_r+0x4a>
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	42a3      	cmp	r3, r4
 800ed32:	d1fb      	bne.n	800ed2c <_malloc_r+0xdc>
 800ed34:	2300      	movs	r3, #0
 800ed36:	6053      	str	r3, [r2, #4]
 800ed38:	e7de      	b.n	800ecf8 <_malloc_r+0xa8>
 800ed3a:	230c      	movs	r3, #12
 800ed3c:	6033      	str	r3, [r6, #0]
 800ed3e:	4630      	mov	r0, r6
 800ed40:	f000 f8b8 	bl	800eeb4 <__malloc_unlock>
 800ed44:	e794      	b.n	800ec70 <_malloc_r+0x20>
 800ed46:	6005      	str	r5, [r0, #0]
 800ed48:	e7d6      	b.n	800ecf8 <_malloc_r+0xa8>
 800ed4a:	bf00      	nop
 800ed4c:	20012820 	.word	0x20012820

0800ed50 <__sflush_r>:
 800ed50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed58:	0716      	lsls	r6, r2, #28
 800ed5a:	4605      	mov	r5, r0
 800ed5c:	460c      	mov	r4, r1
 800ed5e:	d454      	bmi.n	800ee0a <__sflush_r+0xba>
 800ed60:	684b      	ldr	r3, [r1, #4]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	dc02      	bgt.n	800ed6c <__sflush_r+0x1c>
 800ed66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	dd48      	ble.n	800edfe <__sflush_r+0xae>
 800ed6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed6e:	2e00      	cmp	r6, #0
 800ed70:	d045      	beq.n	800edfe <__sflush_r+0xae>
 800ed72:	2300      	movs	r3, #0
 800ed74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ed78:	682f      	ldr	r7, [r5, #0]
 800ed7a:	6a21      	ldr	r1, [r4, #32]
 800ed7c:	602b      	str	r3, [r5, #0]
 800ed7e:	d030      	beq.n	800ede2 <__sflush_r+0x92>
 800ed80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ed82:	89a3      	ldrh	r3, [r4, #12]
 800ed84:	0759      	lsls	r1, r3, #29
 800ed86:	d505      	bpl.n	800ed94 <__sflush_r+0x44>
 800ed88:	6863      	ldr	r3, [r4, #4]
 800ed8a:	1ad2      	subs	r2, r2, r3
 800ed8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ed8e:	b10b      	cbz	r3, 800ed94 <__sflush_r+0x44>
 800ed90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ed92:	1ad2      	subs	r2, r2, r3
 800ed94:	2300      	movs	r3, #0
 800ed96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed98:	6a21      	ldr	r1, [r4, #32]
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	47b0      	blx	r6
 800ed9e:	1c43      	adds	r3, r0, #1
 800eda0:	89a3      	ldrh	r3, [r4, #12]
 800eda2:	d106      	bne.n	800edb2 <__sflush_r+0x62>
 800eda4:	6829      	ldr	r1, [r5, #0]
 800eda6:	291d      	cmp	r1, #29
 800eda8:	d82b      	bhi.n	800ee02 <__sflush_r+0xb2>
 800edaa:	4a2a      	ldr	r2, [pc, #168]	@ (800ee54 <__sflush_r+0x104>)
 800edac:	410a      	asrs	r2, r1
 800edae:	07d6      	lsls	r6, r2, #31
 800edb0:	d427      	bmi.n	800ee02 <__sflush_r+0xb2>
 800edb2:	2200      	movs	r2, #0
 800edb4:	6062      	str	r2, [r4, #4]
 800edb6:	04d9      	lsls	r1, r3, #19
 800edb8:	6922      	ldr	r2, [r4, #16]
 800edba:	6022      	str	r2, [r4, #0]
 800edbc:	d504      	bpl.n	800edc8 <__sflush_r+0x78>
 800edbe:	1c42      	adds	r2, r0, #1
 800edc0:	d101      	bne.n	800edc6 <__sflush_r+0x76>
 800edc2:	682b      	ldr	r3, [r5, #0]
 800edc4:	b903      	cbnz	r3, 800edc8 <__sflush_r+0x78>
 800edc6:	6560      	str	r0, [r4, #84]	@ 0x54
 800edc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800edca:	602f      	str	r7, [r5, #0]
 800edcc:	b1b9      	cbz	r1, 800edfe <__sflush_r+0xae>
 800edce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800edd2:	4299      	cmp	r1, r3
 800edd4:	d002      	beq.n	800eddc <__sflush_r+0x8c>
 800edd6:	4628      	mov	r0, r5
 800edd8:	f7ff fd6e 	bl	800e8b8 <_free_r>
 800eddc:	2300      	movs	r3, #0
 800edde:	6363      	str	r3, [r4, #52]	@ 0x34
 800ede0:	e00d      	b.n	800edfe <__sflush_r+0xae>
 800ede2:	2301      	movs	r3, #1
 800ede4:	4628      	mov	r0, r5
 800ede6:	47b0      	blx	r6
 800ede8:	4602      	mov	r2, r0
 800edea:	1c50      	adds	r0, r2, #1
 800edec:	d1c9      	bne.n	800ed82 <__sflush_r+0x32>
 800edee:	682b      	ldr	r3, [r5, #0]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d0c6      	beq.n	800ed82 <__sflush_r+0x32>
 800edf4:	2b1d      	cmp	r3, #29
 800edf6:	d001      	beq.n	800edfc <__sflush_r+0xac>
 800edf8:	2b16      	cmp	r3, #22
 800edfa:	d11e      	bne.n	800ee3a <__sflush_r+0xea>
 800edfc:	602f      	str	r7, [r5, #0]
 800edfe:	2000      	movs	r0, #0
 800ee00:	e022      	b.n	800ee48 <__sflush_r+0xf8>
 800ee02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee06:	b21b      	sxth	r3, r3
 800ee08:	e01b      	b.n	800ee42 <__sflush_r+0xf2>
 800ee0a:	690f      	ldr	r7, [r1, #16]
 800ee0c:	2f00      	cmp	r7, #0
 800ee0e:	d0f6      	beq.n	800edfe <__sflush_r+0xae>
 800ee10:	0793      	lsls	r3, r2, #30
 800ee12:	680e      	ldr	r6, [r1, #0]
 800ee14:	bf08      	it	eq
 800ee16:	694b      	ldreq	r3, [r1, #20]
 800ee18:	600f      	str	r7, [r1, #0]
 800ee1a:	bf18      	it	ne
 800ee1c:	2300      	movne	r3, #0
 800ee1e:	eba6 0807 	sub.w	r8, r6, r7
 800ee22:	608b      	str	r3, [r1, #8]
 800ee24:	f1b8 0f00 	cmp.w	r8, #0
 800ee28:	dde9      	ble.n	800edfe <__sflush_r+0xae>
 800ee2a:	6a21      	ldr	r1, [r4, #32]
 800ee2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ee2e:	4643      	mov	r3, r8
 800ee30:	463a      	mov	r2, r7
 800ee32:	4628      	mov	r0, r5
 800ee34:	47b0      	blx	r6
 800ee36:	2800      	cmp	r0, #0
 800ee38:	dc08      	bgt.n	800ee4c <__sflush_r+0xfc>
 800ee3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee42:	81a3      	strh	r3, [r4, #12]
 800ee44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee4c:	4407      	add	r7, r0
 800ee4e:	eba8 0800 	sub.w	r8, r8, r0
 800ee52:	e7e7      	b.n	800ee24 <__sflush_r+0xd4>
 800ee54:	dfbffffe 	.word	0xdfbffffe

0800ee58 <_fflush_r>:
 800ee58:	b538      	push	{r3, r4, r5, lr}
 800ee5a:	690b      	ldr	r3, [r1, #16]
 800ee5c:	4605      	mov	r5, r0
 800ee5e:	460c      	mov	r4, r1
 800ee60:	b913      	cbnz	r3, 800ee68 <_fflush_r+0x10>
 800ee62:	2500      	movs	r5, #0
 800ee64:	4628      	mov	r0, r5
 800ee66:	bd38      	pop	{r3, r4, r5, pc}
 800ee68:	b118      	cbz	r0, 800ee72 <_fflush_r+0x1a>
 800ee6a:	6a03      	ldr	r3, [r0, #32]
 800ee6c:	b90b      	cbnz	r3, 800ee72 <_fflush_r+0x1a>
 800ee6e:	f7fe fdc9 	bl	800da04 <__sinit>
 800ee72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d0f3      	beq.n	800ee62 <_fflush_r+0xa>
 800ee7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ee7c:	07d0      	lsls	r0, r2, #31
 800ee7e:	d404      	bmi.n	800ee8a <_fflush_r+0x32>
 800ee80:	0599      	lsls	r1, r3, #22
 800ee82:	d402      	bmi.n	800ee8a <_fflush_r+0x32>
 800ee84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee86:	f7fe feba 	bl	800dbfe <__retarget_lock_acquire_recursive>
 800ee8a:	4628      	mov	r0, r5
 800ee8c:	4621      	mov	r1, r4
 800ee8e:	f7ff ff5f 	bl	800ed50 <__sflush_r>
 800ee92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee94:	07da      	lsls	r2, r3, #31
 800ee96:	4605      	mov	r5, r0
 800ee98:	d4e4      	bmi.n	800ee64 <_fflush_r+0xc>
 800ee9a:	89a3      	ldrh	r3, [r4, #12]
 800ee9c:	059b      	lsls	r3, r3, #22
 800ee9e:	d4e1      	bmi.n	800ee64 <_fflush_r+0xc>
 800eea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eea2:	f7fe fead 	bl	800dc00 <__retarget_lock_release_recursive>
 800eea6:	e7dd      	b.n	800ee64 <_fflush_r+0xc>

0800eea8 <__malloc_lock>:
 800eea8:	4801      	ldr	r0, [pc, #4]	@ (800eeb0 <__malloc_lock+0x8>)
 800eeaa:	f7fe bea8 	b.w	800dbfe <__retarget_lock_acquire_recursive>
 800eeae:	bf00      	nop
 800eeb0:	20012818 	.word	0x20012818

0800eeb4 <__malloc_unlock>:
 800eeb4:	4801      	ldr	r0, [pc, #4]	@ (800eebc <__malloc_unlock+0x8>)
 800eeb6:	f7fe bea3 	b.w	800dc00 <__retarget_lock_release_recursive>
 800eeba:	bf00      	nop
 800eebc:	20012818 	.word	0x20012818

0800eec0 <_Balloc>:
 800eec0:	b570      	push	{r4, r5, r6, lr}
 800eec2:	69c6      	ldr	r6, [r0, #28]
 800eec4:	4604      	mov	r4, r0
 800eec6:	460d      	mov	r5, r1
 800eec8:	b976      	cbnz	r6, 800eee8 <_Balloc+0x28>
 800eeca:	2010      	movs	r0, #16
 800eecc:	f7ff fe96 	bl	800ebfc <malloc>
 800eed0:	4602      	mov	r2, r0
 800eed2:	61e0      	str	r0, [r4, #28]
 800eed4:	b920      	cbnz	r0, 800eee0 <_Balloc+0x20>
 800eed6:	4b18      	ldr	r3, [pc, #96]	@ (800ef38 <_Balloc+0x78>)
 800eed8:	4818      	ldr	r0, [pc, #96]	@ (800ef3c <_Balloc+0x7c>)
 800eeda:	216b      	movs	r1, #107	@ 0x6b
 800eedc:	f000 fc54 	bl	800f788 <__assert_func>
 800eee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eee4:	6006      	str	r6, [r0, #0]
 800eee6:	60c6      	str	r6, [r0, #12]
 800eee8:	69e6      	ldr	r6, [r4, #28]
 800eeea:	68f3      	ldr	r3, [r6, #12]
 800eeec:	b183      	cbz	r3, 800ef10 <_Balloc+0x50>
 800eeee:	69e3      	ldr	r3, [r4, #28]
 800eef0:	68db      	ldr	r3, [r3, #12]
 800eef2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eef6:	b9b8      	cbnz	r0, 800ef28 <_Balloc+0x68>
 800eef8:	2101      	movs	r1, #1
 800eefa:	fa01 f605 	lsl.w	r6, r1, r5
 800eefe:	1d72      	adds	r2, r6, #5
 800ef00:	0092      	lsls	r2, r2, #2
 800ef02:	4620      	mov	r0, r4
 800ef04:	f000 fc5e 	bl	800f7c4 <_calloc_r>
 800ef08:	b160      	cbz	r0, 800ef24 <_Balloc+0x64>
 800ef0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ef0e:	e00e      	b.n	800ef2e <_Balloc+0x6e>
 800ef10:	2221      	movs	r2, #33	@ 0x21
 800ef12:	2104      	movs	r1, #4
 800ef14:	4620      	mov	r0, r4
 800ef16:	f000 fc55 	bl	800f7c4 <_calloc_r>
 800ef1a:	69e3      	ldr	r3, [r4, #28]
 800ef1c:	60f0      	str	r0, [r6, #12]
 800ef1e:	68db      	ldr	r3, [r3, #12]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d1e4      	bne.n	800eeee <_Balloc+0x2e>
 800ef24:	2000      	movs	r0, #0
 800ef26:	bd70      	pop	{r4, r5, r6, pc}
 800ef28:	6802      	ldr	r2, [r0, #0]
 800ef2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ef2e:	2300      	movs	r3, #0
 800ef30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef34:	e7f7      	b.n	800ef26 <_Balloc+0x66>
 800ef36:	bf00      	nop
 800ef38:	0800ff1d 	.word	0x0800ff1d
 800ef3c:	0800ffae 	.word	0x0800ffae

0800ef40 <_Bfree>:
 800ef40:	b570      	push	{r4, r5, r6, lr}
 800ef42:	69c6      	ldr	r6, [r0, #28]
 800ef44:	4605      	mov	r5, r0
 800ef46:	460c      	mov	r4, r1
 800ef48:	b976      	cbnz	r6, 800ef68 <_Bfree+0x28>
 800ef4a:	2010      	movs	r0, #16
 800ef4c:	f7ff fe56 	bl	800ebfc <malloc>
 800ef50:	4602      	mov	r2, r0
 800ef52:	61e8      	str	r0, [r5, #28]
 800ef54:	b920      	cbnz	r0, 800ef60 <_Bfree+0x20>
 800ef56:	4b09      	ldr	r3, [pc, #36]	@ (800ef7c <_Bfree+0x3c>)
 800ef58:	4809      	ldr	r0, [pc, #36]	@ (800ef80 <_Bfree+0x40>)
 800ef5a:	218f      	movs	r1, #143	@ 0x8f
 800ef5c:	f000 fc14 	bl	800f788 <__assert_func>
 800ef60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef64:	6006      	str	r6, [r0, #0]
 800ef66:	60c6      	str	r6, [r0, #12]
 800ef68:	b13c      	cbz	r4, 800ef7a <_Bfree+0x3a>
 800ef6a:	69eb      	ldr	r3, [r5, #28]
 800ef6c:	6862      	ldr	r2, [r4, #4]
 800ef6e:	68db      	ldr	r3, [r3, #12]
 800ef70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef74:	6021      	str	r1, [r4, #0]
 800ef76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ef7a:	bd70      	pop	{r4, r5, r6, pc}
 800ef7c:	0800ff1d 	.word	0x0800ff1d
 800ef80:	0800ffae 	.word	0x0800ffae

0800ef84 <__multadd>:
 800ef84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef88:	690d      	ldr	r5, [r1, #16]
 800ef8a:	4607      	mov	r7, r0
 800ef8c:	460c      	mov	r4, r1
 800ef8e:	461e      	mov	r6, r3
 800ef90:	f101 0c14 	add.w	ip, r1, #20
 800ef94:	2000      	movs	r0, #0
 800ef96:	f8dc 3000 	ldr.w	r3, [ip]
 800ef9a:	b299      	uxth	r1, r3
 800ef9c:	fb02 6101 	mla	r1, r2, r1, r6
 800efa0:	0c1e      	lsrs	r6, r3, #16
 800efa2:	0c0b      	lsrs	r3, r1, #16
 800efa4:	fb02 3306 	mla	r3, r2, r6, r3
 800efa8:	b289      	uxth	r1, r1
 800efaa:	3001      	adds	r0, #1
 800efac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800efb0:	4285      	cmp	r5, r0
 800efb2:	f84c 1b04 	str.w	r1, [ip], #4
 800efb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800efba:	dcec      	bgt.n	800ef96 <__multadd+0x12>
 800efbc:	b30e      	cbz	r6, 800f002 <__multadd+0x7e>
 800efbe:	68a3      	ldr	r3, [r4, #8]
 800efc0:	42ab      	cmp	r3, r5
 800efc2:	dc19      	bgt.n	800eff8 <__multadd+0x74>
 800efc4:	6861      	ldr	r1, [r4, #4]
 800efc6:	4638      	mov	r0, r7
 800efc8:	3101      	adds	r1, #1
 800efca:	f7ff ff79 	bl	800eec0 <_Balloc>
 800efce:	4680      	mov	r8, r0
 800efd0:	b928      	cbnz	r0, 800efde <__multadd+0x5a>
 800efd2:	4602      	mov	r2, r0
 800efd4:	4b0c      	ldr	r3, [pc, #48]	@ (800f008 <__multadd+0x84>)
 800efd6:	480d      	ldr	r0, [pc, #52]	@ (800f00c <__multadd+0x88>)
 800efd8:	21ba      	movs	r1, #186	@ 0xba
 800efda:	f000 fbd5 	bl	800f788 <__assert_func>
 800efde:	6922      	ldr	r2, [r4, #16]
 800efe0:	3202      	adds	r2, #2
 800efe2:	f104 010c 	add.w	r1, r4, #12
 800efe6:	0092      	lsls	r2, r2, #2
 800efe8:	300c      	adds	r0, #12
 800efea:	f7fe fe0a 	bl	800dc02 <memcpy>
 800efee:	4621      	mov	r1, r4
 800eff0:	4638      	mov	r0, r7
 800eff2:	f7ff ffa5 	bl	800ef40 <_Bfree>
 800eff6:	4644      	mov	r4, r8
 800eff8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800effc:	3501      	adds	r5, #1
 800effe:	615e      	str	r6, [r3, #20]
 800f000:	6125      	str	r5, [r4, #16]
 800f002:	4620      	mov	r0, r4
 800f004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f008:	0800ff8c 	.word	0x0800ff8c
 800f00c:	0800ffae 	.word	0x0800ffae

0800f010 <__hi0bits>:
 800f010:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f014:	4603      	mov	r3, r0
 800f016:	bf36      	itet	cc
 800f018:	0403      	lslcc	r3, r0, #16
 800f01a:	2000      	movcs	r0, #0
 800f01c:	2010      	movcc	r0, #16
 800f01e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f022:	bf3c      	itt	cc
 800f024:	021b      	lslcc	r3, r3, #8
 800f026:	3008      	addcc	r0, #8
 800f028:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f02c:	bf3c      	itt	cc
 800f02e:	011b      	lslcc	r3, r3, #4
 800f030:	3004      	addcc	r0, #4
 800f032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f036:	bf3c      	itt	cc
 800f038:	009b      	lslcc	r3, r3, #2
 800f03a:	3002      	addcc	r0, #2
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	db05      	blt.n	800f04c <__hi0bits+0x3c>
 800f040:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f044:	f100 0001 	add.w	r0, r0, #1
 800f048:	bf08      	it	eq
 800f04a:	2020      	moveq	r0, #32
 800f04c:	4770      	bx	lr

0800f04e <__lo0bits>:
 800f04e:	6803      	ldr	r3, [r0, #0]
 800f050:	4602      	mov	r2, r0
 800f052:	f013 0007 	ands.w	r0, r3, #7
 800f056:	d00b      	beq.n	800f070 <__lo0bits+0x22>
 800f058:	07d9      	lsls	r1, r3, #31
 800f05a:	d421      	bmi.n	800f0a0 <__lo0bits+0x52>
 800f05c:	0798      	lsls	r0, r3, #30
 800f05e:	bf49      	itett	mi
 800f060:	085b      	lsrmi	r3, r3, #1
 800f062:	089b      	lsrpl	r3, r3, #2
 800f064:	2001      	movmi	r0, #1
 800f066:	6013      	strmi	r3, [r2, #0]
 800f068:	bf5c      	itt	pl
 800f06a:	6013      	strpl	r3, [r2, #0]
 800f06c:	2002      	movpl	r0, #2
 800f06e:	4770      	bx	lr
 800f070:	b299      	uxth	r1, r3
 800f072:	b909      	cbnz	r1, 800f078 <__lo0bits+0x2a>
 800f074:	0c1b      	lsrs	r3, r3, #16
 800f076:	2010      	movs	r0, #16
 800f078:	b2d9      	uxtb	r1, r3
 800f07a:	b909      	cbnz	r1, 800f080 <__lo0bits+0x32>
 800f07c:	3008      	adds	r0, #8
 800f07e:	0a1b      	lsrs	r3, r3, #8
 800f080:	0719      	lsls	r1, r3, #28
 800f082:	bf04      	itt	eq
 800f084:	091b      	lsreq	r3, r3, #4
 800f086:	3004      	addeq	r0, #4
 800f088:	0799      	lsls	r1, r3, #30
 800f08a:	bf04      	itt	eq
 800f08c:	089b      	lsreq	r3, r3, #2
 800f08e:	3002      	addeq	r0, #2
 800f090:	07d9      	lsls	r1, r3, #31
 800f092:	d403      	bmi.n	800f09c <__lo0bits+0x4e>
 800f094:	085b      	lsrs	r3, r3, #1
 800f096:	f100 0001 	add.w	r0, r0, #1
 800f09a:	d003      	beq.n	800f0a4 <__lo0bits+0x56>
 800f09c:	6013      	str	r3, [r2, #0]
 800f09e:	4770      	bx	lr
 800f0a0:	2000      	movs	r0, #0
 800f0a2:	4770      	bx	lr
 800f0a4:	2020      	movs	r0, #32
 800f0a6:	4770      	bx	lr

0800f0a8 <__i2b>:
 800f0a8:	b510      	push	{r4, lr}
 800f0aa:	460c      	mov	r4, r1
 800f0ac:	2101      	movs	r1, #1
 800f0ae:	f7ff ff07 	bl	800eec0 <_Balloc>
 800f0b2:	4602      	mov	r2, r0
 800f0b4:	b928      	cbnz	r0, 800f0c2 <__i2b+0x1a>
 800f0b6:	4b05      	ldr	r3, [pc, #20]	@ (800f0cc <__i2b+0x24>)
 800f0b8:	4805      	ldr	r0, [pc, #20]	@ (800f0d0 <__i2b+0x28>)
 800f0ba:	f240 1145 	movw	r1, #325	@ 0x145
 800f0be:	f000 fb63 	bl	800f788 <__assert_func>
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	6144      	str	r4, [r0, #20]
 800f0c6:	6103      	str	r3, [r0, #16]
 800f0c8:	bd10      	pop	{r4, pc}
 800f0ca:	bf00      	nop
 800f0cc:	0800ff8c 	.word	0x0800ff8c
 800f0d0:	0800ffae 	.word	0x0800ffae

0800f0d4 <__multiply>:
 800f0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d8:	4614      	mov	r4, r2
 800f0da:	690a      	ldr	r2, [r1, #16]
 800f0dc:	6923      	ldr	r3, [r4, #16]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	bfa8      	it	ge
 800f0e2:	4623      	movge	r3, r4
 800f0e4:	460f      	mov	r7, r1
 800f0e6:	bfa4      	itt	ge
 800f0e8:	460c      	movge	r4, r1
 800f0ea:	461f      	movge	r7, r3
 800f0ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f0f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f0f4:	68a3      	ldr	r3, [r4, #8]
 800f0f6:	6861      	ldr	r1, [r4, #4]
 800f0f8:	eb0a 0609 	add.w	r6, sl, r9
 800f0fc:	42b3      	cmp	r3, r6
 800f0fe:	b085      	sub	sp, #20
 800f100:	bfb8      	it	lt
 800f102:	3101      	addlt	r1, #1
 800f104:	f7ff fedc 	bl	800eec0 <_Balloc>
 800f108:	b930      	cbnz	r0, 800f118 <__multiply+0x44>
 800f10a:	4602      	mov	r2, r0
 800f10c:	4b44      	ldr	r3, [pc, #272]	@ (800f220 <__multiply+0x14c>)
 800f10e:	4845      	ldr	r0, [pc, #276]	@ (800f224 <__multiply+0x150>)
 800f110:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f114:	f000 fb38 	bl	800f788 <__assert_func>
 800f118:	f100 0514 	add.w	r5, r0, #20
 800f11c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f120:	462b      	mov	r3, r5
 800f122:	2200      	movs	r2, #0
 800f124:	4543      	cmp	r3, r8
 800f126:	d321      	bcc.n	800f16c <__multiply+0x98>
 800f128:	f107 0114 	add.w	r1, r7, #20
 800f12c:	f104 0214 	add.w	r2, r4, #20
 800f130:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f134:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f138:	9302      	str	r3, [sp, #8]
 800f13a:	1b13      	subs	r3, r2, r4
 800f13c:	3b15      	subs	r3, #21
 800f13e:	f023 0303 	bic.w	r3, r3, #3
 800f142:	3304      	adds	r3, #4
 800f144:	f104 0715 	add.w	r7, r4, #21
 800f148:	42ba      	cmp	r2, r7
 800f14a:	bf38      	it	cc
 800f14c:	2304      	movcc	r3, #4
 800f14e:	9301      	str	r3, [sp, #4]
 800f150:	9b02      	ldr	r3, [sp, #8]
 800f152:	9103      	str	r1, [sp, #12]
 800f154:	428b      	cmp	r3, r1
 800f156:	d80c      	bhi.n	800f172 <__multiply+0x9e>
 800f158:	2e00      	cmp	r6, #0
 800f15a:	dd03      	ble.n	800f164 <__multiply+0x90>
 800f15c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f160:	2b00      	cmp	r3, #0
 800f162:	d05b      	beq.n	800f21c <__multiply+0x148>
 800f164:	6106      	str	r6, [r0, #16]
 800f166:	b005      	add	sp, #20
 800f168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f16c:	f843 2b04 	str.w	r2, [r3], #4
 800f170:	e7d8      	b.n	800f124 <__multiply+0x50>
 800f172:	f8b1 a000 	ldrh.w	sl, [r1]
 800f176:	f1ba 0f00 	cmp.w	sl, #0
 800f17a:	d024      	beq.n	800f1c6 <__multiply+0xf2>
 800f17c:	f104 0e14 	add.w	lr, r4, #20
 800f180:	46a9      	mov	r9, r5
 800f182:	f04f 0c00 	mov.w	ip, #0
 800f186:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f18a:	f8d9 3000 	ldr.w	r3, [r9]
 800f18e:	fa1f fb87 	uxth.w	fp, r7
 800f192:	b29b      	uxth	r3, r3
 800f194:	fb0a 330b 	mla	r3, sl, fp, r3
 800f198:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f19c:	f8d9 7000 	ldr.w	r7, [r9]
 800f1a0:	4463      	add	r3, ip
 800f1a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f1a6:	fb0a c70b 	mla	r7, sl, fp, ip
 800f1aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f1b4:	4572      	cmp	r2, lr
 800f1b6:	f849 3b04 	str.w	r3, [r9], #4
 800f1ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f1be:	d8e2      	bhi.n	800f186 <__multiply+0xb2>
 800f1c0:	9b01      	ldr	r3, [sp, #4]
 800f1c2:	f845 c003 	str.w	ip, [r5, r3]
 800f1c6:	9b03      	ldr	r3, [sp, #12]
 800f1c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f1cc:	3104      	adds	r1, #4
 800f1ce:	f1b9 0f00 	cmp.w	r9, #0
 800f1d2:	d021      	beq.n	800f218 <__multiply+0x144>
 800f1d4:	682b      	ldr	r3, [r5, #0]
 800f1d6:	f104 0c14 	add.w	ip, r4, #20
 800f1da:	46ae      	mov	lr, r5
 800f1dc:	f04f 0a00 	mov.w	sl, #0
 800f1e0:	f8bc b000 	ldrh.w	fp, [ip]
 800f1e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f1e8:	fb09 770b 	mla	r7, r9, fp, r7
 800f1ec:	4457      	add	r7, sl
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f1f4:	f84e 3b04 	str.w	r3, [lr], #4
 800f1f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f1fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f200:	f8be 3000 	ldrh.w	r3, [lr]
 800f204:	fb09 330a 	mla	r3, r9, sl, r3
 800f208:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f20c:	4562      	cmp	r2, ip
 800f20e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f212:	d8e5      	bhi.n	800f1e0 <__multiply+0x10c>
 800f214:	9f01      	ldr	r7, [sp, #4]
 800f216:	51eb      	str	r3, [r5, r7]
 800f218:	3504      	adds	r5, #4
 800f21a:	e799      	b.n	800f150 <__multiply+0x7c>
 800f21c:	3e01      	subs	r6, #1
 800f21e:	e79b      	b.n	800f158 <__multiply+0x84>
 800f220:	0800ff8c 	.word	0x0800ff8c
 800f224:	0800ffae 	.word	0x0800ffae

0800f228 <__pow5mult>:
 800f228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f22c:	4615      	mov	r5, r2
 800f22e:	f012 0203 	ands.w	r2, r2, #3
 800f232:	4607      	mov	r7, r0
 800f234:	460e      	mov	r6, r1
 800f236:	d007      	beq.n	800f248 <__pow5mult+0x20>
 800f238:	4c25      	ldr	r4, [pc, #148]	@ (800f2d0 <__pow5mult+0xa8>)
 800f23a:	3a01      	subs	r2, #1
 800f23c:	2300      	movs	r3, #0
 800f23e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f242:	f7ff fe9f 	bl	800ef84 <__multadd>
 800f246:	4606      	mov	r6, r0
 800f248:	10ad      	asrs	r5, r5, #2
 800f24a:	d03d      	beq.n	800f2c8 <__pow5mult+0xa0>
 800f24c:	69fc      	ldr	r4, [r7, #28]
 800f24e:	b97c      	cbnz	r4, 800f270 <__pow5mult+0x48>
 800f250:	2010      	movs	r0, #16
 800f252:	f7ff fcd3 	bl	800ebfc <malloc>
 800f256:	4602      	mov	r2, r0
 800f258:	61f8      	str	r0, [r7, #28]
 800f25a:	b928      	cbnz	r0, 800f268 <__pow5mult+0x40>
 800f25c:	4b1d      	ldr	r3, [pc, #116]	@ (800f2d4 <__pow5mult+0xac>)
 800f25e:	481e      	ldr	r0, [pc, #120]	@ (800f2d8 <__pow5mult+0xb0>)
 800f260:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f264:	f000 fa90 	bl	800f788 <__assert_func>
 800f268:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f26c:	6004      	str	r4, [r0, #0]
 800f26e:	60c4      	str	r4, [r0, #12]
 800f270:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f274:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f278:	b94c      	cbnz	r4, 800f28e <__pow5mult+0x66>
 800f27a:	f240 2171 	movw	r1, #625	@ 0x271
 800f27e:	4638      	mov	r0, r7
 800f280:	f7ff ff12 	bl	800f0a8 <__i2b>
 800f284:	2300      	movs	r3, #0
 800f286:	f8c8 0008 	str.w	r0, [r8, #8]
 800f28a:	4604      	mov	r4, r0
 800f28c:	6003      	str	r3, [r0, #0]
 800f28e:	f04f 0900 	mov.w	r9, #0
 800f292:	07eb      	lsls	r3, r5, #31
 800f294:	d50a      	bpl.n	800f2ac <__pow5mult+0x84>
 800f296:	4631      	mov	r1, r6
 800f298:	4622      	mov	r2, r4
 800f29a:	4638      	mov	r0, r7
 800f29c:	f7ff ff1a 	bl	800f0d4 <__multiply>
 800f2a0:	4631      	mov	r1, r6
 800f2a2:	4680      	mov	r8, r0
 800f2a4:	4638      	mov	r0, r7
 800f2a6:	f7ff fe4b 	bl	800ef40 <_Bfree>
 800f2aa:	4646      	mov	r6, r8
 800f2ac:	106d      	asrs	r5, r5, #1
 800f2ae:	d00b      	beq.n	800f2c8 <__pow5mult+0xa0>
 800f2b0:	6820      	ldr	r0, [r4, #0]
 800f2b2:	b938      	cbnz	r0, 800f2c4 <__pow5mult+0x9c>
 800f2b4:	4622      	mov	r2, r4
 800f2b6:	4621      	mov	r1, r4
 800f2b8:	4638      	mov	r0, r7
 800f2ba:	f7ff ff0b 	bl	800f0d4 <__multiply>
 800f2be:	6020      	str	r0, [r4, #0]
 800f2c0:	f8c0 9000 	str.w	r9, [r0]
 800f2c4:	4604      	mov	r4, r0
 800f2c6:	e7e4      	b.n	800f292 <__pow5mult+0x6a>
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2ce:	bf00      	nop
 800f2d0:	08010008 	.word	0x08010008
 800f2d4:	0800ff1d 	.word	0x0800ff1d
 800f2d8:	0800ffae 	.word	0x0800ffae

0800f2dc <__lshift>:
 800f2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2e0:	460c      	mov	r4, r1
 800f2e2:	6849      	ldr	r1, [r1, #4]
 800f2e4:	6923      	ldr	r3, [r4, #16]
 800f2e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f2ea:	68a3      	ldr	r3, [r4, #8]
 800f2ec:	4607      	mov	r7, r0
 800f2ee:	4691      	mov	r9, r2
 800f2f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f2f4:	f108 0601 	add.w	r6, r8, #1
 800f2f8:	42b3      	cmp	r3, r6
 800f2fa:	db0b      	blt.n	800f314 <__lshift+0x38>
 800f2fc:	4638      	mov	r0, r7
 800f2fe:	f7ff fddf 	bl	800eec0 <_Balloc>
 800f302:	4605      	mov	r5, r0
 800f304:	b948      	cbnz	r0, 800f31a <__lshift+0x3e>
 800f306:	4602      	mov	r2, r0
 800f308:	4b28      	ldr	r3, [pc, #160]	@ (800f3ac <__lshift+0xd0>)
 800f30a:	4829      	ldr	r0, [pc, #164]	@ (800f3b0 <__lshift+0xd4>)
 800f30c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f310:	f000 fa3a 	bl	800f788 <__assert_func>
 800f314:	3101      	adds	r1, #1
 800f316:	005b      	lsls	r3, r3, #1
 800f318:	e7ee      	b.n	800f2f8 <__lshift+0x1c>
 800f31a:	2300      	movs	r3, #0
 800f31c:	f100 0114 	add.w	r1, r0, #20
 800f320:	f100 0210 	add.w	r2, r0, #16
 800f324:	4618      	mov	r0, r3
 800f326:	4553      	cmp	r3, sl
 800f328:	db33      	blt.n	800f392 <__lshift+0xb6>
 800f32a:	6920      	ldr	r0, [r4, #16]
 800f32c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f330:	f104 0314 	add.w	r3, r4, #20
 800f334:	f019 091f 	ands.w	r9, r9, #31
 800f338:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f33c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f340:	d02b      	beq.n	800f39a <__lshift+0xbe>
 800f342:	f1c9 0e20 	rsb	lr, r9, #32
 800f346:	468a      	mov	sl, r1
 800f348:	2200      	movs	r2, #0
 800f34a:	6818      	ldr	r0, [r3, #0]
 800f34c:	fa00 f009 	lsl.w	r0, r0, r9
 800f350:	4310      	orrs	r0, r2
 800f352:	f84a 0b04 	str.w	r0, [sl], #4
 800f356:	f853 2b04 	ldr.w	r2, [r3], #4
 800f35a:	459c      	cmp	ip, r3
 800f35c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f360:	d8f3      	bhi.n	800f34a <__lshift+0x6e>
 800f362:	ebac 0304 	sub.w	r3, ip, r4
 800f366:	3b15      	subs	r3, #21
 800f368:	f023 0303 	bic.w	r3, r3, #3
 800f36c:	3304      	adds	r3, #4
 800f36e:	f104 0015 	add.w	r0, r4, #21
 800f372:	4584      	cmp	ip, r0
 800f374:	bf38      	it	cc
 800f376:	2304      	movcc	r3, #4
 800f378:	50ca      	str	r2, [r1, r3]
 800f37a:	b10a      	cbz	r2, 800f380 <__lshift+0xa4>
 800f37c:	f108 0602 	add.w	r6, r8, #2
 800f380:	3e01      	subs	r6, #1
 800f382:	4638      	mov	r0, r7
 800f384:	612e      	str	r6, [r5, #16]
 800f386:	4621      	mov	r1, r4
 800f388:	f7ff fdda 	bl	800ef40 <_Bfree>
 800f38c:	4628      	mov	r0, r5
 800f38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f392:	f842 0f04 	str.w	r0, [r2, #4]!
 800f396:	3301      	adds	r3, #1
 800f398:	e7c5      	b.n	800f326 <__lshift+0x4a>
 800f39a:	3904      	subs	r1, #4
 800f39c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f3a4:	459c      	cmp	ip, r3
 800f3a6:	d8f9      	bhi.n	800f39c <__lshift+0xc0>
 800f3a8:	e7ea      	b.n	800f380 <__lshift+0xa4>
 800f3aa:	bf00      	nop
 800f3ac:	0800ff8c 	.word	0x0800ff8c
 800f3b0:	0800ffae 	.word	0x0800ffae

0800f3b4 <__mcmp>:
 800f3b4:	690a      	ldr	r2, [r1, #16]
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	6900      	ldr	r0, [r0, #16]
 800f3ba:	1a80      	subs	r0, r0, r2
 800f3bc:	b530      	push	{r4, r5, lr}
 800f3be:	d10e      	bne.n	800f3de <__mcmp+0x2a>
 800f3c0:	3314      	adds	r3, #20
 800f3c2:	3114      	adds	r1, #20
 800f3c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f3c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f3cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f3d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f3d4:	4295      	cmp	r5, r2
 800f3d6:	d003      	beq.n	800f3e0 <__mcmp+0x2c>
 800f3d8:	d205      	bcs.n	800f3e6 <__mcmp+0x32>
 800f3da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3de:	bd30      	pop	{r4, r5, pc}
 800f3e0:	42a3      	cmp	r3, r4
 800f3e2:	d3f3      	bcc.n	800f3cc <__mcmp+0x18>
 800f3e4:	e7fb      	b.n	800f3de <__mcmp+0x2a>
 800f3e6:	2001      	movs	r0, #1
 800f3e8:	e7f9      	b.n	800f3de <__mcmp+0x2a>
	...

0800f3ec <__mdiff>:
 800f3ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3f0:	4689      	mov	r9, r1
 800f3f2:	4606      	mov	r6, r0
 800f3f4:	4611      	mov	r1, r2
 800f3f6:	4648      	mov	r0, r9
 800f3f8:	4614      	mov	r4, r2
 800f3fa:	f7ff ffdb 	bl	800f3b4 <__mcmp>
 800f3fe:	1e05      	subs	r5, r0, #0
 800f400:	d112      	bne.n	800f428 <__mdiff+0x3c>
 800f402:	4629      	mov	r1, r5
 800f404:	4630      	mov	r0, r6
 800f406:	f7ff fd5b 	bl	800eec0 <_Balloc>
 800f40a:	4602      	mov	r2, r0
 800f40c:	b928      	cbnz	r0, 800f41a <__mdiff+0x2e>
 800f40e:	4b3f      	ldr	r3, [pc, #252]	@ (800f50c <__mdiff+0x120>)
 800f410:	f240 2137 	movw	r1, #567	@ 0x237
 800f414:	483e      	ldr	r0, [pc, #248]	@ (800f510 <__mdiff+0x124>)
 800f416:	f000 f9b7 	bl	800f788 <__assert_func>
 800f41a:	2301      	movs	r3, #1
 800f41c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f420:	4610      	mov	r0, r2
 800f422:	b003      	add	sp, #12
 800f424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f428:	bfbc      	itt	lt
 800f42a:	464b      	movlt	r3, r9
 800f42c:	46a1      	movlt	r9, r4
 800f42e:	4630      	mov	r0, r6
 800f430:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f434:	bfba      	itte	lt
 800f436:	461c      	movlt	r4, r3
 800f438:	2501      	movlt	r5, #1
 800f43a:	2500      	movge	r5, #0
 800f43c:	f7ff fd40 	bl	800eec0 <_Balloc>
 800f440:	4602      	mov	r2, r0
 800f442:	b918      	cbnz	r0, 800f44c <__mdiff+0x60>
 800f444:	4b31      	ldr	r3, [pc, #196]	@ (800f50c <__mdiff+0x120>)
 800f446:	f240 2145 	movw	r1, #581	@ 0x245
 800f44a:	e7e3      	b.n	800f414 <__mdiff+0x28>
 800f44c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f450:	6926      	ldr	r6, [r4, #16]
 800f452:	60c5      	str	r5, [r0, #12]
 800f454:	f109 0310 	add.w	r3, r9, #16
 800f458:	f109 0514 	add.w	r5, r9, #20
 800f45c:	f104 0e14 	add.w	lr, r4, #20
 800f460:	f100 0b14 	add.w	fp, r0, #20
 800f464:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f468:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f46c:	9301      	str	r3, [sp, #4]
 800f46e:	46d9      	mov	r9, fp
 800f470:	f04f 0c00 	mov.w	ip, #0
 800f474:	9b01      	ldr	r3, [sp, #4]
 800f476:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f47a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f47e:	9301      	str	r3, [sp, #4]
 800f480:	fa1f f38a 	uxth.w	r3, sl
 800f484:	4619      	mov	r1, r3
 800f486:	b283      	uxth	r3, r0
 800f488:	1acb      	subs	r3, r1, r3
 800f48a:	0c00      	lsrs	r0, r0, #16
 800f48c:	4463      	add	r3, ip
 800f48e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f492:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f496:	b29b      	uxth	r3, r3
 800f498:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f49c:	4576      	cmp	r6, lr
 800f49e:	f849 3b04 	str.w	r3, [r9], #4
 800f4a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f4a6:	d8e5      	bhi.n	800f474 <__mdiff+0x88>
 800f4a8:	1b33      	subs	r3, r6, r4
 800f4aa:	3b15      	subs	r3, #21
 800f4ac:	f023 0303 	bic.w	r3, r3, #3
 800f4b0:	3415      	adds	r4, #21
 800f4b2:	3304      	adds	r3, #4
 800f4b4:	42a6      	cmp	r6, r4
 800f4b6:	bf38      	it	cc
 800f4b8:	2304      	movcc	r3, #4
 800f4ba:	441d      	add	r5, r3
 800f4bc:	445b      	add	r3, fp
 800f4be:	461e      	mov	r6, r3
 800f4c0:	462c      	mov	r4, r5
 800f4c2:	4544      	cmp	r4, r8
 800f4c4:	d30e      	bcc.n	800f4e4 <__mdiff+0xf8>
 800f4c6:	f108 0103 	add.w	r1, r8, #3
 800f4ca:	1b49      	subs	r1, r1, r5
 800f4cc:	f021 0103 	bic.w	r1, r1, #3
 800f4d0:	3d03      	subs	r5, #3
 800f4d2:	45a8      	cmp	r8, r5
 800f4d4:	bf38      	it	cc
 800f4d6:	2100      	movcc	r1, #0
 800f4d8:	440b      	add	r3, r1
 800f4da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f4de:	b191      	cbz	r1, 800f506 <__mdiff+0x11a>
 800f4e0:	6117      	str	r7, [r2, #16]
 800f4e2:	e79d      	b.n	800f420 <__mdiff+0x34>
 800f4e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800f4e8:	46e6      	mov	lr, ip
 800f4ea:	0c08      	lsrs	r0, r1, #16
 800f4ec:	fa1c fc81 	uxtah	ip, ip, r1
 800f4f0:	4471      	add	r1, lr
 800f4f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f4f6:	b289      	uxth	r1, r1
 800f4f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f4fc:	f846 1b04 	str.w	r1, [r6], #4
 800f500:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f504:	e7dd      	b.n	800f4c2 <__mdiff+0xd6>
 800f506:	3f01      	subs	r7, #1
 800f508:	e7e7      	b.n	800f4da <__mdiff+0xee>
 800f50a:	bf00      	nop
 800f50c:	0800ff8c 	.word	0x0800ff8c
 800f510:	0800ffae 	.word	0x0800ffae

0800f514 <__d2b>:
 800f514:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f518:	460f      	mov	r7, r1
 800f51a:	2101      	movs	r1, #1
 800f51c:	ec59 8b10 	vmov	r8, r9, d0
 800f520:	4616      	mov	r6, r2
 800f522:	f7ff fccd 	bl	800eec0 <_Balloc>
 800f526:	4604      	mov	r4, r0
 800f528:	b930      	cbnz	r0, 800f538 <__d2b+0x24>
 800f52a:	4602      	mov	r2, r0
 800f52c:	4b23      	ldr	r3, [pc, #140]	@ (800f5bc <__d2b+0xa8>)
 800f52e:	4824      	ldr	r0, [pc, #144]	@ (800f5c0 <__d2b+0xac>)
 800f530:	f240 310f 	movw	r1, #783	@ 0x30f
 800f534:	f000 f928 	bl	800f788 <__assert_func>
 800f538:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f53c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f540:	b10d      	cbz	r5, 800f546 <__d2b+0x32>
 800f542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f546:	9301      	str	r3, [sp, #4]
 800f548:	f1b8 0300 	subs.w	r3, r8, #0
 800f54c:	d023      	beq.n	800f596 <__d2b+0x82>
 800f54e:	4668      	mov	r0, sp
 800f550:	9300      	str	r3, [sp, #0]
 800f552:	f7ff fd7c 	bl	800f04e <__lo0bits>
 800f556:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f55a:	b1d0      	cbz	r0, 800f592 <__d2b+0x7e>
 800f55c:	f1c0 0320 	rsb	r3, r0, #32
 800f560:	fa02 f303 	lsl.w	r3, r2, r3
 800f564:	430b      	orrs	r3, r1
 800f566:	40c2      	lsrs	r2, r0
 800f568:	6163      	str	r3, [r4, #20]
 800f56a:	9201      	str	r2, [sp, #4]
 800f56c:	9b01      	ldr	r3, [sp, #4]
 800f56e:	61a3      	str	r3, [r4, #24]
 800f570:	2b00      	cmp	r3, #0
 800f572:	bf0c      	ite	eq
 800f574:	2201      	moveq	r2, #1
 800f576:	2202      	movne	r2, #2
 800f578:	6122      	str	r2, [r4, #16]
 800f57a:	b1a5      	cbz	r5, 800f5a6 <__d2b+0x92>
 800f57c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f580:	4405      	add	r5, r0
 800f582:	603d      	str	r5, [r7, #0]
 800f584:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f588:	6030      	str	r0, [r6, #0]
 800f58a:	4620      	mov	r0, r4
 800f58c:	b003      	add	sp, #12
 800f58e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f592:	6161      	str	r1, [r4, #20]
 800f594:	e7ea      	b.n	800f56c <__d2b+0x58>
 800f596:	a801      	add	r0, sp, #4
 800f598:	f7ff fd59 	bl	800f04e <__lo0bits>
 800f59c:	9b01      	ldr	r3, [sp, #4]
 800f59e:	6163      	str	r3, [r4, #20]
 800f5a0:	3020      	adds	r0, #32
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	e7e8      	b.n	800f578 <__d2b+0x64>
 800f5a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f5aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f5ae:	6038      	str	r0, [r7, #0]
 800f5b0:	6918      	ldr	r0, [r3, #16]
 800f5b2:	f7ff fd2d 	bl	800f010 <__hi0bits>
 800f5b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f5ba:	e7e5      	b.n	800f588 <__d2b+0x74>
 800f5bc:	0800ff8c 	.word	0x0800ff8c
 800f5c0:	0800ffae 	.word	0x0800ffae

0800f5c4 <__sread>:
 800f5c4:	b510      	push	{r4, lr}
 800f5c6:	460c      	mov	r4, r1
 800f5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5cc:	f000 f8a8 	bl	800f720 <_read_r>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	bfab      	itete	ge
 800f5d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f5d6:	89a3      	ldrhlt	r3, [r4, #12]
 800f5d8:	181b      	addge	r3, r3, r0
 800f5da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f5de:	bfac      	ite	ge
 800f5e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f5e2:	81a3      	strhlt	r3, [r4, #12]
 800f5e4:	bd10      	pop	{r4, pc}

0800f5e6 <__swrite>:
 800f5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ea:	461f      	mov	r7, r3
 800f5ec:	898b      	ldrh	r3, [r1, #12]
 800f5ee:	05db      	lsls	r3, r3, #23
 800f5f0:	4605      	mov	r5, r0
 800f5f2:	460c      	mov	r4, r1
 800f5f4:	4616      	mov	r6, r2
 800f5f6:	d505      	bpl.n	800f604 <__swrite+0x1e>
 800f5f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5fc:	2302      	movs	r3, #2
 800f5fe:	2200      	movs	r2, #0
 800f600:	f000 f87c 	bl	800f6fc <_lseek_r>
 800f604:	89a3      	ldrh	r3, [r4, #12]
 800f606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f60a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f60e:	81a3      	strh	r3, [r4, #12]
 800f610:	4632      	mov	r2, r6
 800f612:	463b      	mov	r3, r7
 800f614:	4628      	mov	r0, r5
 800f616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f61a:	f000 b8a3 	b.w	800f764 <_write_r>

0800f61e <__sseek>:
 800f61e:	b510      	push	{r4, lr}
 800f620:	460c      	mov	r4, r1
 800f622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f626:	f000 f869 	bl	800f6fc <_lseek_r>
 800f62a:	1c43      	adds	r3, r0, #1
 800f62c:	89a3      	ldrh	r3, [r4, #12]
 800f62e:	bf15      	itete	ne
 800f630:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f632:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f636:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f63a:	81a3      	strheq	r3, [r4, #12]
 800f63c:	bf18      	it	ne
 800f63e:	81a3      	strhne	r3, [r4, #12]
 800f640:	bd10      	pop	{r4, pc}

0800f642 <__sclose>:
 800f642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f646:	f000 b849 	b.w	800f6dc <_close_r>

0800f64a <_realloc_r>:
 800f64a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f64e:	4680      	mov	r8, r0
 800f650:	4615      	mov	r5, r2
 800f652:	460c      	mov	r4, r1
 800f654:	b921      	cbnz	r1, 800f660 <_realloc_r+0x16>
 800f656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f65a:	4611      	mov	r1, r2
 800f65c:	f7ff baf8 	b.w	800ec50 <_malloc_r>
 800f660:	b92a      	cbnz	r2, 800f66e <_realloc_r+0x24>
 800f662:	f7ff f929 	bl	800e8b8 <_free_r>
 800f666:	2400      	movs	r4, #0
 800f668:	4620      	mov	r0, r4
 800f66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f66e:	f000 f8cf 	bl	800f810 <_malloc_usable_size_r>
 800f672:	4285      	cmp	r5, r0
 800f674:	4606      	mov	r6, r0
 800f676:	d802      	bhi.n	800f67e <_realloc_r+0x34>
 800f678:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f67c:	d8f4      	bhi.n	800f668 <_realloc_r+0x1e>
 800f67e:	4629      	mov	r1, r5
 800f680:	4640      	mov	r0, r8
 800f682:	f7ff fae5 	bl	800ec50 <_malloc_r>
 800f686:	4607      	mov	r7, r0
 800f688:	2800      	cmp	r0, #0
 800f68a:	d0ec      	beq.n	800f666 <_realloc_r+0x1c>
 800f68c:	42b5      	cmp	r5, r6
 800f68e:	462a      	mov	r2, r5
 800f690:	4621      	mov	r1, r4
 800f692:	bf28      	it	cs
 800f694:	4632      	movcs	r2, r6
 800f696:	f7fe fab4 	bl	800dc02 <memcpy>
 800f69a:	4621      	mov	r1, r4
 800f69c:	4640      	mov	r0, r8
 800f69e:	f7ff f90b 	bl	800e8b8 <_free_r>
 800f6a2:	463c      	mov	r4, r7
 800f6a4:	e7e0      	b.n	800f668 <_realloc_r+0x1e>

0800f6a6 <memmove>:
 800f6a6:	4288      	cmp	r0, r1
 800f6a8:	b510      	push	{r4, lr}
 800f6aa:	eb01 0402 	add.w	r4, r1, r2
 800f6ae:	d902      	bls.n	800f6b6 <memmove+0x10>
 800f6b0:	4284      	cmp	r4, r0
 800f6b2:	4623      	mov	r3, r4
 800f6b4:	d807      	bhi.n	800f6c6 <memmove+0x20>
 800f6b6:	1e43      	subs	r3, r0, #1
 800f6b8:	42a1      	cmp	r1, r4
 800f6ba:	d008      	beq.n	800f6ce <memmove+0x28>
 800f6bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6c4:	e7f8      	b.n	800f6b8 <memmove+0x12>
 800f6c6:	4402      	add	r2, r0
 800f6c8:	4601      	mov	r1, r0
 800f6ca:	428a      	cmp	r2, r1
 800f6cc:	d100      	bne.n	800f6d0 <memmove+0x2a>
 800f6ce:	bd10      	pop	{r4, pc}
 800f6d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6d8:	e7f7      	b.n	800f6ca <memmove+0x24>
	...

0800f6dc <_close_r>:
 800f6dc:	b538      	push	{r3, r4, r5, lr}
 800f6de:	4d06      	ldr	r5, [pc, #24]	@ (800f6f8 <_close_r+0x1c>)
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	4604      	mov	r4, r0
 800f6e4:	4608      	mov	r0, r1
 800f6e6:	602b      	str	r3, [r5, #0]
 800f6e8:	f7f2 f872 	bl	80017d0 <_close>
 800f6ec:	1c43      	adds	r3, r0, #1
 800f6ee:	d102      	bne.n	800f6f6 <_close_r+0x1a>
 800f6f0:	682b      	ldr	r3, [r5, #0]
 800f6f2:	b103      	cbz	r3, 800f6f6 <_close_r+0x1a>
 800f6f4:	6023      	str	r3, [r4, #0]
 800f6f6:	bd38      	pop	{r3, r4, r5, pc}
 800f6f8:	20012814 	.word	0x20012814

0800f6fc <_lseek_r>:
 800f6fc:	b538      	push	{r3, r4, r5, lr}
 800f6fe:	4d07      	ldr	r5, [pc, #28]	@ (800f71c <_lseek_r+0x20>)
 800f700:	4604      	mov	r4, r0
 800f702:	4608      	mov	r0, r1
 800f704:	4611      	mov	r1, r2
 800f706:	2200      	movs	r2, #0
 800f708:	602a      	str	r2, [r5, #0]
 800f70a:	461a      	mov	r2, r3
 800f70c:	f7f2 f887 	bl	800181e <_lseek>
 800f710:	1c43      	adds	r3, r0, #1
 800f712:	d102      	bne.n	800f71a <_lseek_r+0x1e>
 800f714:	682b      	ldr	r3, [r5, #0]
 800f716:	b103      	cbz	r3, 800f71a <_lseek_r+0x1e>
 800f718:	6023      	str	r3, [r4, #0]
 800f71a:	bd38      	pop	{r3, r4, r5, pc}
 800f71c:	20012814 	.word	0x20012814

0800f720 <_read_r>:
 800f720:	b538      	push	{r3, r4, r5, lr}
 800f722:	4d07      	ldr	r5, [pc, #28]	@ (800f740 <_read_r+0x20>)
 800f724:	4604      	mov	r4, r0
 800f726:	4608      	mov	r0, r1
 800f728:	4611      	mov	r1, r2
 800f72a:	2200      	movs	r2, #0
 800f72c:	602a      	str	r2, [r5, #0]
 800f72e:	461a      	mov	r2, r3
 800f730:	f7f2 f815 	bl	800175e <_read>
 800f734:	1c43      	adds	r3, r0, #1
 800f736:	d102      	bne.n	800f73e <_read_r+0x1e>
 800f738:	682b      	ldr	r3, [r5, #0]
 800f73a:	b103      	cbz	r3, 800f73e <_read_r+0x1e>
 800f73c:	6023      	str	r3, [r4, #0]
 800f73e:	bd38      	pop	{r3, r4, r5, pc}
 800f740:	20012814 	.word	0x20012814

0800f744 <_sbrk_r>:
 800f744:	b538      	push	{r3, r4, r5, lr}
 800f746:	4d06      	ldr	r5, [pc, #24]	@ (800f760 <_sbrk_r+0x1c>)
 800f748:	2300      	movs	r3, #0
 800f74a:	4604      	mov	r4, r0
 800f74c:	4608      	mov	r0, r1
 800f74e:	602b      	str	r3, [r5, #0]
 800f750:	f7f2 f872 	bl	8001838 <_sbrk>
 800f754:	1c43      	adds	r3, r0, #1
 800f756:	d102      	bne.n	800f75e <_sbrk_r+0x1a>
 800f758:	682b      	ldr	r3, [r5, #0]
 800f75a:	b103      	cbz	r3, 800f75e <_sbrk_r+0x1a>
 800f75c:	6023      	str	r3, [r4, #0]
 800f75e:	bd38      	pop	{r3, r4, r5, pc}
 800f760:	20012814 	.word	0x20012814

0800f764 <_write_r>:
 800f764:	b538      	push	{r3, r4, r5, lr}
 800f766:	4d07      	ldr	r5, [pc, #28]	@ (800f784 <_write_r+0x20>)
 800f768:	4604      	mov	r4, r0
 800f76a:	4608      	mov	r0, r1
 800f76c:	4611      	mov	r1, r2
 800f76e:	2200      	movs	r2, #0
 800f770:	602a      	str	r2, [r5, #0]
 800f772:	461a      	mov	r2, r3
 800f774:	f7f2 f810 	bl	8001798 <_write>
 800f778:	1c43      	adds	r3, r0, #1
 800f77a:	d102      	bne.n	800f782 <_write_r+0x1e>
 800f77c:	682b      	ldr	r3, [r5, #0]
 800f77e:	b103      	cbz	r3, 800f782 <_write_r+0x1e>
 800f780:	6023      	str	r3, [r4, #0]
 800f782:	bd38      	pop	{r3, r4, r5, pc}
 800f784:	20012814 	.word	0x20012814

0800f788 <__assert_func>:
 800f788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f78a:	4614      	mov	r4, r2
 800f78c:	461a      	mov	r2, r3
 800f78e:	4b09      	ldr	r3, [pc, #36]	@ (800f7b4 <__assert_func+0x2c>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	4605      	mov	r5, r0
 800f794:	68d8      	ldr	r0, [r3, #12]
 800f796:	b954      	cbnz	r4, 800f7ae <__assert_func+0x26>
 800f798:	4b07      	ldr	r3, [pc, #28]	@ (800f7b8 <__assert_func+0x30>)
 800f79a:	461c      	mov	r4, r3
 800f79c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f7a0:	9100      	str	r1, [sp, #0]
 800f7a2:	462b      	mov	r3, r5
 800f7a4:	4905      	ldr	r1, [pc, #20]	@ (800f7bc <__assert_func+0x34>)
 800f7a6:	f000 f83b 	bl	800f820 <fiprintf>
 800f7aa:	f000 f858 	bl	800f85e <abort>
 800f7ae:	4b04      	ldr	r3, [pc, #16]	@ (800f7c0 <__assert_func+0x38>)
 800f7b0:	e7f4      	b.n	800f79c <__assert_func+0x14>
 800f7b2:	bf00      	nop
 800f7b4:	20000194 	.word	0x20000194
 800f7b8:	0801024e 	.word	0x0801024e
 800f7bc:	08010220 	.word	0x08010220
 800f7c0:	08010213 	.word	0x08010213

0800f7c4 <_calloc_r>:
 800f7c4:	b570      	push	{r4, r5, r6, lr}
 800f7c6:	fba1 5402 	umull	r5, r4, r1, r2
 800f7ca:	b93c      	cbnz	r4, 800f7dc <_calloc_r+0x18>
 800f7cc:	4629      	mov	r1, r5
 800f7ce:	f7ff fa3f 	bl	800ec50 <_malloc_r>
 800f7d2:	4606      	mov	r6, r0
 800f7d4:	b928      	cbnz	r0, 800f7e2 <_calloc_r+0x1e>
 800f7d6:	2600      	movs	r6, #0
 800f7d8:	4630      	mov	r0, r6
 800f7da:	bd70      	pop	{r4, r5, r6, pc}
 800f7dc:	220c      	movs	r2, #12
 800f7de:	6002      	str	r2, [r0, #0]
 800f7e0:	e7f9      	b.n	800f7d6 <_calloc_r+0x12>
 800f7e2:	462a      	mov	r2, r5
 800f7e4:	4621      	mov	r1, r4
 800f7e6:	f7fe f97d 	bl	800dae4 <memset>
 800f7ea:	e7f5      	b.n	800f7d8 <_calloc_r+0x14>

0800f7ec <__ascii_mbtowc>:
 800f7ec:	b082      	sub	sp, #8
 800f7ee:	b901      	cbnz	r1, 800f7f2 <__ascii_mbtowc+0x6>
 800f7f0:	a901      	add	r1, sp, #4
 800f7f2:	b142      	cbz	r2, 800f806 <__ascii_mbtowc+0x1a>
 800f7f4:	b14b      	cbz	r3, 800f80a <__ascii_mbtowc+0x1e>
 800f7f6:	7813      	ldrb	r3, [r2, #0]
 800f7f8:	600b      	str	r3, [r1, #0]
 800f7fa:	7812      	ldrb	r2, [r2, #0]
 800f7fc:	1e10      	subs	r0, r2, #0
 800f7fe:	bf18      	it	ne
 800f800:	2001      	movne	r0, #1
 800f802:	b002      	add	sp, #8
 800f804:	4770      	bx	lr
 800f806:	4610      	mov	r0, r2
 800f808:	e7fb      	b.n	800f802 <__ascii_mbtowc+0x16>
 800f80a:	f06f 0001 	mvn.w	r0, #1
 800f80e:	e7f8      	b.n	800f802 <__ascii_mbtowc+0x16>

0800f810 <_malloc_usable_size_r>:
 800f810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f814:	1f18      	subs	r0, r3, #4
 800f816:	2b00      	cmp	r3, #0
 800f818:	bfbc      	itt	lt
 800f81a:	580b      	ldrlt	r3, [r1, r0]
 800f81c:	18c0      	addlt	r0, r0, r3
 800f81e:	4770      	bx	lr

0800f820 <fiprintf>:
 800f820:	b40e      	push	{r1, r2, r3}
 800f822:	b503      	push	{r0, r1, lr}
 800f824:	4601      	mov	r1, r0
 800f826:	ab03      	add	r3, sp, #12
 800f828:	4805      	ldr	r0, [pc, #20]	@ (800f840 <fiprintf+0x20>)
 800f82a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f82e:	6800      	ldr	r0, [r0, #0]
 800f830:	9301      	str	r3, [sp, #4]
 800f832:	f000 f845 	bl	800f8c0 <_vfiprintf_r>
 800f836:	b002      	add	sp, #8
 800f838:	f85d eb04 	ldr.w	lr, [sp], #4
 800f83c:	b003      	add	sp, #12
 800f83e:	4770      	bx	lr
 800f840:	20000194 	.word	0x20000194

0800f844 <__ascii_wctomb>:
 800f844:	4603      	mov	r3, r0
 800f846:	4608      	mov	r0, r1
 800f848:	b141      	cbz	r1, 800f85c <__ascii_wctomb+0x18>
 800f84a:	2aff      	cmp	r2, #255	@ 0xff
 800f84c:	d904      	bls.n	800f858 <__ascii_wctomb+0x14>
 800f84e:	228a      	movs	r2, #138	@ 0x8a
 800f850:	601a      	str	r2, [r3, #0]
 800f852:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f856:	4770      	bx	lr
 800f858:	700a      	strb	r2, [r1, #0]
 800f85a:	2001      	movs	r0, #1
 800f85c:	4770      	bx	lr

0800f85e <abort>:
 800f85e:	b508      	push	{r3, lr}
 800f860:	2006      	movs	r0, #6
 800f862:	f000 fa85 	bl	800fd70 <raise>
 800f866:	2001      	movs	r0, #1
 800f868:	f7f1 ff6e 	bl	8001748 <_exit>

0800f86c <__sfputc_r>:
 800f86c:	6893      	ldr	r3, [r2, #8]
 800f86e:	3b01      	subs	r3, #1
 800f870:	2b00      	cmp	r3, #0
 800f872:	b410      	push	{r4}
 800f874:	6093      	str	r3, [r2, #8]
 800f876:	da08      	bge.n	800f88a <__sfputc_r+0x1e>
 800f878:	6994      	ldr	r4, [r2, #24]
 800f87a:	42a3      	cmp	r3, r4
 800f87c:	db01      	blt.n	800f882 <__sfputc_r+0x16>
 800f87e:	290a      	cmp	r1, #10
 800f880:	d103      	bne.n	800f88a <__sfputc_r+0x1e>
 800f882:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f886:	f000 b933 	b.w	800faf0 <__swbuf_r>
 800f88a:	6813      	ldr	r3, [r2, #0]
 800f88c:	1c58      	adds	r0, r3, #1
 800f88e:	6010      	str	r0, [r2, #0]
 800f890:	7019      	strb	r1, [r3, #0]
 800f892:	4608      	mov	r0, r1
 800f894:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f898:	4770      	bx	lr

0800f89a <__sfputs_r>:
 800f89a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f89c:	4606      	mov	r6, r0
 800f89e:	460f      	mov	r7, r1
 800f8a0:	4614      	mov	r4, r2
 800f8a2:	18d5      	adds	r5, r2, r3
 800f8a4:	42ac      	cmp	r4, r5
 800f8a6:	d101      	bne.n	800f8ac <__sfputs_r+0x12>
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	e007      	b.n	800f8bc <__sfputs_r+0x22>
 800f8ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8b0:	463a      	mov	r2, r7
 800f8b2:	4630      	mov	r0, r6
 800f8b4:	f7ff ffda 	bl	800f86c <__sfputc_r>
 800f8b8:	1c43      	adds	r3, r0, #1
 800f8ba:	d1f3      	bne.n	800f8a4 <__sfputs_r+0xa>
 800f8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f8c0 <_vfiprintf_r>:
 800f8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8c4:	460d      	mov	r5, r1
 800f8c6:	b09d      	sub	sp, #116	@ 0x74
 800f8c8:	4614      	mov	r4, r2
 800f8ca:	4698      	mov	r8, r3
 800f8cc:	4606      	mov	r6, r0
 800f8ce:	b118      	cbz	r0, 800f8d8 <_vfiprintf_r+0x18>
 800f8d0:	6a03      	ldr	r3, [r0, #32]
 800f8d2:	b90b      	cbnz	r3, 800f8d8 <_vfiprintf_r+0x18>
 800f8d4:	f7fe f896 	bl	800da04 <__sinit>
 800f8d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8da:	07d9      	lsls	r1, r3, #31
 800f8dc:	d405      	bmi.n	800f8ea <_vfiprintf_r+0x2a>
 800f8de:	89ab      	ldrh	r3, [r5, #12]
 800f8e0:	059a      	lsls	r2, r3, #22
 800f8e2:	d402      	bmi.n	800f8ea <_vfiprintf_r+0x2a>
 800f8e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8e6:	f7fe f98a 	bl	800dbfe <__retarget_lock_acquire_recursive>
 800f8ea:	89ab      	ldrh	r3, [r5, #12]
 800f8ec:	071b      	lsls	r3, r3, #28
 800f8ee:	d501      	bpl.n	800f8f4 <_vfiprintf_r+0x34>
 800f8f0:	692b      	ldr	r3, [r5, #16]
 800f8f2:	b99b      	cbnz	r3, 800f91c <_vfiprintf_r+0x5c>
 800f8f4:	4629      	mov	r1, r5
 800f8f6:	4630      	mov	r0, r6
 800f8f8:	f000 f938 	bl	800fb6c <__swsetup_r>
 800f8fc:	b170      	cbz	r0, 800f91c <_vfiprintf_r+0x5c>
 800f8fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f900:	07dc      	lsls	r4, r3, #31
 800f902:	d504      	bpl.n	800f90e <_vfiprintf_r+0x4e>
 800f904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f908:	b01d      	add	sp, #116	@ 0x74
 800f90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f90e:	89ab      	ldrh	r3, [r5, #12]
 800f910:	0598      	lsls	r0, r3, #22
 800f912:	d4f7      	bmi.n	800f904 <_vfiprintf_r+0x44>
 800f914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f916:	f7fe f973 	bl	800dc00 <__retarget_lock_release_recursive>
 800f91a:	e7f3      	b.n	800f904 <_vfiprintf_r+0x44>
 800f91c:	2300      	movs	r3, #0
 800f91e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f920:	2320      	movs	r3, #32
 800f922:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f926:	f8cd 800c 	str.w	r8, [sp, #12]
 800f92a:	2330      	movs	r3, #48	@ 0x30
 800f92c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fadc <_vfiprintf_r+0x21c>
 800f930:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f934:	f04f 0901 	mov.w	r9, #1
 800f938:	4623      	mov	r3, r4
 800f93a:	469a      	mov	sl, r3
 800f93c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f940:	b10a      	cbz	r2, 800f946 <_vfiprintf_r+0x86>
 800f942:	2a25      	cmp	r2, #37	@ 0x25
 800f944:	d1f9      	bne.n	800f93a <_vfiprintf_r+0x7a>
 800f946:	ebba 0b04 	subs.w	fp, sl, r4
 800f94a:	d00b      	beq.n	800f964 <_vfiprintf_r+0xa4>
 800f94c:	465b      	mov	r3, fp
 800f94e:	4622      	mov	r2, r4
 800f950:	4629      	mov	r1, r5
 800f952:	4630      	mov	r0, r6
 800f954:	f7ff ffa1 	bl	800f89a <__sfputs_r>
 800f958:	3001      	adds	r0, #1
 800f95a:	f000 80a7 	beq.w	800faac <_vfiprintf_r+0x1ec>
 800f95e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f960:	445a      	add	r2, fp
 800f962:	9209      	str	r2, [sp, #36]	@ 0x24
 800f964:	f89a 3000 	ldrb.w	r3, [sl]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	f000 809f 	beq.w	800faac <_vfiprintf_r+0x1ec>
 800f96e:	2300      	movs	r3, #0
 800f970:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f978:	f10a 0a01 	add.w	sl, sl, #1
 800f97c:	9304      	str	r3, [sp, #16]
 800f97e:	9307      	str	r3, [sp, #28]
 800f980:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f984:	931a      	str	r3, [sp, #104]	@ 0x68
 800f986:	4654      	mov	r4, sl
 800f988:	2205      	movs	r2, #5
 800f98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f98e:	4853      	ldr	r0, [pc, #332]	@ (800fadc <_vfiprintf_r+0x21c>)
 800f990:	f7f0 fc46 	bl	8000220 <memchr>
 800f994:	9a04      	ldr	r2, [sp, #16]
 800f996:	b9d8      	cbnz	r0, 800f9d0 <_vfiprintf_r+0x110>
 800f998:	06d1      	lsls	r1, r2, #27
 800f99a:	bf44      	itt	mi
 800f99c:	2320      	movmi	r3, #32
 800f99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9a2:	0713      	lsls	r3, r2, #28
 800f9a4:	bf44      	itt	mi
 800f9a6:	232b      	movmi	r3, #43	@ 0x2b
 800f9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800f9b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9b2:	d015      	beq.n	800f9e0 <_vfiprintf_r+0x120>
 800f9b4:	9a07      	ldr	r2, [sp, #28]
 800f9b6:	4654      	mov	r4, sl
 800f9b8:	2000      	movs	r0, #0
 800f9ba:	f04f 0c0a 	mov.w	ip, #10
 800f9be:	4621      	mov	r1, r4
 800f9c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9c4:	3b30      	subs	r3, #48	@ 0x30
 800f9c6:	2b09      	cmp	r3, #9
 800f9c8:	d94b      	bls.n	800fa62 <_vfiprintf_r+0x1a2>
 800f9ca:	b1b0      	cbz	r0, 800f9fa <_vfiprintf_r+0x13a>
 800f9cc:	9207      	str	r2, [sp, #28]
 800f9ce:	e014      	b.n	800f9fa <_vfiprintf_r+0x13a>
 800f9d0:	eba0 0308 	sub.w	r3, r0, r8
 800f9d4:	fa09 f303 	lsl.w	r3, r9, r3
 800f9d8:	4313      	orrs	r3, r2
 800f9da:	9304      	str	r3, [sp, #16]
 800f9dc:	46a2      	mov	sl, r4
 800f9de:	e7d2      	b.n	800f986 <_vfiprintf_r+0xc6>
 800f9e0:	9b03      	ldr	r3, [sp, #12]
 800f9e2:	1d19      	adds	r1, r3, #4
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	9103      	str	r1, [sp, #12]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	bfbb      	ittet	lt
 800f9ec:	425b      	neglt	r3, r3
 800f9ee:	f042 0202 	orrlt.w	r2, r2, #2
 800f9f2:	9307      	strge	r3, [sp, #28]
 800f9f4:	9307      	strlt	r3, [sp, #28]
 800f9f6:	bfb8      	it	lt
 800f9f8:	9204      	strlt	r2, [sp, #16]
 800f9fa:	7823      	ldrb	r3, [r4, #0]
 800f9fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9fe:	d10a      	bne.n	800fa16 <_vfiprintf_r+0x156>
 800fa00:	7863      	ldrb	r3, [r4, #1]
 800fa02:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa04:	d132      	bne.n	800fa6c <_vfiprintf_r+0x1ac>
 800fa06:	9b03      	ldr	r3, [sp, #12]
 800fa08:	1d1a      	adds	r2, r3, #4
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	9203      	str	r2, [sp, #12]
 800fa0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fa12:	3402      	adds	r4, #2
 800fa14:	9305      	str	r3, [sp, #20]
 800fa16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800faec <_vfiprintf_r+0x22c>
 800fa1a:	7821      	ldrb	r1, [r4, #0]
 800fa1c:	2203      	movs	r2, #3
 800fa1e:	4650      	mov	r0, sl
 800fa20:	f7f0 fbfe 	bl	8000220 <memchr>
 800fa24:	b138      	cbz	r0, 800fa36 <_vfiprintf_r+0x176>
 800fa26:	9b04      	ldr	r3, [sp, #16]
 800fa28:	eba0 000a 	sub.w	r0, r0, sl
 800fa2c:	2240      	movs	r2, #64	@ 0x40
 800fa2e:	4082      	lsls	r2, r0
 800fa30:	4313      	orrs	r3, r2
 800fa32:	3401      	adds	r4, #1
 800fa34:	9304      	str	r3, [sp, #16]
 800fa36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa3a:	4829      	ldr	r0, [pc, #164]	@ (800fae0 <_vfiprintf_r+0x220>)
 800fa3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa40:	2206      	movs	r2, #6
 800fa42:	f7f0 fbed 	bl	8000220 <memchr>
 800fa46:	2800      	cmp	r0, #0
 800fa48:	d03f      	beq.n	800faca <_vfiprintf_r+0x20a>
 800fa4a:	4b26      	ldr	r3, [pc, #152]	@ (800fae4 <_vfiprintf_r+0x224>)
 800fa4c:	bb1b      	cbnz	r3, 800fa96 <_vfiprintf_r+0x1d6>
 800fa4e:	9b03      	ldr	r3, [sp, #12]
 800fa50:	3307      	adds	r3, #7
 800fa52:	f023 0307 	bic.w	r3, r3, #7
 800fa56:	3308      	adds	r3, #8
 800fa58:	9303      	str	r3, [sp, #12]
 800fa5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa5c:	443b      	add	r3, r7
 800fa5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa60:	e76a      	b.n	800f938 <_vfiprintf_r+0x78>
 800fa62:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa66:	460c      	mov	r4, r1
 800fa68:	2001      	movs	r0, #1
 800fa6a:	e7a8      	b.n	800f9be <_vfiprintf_r+0xfe>
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	3401      	adds	r4, #1
 800fa70:	9305      	str	r3, [sp, #20]
 800fa72:	4619      	mov	r1, r3
 800fa74:	f04f 0c0a 	mov.w	ip, #10
 800fa78:	4620      	mov	r0, r4
 800fa7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa7e:	3a30      	subs	r2, #48	@ 0x30
 800fa80:	2a09      	cmp	r2, #9
 800fa82:	d903      	bls.n	800fa8c <_vfiprintf_r+0x1cc>
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d0c6      	beq.n	800fa16 <_vfiprintf_r+0x156>
 800fa88:	9105      	str	r1, [sp, #20]
 800fa8a:	e7c4      	b.n	800fa16 <_vfiprintf_r+0x156>
 800fa8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa90:	4604      	mov	r4, r0
 800fa92:	2301      	movs	r3, #1
 800fa94:	e7f0      	b.n	800fa78 <_vfiprintf_r+0x1b8>
 800fa96:	ab03      	add	r3, sp, #12
 800fa98:	9300      	str	r3, [sp, #0]
 800fa9a:	462a      	mov	r2, r5
 800fa9c:	4b12      	ldr	r3, [pc, #72]	@ (800fae8 <_vfiprintf_r+0x228>)
 800fa9e:	a904      	add	r1, sp, #16
 800faa0:	4630      	mov	r0, r6
 800faa2:	f7fd fb6b 	bl	800d17c <_printf_float>
 800faa6:	4607      	mov	r7, r0
 800faa8:	1c78      	adds	r0, r7, #1
 800faaa:	d1d6      	bne.n	800fa5a <_vfiprintf_r+0x19a>
 800faac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800faae:	07d9      	lsls	r1, r3, #31
 800fab0:	d405      	bmi.n	800fabe <_vfiprintf_r+0x1fe>
 800fab2:	89ab      	ldrh	r3, [r5, #12]
 800fab4:	059a      	lsls	r2, r3, #22
 800fab6:	d402      	bmi.n	800fabe <_vfiprintf_r+0x1fe>
 800fab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800faba:	f7fe f8a1 	bl	800dc00 <__retarget_lock_release_recursive>
 800fabe:	89ab      	ldrh	r3, [r5, #12]
 800fac0:	065b      	lsls	r3, r3, #25
 800fac2:	f53f af1f 	bmi.w	800f904 <_vfiprintf_r+0x44>
 800fac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fac8:	e71e      	b.n	800f908 <_vfiprintf_r+0x48>
 800faca:	ab03      	add	r3, sp, #12
 800facc:	9300      	str	r3, [sp, #0]
 800face:	462a      	mov	r2, r5
 800fad0:	4b05      	ldr	r3, [pc, #20]	@ (800fae8 <_vfiprintf_r+0x228>)
 800fad2:	a904      	add	r1, sp, #16
 800fad4:	4630      	mov	r0, r6
 800fad6:	f7fd fde9 	bl	800d6ac <_printf_i>
 800fada:	e7e4      	b.n	800faa6 <_vfiprintf_r+0x1e6>
 800fadc:	0800ff9d 	.word	0x0800ff9d
 800fae0:	0800ffa7 	.word	0x0800ffa7
 800fae4:	0800d17d 	.word	0x0800d17d
 800fae8:	0800f89b 	.word	0x0800f89b
 800faec:	0800ffa3 	.word	0x0800ffa3

0800faf0 <__swbuf_r>:
 800faf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faf2:	460e      	mov	r6, r1
 800faf4:	4614      	mov	r4, r2
 800faf6:	4605      	mov	r5, r0
 800faf8:	b118      	cbz	r0, 800fb02 <__swbuf_r+0x12>
 800fafa:	6a03      	ldr	r3, [r0, #32]
 800fafc:	b90b      	cbnz	r3, 800fb02 <__swbuf_r+0x12>
 800fafe:	f7fd ff81 	bl	800da04 <__sinit>
 800fb02:	69a3      	ldr	r3, [r4, #24]
 800fb04:	60a3      	str	r3, [r4, #8]
 800fb06:	89a3      	ldrh	r3, [r4, #12]
 800fb08:	071a      	lsls	r2, r3, #28
 800fb0a:	d501      	bpl.n	800fb10 <__swbuf_r+0x20>
 800fb0c:	6923      	ldr	r3, [r4, #16]
 800fb0e:	b943      	cbnz	r3, 800fb22 <__swbuf_r+0x32>
 800fb10:	4621      	mov	r1, r4
 800fb12:	4628      	mov	r0, r5
 800fb14:	f000 f82a 	bl	800fb6c <__swsetup_r>
 800fb18:	b118      	cbz	r0, 800fb22 <__swbuf_r+0x32>
 800fb1a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fb1e:	4638      	mov	r0, r7
 800fb20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb22:	6823      	ldr	r3, [r4, #0]
 800fb24:	6922      	ldr	r2, [r4, #16]
 800fb26:	1a98      	subs	r0, r3, r2
 800fb28:	6963      	ldr	r3, [r4, #20]
 800fb2a:	b2f6      	uxtb	r6, r6
 800fb2c:	4283      	cmp	r3, r0
 800fb2e:	4637      	mov	r7, r6
 800fb30:	dc05      	bgt.n	800fb3e <__swbuf_r+0x4e>
 800fb32:	4621      	mov	r1, r4
 800fb34:	4628      	mov	r0, r5
 800fb36:	f7ff f98f 	bl	800ee58 <_fflush_r>
 800fb3a:	2800      	cmp	r0, #0
 800fb3c:	d1ed      	bne.n	800fb1a <__swbuf_r+0x2a>
 800fb3e:	68a3      	ldr	r3, [r4, #8]
 800fb40:	3b01      	subs	r3, #1
 800fb42:	60a3      	str	r3, [r4, #8]
 800fb44:	6823      	ldr	r3, [r4, #0]
 800fb46:	1c5a      	adds	r2, r3, #1
 800fb48:	6022      	str	r2, [r4, #0]
 800fb4a:	701e      	strb	r6, [r3, #0]
 800fb4c:	6962      	ldr	r2, [r4, #20]
 800fb4e:	1c43      	adds	r3, r0, #1
 800fb50:	429a      	cmp	r2, r3
 800fb52:	d004      	beq.n	800fb5e <__swbuf_r+0x6e>
 800fb54:	89a3      	ldrh	r3, [r4, #12]
 800fb56:	07db      	lsls	r3, r3, #31
 800fb58:	d5e1      	bpl.n	800fb1e <__swbuf_r+0x2e>
 800fb5a:	2e0a      	cmp	r6, #10
 800fb5c:	d1df      	bne.n	800fb1e <__swbuf_r+0x2e>
 800fb5e:	4621      	mov	r1, r4
 800fb60:	4628      	mov	r0, r5
 800fb62:	f7ff f979 	bl	800ee58 <_fflush_r>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	d0d9      	beq.n	800fb1e <__swbuf_r+0x2e>
 800fb6a:	e7d6      	b.n	800fb1a <__swbuf_r+0x2a>

0800fb6c <__swsetup_r>:
 800fb6c:	b538      	push	{r3, r4, r5, lr}
 800fb6e:	4b29      	ldr	r3, [pc, #164]	@ (800fc14 <__swsetup_r+0xa8>)
 800fb70:	4605      	mov	r5, r0
 800fb72:	6818      	ldr	r0, [r3, #0]
 800fb74:	460c      	mov	r4, r1
 800fb76:	b118      	cbz	r0, 800fb80 <__swsetup_r+0x14>
 800fb78:	6a03      	ldr	r3, [r0, #32]
 800fb7a:	b90b      	cbnz	r3, 800fb80 <__swsetup_r+0x14>
 800fb7c:	f7fd ff42 	bl	800da04 <__sinit>
 800fb80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb84:	0719      	lsls	r1, r3, #28
 800fb86:	d422      	bmi.n	800fbce <__swsetup_r+0x62>
 800fb88:	06da      	lsls	r2, r3, #27
 800fb8a:	d407      	bmi.n	800fb9c <__swsetup_r+0x30>
 800fb8c:	2209      	movs	r2, #9
 800fb8e:	602a      	str	r2, [r5, #0]
 800fb90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb94:	81a3      	strh	r3, [r4, #12]
 800fb96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fb9a:	e033      	b.n	800fc04 <__swsetup_r+0x98>
 800fb9c:	0758      	lsls	r0, r3, #29
 800fb9e:	d512      	bpl.n	800fbc6 <__swsetup_r+0x5a>
 800fba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fba2:	b141      	cbz	r1, 800fbb6 <__swsetup_r+0x4a>
 800fba4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fba8:	4299      	cmp	r1, r3
 800fbaa:	d002      	beq.n	800fbb2 <__swsetup_r+0x46>
 800fbac:	4628      	mov	r0, r5
 800fbae:	f7fe fe83 	bl	800e8b8 <_free_r>
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	6363      	str	r3, [r4, #52]	@ 0x34
 800fbb6:	89a3      	ldrh	r3, [r4, #12]
 800fbb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fbbc:	81a3      	strh	r3, [r4, #12]
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	6063      	str	r3, [r4, #4]
 800fbc2:	6923      	ldr	r3, [r4, #16]
 800fbc4:	6023      	str	r3, [r4, #0]
 800fbc6:	89a3      	ldrh	r3, [r4, #12]
 800fbc8:	f043 0308 	orr.w	r3, r3, #8
 800fbcc:	81a3      	strh	r3, [r4, #12]
 800fbce:	6923      	ldr	r3, [r4, #16]
 800fbd0:	b94b      	cbnz	r3, 800fbe6 <__swsetup_r+0x7a>
 800fbd2:	89a3      	ldrh	r3, [r4, #12]
 800fbd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fbd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fbdc:	d003      	beq.n	800fbe6 <__swsetup_r+0x7a>
 800fbde:	4621      	mov	r1, r4
 800fbe0:	4628      	mov	r0, r5
 800fbe2:	f000 f83f 	bl	800fc64 <__smakebuf_r>
 800fbe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbea:	f013 0201 	ands.w	r2, r3, #1
 800fbee:	d00a      	beq.n	800fc06 <__swsetup_r+0x9a>
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	60a2      	str	r2, [r4, #8]
 800fbf4:	6962      	ldr	r2, [r4, #20]
 800fbf6:	4252      	negs	r2, r2
 800fbf8:	61a2      	str	r2, [r4, #24]
 800fbfa:	6922      	ldr	r2, [r4, #16]
 800fbfc:	b942      	cbnz	r2, 800fc10 <__swsetup_r+0xa4>
 800fbfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fc02:	d1c5      	bne.n	800fb90 <__swsetup_r+0x24>
 800fc04:	bd38      	pop	{r3, r4, r5, pc}
 800fc06:	0799      	lsls	r1, r3, #30
 800fc08:	bf58      	it	pl
 800fc0a:	6962      	ldrpl	r2, [r4, #20]
 800fc0c:	60a2      	str	r2, [r4, #8]
 800fc0e:	e7f4      	b.n	800fbfa <__swsetup_r+0x8e>
 800fc10:	2000      	movs	r0, #0
 800fc12:	e7f7      	b.n	800fc04 <__swsetup_r+0x98>
 800fc14:	20000194 	.word	0x20000194

0800fc18 <__swhatbuf_r>:
 800fc18:	b570      	push	{r4, r5, r6, lr}
 800fc1a:	460c      	mov	r4, r1
 800fc1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc20:	2900      	cmp	r1, #0
 800fc22:	b096      	sub	sp, #88	@ 0x58
 800fc24:	4615      	mov	r5, r2
 800fc26:	461e      	mov	r6, r3
 800fc28:	da0d      	bge.n	800fc46 <__swhatbuf_r+0x2e>
 800fc2a:	89a3      	ldrh	r3, [r4, #12]
 800fc2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fc30:	f04f 0100 	mov.w	r1, #0
 800fc34:	bf14      	ite	ne
 800fc36:	2340      	movne	r3, #64	@ 0x40
 800fc38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fc3c:	2000      	movs	r0, #0
 800fc3e:	6031      	str	r1, [r6, #0]
 800fc40:	602b      	str	r3, [r5, #0]
 800fc42:	b016      	add	sp, #88	@ 0x58
 800fc44:	bd70      	pop	{r4, r5, r6, pc}
 800fc46:	466a      	mov	r2, sp
 800fc48:	f000 f848 	bl	800fcdc <_fstat_r>
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	dbec      	blt.n	800fc2a <__swhatbuf_r+0x12>
 800fc50:	9901      	ldr	r1, [sp, #4]
 800fc52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fc56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fc5a:	4259      	negs	r1, r3
 800fc5c:	4159      	adcs	r1, r3
 800fc5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc62:	e7eb      	b.n	800fc3c <__swhatbuf_r+0x24>

0800fc64 <__smakebuf_r>:
 800fc64:	898b      	ldrh	r3, [r1, #12]
 800fc66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc68:	079d      	lsls	r5, r3, #30
 800fc6a:	4606      	mov	r6, r0
 800fc6c:	460c      	mov	r4, r1
 800fc6e:	d507      	bpl.n	800fc80 <__smakebuf_r+0x1c>
 800fc70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fc74:	6023      	str	r3, [r4, #0]
 800fc76:	6123      	str	r3, [r4, #16]
 800fc78:	2301      	movs	r3, #1
 800fc7a:	6163      	str	r3, [r4, #20]
 800fc7c:	b003      	add	sp, #12
 800fc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc80:	ab01      	add	r3, sp, #4
 800fc82:	466a      	mov	r2, sp
 800fc84:	f7ff ffc8 	bl	800fc18 <__swhatbuf_r>
 800fc88:	9f00      	ldr	r7, [sp, #0]
 800fc8a:	4605      	mov	r5, r0
 800fc8c:	4639      	mov	r1, r7
 800fc8e:	4630      	mov	r0, r6
 800fc90:	f7fe ffde 	bl	800ec50 <_malloc_r>
 800fc94:	b948      	cbnz	r0, 800fcaa <__smakebuf_r+0x46>
 800fc96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc9a:	059a      	lsls	r2, r3, #22
 800fc9c:	d4ee      	bmi.n	800fc7c <__smakebuf_r+0x18>
 800fc9e:	f023 0303 	bic.w	r3, r3, #3
 800fca2:	f043 0302 	orr.w	r3, r3, #2
 800fca6:	81a3      	strh	r3, [r4, #12]
 800fca8:	e7e2      	b.n	800fc70 <__smakebuf_r+0xc>
 800fcaa:	89a3      	ldrh	r3, [r4, #12]
 800fcac:	6020      	str	r0, [r4, #0]
 800fcae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcb2:	81a3      	strh	r3, [r4, #12]
 800fcb4:	9b01      	ldr	r3, [sp, #4]
 800fcb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fcba:	b15b      	cbz	r3, 800fcd4 <__smakebuf_r+0x70>
 800fcbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fcc0:	4630      	mov	r0, r6
 800fcc2:	f000 f81d 	bl	800fd00 <_isatty_r>
 800fcc6:	b128      	cbz	r0, 800fcd4 <__smakebuf_r+0x70>
 800fcc8:	89a3      	ldrh	r3, [r4, #12]
 800fcca:	f023 0303 	bic.w	r3, r3, #3
 800fcce:	f043 0301 	orr.w	r3, r3, #1
 800fcd2:	81a3      	strh	r3, [r4, #12]
 800fcd4:	89a3      	ldrh	r3, [r4, #12]
 800fcd6:	431d      	orrs	r5, r3
 800fcd8:	81a5      	strh	r5, [r4, #12]
 800fcda:	e7cf      	b.n	800fc7c <__smakebuf_r+0x18>

0800fcdc <_fstat_r>:
 800fcdc:	b538      	push	{r3, r4, r5, lr}
 800fcde:	4d07      	ldr	r5, [pc, #28]	@ (800fcfc <_fstat_r+0x20>)
 800fce0:	2300      	movs	r3, #0
 800fce2:	4604      	mov	r4, r0
 800fce4:	4608      	mov	r0, r1
 800fce6:	4611      	mov	r1, r2
 800fce8:	602b      	str	r3, [r5, #0]
 800fcea:	f7f1 fd7d 	bl	80017e8 <_fstat>
 800fcee:	1c43      	adds	r3, r0, #1
 800fcf0:	d102      	bne.n	800fcf8 <_fstat_r+0x1c>
 800fcf2:	682b      	ldr	r3, [r5, #0]
 800fcf4:	b103      	cbz	r3, 800fcf8 <_fstat_r+0x1c>
 800fcf6:	6023      	str	r3, [r4, #0]
 800fcf8:	bd38      	pop	{r3, r4, r5, pc}
 800fcfa:	bf00      	nop
 800fcfc:	20012814 	.word	0x20012814

0800fd00 <_isatty_r>:
 800fd00:	b538      	push	{r3, r4, r5, lr}
 800fd02:	4d06      	ldr	r5, [pc, #24]	@ (800fd1c <_isatty_r+0x1c>)
 800fd04:	2300      	movs	r3, #0
 800fd06:	4604      	mov	r4, r0
 800fd08:	4608      	mov	r0, r1
 800fd0a:	602b      	str	r3, [r5, #0]
 800fd0c:	f7f1 fd7c 	bl	8001808 <_isatty>
 800fd10:	1c43      	adds	r3, r0, #1
 800fd12:	d102      	bne.n	800fd1a <_isatty_r+0x1a>
 800fd14:	682b      	ldr	r3, [r5, #0]
 800fd16:	b103      	cbz	r3, 800fd1a <_isatty_r+0x1a>
 800fd18:	6023      	str	r3, [r4, #0]
 800fd1a:	bd38      	pop	{r3, r4, r5, pc}
 800fd1c:	20012814 	.word	0x20012814

0800fd20 <_raise_r>:
 800fd20:	291f      	cmp	r1, #31
 800fd22:	b538      	push	{r3, r4, r5, lr}
 800fd24:	4605      	mov	r5, r0
 800fd26:	460c      	mov	r4, r1
 800fd28:	d904      	bls.n	800fd34 <_raise_r+0x14>
 800fd2a:	2316      	movs	r3, #22
 800fd2c:	6003      	str	r3, [r0, #0]
 800fd2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd32:	bd38      	pop	{r3, r4, r5, pc}
 800fd34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fd36:	b112      	cbz	r2, 800fd3e <_raise_r+0x1e>
 800fd38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd3c:	b94b      	cbnz	r3, 800fd52 <_raise_r+0x32>
 800fd3e:	4628      	mov	r0, r5
 800fd40:	f000 f830 	bl	800fda4 <_getpid_r>
 800fd44:	4622      	mov	r2, r4
 800fd46:	4601      	mov	r1, r0
 800fd48:	4628      	mov	r0, r5
 800fd4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd4e:	f000 b817 	b.w	800fd80 <_kill_r>
 800fd52:	2b01      	cmp	r3, #1
 800fd54:	d00a      	beq.n	800fd6c <_raise_r+0x4c>
 800fd56:	1c59      	adds	r1, r3, #1
 800fd58:	d103      	bne.n	800fd62 <_raise_r+0x42>
 800fd5a:	2316      	movs	r3, #22
 800fd5c:	6003      	str	r3, [r0, #0]
 800fd5e:	2001      	movs	r0, #1
 800fd60:	e7e7      	b.n	800fd32 <_raise_r+0x12>
 800fd62:	2100      	movs	r1, #0
 800fd64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fd68:	4620      	mov	r0, r4
 800fd6a:	4798      	blx	r3
 800fd6c:	2000      	movs	r0, #0
 800fd6e:	e7e0      	b.n	800fd32 <_raise_r+0x12>

0800fd70 <raise>:
 800fd70:	4b02      	ldr	r3, [pc, #8]	@ (800fd7c <raise+0xc>)
 800fd72:	4601      	mov	r1, r0
 800fd74:	6818      	ldr	r0, [r3, #0]
 800fd76:	f7ff bfd3 	b.w	800fd20 <_raise_r>
 800fd7a:	bf00      	nop
 800fd7c:	20000194 	.word	0x20000194

0800fd80 <_kill_r>:
 800fd80:	b538      	push	{r3, r4, r5, lr}
 800fd82:	4d07      	ldr	r5, [pc, #28]	@ (800fda0 <_kill_r+0x20>)
 800fd84:	2300      	movs	r3, #0
 800fd86:	4604      	mov	r4, r0
 800fd88:	4608      	mov	r0, r1
 800fd8a:	4611      	mov	r1, r2
 800fd8c:	602b      	str	r3, [r5, #0]
 800fd8e:	f7f1 fccb 	bl	8001728 <_kill>
 800fd92:	1c43      	adds	r3, r0, #1
 800fd94:	d102      	bne.n	800fd9c <_kill_r+0x1c>
 800fd96:	682b      	ldr	r3, [r5, #0]
 800fd98:	b103      	cbz	r3, 800fd9c <_kill_r+0x1c>
 800fd9a:	6023      	str	r3, [r4, #0]
 800fd9c:	bd38      	pop	{r3, r4, r5, pc}
 800fd9e:	bf00      	nop
 800fda0:	20012814 	.word	0x20012814

0800fda4 <_getpid_r>:
 800fda4:	f7f1 bcb8 	b.w	8001718 <_getpid>

0800fda8 <_init>:
 800fda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdaa:	bf00      	nop
 800fdac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdae:	bc08      	pop	{r3}
 800fdb0:	469e      	mov	lr, r3
 800fdb2:	4770      	bx	lr

0800fdb4 <_fini>:
 800fdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdb6:	bf00      	nop
 800fdb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdba:	bc08      	pop	{r3}
 800fdbc:	469e      	mov	lr, r3
 800fdbe:	4770      	bx	lr
